#!/usr/bin/python -tt

# @@@ START COPYRIGHT @@@
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# @@@ END COPYRIGHT @@@

import os
import sys
import tempfile
import re
import logging
import subprocess
import string
from optparse import OptionParser

# exit codes
EXIT_SUCCESS       = 0 # Success
EXIT_GENERAL_ERROR = 1 # One or more errors encountered (invalid arguments, prerequisites not satisfied, can't execute check command, etc)
EXIT_CHECK_ERROR   = 2 # At least one check failed with error severity (required configuration)
EXIT_CHECK_WARNING = 3 # At least one check failed with warning severity (recommended configuration) and no checks failed with error severity

# default trafodion configuration file
DEFAULT_TRAFODION_CONFIG_FILE = '/etc/trafodion/trafodion_config'

# logger name
LOGGER_NAME = 'trafodion_scanner'

def configure_logger(log_file):
  logger = logging.getLogger(LOGGER_NAME)
  logger.setLevel(logging.DEBUG)
  formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
  fh = logging.FileHandler(log_file)
  fh.setLevel(logging.DEBUG)
  fh.setFormatter(formatter)
  logger.addHandler(fh)
  return logger
  
def report_error_and_exit(error_string):
  print(error_string)
  logger = logging.getLogger(LOGGER_NAME)
  logger.error(error_string); 
  sys.exit(EXIT_GENERAL_ERROR)  
  
def compare_check_result(result, expected_result, comparison_operator):
  # for the comparison operators (str_lt, str_le, str_eq, str_ne, str_ge, str_gt),
  # we first cast the result and expected_result to string type, to enable correct comparison
  if (comparison_operator.startswith('str_')):
    result = str(result); expected_result = str(expected_result)  
  
  # for the comparison operators (int_lt, int_le, int_eq, int_ne, int_ge, int_gt),
  # we first cast the result and expected_result to integer type, to enable correct comparison  
  if (comparison_operator.startswith('int_')):
    result = int(result); expected_result = int(expected_result)

  if (comparison_operator.endswith('lt')):
    return expected_result < result
  if (comparison_operator.endswith('le')):
    return expected_result <= result
  if (comparison_operator.endswith('eq')):
    return expected_result == result
  if (comparison_operator.endswith('ne')):
    return expected_result != result
  if (comparison_operator.endswith('ge')):
    return expected_result >= result
  if (comparison_operator.endswith('gt')):
    return expected_result > result
    
def exec_command(cmd_string):
  temp_file=tempfile.TemporaryFile()
  exit_code = subprocess.call(cmd_string, stdout=temp_file, stderr=subprocess.STDOUT, shell=True)
  temp_file.seek(0) # go back to start of file before read
  cmd_output = temp_file.read()
  cmd_output = cmd_output.strip() # trim leading and trailing whitespace
  return (cmd_output, exit_code)
  
def exec_command_remote(cmd_string, node_name):
  named_temp_file=tempfile.NamedTemporaryFile(delete=False)
  named_temp_file.write(cmd_string)
  named_temp_file.close()
  cmd = 'cat ' + named_temp_file.name + ' | ssh -oStrictHostKeyChecking=no -oBatchMode=yes -q -T ' + node_name
  (cmd_output, exit_code) = exec_command(cmd)
  os.remove(named_temp_file.name)
  return (cmd_output, exit_code)    

def exec_command_interactive(cmd_string):
  exit_code = subprocess.call(cmd_string, shell=True)
  return exit_code
  
def read_scanner_config(filename):
  with open(filename, 'r') as config:
    logger = logging.getLogger(LOGGER_NAME)
    logger.info("Reading scanner configuration file %s", filename)
    lines = []
    for line in config:
      if re.search('^#', line) or re.search('^\s*$', line): # skip comments and blank lines
        continue
      elif re.search(':::', line): # configuration line
        lines.append(line.split(':::'))
      elif len(lines) > 0: # multi-line command, append to the command in the last configuration line
        lines[-1][-1] += line
      else: # unexpected line, raise an error and exit
        err_str = 'Fatal error: encountered unexpected line in scanner configuration file: %s' % (line)
        report_error_and_exit(err_str)
    return lines

def read_trafodion_config(filename):
  with open(filename, 'r') as config:
    logger = logging.getLogger(LOGGER_NAME)
    logger.info("Reading trafodion configuration file %s", filename)
    trafodion_config = {}
    for line in config:      
      # skip comments and blank lines
      if re.search('^#', line) or re.search('^\s*$', line): 
        continue
      # lines like this: export TRAF_USER="trafodion"
      match = re.search('^(\s*export)\s+(.+)="(.*)"\s*$', line) 
      if match:
        trafodion_config[match.group(2).strip()] = match.group(3).strip() # trim leading and trailing whitespace    
        continue
      # lines like this: TRAF_USER=trafodion
      match = re.search('^\s*(.+)=(.*)\s*$', line)
      if match:
        trafodion_config[match.group(1).strip()] = match.group(2).strip() # trim leading and trailing whitespace    
        continue
      # unexpected line, raise an error and exit
      err_str = 'Fatal error: encountered unexpected line in trafodion configuration file: %s' % (line)
      report_error_and_exit(err_str)
    return trafodion_config    
    
def replace_placeholders_in_command_string(cmd_string, placeholder_map):
  new_cmd_string = cmd_string
  for placeholder in placeholder_map:
    new_cmd_string = new_cmd_string.replace(placeholder, placeholder_map[placeholder])
  new_cmd_string = re.sub('<<<.*>>>', 'undefined', new_cmd_string) # handle unrecognized placeholders
  return new_cmd_string
  
def validate_severity_level(severity_level, operation, name):
  if (severity_level not in ('error', 'warning')):
    err_str = 'Fatal error: invalid severity level "%s" ' % (severity_level)
    err_str += 'specified for %s operation "%s". Exiting.' % (operation, name)
    report_error_and_exit(err_str)
  
def validate_comparison_operator(comparison_operator, operation, name):
  if (comparison_operator not in ('str_lt', 'str_le', 'str_eq', 'str_ne', 'str_ge', 'str_gt') and
      comparison_operator not in ('int_lt', 'int_le', 'int_eq', 'int_ne', 'int_ge', 'int_gt')):
    err_str = 'Fatal error: invalid comparison operator "%s" ' % (comparison_operator)
    err_str += 'specified for %s operation "%s". Exiting.' % (operation, name)
    report_error_and_exit(err_str)
      
# This function will return a dictionary that's keyed by the distinct set of the input strings.
# The value for each key will be the list of node names associated with each distinct input string.
# Example: 
#   INPUT:
#     list_of_node_names = ['n001', 'n002', 'n003', 'n004']
#     map_of_strings_by_node_name = {'n001': 'hello', 'n002': 'hi there', 'n003': 'hello', 'n004': 'goodbye'}
#   OUTPUT:
#     node_grouping = {'hello': ['n001', 'n003'], 'hi there': ['n002'], 'goodbye': ['n004']}
def group_nodes_by_string(list_of_node_names, map_of_strings_by_node_name):
  node_grouping = {}
  for node_name in list_of_node_names:
    if node_name in map_of_strings_by_node_name:
      string_for_node = map_of_strings_by_node_name[node_name]
    else:
      string_for_node = ''
    if string_for_node in node_grouping:
      node_grouping[string_for_node].append(node_name)
    else:
      node_grouping[string_for_node] = [node_name]
  return node_grouping
 
def check_passwordless_ssh_and_sudo_access(list_of_node_names):
  logger = logging.getLogger(LOGGER_NAME)
  count_of_nodes = len(list_of_node_names)
  count_of_inaccessible_nodes = 0
  count_of_nodes_without_sudo_access = 0
  count_of_nodes_with_error = 0
  for node_name in list_of_node_names:
    cmd = 'echo "sudo -n echo test >/dev/null" | ssh -oStrictHostKeyChecking=no -oBatchMode=yes -T ' + node_name
    (cmd_output, exit_code) = exec_command(cmd)
    # ssh exits with 255 if an ssh-related error occurred, otherwise with the exit status of the remote command
    if exit_code == 255: 
      count_of_inaccessible_nodes += 1
      err_str = '***ERROR: Unable to access %s via passwordless ssh: %s' % (node_name, cmd_output)
      logger.error(err_str); print(err_str)
    # sudo exits with 1 if there is a configuration/permission problem
    elif exit_code == 1: 
      count_of_nodes_without_sudo_access += 1
      if 'must have a tty to run sudo' in cmd_output:
        err_str = '***ERROR: sudo access is not correctly configured for the user running this script '
        err_str += 'on node %s: requiretty must be disabled for this user in /etc/sudoers.' % (node_name)
        logger.error(err_str); print(err_str)
      else:
        err_str = '***ERROR: sudo access is not enabled for the user running this script '
        err_str += 'on node %s: this script must be run by a user with full sudo access.' % (node_name)
        logger.error(err_str); print(err_str)
    # unexpected error encountered
    elif exit_code != 0:
      count_of_nodes_with_error += 1
      err_str = '***ERROR: could not check passwordless ssh and/or sudo access on node %s.' % (node_name)
      err_str += '\nError details: command executed: %s, exit code: %d, output: %s' % (cmd, exit_code, cmd_output)
      logger.error(err_str); print(err_str)
  if count_of_inaccessible_nodes > 0:
    err_str = 'Fatal error: unable to access %d of %d ' % (count_of_inaccessible_nodes, count_of_nodes)
    err_str += 'specified nodes via passwordless ssh.'
    logger.error(err_str); print(err_str)
  if count_of_nodes_without_sudo_access > 0:
    err_str = 'Fatal error: sudo access is not enabled and/or correctly configured for the user running '
    err_str += 'this script on %d of %d specified nodes.' % (count_of_nodes_without_sudo_access, count_of_nodes)
    logger.error(err_str); print(err_str)
  if count_of_nodes_with_error > 0:
    err_str = 'Fatal error: could not check passwordless ssh and/or sudo access on '
    err_str += '%d of %d specified nodes.' % (count_of_nodes_with_error, count_of_nodes)
    logger.error(err_str); print(err_str)       
  if count_of_inaccessible_nodes > 0 or count_of_nodes_without_sudo_access > 0 or count_of_nodes_with_error > 0:
    err_str = 'Exiting due to fatal error(s).'
    logger.error(err_str); print(err_str)
    sys.exit(EXIT_GENERAL_ERROR)  
      
def main(argv):
  parser = OptionParser()                
  parser.add_option("-c", "--scanner_config_file", dest="scanner_config_file", 
                    help="Scanner configuration file. Default is ./trafodion_scanner.cfg.", 
                    default="./trafodion_scanner.cfg")
  parser.add_option("-t", "--trafodion_config_file", dest="trafodion_config_file", 
                    help="Trafodion configuration file. Default is %s." % (DEFAULT_TRAFODION_CONFIG_FILE), 
                    default=DEFAULT_TRAFODION_CONFIG_FILE)                    
  parser.add_option("-l", "--log_file", dest="log_file", 
                    help="Scanner log file. Default is ./trafodion_scanner.log. "\
                    "If the file doesn't exist, it will be created. Otherwise, the existing file will be appended.", 
                    default="./trafodion_scanner.log")                          
  parser.add_option("-o", "--single_operation", dest="single_operation", 
                    help="Execute a single operation from the Scanner configuration file. "\
                    "The operation must be specified by name. This option can be used for operations "\
                    "of type CHECK_CONFIG and COMPARE_CONFIG. Example: --single_operation \"MinNumCores\".")
  parser.add_option("-p", "--skip_prerequisite_checks", dest="skip_prerequisite_checks", action='store_true',
                    help="This special option causes the Scanner to skip the prerequisite checks "\
                    "that are normally executed at the beginning: passwordless ssh access checks and sudo access "\
                    "checks. This option is especially useful in combination with the --single_operation (-o) option.",
                    default=False)
  (options, args) = parser.parse_args()
    
  # for convenience, set flag variables based on some of the options
  single_operation_flag = False if ((options.single_operation is None) or (len(options.single_operation.strip()) == 0)) else True
  skip_prerequisite_checks_flag = True if options.skip_prerequisite_checks == True else False

  # special variable placeholders and their values, for replacement in the command strings
  placeholder_map = {}
  
  # severity level for each CHECK_CONFIG and COMPARE_CONFIG operation (by name), for summary info reporting
  severity_map = {}  
  
  try:
    logger = configure_logger(options.log_file)
  except IOError as e:
    print 'Fatal error: cannot open log file "%s": %s\nExiting.' % (options.log_file, e.strerror)
    sys.exit(EXIT_GENERAL_ERROR)  
  
  logger.info('Started')  
  logger.info('Using the following options: --scanner_config_file="%s", --trafodion_config_file="%s", '\
              '--log_file="%s", --single_operation="%s", --skip_prerequisite_checks="%s"',
              options.scanner_config_file, options.trafodion_config_file, options.log_file, 
              options.single_operation, options.skip_prerequisite_checks)

  # obtain the Trafodion configuration settings
  # if the options.trafodion_config_file exists we use it, otherwise we invoke the traf_config_setup script
  # to create a new trafodion configuration file (DEFAULT_TRAFODION_CONFIG_FILE)
  if os.path.isfile(options.trafodion_config_file):
    trafodion_config_file = options.trafodion_config_file 
  else:    
    logger.info('Trafodion configuration file "%s" not found, invoking traf_config_setup', options.trafodion_config_file)
    trafodion_config_file = DEFAULT_TRAFODION_CONFIG_FILE
    this_script_dir = os.path.dirname(os.path.abspath(__file__))
    traf_config_setup_script_dir = os.path.abspath(this_script_dir + '/../')
    command_string = 'cd ' + traf_config_setup_script_dir + '; ./traf_config_setup --scanner_mode'
    exit_code = exec_command_interactive(command_string)
    if exit_code != 0:
      err_str = 'Fatal error: traf_config_setup failed\nError details: '
      err_str += 'command executed: %s, exit code: %d\nExiting.' % (command_string, exit_code)
      report_error_and_exit(err_str)
  try:
    trafodion_config=read_trafodion_config(trafodion_config_file)
  except IOError as e:
    err_str = 'Fatal error: cannot open trafodion configuration file "%s": %s\nExiting.' % (trafodion_config_file, e.strerror)    
    report_error_and_exit(err_str)  
  trafodion_config_settings_string = ''
  for key in sorted(trafodion_config):
    trafodion_config_settings_string += '   %s = "%s"\n' % (key, trafodion_config[key])
  logger.info('Using the following trafodion configuration settings:\n%s', trafodion_config_settings_string)
    
  # set variables based on the trafodion configuration
  if 'NODE_LIST' in trafodion_config:
    list_of_node_names = sorted(trafodion_config['NODE_LIST'].split())    
    count_of_nodes = len(list_of_node_names)  
    if count_of_nodes == 0:
      err_str = 'Fatal error: the NODE_LIST trafodion configuration setting is empty.\nExiting.'
      report_error_and_exit(err_str)
  else:   
    err_str = 'Fatal error: the NODE_LIST trafodion configuration setting is not defined.\nExiting.'
    report_error_and_exit(err_str)  
  for variable in trafodion_config:
    placeholder_map['<<<' + variable + '>>>'] = trafodion_config[variable]
    
  # execute the prerequisite checks
  if (not skip_prerequisite_checks_flag): 
    info_str = 'Executing prerequisite checks.'
    logger.info(info_str); print(info_str)  
  
    # we first validate that we can access the specified nodes via passwordless ssh
    # and that the userid running this script has full sudo access (required for some  
    # scanner checks and also for the Trafodion installation)
    check_passwordless_ssh_and_sudo_access(list_of_node_names)
  
    info_str = 'Prerequisite checks completed.'
    logger.info(info_str); print(info_str)
    
  num_RECORD_CONFIG_operations_done = 0
  num_CHECK_CONFIG_operations_done = 0 
  num_COMPARE_CONFIG_operations_done = 0   
  check_exit_code = EXIT_SUCCESS
  
  check_failures_per_node = {}
  for node_name in list_of_node_names:
    check_failures_per_node[node_name] = []
    
  try:
    scan_lines=read_scanner_config(options.scanner_config_file)
  except IOError as e:
    err_str = 'Fatal error: cannot open scanner configuration file "%s": %s\nExiting.' % (options.scanner_config_file, e.strerror)
    report_error_and_exit(err_str)
  
  for i in range(len(scan_lines)):
    operation = scan_lines[i][0].strip() # trim leading and trailing whitespace
    
    # RECORD_CONFIG ::: <description> ::: <command>
    if (operation == 'RECORD_CONFIG'):
      descripion = scan_lines[i][1].strip() # trim leading and trailing whitespace
      command_string = scan_lines[i][2].strip() # trim leading and trailing whitespace
      
      # special logic for the --single_operation (-o) option
      if (single_operation_flag):
        continue
      
      num_RECORD_CONFIG_operations_done += 1
      
      # before command execution, we need to replace the special variable placeholders 
      # in the command string with the corresponding values
      command_string = replace_placeholders_in_command_string(command_string, placeholder_map)      
      
      for node_name in list_of_node_names:  
        (command_output, exit_code) = exec_command_remote(command_string, node_name)                   

        logger.info('Configuration Recorded on node %s: %s: command executed: "%s", command output:\n%s\n', 
                    node_name, descripion, command_string, command_output)
        print 'Configuration Recorded on node ' + node_name + ': ' + string.ljust(descripion, 59) + '(see log)'

    # CHECK_CONFIG ::: <name> ::: <description> ::: <severity level> ::: <expected value> ::: <comparison operator> ::: <command>
    elif (operation == 'CHECK_CONFIG'):
      name = scan_lines[i][1].strip() # trim leading and trailing whitespace
      descripion = scan_lines[i][2].strip() # trim leading and trailing whitespace
      severity_level = scan_lines[i][3].strip() # trim leading and trailing whitespace
      expected_value = scan_lines[i][4].strip() # trim leading and trailing whitespace
      comparison_operator = scan_lines[i][5].strip() # trim leading and trailing whitespace
      command_string = scan_lines[i][6].strip() # trim leading and trailing whitespace

      # special logic for the --single_operation (-o) option
      if (single_operation_flag and options.single_operation.strip() != name):
        continue
      
      num_CHECK_CONFIG_operations_done += 1
      
      # validate the severity_level
      validate_severity_level(severity_level, operation, name)
            
      # record severity level for summary info reporting
      severity_map[name] = severity_level      
            
      # validate the comparison_operator
      validate_comparison_operator(comparison_operator, operation, name)
  
      # before command execution, we need to replace the special variable placeholders 
      # in the command string with the corresponding values
      command_string = replace_placeholders_in_command_string(command_string, placeholder_map)
  
      for node_name in list_of_node_names:
        (command_output, exit_code) = exec_command_remote(command_string, node_name)                            

        try:
          compare_outcome = compare_check_result(command_output, expected_value, comparison_operator)
        except ValueError:           
          compare_outcome = False
          
        if (compare_outcome):
          check_outcome = "PASSED"
        else:
          check_outcome = "FAILED [%s]" % (severity_level)
          check_failures_per_node[node_name].append(name)
          if severity_level == 'error' and (check_exit_code == EXIT_SUCCESS or check_exit_code == EXIT_CHECK_WARNING):
            check_exit_code = EXIT_CHECK_ERROR
          elif severity_level == 'warning' and (check_exit_code == EXIT_SUCCESS):
            check_exit_code = EXIT_CHECK_WARNING
            
        detail_str = '   EXECUTION DETAILS: command executed: "%s", command output: "%s"\n' % (command_string, command_output)
        detail_str += '   EXPECTED RESULT: <expected value> <comparison operator> <command output>: '
        detail_str += '"%s" %s "%s" --> ' % (expected_value, comparison_operator, command_output)
        detail_str += 'condition satisfied' if check_outcome == "PASSED" else 'condition not satisfied'
        logger.info('Configuration Checked on node %s: %s: %s: %s\n%s\n', 
                    node_name, name, descripion, check_outcome, detail_str)
        print 'Configuration Checked on node ' + node_name + ': ' + string.ljust(descripion, 60) + ':' + check_outcome
        
    # COMPARE_CONFIG ::: <name> ::: <description> ::: <severity level> ::: <command>    
    elif (operation == 'COMPARE_CONFIG'):
      name = scan_lines[i][1].strip() # trim leading and trailing whitespace
      descripion = scan_lines[i][2].strip() # trim leading and trailing whitespace
      severity_level = scan_lines[i][3].strip() # trim leading and trailing whitespace
      command_string = scan_lines[i][4].strip() # trim leading and trailing whitespace

      # special logic for the --single_operation (-o) option
      if (single_operation_flag and options.single_operation.strip() != name):
        continue
      
      num_COMPARE_CONFIG_operations_done += 1
      
      # validate the severity_level
      validate_severity_level(severity_level, operation, name)
            
      # record severity level for summary info reporting
      severity_map[name] = severity_level
    
      # before command execution, we need to replace the special variable placeholders 
      # in the command string with the corresponding values
      command_string = replace_placeholders_in_command_string(command_string, placeholder_map)    
    
      node_output_map = {}
      for node_name in list_of_node_names:
        (command_output, exit_code) = exec_command_remote(command_string, node_name)
        node_output_map[node_name] = command_output
      output_node_grouping = group_nodes_by_string(list_of_node_names, node_output_map)  
      if (len(output_node_grouping) == 1):
        # there is only one item in the output_node_grouping dictionary, 
        # which means that all nodes had the same command ouput
        check_outcome = "PASSED"
      else:
        check_outcome = "FAILED [%s]" % (severity_level)
        # this check failed for all the nodes because they were found to be inconsistent
        for node_name in list_of_node_names:
          check_failures_per_node[node_name].append(name)
        if severity_level == 'error' and (check_exit_code == EXIT_SUCCESS or check_exit_code == EXIT_CHECK_WARNING):
          check_exit_code = EXIT_CHECK_ERROR
        elif severity_level == 'warning' and (check_exit_code == EXIT_SUCCESS):
          check_exit_code = EXIT_CHECK_WARNING
    
      detail_str = '   EXECUTION DETAILS: command executed on each node: "%s"\n' % (command_string)
      detail_str += '   EXPECTED RESULT: all nodes produce the same output\n'
      detail_str += '   ACTUAL RESULT: '
      if (check_outcome == "PASSED"):
        detail_str += 'all nodes produced the same output: %s\n' % (output_node_grouping.keys().pop())
      else:
        detail_str += 'nodes produced different output: \n'        
        for node_output_string in output_node_grouping:
          detail_str += '      ' + ', '.join(output_node_grouping[node_output_string]) + ': ' + node_output_string + '\n'     
      logger.info('Consistency Checked among all nodes: %s: %s: %s\n%s\n', name, descripion, check_outcome, detail_str)
      print 'Consistency Checked among all nodes' + ': ' + string.ljust(descripion, 59) + ':' + check_outcome 
      
    # unexpected operation type
    else:
      err_str = 'Fatal error: invalid operation type "%s" specified. Exiting.' % (operation)
      report_error_and_exit(err_str)

  # special logic for the --single_operation (-o) option
  if (single_operation_flag and (num_CHECK_CONFIG_operations_done == 0 and num_COMPARE_CONFIG_operations_done == 0)):
      err_str = 'Fatal error: invalid operation name "%s" specified ' % (options.single_operation.strip())
      err_str += 'for the --single_operation (-o) option. Exiting.' 
      report_error_and_exit(err_str)
      
  ### report summary stats ###
  
  check_failures_per_node_as_sorted_strings = {}
  for node_name in list_of_node_names:
    sorted_string = ''
    if len(check_failures_per_node[node_name]) == 0:
      sorted_string = 'All checks PASSED'
    else:
      sorted_check_failure_list = sorted(check_failures_per_node[node_name])
      for check_failure in sorted_check_failure_list:
        if sorted_string != '': sorted_string += ', '
        sorted_string += check_failure + ' check FAILED [%s]' % (severity_map[check_failure])
    check_failures_per_node_as_sorted_strings[node_name] = sorted_string
      
  check_failures_node_grouping = group_nodes_by_string(list_of_node_names, check_failures_per_node_as_sorted_strings)

  summary_string = 'Completed Execution on ' + str(count_of_nodes) + ' nodes: ' + ', '.join(list_of_node_names) + '\n'
  summary_string += 'Results: \n'
  for check_failures_sorted_string in sorted(check_failures_node_grouping, key=len):
    summary_string += '  ' + ', '.join(check_failures_node_grouping[check_failures_sorted_string])
    summary_string += ' - ' + check_failures_sorted_string + '\n'
  
  log_file_string = '\nAdditional details in log file: %s\n' % (os.path.abspath(options.log_file))
  
  logger.info('\n\n******* SUMMARY *******\n%s', summary_string)
  print '\n******* SUMMARY *******\n' + summary_string + log_file_string
  
  logger.info('Execution completed, exiting with status code %d', check_exit_code)

  sys.exit(check_exit_code)  

# Call the main() function to begin the program
if __name__ == '__main__':
  main(sys.argv[1:])
