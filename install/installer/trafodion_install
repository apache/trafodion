#!/bin/bash
# @@@ START COPYRIGHT @@@
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# @@@ END COPYRIGHT @@@

#==============================================
#  Trafodion installation script. Setup Trafodion
#  environment, configuration of HBase with
#  Hbase-trx and co-processors need for Trafodion, and
#  install Trafodion build. All parameters from scripts
#  use configuration file.
#==============================================

function print_usage {
cat << EOF

This script will install Trafodion. It will create a configuration
file (if one has not been created), setup of the environment needed
for Trafodion, configure HBase with Hbase-trx and co-processors needed,
and install a specified Trafodion build.

Options:
    --help             Print this message and exit
    --accept_license   If provided, the user agrees to accept all the
                       provisions in the Trafodion license.  This allows
                       for automation by skipping the display and prompt of
                       the Trafodion license.
    --config_file      If provided, all install prompts will be
                       taken from this file and not prompted for.
    --no_start         Will not start trafodion. Useful if other configurations 
                       need to be done before a start.
EOF
}

function copyConfig  {

if [ $all_node_count -ne 1 ]; then
   cp $TRAF_CONFIG $LOCAL_WORKDIR
   $TRAF_PDCP $LOCAL_WORKDIR/$TRAF_CONFIG_FILE $HOME
   $TRAF_PDSH sudo mkdir -p $TRAF_CONFIG_DIR
   $TRAF_PDSH sudo cp $HOME/$TRAF_CONFIG_FILE $TRAF_CONFIG_DIR
   $TRAF_PDSH sudo chmod 777 $TRAF_CONFIG
fi

}

function removePassword {

 export TRAF_CONFIG="/etc/trafodion/trafodion_config"
 source $TRAF_CONFIG

 $TRAF_PDSH sudo chmod 777 $TRAF_CONFIG
 $TRAF_PDSH sudo sed -i '/TRAF_USER_PASSWORD\=/d' $TRAF_CONFIG
 $TRAF_PDSH sudo sed -i '/\<PASSWORD\>/d' $TRAF_CONFIG
 $TRAF_PDSH sudo chmod 777 $TRAF_CONFIG

}

function fixPermissions {

#Change ownership of this file to be owned by traf user and traf group
#Errors with JPS will happen if not modified 
if [[ -d /tmp/hsperfdata_trafodion ]]; then 
   $TRAF_PDSH sudo chown -R $TRAF_USER.trafodion /tmp/hsperfdata_trafodion
fi

}


function checkHBaseVersion {

for node in $HADOOP_NODES;
do
   ssh -q -n $node 'echo "exit" | hbase shell &> $HOME/hbaseVersion.txt'
   hbaseInstalled=$(ssh -q -n $node grep "Version" $HOME/hbaseVersion.txt | wc -l)
   if [[ $hbaseInstalled -eq "1" ]]; then

      version=$(ssh -q -n $node grep "Version" $HOME/hbaseVersion.txt | sed 's/-.*//' | awk {'print$2'})
      if [[ $HADOOP_TYPE == "hortonworks" ]]; then
         if [[ $CDH_5_3_HDP_2_2_SUPPORT == "N" ]]; then
            if [[ "$HDP_2_3_SUPPORT" == "N" ]]; then
               supportedHBase=$(echo $version | grep "0.98.0.2" | wc -l)
               if [[ $supportedHBase -eq "0" ]]; then
                  echo "***ERROR: HBase installed must be 0.98.0.2 on node $node"
                  exit -1
               fi
            else
               supportedHBase=$(echo $version | grep "1.1.2" | wc -l)
               if [[ $supportedHBase -eq "0" ]]; then
                  echo "***ERROR: HBase installed must be 1.1.2 on node $node"
                  exit -1
               fi
            fi
         else
            supportedHBase=$(echo $version | grep "0.98.4" | wc -l)
            if [[ $supportedHBase -eq "0" ]]; then
               echo "***ERROR: HBase installed must be 0.98.4 on node $node"
               exit -1
            fi
         fi
      fi
      if [[ $HADOOP_TYPE == "cloudera" ]]; then
         if [[ $CDH_5_3_HDP_2_2_SUPPORT == "N" ]]; then
            if [[ $CDH_5_4_SUPPORT == "Y" ]] || [[ $CDH_5_5_SUPPORT == "Y" ]]; then
               supportedHBase=$(echo $version | grep "1.0.0" | wc -l)
               if [[ $supportedHBase -eq "0" ]]; then
                  echo "***ERROR: HBase installed must be 1.0.0 on node $node"
                  exit -1
               fi
               cdhVersion=$(ssh -q -n $node grep "Version" $HOME/hbaseVersion.txt | grep "cdh5.4.*" | wc -l)
               if [[ "$cdhVersion" -ge "1" ]]; then
                  CDH_VERSION="5.4"
               else
                  CDH_VERSION="5.5"
               fi
            else
               supportedHBase=$(echo $version | grep "0.98.1" | wc -l)
               if [[ $supportedHBase -eq "0" ]]; then
                  echo "***ERROR: HBase installed must be 0.98.1 on node $node"
                  exit -1
               fi
            fi
         else
            supportedHBase=$(echo $version | grep "0.98.6" | wc -l)
            if [[ $supportedHBase -eq "0" ]]; then
               echo "***ERROR: HBase installed must be 0.98.6 on node $node"
               exit -1
            fi
         fi

      fi
      hbaseVersion=$(ssh -q -n $node grep "Version" $HOME/hbaseVersion.txt | sed 's/-.*//' | awk {'print$2'})
      break
   fi

done

HBASE=$(curl -k -su $ADMIN:$PASSWORD $URL/api/v1/clusters/$CLUSTER_NAME/services | grep \"name\" | grep hbase | sed -e 's@[,]@@'g | awk '{print $3}' | sed "s/\"//g")
HDFS=$(curl -k -su $ADMIN:$PASSWORD $URL/api/v1/clusters/$CLUSTER_NAME/services | grep \"name\" | grep hdfs | sed -e 's@[,]@@'g | awk '{print $3}' | sed "s/\"//g")
ZOOKEEPER=$(curl -k -su $ADMIN:$PASSWORD $URL/api/v1/clusters/$CLUSTER_NAME/services | grep \"name\" | grep zookeeper | sed -e 's@[,]@@'g | awk '{print $3}' | sed "s/\"//g")

sudo chmod 777 $TRAF_CONFIG
sed -i '/hbaseVersion\=/d' $TRAF_CONFIG
echo "export hbaseVersion=\"$hbaseVersion\"" >> $TRAF_CONFIG
sed -i '/HBASE\=/d' $TRAF_CONFIG
echo "export HBASE=\"$HBASE\"" >> $TRAF_CONFIG
sed -i '/HDFS\=/d' $TRAF_CONFIG
echo "export HDFS=\"$HDFS\"" >> $TRAF_CONFIG
sed -i '/ZOOKEEPER\=/d' $TRAF_CONFIG
echo "export ZOOKEEPER=\"$ZOOKEEPER\"" >> $TRAF_CONFIG
sed -i '/CDH_VERSION\=/d' $TRAF_CONFIG
echo "export CDH_VERSION=\"$CDH_VERSION\"" >> $TRAF_CONFIG
sudo chmod 777 $TRAF_CONFIG
sudo rm -rf hbaseVersion.txt

}

#==============================================
#Parse input
USER_CONFIG=""
ACCEPT_LICENSE="N"
RUN_SCANNER="N"
NO_START="Y"

while [[ $# -gt 0 ]]; do
    case "$1" in
        --help)
            print_usage
            exit -1
            ;;
        --accept_license)
            ACCEPT_LICENSE="Y"
            ;;
        --config_file)
            if [[ -z "$2" ]]; then
                echo "***ERROR: No value passed to param $1."
                print_usage
                exit -1
            fi
            USER_CONFIG=$2
            if [ -f $USER_CONFIG ]; then
               source $USER_CONFIG
            else
               echo "***ERROR: configuration file $USER_CONFIG does not exist"
               exit -1
            fi
            shift
            ;;
        --run_scanner)
            RUN_SCANNER="Y"
            selectedRun="true"
            if [[ $selectedNo == "true" ]]; then
               echo "***ERROR: Selected --run_scanner and --no_scanner. Invalid combination."
               exit -1
            fi
            ;;
        --no_scanner)
            RUN_SCANNER="N"
            selectedNo="true"
            if [[ $selectedRun == "true" ]]; then
               echo "***ERROR: Selected --run_scanner and --no_scanner. Invalid combination."
               exit -1 
            fi
            ;;
        --no_start)
            NO_START="N"
            ;;            
        *)
            echo "***ERROR: unknown parameter '$1'"
            print_usage
            exit -1
    esac
    shift
done

#==============================================
echo
echo "******************************"
echo " TRAFODION INSTALLATION START"
echo "******************************"
echo
#==============================================
# Default values

export timestamp=$(date +%F-%H-%M-%S)
export TRAF_LOGDIR="/var/log/trafodion"
export INSTALL_LOG="$TRAF_LOGDIR/trafodion_install_$timestamp.log"
export INSTALL_LOG_CP="$INSTALL_LOG"
export SCANNER_LOG="$TRAF_LOGDIR/trafodion_scanner_$timestamp.log"
#export TRAF_WORKDIR="$( cd "$( dirname "$0" )" && pwd )/.."
export TRAF_WORKDIR="/usr/lib/trafodion"
export LOCAL_WORKDIR="$( cd "$( dirname "$0" )" && pwd )"
export TRAF_CONFIG="/etc/trafodion/trafodion_config"
export TRAF_CONFIG_DIR=$(dirname $TRAF_CONFIG)
export TRAF_CONFIG_FILE=$(basename $TRAF_CONFIG)
export TRAF_USER="trafodion"
#==============================================
#Prechecks 
#Check if HBase is up

#$LOCAL_WORKDIR/checkHBase

#if [[ "$?" -ne "0" ]]; then
#   exit -1
#fi


#Check not installing as userid Trafodion
if [[ "$(whoami)" == "$TRAF_USER" ]]; then
   echo "***ERROR: The Trafodion username cannot be the same as the install username"
   exit -1
fi

# check that we are running from a userid with sudo access
sudo echo "***INFO: testing sudo access"
if [ $? -ne 0 ]; then
    echo "***ERROR: This script must be run from a userid with sudo access."
    exit -1
fi

#==============================================
# Setup log & working directories

sudo mkdir -p $TRAF_LOGDIR
sudo chmod 777 $TRAF_LOGDIR
touch $INSTALL_LOG
sudo chmod 777 $INSTALL_LOG
echo "***INFO: Log file located at $INSTALL_LOG"

sudo mkdir -p $TRAF_CONFIG_DIR
sudo chmod 777 $TRAF_CONFIG_DIR
echo "***INFO: Config directory: $TRAF_CONFIG_DIR"

# create a working directory
sudo mkdir -p $TRAF_WORKDIR
sudo chmod -R 777 $TRAF_WORKDIR
echo "***INFO: Working directory: $TRAF_WORKDIR"
# copy install scripts into working directory
sudo cp -r $(cd "$( dirname "$0" )" && pwd)/ $TRAF_WORKDIR
sudo cp -rf $LOCAL_WORKDIR $TRAF_WORKDIR
sudo chmod -R 777 $TRAF_WORKDIR
#=============================================
# Shutdown Trafodion if it is running

userForTrafodion=`grep "$TRAF_USER:" /etc/passwd | wc -l`

if [[ "$userForTrafodion" != "0" ]]; then

   isTrafUp=$(sudo su $TRAF_USER --login --command "sqcheck" 2>/dev/null)

   trafodionRunning=$(echo $isTrafUp | grep "The SQ environment is up" | wc -l)
   if [[ "$trafodionRunning" -eq "1" ]]; then
      echo "***ERROR: Trafodion is still running."
      echo -n "Stop Trafodion (Y/N), default is N: "
      read answer

      if [ -z $answer ]; then
         echo "***ERROR: Please stop Trafodion then rerun trafodion_install"
         echo "***ERROR: Change to trafodion userid then do a 'sqstop'"
         exit -1
      else
         if [[ "${answer}" =~ ^[Yy]$ ]]; then
            echo "***INFO: Stopping Trafodion instance."
            sudo su $TRAF_USER --login --command "sqstop"
            sudo su $TRAF_USER --login --command "ckillall"
         else
            echo "***ERROR: Please stop Trafodion then rerun trafodion_install"
            echo "***ERROR: Change to trafodion user id then do a 'sqstop'"
            exit -1
         fi
      fi
   fi
fi

#==============================================
# config file

# if user did not supply their own config file, use the default
# or prompt to generate a new one.
if [ -z "$USER_CONFIG" ]; then
   if [ -f $TRAF_CONFIG ]; then
      # strip out LOCAL_WORKDIR from config file, if there.
      # LOCAL_WORKDIR was erroneously saved to the config file in
      # previous versions of the installer scripts and since the config
      # file hangs around between installer runs it needs to be stripped
      # out here before we source in the config file
      cp $TRAF_CONFIG config_temp
      sudo grep -vE "LOCAL_WORKDIR" config_temp > $TRAF_CONFIG 2> /dev/null
      source $TRAF_CONFIG
   fi

   # prompt user for configuration info
   $LOCAL_WORKDIR/traf_config_setup | tee -a $INSTALL_LOG
   if [ ${PIPESTATUS[0]} != "0" ]; then
      echo "***ERROR: Error while running traf_config_setup." | tee -a $INSTALL_LOG
      echo "***ERROR: No configuration file created." | tee -a $INSTALL_LOG
      exit -1
   fi
else
   # copy the user's config file to the default location
   sudo cp $USER_CONFIG $TRAF_CONFIG
   if [ $? -ne 0 ]; then
      echo "***ERROR: unable to copy $USER_CONFIG to $TRAF_CONFIG"
      exit -1
   fi
   sudo chmod 777 $TRAF_CONFIG
fi

source $TRAF_CONFIG
if [ $? -ne 0 ]; then
   echo "***ERROR: unable to source $TRAF_CONFIG"
   exit -1
fi
#=============================================
#Check Config File for Errors

$LOCAL_WORKDIR/traf_config_check | tee -a $INSTALL_LOG

if [ ${PIPESTATUS[0]} != "0" ]; then   
   echo "***ERROR: Error found while checking config file." 
   echo "***ERROR: Exiting..."
   exit -1 
fi
sudo chmod 777 $TRAF_CONFIG
sed -i '/INSTALL_LOG\=/d' $TRAF_CONFIG
echo "export INSTALL_LOG=\"$INSTALL_LOG_CP\"" >> $TRAF_CONFIG
sudo chmod 777 $TRAF_CONFIG
source $TRAF_CONFIG

sudo chmod 777 $TRAF_CONFIG
sed -i '/START_ALL\=/d' $TRAF_CONFIG
echo "export START_ALL=\"$NO_START\"" >> $TRAF_CONFIG
sudo chmod 777 $TRAF_CONFIG
source $TRAF_CONFIG

#=============================================
#Check if doing an upgrade

if [[ $CONFIG_COMPLETE ]]; then
   userForTrafodion=`grep "$TRAF_USER:" /etc/passwd | wc -l`
   if [[ "$userForTrafodion" == "0" ]]; then
      UPGRADE_TRAF=false;
   else
      UPGRADE_TRAF=true;
   fi

   #Add upgrade variable to config file
   sudo chmod 777 $TRAF_CONFIG
   sed -i '/UPGRADE_TRAF\=/d' $TRAF_CONFIG
   echo "export UPGRADE_TRAF=\"$UPGRADE_TRAF\"" >> $TRAF_CONFIG
   sudo chmod 777 $TRAF_CONFIG
   source $TRAF_CONFIG
fi

#==============================================

sed -i '/ACCEPT_LICENSE\=/d' $TRAF_CONFIG
echo "export ACCEPT_LICENSE=\"$ACCEPT_LICENSE\"" >> $TRAF_CONFIG

#==============================================
# untar package and files into /usr/lib/trafodion (the new TRAF_WORKDIR)

# if we have the package tar of tar files we need to extract
# trafodion core and dcs  and rest-server builds from it
# if not then we need to copy to $TRAF_WORKDIR


# create directory to contain build tar files using the
# timestamp from the package filename

traf_filename=$(basename "$TRAF_PACKAGE")
UNTAR_DIR="$TRAF_WORKDIR/${traf_filename%.tar.gz}"
sudo mkdir -p $UNTAR_DIR
sudo chmod 755 $UNTAR_DIR

if [[ "$ONE_TAR_INSTALL" == "N" ]]; then
      
   sudo tar -xzf $TRAF_PACKAGE --directory=$UNTAR_DIR

   build_file=$(ls $UNTAR_DIR | grep "trafodion_.*server")
   if [[ -z $build_file ]]; then
      echo "***ERROR: trafodion_server-*.tgz could not be found in $UNTAR_DIR"
      exit -1
   fi
   TRAF_BUILD=$UNTAR_DIR/$build_file

   build_file=$(ls $UNTAR_DIR | grep "dcs")
   DCS_BUILD=$UNTAR_DIR/$build_file

   build_file=$(ls $UNTAR_DIR | grep "rest")
   if [ -z $build_file ]; then
      REST_BUILD=""
   else
      REST_BUILD=$UNTAR_DIR/$build_file
   fi

   sed -i '/TRAF_BUILD\=/d' $TRAF_CONFIG
   echo "export TRAF_BUILD=\"$TRAF_BUILD\"" >> $TRAF_CONFIG
   sed -i '/DCS_BUILD\=/d' $TRAF_CONFIG
   echo "export DCS_BUILD=\"$DCS_BUILD\"" >> $TRAF_CONFIG
   sed -i '/REST_BUILD\=/d' $TRAF_CONFIG
   echo "export REST_BUILD=\"$REST_BUILD\"" >> $TRAF_CONFIG

else
   sudo cp $TRAF_PACKAGE $UNTAR_DIR
   if [ $? -ne 0 ]; then
      echo "***ERROR: unable to copy trafodion package ($TRAF_PACKAGE) to $UNTAR_DIR"
      exit -1
   fi
      
fi

cd $UNTAR_DIR

# clean up any old files left lying around
sudo rm -rf $UNTAR_DIR/export/lib 2>/dev/null

# extract the hbase-trx jar file (and others) from the tar file
if [[ "$ONE_TAR_INSTALL" == "Y" ]]; then
   sudo tar -xzf $TRAF_PACKAGE export/lib 2>&1 | tee -a $INSTALL_LOG
else
   sudo tar -xzf $TRAF_BUILD export/lib 2>&1 | tee -a $INSTALL_LOG
fi
if [ ${PIPESTATUS[0]} != 0 ]; then
    echo "***ERROR: unable to find export/lib/ directory in $TRAF_BUILD" 2>&1 | tee -a $INSTALL_LOG
    exit -1
fi


# add the untar directory to the config file
sed -i '/UNTAR_DIR\=/d' $TRAF_CONFIG
echo "export UNTAR_DIR=\"$UNTAR_DIR\"" >> $TRAF_CONFIG
source $TRAF_CONFIG

#============================================
#Check to make sure HBase Version is the correct version

if [[ $HADOOP_TYPE != "apache" ]]; then
   checkHBaseVersion
fi
#==============================================
# Run trafodion_setup
echo
echo "******************************"
echo " TRAFODION SETUP"
echo "******************************"
echo

if [[ "$UPGRADE_TRAF" == "true" ]]; then
   sudo chmod 777 $HOME_DIR/$TRAF_USER/.bashrc
   sudo sed -i -e "s@export NODE_LIST=.*@export NODE_LIST=\"$NODE_LIST\"@" $HOME_DIR/$TRAF_USER/.bashrc   
   sudo sed -i -e "s@export MY_NODES=.*@export MY_NODES=\"$MY_NODES\"@" $HOME_DIR/$TRAF_USER/.bashrc
   
   for node in $ALL_NODE_LIST
   do
      userForTrafodion=$(ssh -q -n $node grep "$TRAF_USER:" /etc/passwd | wc -l)
      if [[ "$userForTrafodion" == 0 ]]; then
         $LOCAL_WORKDIR/traf_setup | tee -a $INSTALL_LOG
         if [ ${PIPESTATUS[0]} != "0" ]; then
            echo "***ERROR: Error while running traf_setup." | tee -a $INSTALL_LOG
            echo "***ERROR: Setup not complete, review logs." | tee -a $INSTALL_LOG
            echo "***ERROR: Exiting...." | tee -a $INSTALL_LOG
            exit -1
         else
            echo "***INFO: Trafodion environment setup completed" | tee -a $INSTALL_LOG
         fi
      fi
   done
  echo "***INFO: Installing required RPM packages" | tee -a $INSTALL_LOG
  $LOCAL_WORKDIR/traf_package_setup | tee -a $INSTALL_LOG
  if [ $? != 0 ]; then
     echo "***ERROR: Unable to create Trafodion userid: $TRAF_USER"
     exit -1
  fi
   
else
   $LOCAL_WORKDIR/traf_setup | tee -a $INSTALL_LOG

   if [ ${PIPESTATUS[0]} != "0" ]; then
      echo "***ERROR: Error while running traf_setup." | tee -a $INSTALL_LOG
      echo "***ERROR: Setup not complete, review logs." | tee -a $INSTALL_LOG
      echo "***ERROR: Exiting...." | tee -a $INSTALL_LOG
      exit -1
   else
      echo "***INFO: Trafodion environment setup completed" | tee -a $INSTALL_LOG
   fi
fi

#Add trafodion to the hbase group
#*********************************************
$TRAF_PDSH sudo usermod -a -G $HBASE_GROUP $TRAF_USER
#*********************************************

# create working directories on all nodes
$TRAF_PDSH sudo mkdir -p $TRAF_WORKDIR
$TRAF_PDSH sudo chmod 777 $TRAF_WORKDIR
$TRAF_PDSH sudo mkdir -p $LOCAL_WORKDIR
$TRAF_PDSH sudo chmod 777 $LOCAL_WORKDIR

# copy config file to all nodes

copyConfig
fixPermissions

$LOCAL_WORKDIR/traf_sqconfig
if [ $? != 0 ]; then
   echo "***ERROR: traf_sqconfig script failed."
   echo "***ERROR: sqconfig file not created."
   exit -1
fi
#Reserve DCS Ports

echo "***INFO: Reserving DCS ports"
trafodion_ports=${DCS_MASTER_PORT:-23400},${DCS_MASTER_INFO_PORT:-24400}
reservedTrafodionPorts="net.ipv4.ip_local_reserved_ports = ${trafodion_ports}"

for node in $ALL_NODE_LIST
do
   redhatSystem=$(ssh -q -n $node '/sbin/sysctl net.ipv4.ip_local_reserved_ports | wc -l')
   if [[ "$redhatSystem" -ge "1" ]]; then
      reserved_ports=$(ssh -q -n $node '/sbin/sysctl net.ipv4.ip_local_reserved_ports' | awk -F'=' '{print $2;}' | sed 's/^ //')
      ssh -q -n $node 'sudo chmod 777 /etc/sysctl.conf' 2>&1 > /dev/null
      ssh -q -n $node 'sudo sed -i '/net.ipv4.ip_local_reserved_ports""\=*/d' /etc/sysctl.conf' 2>&1 > /dev/null

   if [[ -z "${reserved_ports}" ]]; then
      ssh -q -n $node "sudo echo "$reservedTrafodionPorts" >> /etc/sysctl.conf" 2>&1 > /dev/null
   else
      ssh -q -n $node "sudo echo "$reservedTrafodionPorts","$reserved_ports" >> /etc/sysctl.conf" 2>&1 > /dev/null
   fi
   ssh -q -n $node 'sudo chmod 644 /etc/sysctl.conf' 2>&1 > /dev/null
   ssh -q -n $node 'sudo /sbin/sysctl -p' 2>&1 > /dev/null
   else
      echo "***ERROR: Unable to reserve DCS ports (${trafodion_ports})."
      exit -1
   fi
done

sudo chmod 777 $TRAF_CONFIG
sed -i '/DCS_PORT\=/d' $TRAF_CONFIG
echo "export DCS_PORT=\"23400\"" >> $TRAF_CONFIG
sudo chmod 777 $TRAF_CONFIG

sudo chmod 777 $TRAF_CONFIG
sed -i '/DCS_INFO_PORT\=/d' $TRAF_CONFIG
echo "export DCS_INFO_PORT=\"24400\"" >> $TRAF_CONFIG
sudo chmod 777 $TRAF_CONFIG
source $TRAF_CONFIG
copyConfig

$LOCAL_WORKDIR/traf_add_sudoAccess

#Set Max kernel pid

$TRAF_PDSH sudo /sbin/sysctl -w kernel.pid_max=65535 2>&1 > /dev/null
sudo sed -i '/kernel\.pid\_max*/d' /etc/sysctl.conf 2>&1 > /dev/null
sudo chmod 777 /etc/sysctl.conf
sudo echo "kernel.pid_max = 65535" >> /etc/sysctl.conf

if [[ $all_node_count -ne 1 ]]; then 
   sudo chmod 777 /etc/sysctl.conf
   sudo chown $(whoami).$(whoami) /etc/sysctl.conf
   cp /etc/sysctl.conf $HOME 2>&1 > /dev/null

   $TRAF_PDCP $HOME/sysctl.conf $HOME 2>&1 > /dev/null

   $TRAF_PDSH sudo mv $HOME/sysctl.conf /etc/sysctl.conf
   $TRAF_PDSH sudo chown root.root /etc/sysctl.conf
   $TRAF_PDSH sudo chmod 644 /etc/sysctl.conf
else
   sudo chmod 644 /etc/sysctl.conf
fi

#Create install directory
if [[ "$all_node_count" -ne "1" ]]; then
   $TRAF_PDSH sudo mkdir -p /$HOME_DIR/$TRAF_USER/installer &> /dev/null
fi

#Copy over traf_authentication_config file to all nodes
if [[ "$LDAP_SECURITY" == "Y" ]]; then
   echo "***INFO: Copying $LDAP_AUTH_FILE to Trafodion home dir"

   if [[ "$all_node_count" -eq "1" ]]; then
      sudo cp -r $LOCAL_WORKDIR/$LDAP_AUTH_FILE $HOME_DIR/$TRAF_USER
      sudo chown trafodion.trafodion $HOME_DIR/$TRAF_USER/$LDAP_AUTH_FILE
      sudo chmod 750 $HOME_DIR/$TRAF_USER/$LDAP_AUTH_FILE
      if [[ $LDAP_LEVEL == "2" ]] || [[ $LDAP_LEVEL == "1" ]]; then
         echo "***INFO: Copying $LDAP_CERT to Trafodion home dir"
         sudo cp -r $LDAP_CERT $HOME_DIR/$TRAF_USER
         sudo chown trafodion.trafodion $HOME_DIR/$TRAF_USER/$LDAP_CERT_BASE
         sudo chmod 750 $HOME_DIR/$TRAF_USER/$LDAP_CERT_BASE
      fi
   else
      $TRAF_PDCP $LOCAL_WORKDIR/$LDAP_AUTH_FILE $HOME
      $TRAF_PDSH sudo cp -r $HOME/$LDAP_AUTH_FILE $HOME_DIR/$TRAF_USER
      $TRAF_PDSH sudo chown trafodion.trafodion $HOME_DIR/$TRAF_USER/$LDAP_AUTH_FILE
      $TRAF_PDSH sudo chmod 750 $HOME_DIR/$TRAF_USER/$LDAP_AUTH_FILE
      if [[ $LDAP_LEVEL == "2" ]] || [[ $LDAP_LEVEL == "1" ]]; then
         echo "***INFO: Copying $LDAP_CERT to Trafodion home dir"
         $TRAF_PDCP $LDAP_CERT $HOME
         $TRAF_PDSH sudo cp -r $HOME/$LDAP_CERT_BASE $HOME_DIR/$TRAF_USER
         $TRAF_PDSH sudo chown trafodion.trafodion $HOME_DIR/$TRAF_USER/$LDAP_CERT_BASE
         $TRAF_PDSH sudo chmod 750 $HOME_DIR/$TRAF_USER/$LDAP_CERT_BASE
      fi
   fi
fi

#=============================================
#Run trafodion_mods

echo
echo "******************************"
echo " TRAFODION MODS"
echo "******************************"
echo

if [[ $MODS_COMPLETE != "Y" ]]; then
   if [[ $HADOOP_TYPE == "cloudera" ]]; then
      echo "***INFO: Cloudera installed will run traf_cloudera_mods" 2>&1 | tee -a $INSTALL_LOG
      $LOCAL_WORKDIR/traf_cloudera_mods 2>&1 | tee -a $INSTALL_LOG
      if [ ${PIPESTATUS[0]} != "0" ]; then
         echo "***ERROR: traf_cloudera_mods exited with error." | tee -a $INSTALL_LOG
         echo "***ERROR: Please check log files." | tee -a $INSTALL_LOG
         echo "***ERROR: Exiting...." | tee -a $INSTALL_LOG
         exit -1
      fi
   fi

   if [[ $HADOOP_TYPE == "hortonworks" ]]; then
      echo "***INFO: Hortonworks installed will run traf_hortonworks_mods" 2>&1 | tee -a $INSTALL_LOG
      $LOCAL_WORKDIR/traf_hortonworks_mods 2>&1 | tee -a $INSTALL_LOG
      if [ ${PIPESTATUS[0]}  != "0" ]; then
         echo "***ERROR: traf_hortonworks_mods exited with error." | tee -a $INSTALL_LOG
         echo "***ERROR: Please check log files." | tee -a $INSTALL_LOG
         echo "***ERROR: Exiting...." | tee -a $INSTALL_LOG
         exit -1
      fi
   fi
   
    if [[ $HADOOP_TYPE == "apache" ]]; then
      echo "***INFO: Will run traf_apache_mods" 2>&1 | tee -a $INSTALL_LOG
      $LOCAL_WORKDIR/traf_apache_mods 2>&1 | tee -a $INSTALL_LOG
      if [ ${PIPESTATUS[0]}  != "0" ]; then
         echo "***ERROR: traf_apache_mods exited with error." | tee -a $INSTALL_LOG
         echo "***ERROR: Please check log files." | tee -a $INSTALL_LOG
         echo "***ERROR: Exiting...." | tee -a $INSTALL_LOG
         exit -1
      fi
   fi
else
   echo "***INFO: Trafodion Mods has completed successfully in a previous run."
fi

echo "***INFO: Trafodion Mods ran successfully."

#Get HBaseSite.xml information 
$LOCAL_WORKDIR/parseHBaseSite.py
#==============================================
#Install Trafodion
echo
echo "******************************"
echo " TRAFODION CONFIGURATION"
echo "******************************"
echo
sudo mkdir -p $SQ_ROOT
sudo chown $TRAF_USER.trafodion $SQ_ROOT
/bin/cp -rf $LOCAL_WORKDIR/traf_config $TRAF_WORKDIR/installer/traf_config

sudo su $TRAF_USER --login --command "$TRAF_WORKDIR/installer/traf_config" 2>&1 | tee -a $INSTALL_LOG

if [ ${PIPESTATUS[0]} != "0" ]; then
   echo "***ERROR: Error while running traf_config." | tee -a $INSTALL_LOG
   echo "***ERROR: Setup not complete, review logs." | tee -a $INSTALL_LOG
   echo "***ERROR: Exiting...." | tee -a $INSTALL_LOG
   exit -1
fi

# Install and configure CLI for Cloud environments
if  [ "$ENABLE_HA" == "true" ] && [[ $CLOUD_CONFIG == "Y" ]] && [[ $all_node_count -gt 1 ]]; then
  echo "***INFO: Install and configure CLI for Cloud"
  $TRAF_WORKDIR/installer/cloud_cli_setup
fi

if [[ $START_ALL == "Y" ]]; then
   sudo su $TRAF_USER --login --command "$TRAF_WORKDIR/installer/traf_sqgen" 2>&1 | tee -a $INSTALL_LOG
   sudo su $TRAF_USER --login --command "$TRAF_WORKDIR/installer/traf_start" 2>&1 | tee -a $INSTALL_LOG

   if [ ${PIPESTATUS[0]} != "0" ]; then
      echo "***ERROR: Error while running traf_start." | tee -a $INSTALL_LOG
      echo "***ERROR: Setup not complete, review logs." | tee -a $INSTALL_LOG
      echo "***ERROR: Exiting...." | tee -a $INSTALL_LOG
     exit -1
  fi
fi
#==============================================
MODS_COMPLETE="N"
sudo chmod 777 $TRAF_CONFIG
sed -i '/MODS_COMPLETE\=/d' $TRAF_CONFIG
echo "export MODS_COMPLETE=\"$MODS_COMPLETE\"" >> $TRAF_CONFIG
sudo chmod 777 $TRAF_CONFIG
source $TRAF_CONFIG
copyConfig
removePassword
echo
echo "******************************"
echo " TRAFODION INSTALLATION END"
echo "******************************"
echo

