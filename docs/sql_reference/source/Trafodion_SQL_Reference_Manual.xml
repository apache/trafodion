<?xml version="1.0" encoding="UTF-8"?>
<!-- 
* @@@ START COPYRIGHT @@@                                                       
*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*
* @@@ END COPYRIGHT @@@
-->

<!--Arbortext, Inc., 1988-2014, v.4002-->
<!DOCTYPE book PUBLIC "-//Apache Software Foundation (ASF)//DTD DocBook Extension//EN"
 "ess.dtd">
<book>
<title>Trafodion SQL Reference Manual</title>
<bookinfo>
<title>Trafodion SQL Reference Manual</title>
<edition>Trafodion Release 1.1.0</edition><pubsnumber>T775-110-001</pubsnumber>
<pubdate>April 2015</pubdate>
<abstract condition="hidden">
<para>Last updated: 4/24/2015</para>
</abstract>
<copyright><year>2015</year><holder>Apache Software Foundation (ASF)
</holder></copyright>
<legalnotice>
<!--WRITER'S NOTE: HP legal notice for open source release-->
<title>Legal Notice</title>
<para>The information contained herein is subject to change without
notice. This documentation is distributed on an “AS IS” basis, without
warranties or conditions of any kind, either express or implied. Nothing
herein should be construed as constituting an additional warranty.
HP shall not be liable for technical or editorial errors or omissions
contained herein.</para><para>NOTICE REGARDING OPEN SOURCE SOFTWARE:
Project Trafodion is licensed under the Apache License, Version 2.0
(the "License"); you may not use software from Project Trafodion except
in compliance with the License. You may obtain a copy of the License
at <ulink url="http://www.apache.org/licenses/LICENSE-2.0">http://www.apache.org/licenses/LICENSE-2.0</ulink
>. Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</para>
<formalpara>
<title>Acknowledgements</title>
<para>Microsoft® and Windows® are U.S. registered trademarks of Microsoft
Corporation. Java® is a registered trademark of Oracle and/or its
affiliates.</para></formalpara>
</legalnotice>
</bookinfo>
<preface>
<title>About This Document</title>
<para>This manual describes reference information about the syntax
of SQL statements, functions, and other SQL language elements supported
by the Trafodion project’s database software.</para>
<para>Trafodion SQL statements and utilities are entered interactively
or from script files using a client-based tool, such as the Trafodion
Command Interface (TrafCI). To install and configure a client application
that enables you to connect to and use a Trafodion database, see the <citetitle
>Trafodion Client Installation Guide</citetitle>.</para>
<note>
<para>In this manual, SQL language elements, statements, and clauses
within statements are based on the ANSI SQL:1999 standard. </para>
</note>
<section>
<title>Intended Audience</title>
<para>This manual is intended for database administrators and application
programmers who are using SQL to read, update, and create Trafodion
SQL tables, which map to HBase tables, and to access native HBase<phrase
> and Hive tables</phrase>.</para>
<para>You should be familiar with structured query language (SQL)
and with the American National Standard Database Language SQL:1999.</para>
</section>
<section>
<title>New and Changed Information in This Edition</title>
<para>This edition includes updates for these new features:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="TI  inline table">
<colspec colwidth="1.00*"/>
<colspec colwidth="1.00*"/>
<thead>
<row><entry><emphasis role="bold">New Feature</emphasis></entry><entry
><emphasis role="bold">Location in the Manual</emphasis></entry></row>
</thead>
<tbody>
<row><entry>On Line Analytical Process (OLAP) window functions</entry>
<entry><itemizedlist>
<listitem><para><xref linkend="olapfunc" role="select:quotedtitle page"
/></para></listitem>
</itemizedlist></entry></row>
<row><entry>Ability to cancel DDL, update statistics, and additional
child query operations in addition to DML statements</entry><entry
><itemizedlist>
<listitem><para><xref linkend="Control-Query-Cancel"
role="select:quotedtitle page"/></para></listitem>
</itemizedlist></entry></row>
<row><entry>Authorization required to run the CONTROL QUERY CANCEL
Statement</entry><entry><itemizedlist>
<listitem><para><xref linkend="Control-Query-Cancel"
role="select:quotedtitle page"/></para></listitem>
</itemizedlist></entry></row>
<row><entry>Ability to grant privileges on behalf of a role using
the GRANTED BY clause. </entry><entry><itemizedlist>
<listitem><para><xref linkend="GrantCompPriv_stmt"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="i1068219" role="select:quotedtitle page"
/></para></listitem>
</itemizedlist></entry></row>
<row><entry>Authorization required for all SHOWDDL commands</entry>
<entry><itemizedlist>
<listitem><para><xref linkend="showddl" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="SHOWDDL_SCHEMA"
role="select:quotedtitle page"/></para></listitem>
</itemizedlist></entry></row>
<row><entry>Ability to display the DDL syntax of a library object
using the SHOWDDL LIBRARY command</entry><entry><itemizedlist>
<listitem><para><xref linkend="showddl" role="select:quotedtitle page"
/></para></listitem>
</itemizedlist></entry></row>
<row><entry>Listing of HBase objects using the GET HBASE OBJECTS command
through an SQL interface</entry><entry><itemizedlist>
<listitem><para><xref linkend="GET-HBASE-OBJECTS-Statement"
role="select:quotedtitle page"/></para></listitem>
</itemizedlist></entry></row>
</tbody>
</tgroup>
</informaltable>
</section>
<section>
<title>Document Organization</title>
<informaltable frame="topbot">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col3"/>
<colspec colname="col4"/>
<thead>
<row rowsep="1" valign="bottom"><entry align="left" valign="bottom"
>Chapter or Appendix</entry><entry align="left" valign="bottom">Description</entry>
</row>
</thead>
<tbody>
<row><entry><xref linkend="i1012274"
role="select:quotedtitle label page"/></entry><entry>Introduces Trafodion
SQL and covers topics such as data consistency, transaction management,
and ANSI compliance.</entry></row>
<row><entry><xref linkend="i1076008"
role="select:quotedtitle label page"/></entry><entry>Describes the
SQL statements supported by Trafodion SQL.</entry></row>
<row><entry><xref linkend="i1077886"
role="select:quotedtitle label page"/></entry><entry>Describes the
SQL utilities supported by Trafodion SQL.</entry></row>
<row><entry><xref linkend="i1008163"
role="select:quotedtitle label page"/></entry><entry>Describes parts
of the language, such as database objects, data types, expressions,
identifiers, literals, and predicates, which occur within the syntax
of Trafodion SQL statements.</entry></row>
<row><entry><xref linkend="i1004213"
role="select:quotedtitle label page"/></entry><entry>Describes clauses
used by Trafodion SQL statements.</entry></row>
<row><entry><xref linkend="i1056860"
role="select:quotedtitle label page"/></entry><entry>Describes specific
functions and expressions that you can use in Trafodion SQL statements.</entry>
</row>
<row><entry><xref linkend="SQLRuntimeStats"
role="select:quotedtitle label page"/></entry><entry>Describes how
to gather statistics for active queries or for the Runtime Management
System (RMS) and describes the RMS counters that are returned.</entry>
</row>
<row><entry><xref linkend="olapfunc"
role="select:quotedtitle label page"/></entry><entry>Describes specific
on line analytical processing functions.</entry></row>
<row condition="hidden"><entry><xref linkend="mappingtbls"
role="select:quotedtitle label page"/></entry><entry>Lists mappings
for the UCS2 character set.</entry></row>
<row><entry><xref linkend="i1003045"
role="select:quotedtitle label page"/></entry><entry>Lists the words
that are reserved in Trafodion SQL.</entry></row>
<row><entry><xref linkend="CQD_Attributes"
role="select:quotedtitle label page"/></entry><entry>Describes the
Control Query Default (CQD) attributes that are supported in a Trafodion
SQL environment.</entry></row>
<row><entry><xref linkend="i1003125"
role="select:quotedtitle label page"/></entry><entry>Describes limits
in Trafodion SQL.</entry></row>
<row condition="hidden"><entry><xref linkend="i1005787"
role="select:quotedtitle label page"/></entry><entry>Describes how
Trafodion SQL conforms to the ANSI standard.</entry></row>
</tbody>
</tgroup>
</informaltable>
</section>
<section>
<title>Notation Conventions</title>
<section>
<title>General Syntax Notation</title>
<para><!--WRITER'S NOTE: Edit this list, deleting headings and discussions of notations that don't apply to your manual and adding any new ones you might need. If you need to follow a syntax standard other than the Neoview standard (for example, in manuals using a programming language, where uppercase versus lowercase is significant), modify the list as needed. -->This
list summarizes the notation conventions for syntax presentation in
this manual.</para>
<variablelist>
<varlistentry><term>UPPERCASE LETTERS</term>
<listitem><para>Uppercase letters indicate keywords and reserved words.
 Type these items exactly as shown.  Items not enclosed in brackets
are required.  For example:</para><para>SELECT</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>Italic Letters</replaceable></term>
<listitem><para>Italic letters, regardless of font, indicate variable
items that you supply.  Items not enclosed in brackets are required.
 For example:</para><para><replaceable>file-name</replaceable></para>
</listitem>
</varlistentry>
<varlistentry><term><computeroutput>Computer Type</computeroutput
></term>
<listitem><para>Computer type letters within text indicate case-sensitive
keywords and reserved words. Type these items exactly as shown. Items
not enclosed in brackets are required. For example:</para>
<programlisting>
myfile.sh
</programlisting>
</listitem>
</varlistentry>
<varlistentry><term><userinput>Bold Text</userinput></term>
<listitem><para>Bold text in an example indicates user input typed
at the terminal.  For example:</para>
<programlisting>
ENTER RUN CODE

?<userinput>123</userinput>
CODE RECEIVED:      123.00
</programlisting>
<para>The user must press the Return key after typing the input.</para>
</listitem>
</varlistentry>
<varlistentry><term>[  ]  Brackets</term>
<listitem><para>Brackets enclose optional syntax items. For example:</para>
<programlisting>
DATETIME [<replaceable>start-field</replaceable> TO] <replaceable
>end-field</replaceable>
</programlisting>
<para>A group of items enclosed in brackets is a list from which you
can choose one item or none. The items in the list can be arranged
either vertically, with aligned brackets on each side of the list,
or horizontally, enclosed in a pair of brackets and separated by vertical
lines. For example:</para>
<programlisting>
DROP VIEW <replaceable>view</replaceable> [RESTRICT]
                   [CASCADE]
</programlisting>
<programlisting>
DROP VIEW <replaceable>view</replaceable> [ RESTRICT | CASCADE ]
</programlisting>
</listitem>
</varlistentry>
<varlistentry><term>{  }  Braces</term>
<listitem><para>Braces enclose required syntax items. For example:</para>
<programlisting>
FROM { <replaceable>grantee</replaceable>[, <replaceable>grantee</replaceable
>]...}
</programlisting>
<para>A group of items enclosed in braces is a list from which you
are required to choose one item. The items in the list can be arranged
either vertically, with aligned braces on each side of the list, or
horizontally, enclosed in a pair of braces and separated by vertical
lines. For example:</para>
<programlisting>
INTERVAL { <replaceable>start-field</replaceable> TO <replaceable
>end-field</replaceable> }
         { <replaceable>single-field</replaceable> }
</programlisting>
<programlisting>
INTERVAL { <replaceable>start-field</replaceable> TO <replaceable
>end-field</replaceable>  | <replaceable>single-field</replaceable
> }
</programlisting>
</listitem>
</varlistentry>
<varlistentry><term>|  Vertical Line</term>
<listitem><para>A vertical line separates alternatives in a horizontal
list that is enclosed in brackets or braces. For example:</para>
<programlisting>
{<replaceable>expression</replaceable> | NULL}
</programlisting>
</listitem>
</varlistentry>
<varlistentry><term>…  Ellipsis</term>
<listitem><para>An ellipsis immediately following a pair of brackets
or braces indicates that you can repeat the enclosed sequence of syntax
items any number of times. For example:</para>
<programlisting>
ATTRIBUTE[S] <replaceable>attribute</replaceable> [, <replaceable
>attribute</replaceable>]...
</programlisting>
<programlisting>
{, <replaceable>sql-expression</replaceable>}...
</programlisting>
<para>An ellipsis immediately following a single syntax item indicates
that you can repeat that syntax item any number of times. For example:</para>
<programlisting>
<replaceable>expression-n</replaceable>…
</programlisting>
</listitem>
</varlistentry>
<varlistentry><term>Punctuation</term>
<listitem><para>Parentheses, commas, semicolons, and other symbols
not previously described must be typed as shown. For example:</para>
<programlisting>
DAY (<replaceable>datetime-expression</replaceable>)
</programlisting>
<programlisting>
@<replaceable>script-file</replaceable>
</programlisting>
<para>Quotation marks around a symbol such as a bracket or brace indicate
that the symbol is a required character that you must type as shown.
For example:</para>
<programlisting>
"[" ANY <replaceable>N</replaceable> "]" | "[" FIRST <replaceable
>N</replaceable> "]"
</programlisting>
<para>According to the previous syntax, you must include square brackets
around ANY and FIRST clauses (for example, <literal>[ANY 10]</literal
> or <literal>[FIRST 5]</literal>). Do not include the quotation marks.</para>
</listitem>
</varlistentry>
<varlistentry><term>Item Spacing</term>
<listitem><para>Spaces shown between items are required unless one
of the items is a punctuation symbol such as a parenthesis or a comma.
For example:</para>
<programlisting>
DAY (<replaceable>datetime-expression</replaceable>)
</programlisting>
<programlisting>
DAY(<replaceable>datetime-expression</replaceable>)
</programlisting>
<para>If no space exists between two items, spaces are not permitted.
In this example, no spaces are permitted between the period and any
other items:</para>
<programlisting>
<replaceable>myfile</replaceable>.sh
</programlisting>
</listitem>
</varlistentry>
<varlistentry><term>Line Spacing</term>
<listitem><para>If the syntax of a command is too long to fit on a
single line, each continuation line is indented three spaces and is
separated from the preceding line by a blank line. This spacing distinguishes
items in a continuation line from items in a vertical list of selections.
For example:</para>
<programlisting>
<replaceable>match-value</replaceable> [NOT] LIKE <replaceable>pattern</replaceable
> 

   [ESCAPE <replaceable>esc-char-expression</replaceable>]
</programlisting>
</listitem>
</varlistentry>
</variablelist>
</section>
</section>
<section condition="hidden" id="Related_Info">
<title>Related Information</title>
<para>This manual is part of the Trafodion documentation library. <phrase
condition="hidden">For a list of manuals available in this release,
see the <ulink
url="https://sea-wiki.hpl.hp.com/wiki/index.php/Documentation">Documentation
page in the Trafodion wiki</ulink>.</phrase></para>
</section>
<section>
<title>Publishing History</title>
<informaltable>
<tgroup cols="3">
<colspec colwidth="0.68*"/>
<colspec colwidth="1.52*"/>
<colspec colwidth="0.80*"/>
<thead>
<row><entry>Part Number</entry><entry>Product Version</entry><entry
>Publication Date</entry></row>
</thead>
<tbody>
<row><entry>T775-110-001</entry><entry><para>Trafodion Release 1.1.0</para
></entry><entry>April 2015</entry></row>
<row><entry>T775-100-001</entry><entry><para>Trafodion Release 1.0.0</para
></entry><entry>January 2015</entry></row>
<row><entry>T775-090-001</entry><entry><para>Trafodion Release 0.9.0
Beta</para></entry><entry>October 2014</entry></row>
<row><entry>T775-080-003</entry><entry><para>Trafodion Release 0.8.0
Beta</para><para>This edition of the manual includes updates to address <ulink
url="https://bugs.launchpad.net/bugs/1354228">Launchpad bug 1354228</ulink
>. See the <xref linkend="i1063425" role="select:quotedtitle page"
/>.</para></entry><entry>August 2014</entry></row>
<row><entry>T775-080-002</entry><entry><para>Trafodion Release 0.8.0
Beta</para><para>This edition of the manual includes updates to address <ulink
url="https://bugs.launchpad.net/bugs/1352479">Launchpad bug 1352479</ulink
>. See the <xref linkend="i1008894" role="select:quotedtitle page"
/>.</para></entry><entry>August 2014</entry></row>
<row><entry>T775-080-001</entry><entry>Trafodion Release 0.8.0 Beta</entry>
<entry>June 2014</entry></row>
</tbody>
</tgroup>
</informaltable>
</section>
<section>
<title>We Encourage Your Comments</title>
<para>The Trafodion community encourages your comments concerning
this document. We are committed to providing documentation that meets
your needs. Send any errors found, suggestions for improvement, or
compliments to:</para>
<para><email>trafodion-documentation@lists.launchpad.net</email></para>
<para>Include the document title, part number, and any comment, error
found, or suggestion for improvement you have concerning this document.</para>
</section>
</preface>
<chapter id="i1012274">
<title>Introduction</title>
<para>The Trafodion SQL database software allows you to use SQL statements,
which comply closely to ANSI SQL:1999, to access data in Trafodion
SQL tables, which map to HBase tables, and to access native HBase
tables<phrase> and Hive tables</phrase>.</para>
<para>This introduction describes:</para>
<itemizedlist>
<listitem><para><xref linkend="i1010744" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="SQL-Access-HBase"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="SQL-Access-Hive"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="i1009133" role="select:quotedtitle"
/></para></listitem>
<listitem condition="hidden"><para><xref linkend="i1016946"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="i1009606" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1004713" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1011471" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<para>Other sections of this manual describe the syntax and semantics
of individual statements, commands, and language elements.</para>
<section id="i1010744">
<title>SQL Language</title>
<para>The SQL language consists of statements and other language elements
that you can use to access SQL databases. For descriptions of individual
SQL statements, see <xref linkend="i1076008"
role="select:quotedtitle label page"/>.</para>
<para>SQL language elements are part of statements and commands and
include data types, expressions, functions, identifiers, literals,
and predicates. For more information, see <xref linkend="i1008163"
role="select:quotedtitle label page"/> and <xref linkend="i1004213"
role="select:quotedtitle label page"/>. For information on specific
functions and expressions, see <xref linkend="i1056860"
role="select:quotedtitle label page"/><phrase> and <xref
linkend="olapfunc" role="select:quotedtitle label page"/></phrase
>.</para>
</section>
<section id="SQL-Access-HBase">
<title>Using Trafodion SQL to Access HBase Tables</title>
<para>You can use Trafodion SQL statements to read, update, and create
HBase tables.</para>
<itemizedlist>
<listitem><para><xref linkend="Initializing-Trafodion-Metadata"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="Types-HBase-Access"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref
linkend="Comparison-TrafodionSQLTables-HBaseTables"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="Supported-SQL-HBase"
role="select:quotedtitle page"/></para></listitem>
</itemizedlist>
<para>For a list of Control Query Default (CQD) settings for the HBase
environment, see <xref linkend="HBase-CQDs"
role="select:quotedtitle page"/>.</para>
<section id="Initializing-Trafodion-Metadata">
<title>Initializing the Trafodion Metadata</title>
<para>Before using SQL statements for the first time to access HBase
tables, you will need to initialize the Trafodion metadata. To initialize
the Trafodion metadata, run this command:</para>
<programlisting>initialize trafodion;</programlisting>
</section>
<section id="Types-HBase-Access">
<title>Ways to Access HBase Tables</title>
<para>Trafodion SQL supports these ways to access HBase tables:</para>
<itemizedlist>
<listitem><para><xref linkend="Accessing-Trafodion-SQL-Tables"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="Cell-Per-Row-Access-HBase"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="Rowwise-Access-HBase"
role="select:quotedtitle page"/></para></listitem>
</itemizedlist>
<section id="Accessing-Trafodion-SQL-Tables">
<title>Accessing Trafodion SQL Tables</title>
<para>A Trafodion SQL table is a relational SQL table generated by
a CREATE TABLE statement and mapped to an HBase table. Trafodion SQL
tables have regular ANSI names in the catalog TRAFODION. A Trafodion
SQL table name can be a fully qualified ANSI name of the form <literal
>TRAFODION.<replaceable>schema-name.object-name</replaceable></literal
>. </para>
<para>To access a Trafodion SQL table, specify its ANSI table name
in a Trafodion SQL statement, similar to how you would specify an
ANSI table name when running SQL statements in a relational database.
For example:</para>
<programlisting>CREATE TABLE trafodion.sales.odetail
  ( ordernum NUMERIC (6) UNSIGNED NO DEFAULT NOT NULL,
    partnum NUMERIC (4) UNSIGNED NO DEFAULT NOT NULL,
    unit_price NUMERIC (8,2) NO DEFAULT NOT NULL,
    qty_ordered NUMERIC (5) UNSIGNED NO DEFAULT NOT NULL,
    PRIMARY KEY (ordernum, partnum) );

INSERT INTO trafodion.sales.odetail VALUES ( 900000, 7301, 425.00, 100 );

SET SCHEMA trafodion.sales;
SELECT * FROM odetail;</programlisting>
<para>For more information about Trafodion SQL tables, see <xref
linkend="Comparison-TrafodionSQLTables-HBaseTables"
role="select:quotedtitle page"/> and <xref linkend="i1019224"
role="select:quotedtitle page"/>.</para>
</section>
<section id="Cell-Per-Row-Access-HBase">
<title>Cell-Per-Row Access to HBase Tables (Technology Preview)</title>
<note>
<para>This is a <emphasis>Technology Preview (Complete But Not Tested)</emphasis
> feature, meaning that it is functionally complete but has not been
tested or debugged. For more information about what <emphasis>Technology
Preview</emphasis> means, see the <ulink
url="https://wiki.trafodion.org/wiki/index.php/Technology_Preview_Features"
>Technology Preview Features</ulink> page on the Trafodion wiki.</para>
</note>
<para>To access HBase data using cell-per-row mode, specify the schema <literal
>HBASE."_CELL_"</literal> and the full ANSI name of the table as a
delimited table name. You can specify the name of any HBase table,
regardless of whether it was created through Trafodion SQL. For example:</para>
<programlisting>select * from hbase."_CELL_"."TRAFODION.MYSCH.MYTAB";
select * from hbase."_CELL_"."table_created_in_HBase";</programlisting>
<para>All tables accessed through this schema have the same column
layout:</para>
<programlisting>>>invoke hbase."_CELL_"."table_created_in_HBase";
  (
    ROW_ID            VARCHAR(100)  ...
  , COL_FAMILY        VARCHAR(100)  ...
  , COL_NAME          VARCHAR(100)  ...
  , COL_TIMESTAMP     LARGEINT      ...
  , COL_VALUE         VARCHAR(1000) ...
  )
  PRIMARY KEY (ROW_ID)
>>select * from hbase."_CELL_"."mytab";</programlisting>
</section>
<section id="Rowwise-Access-HBase">
<title>Rowwise Access to HBase Tables (Technology Preview)</title>
<note>
<para>This is a <emphasis>Technology Preview (Complete But Not Tested)</emphasis
> feature, meaning that it is functionally complete but has not been
tested or debugged.  For more information about what <emphasis>Technology
Preview</emphasis> means, see the <ulink
url="https://wiki.trafodion.org/wiki/index.php/Technology_Preview_Features"
>Technology Preview Features</ulink> page on the Trafodion wiki.</para>
</note>
<para>To access HBase data using rowwise mode, specify the schema <literal
>HBASE."_ROW_"</literal> and the full ANSI name of the table as a
delimited table name. You can specify the name of any HBase table,
regardless of whether it was created through Trafodion SQL. For example:</para>
<programlisting>select * from hbase."_ROW_"."TRAFODION.MYSCH.MYTAB";
select * from hbase."_ROW_"."table_created_in_HBase";</programlisting>
<para>All column values of the row are returned as a single, big varchar:</para>
<programlisting>>>invoke hbase."_ROW_"."mytab";
  (
    ROW_ID            VARCHAR(100)   ...
  , COLUMN_DETAILS    VARCHAR(10000) ...
  )
  PRIMARY KEY (ROW_ID)
>>select * from hbase."_ROW_"."mytab";</programlisting>
</section>
</section>
<section id="Comparison-TrafodionSQLTables-HBaseTables">
<title>Trafodion SQL Tables Versus Native HBase Tables</title>
<para>Trafodion SQL tables have many advantages over regular HBase
tables:</para>
<itemizedlist>
<listitem><para>They can be made to look like regular, structured
SQL tables with fixed columns.</para></listitem>
<listitem><para>They support the usual SQL data types supported in
relational databases.</para></listitem>
<listitem><para>They support compound keys, unlike HBase tables that
have a single row key (a string).</para></listitem>
<listitem><para>They support indexes.</para></listitem>
<listitem><para>They support <emphasis>salting</emphasis>, which is
a technique of adding a hash value of the row key as a key prefix
to avoid hot spots for sequential keys. For the syntax, see the <xref
linkend="i1063425" role="select:quotedtitle page"/>.</para></listitem>
</itemizedlist>
<para>The problem with Trafodion SQL tables is that they use a fixed
format to represent column values, making it harder for native HBase
applications to access them. Also, they have a fixed structure, so
users lose the flexibility of dynamic columns that comes with HBase.</para>
</section>
<section id="Supported-SQL-HBase">
<title>Supported SQL Statements With HBase Tables</title>
<para>You can use these SQL statements with HBase tables:</para>
<itemizedlist>
<listitem><para><xref linkend="i1008894" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="i1008135" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="i1073628" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="i1007032" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="i1062270" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="GET-Statement"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="INVOKE-Statement"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="i1004893" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="i1075725" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="i1063425" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="i1076221" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="i1007408" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="i1007625" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="i1007707" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="i1068219" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="i1059131" role="select:quotedtitle page"
/></para></listitem>
</itemizedlist>
</section>
</section>
<section id="SQL-Access-Hive">
<title>Using Trafodion SQL to Access Hive Tables</title>
<para>You can use Trafodion SQL statements to access Hive tables.</para>
<itemizedlist>
<listitem><para><xref linkend="ANSI-Names-Hive-Tables"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="Type-Mapping-Hive"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="Supported-SQL-Hive"
role="select:quotedtitle page"/></para></listitem>
</itemizedlist>
<para>For a list of Control Query Default (CQD) settings for the Hive
environment, see <xref linkend="Hive-CQDs"
role="select:quotedtitle page"/>.</para>
<section id="ANSI-Names-Hive-Tables">
<title>ANSI Names for Hive Tables</title>
<para>Hive tables appear in the Trafodion Hive ANSI namespace in a
special catalog and schema named HIVE.HIVE. <phrase condition="hidden"
>You can change those default catalog and schema names using the HIVE_CATALOG
and HIVE_DEFAULT_SCHEMA CQDs. For more information, see <xref
linkend="Hive-CQDs" role="select:quotedtitle page"/>.</phrase> </para>
<para>To select from a Hive table named T, <phrase condition="hidden"
>set the CQD MODE_SEAHIVE to ‘ON’ and </phrase>specify an implicit
or explicit name, such as HIVE.HIVE.T, in a Trafodion SQL statement.
This example should work if a Hive table named T has already been
defined:</para>
<programlisting>set schema hive.hive;
<literal condition="hidden">cqd mode_seahive 'ON'; -- turns on Hive functionality
</literal>cqd hive_max_string_length '20'; -- creates a more readable display
select * from t; -- implicit table name
set schema trafodion.seabase;
select * from hive.hive.t; -- explicit table name</programlisting>
</section>
<section id="Type-Mapping-Hive">
<title>Type Mapping From Hive to Trafodion SQL</title>
<para>Trafodion performs the following data-type mappings:</para>
<informaltable frame="all">
<tgroup cols="2" colsep="1" rowsep="1">
<colspec colname="col1"/>
<colspec colname="col2"/>
<thead>
<row rowsep="1" valign="bottom"><entry align="left" valign="bottom"
>Hive Type</entry><entry align="left" valign="bottom">Trafodion SQL
Type</entry></row>
</thead>
<tbody>
<row><entry>tinyint</entry><entry>smallint</entry></row>
<row><entry>smallint</entry><entry>smallint</entry></row>
<row><entry>int</entry><entry>int</entry></row>
<row><entry>bigint</entry><entry>largeint</entry></row>
<row><entry>string</entry><entry>varchar(<replaceable>n</replaceable
> bytes) character set utf8<footnote>
<para>The value <replaceable>n</replaceable> is determined by CQD
HIVE_MAX_STRING_LENGTH. <phrase condition="hidden">When CQD HIVE_DEFAULT_CHARSET
is set to "ISO88591", Trafodion uses VARCHAR(<replaceable>n</replaceable
>) CHARACTER SET ISO88591 instead. </phrase>See <xref
linkend="Hive-CQDs" role="select:quotedtitle page"/>.</para>
</footnote></entry></row>
<row><entry>float</entry><entry>real</entry></row>
<row><entry>double</entry><entry>float(54)</entry></row>
<row><entry>timestamp</entry><entry>timestamp(6)<footnote>
<para>Hive supports timestamps with nanosecond resolution (precision
of 9). Trafodion SQL supports only microsecond resolution (precision
6).</para>
</footnote></entry></row>
</tbody>
</tgroup>
</informaltable>
</section>
<section id="Supported-SQL-Hive">
<title>Supported SQL Statements With Hive Tables</title>
<para>You can use these SQL statements with Hive tables:</para>
<itemizedlist>
<listitem><para><xref linkend="i1008894" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="LOAD-Statement"
role="select:quotedtitle page"/></para></listitem>
<listitem condition="hidden"><para>INSERT OVERWRITE TABLE (Hive only)</para>
</listitem>
<listitem><para>GET TABLES (See the <xref linkend="GET-Statement"
role="select:quotedtitle page"/>.)</para></listitem>
<listitem><para><xref linkend="INVOKE-Statement"
role="select:quotedtitle page"/></para></listitem>
</itemizedlist>
</section>
</section>
<section id="i1009133">
<title>Data Consistency and Access Options</title>
<indexterm><primary>Access options</primary><secondary>DML statements
use of</secondary></indexterm>
<para>Access options for DML statements affect the consistency of
the data that your query accesses.</para>
<para>For any DML statement, you specify access options by using the <literal
>FOR <replaceable>option</replaceable> ACCESS</literal> clause and,
for a SELECT statement, by using this same clause, you can also specify
access options for individual tables and views referenced in the FROM
clause. </para>
<indexterm><primary>Access options</primary><secondary
sortas="[Access options:000">summary of</secondary></indexterm>
<para>The possible settings for <replaceable>option</replaceable> in
a DML statement are:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<tbody>
<row><entry><indexterm><primary>READ COMMITTED</primary></indexterm
><xref linkend="i1029337" role="select:quotedtitle"/></entry><entry
>Specifies that the data accessed by the DML statement must be from
committed rows. </entry></row>
<row condition="hidden"><entry><indexterm><primary>READ UNCOMMITTED</primary>
</indexterm><xref linkend="i1017046" role="select:quotedtitle"/></entry>
<entry>Specifies that the data accessed by the SELECT statement need
not be from committed rows. </entry></row>
<row condition="hidden"><entry><xref linkend="i1004457"
role="select:quotedtitle"/></entry><entry>Specifies that the DML statement
and any concurrent process (accessing the same data) execute as if
the statement and the other process had run serially rather than concurrently. </entry>
</row>
<row condition="hidden"><entry><xref linkend="i1010828"
role="select:quotedtitle"/></entry><entry>Allows transactions to skip
rows locked in a conflicting mode by another transaction. SKIP CONFLICT
cannot be used in a SET TRANSACTION statement.</entry></row>
</tbody>
</tgroup>
</informaltable>
<para>The SQL default access option for DML statements is READ COMMITTED. </para>
<para condition="hidden">The implementation for <indexterm><primary
>REPEATABLE READ</primary><secondary>and SERIALIZABLE</secondary>
</indexterm>REPEATABLE READ and SERIALIZABLE access options is equivalent. </para>
<para>For related information about transactions, see <xref
linkend="i1012239" role="select:quotedtitle page"/>.</para>
<section condition="hidden" id="i1017046">
<title>READ UNCOMMITTED</title>
<para><indexterm><primary>Access options</primary><secondary>READ
UNCOMMITTED </secondary></indexterm>This option enables you to access
locked data. READ UNCOMMITTED is not available for DML statements
that modify the database. It is available only for a SELECT statement. </para>
<para>READ UNCOMMITTED provides the lowest level of data consistency.
A SELECT statement executing with this access option is allowed to:</para>
<itemizedlist>
<listitem><para>Read data modified by a concurrent process (sometimes
called <replaceable>dirty reads</replaceable>)</para></listitem>
<listitem><para>Read different committed values for the same item
at different times or find that the item no longer exists (sometimes
called <replaceable>nonrepeatable reads</replaceable>)</para></listitem>
<listitem><para>Read different sets of committed values satisfying
the same predicate at different times (sometimes called <replaceable
>phantoms</replaceable>)</para></listitem>
</itemizedlist>
</section>
<section id="i1029337">
<title>READ COMMITTED</title>
<para><indexterm><primary>Access options</primary><secondary>READ
COMMITTED</secondary></indexterm><indexterm><primary>Locking</primary>
<secondary>READ COMMITTED access option</secondary></indexterm>This
option allows you to access only committed data.</para>
<para>The implementation requires that a lock can be acquired on the
data requested by the DML statement—but does not actually lock the
data, thereby reducing lock request conflicts. If a lock cannot be
granted (implying that the row contains uncommitted data), the DML
statement request waits until the lock in place is released.</para>
<para>READ COMMITTED provides the next higher level of data consistency
(compared to READ UNCOMMITTED). A statement executing with this access
option does not allow dirty reads, but both nonrepeatable reads and
phantoms are possible.</para>
<para>READ COMMITTED provides sufficient consistency for any process
that does not require a repeatable read capability.</para>
<para>READ COMMITTED is the default isolation level.</para>
</section>
<section condition="hidden" id="i1004457">
<title>SERIALIZABLE or REPEATABLE READ</title>
<para><indexterm><primary>Access options</primary><secondary>SERIALIZABLE</secondary>
</indexterm>This option locks<indexterm><primary>Locking</primary>
<secondary>SERIALIZABLE access option</secondary></indexterm> all
data accessed through the DML statement and holds the locks on data
in tables until the end of any containing transaction.<indexterm>
<primary>Locking</primary><secondary>REPEATABLE READ access option</secondary>
</indexterm> </para>
<para><indexterm><primary>SERIALIZABLE</primary></indexterm>SERIALIZABLE<indexterm>
<primary>Isolation levels</primary><secondary>SERIALIZABLE</secondary>
</indexterm> (or REPEATABLE READ) <indexterm><primary>Access options</primary>
<secondary>REPEATABLE READ</secondary></indexterm>provides the highest
level of data consistency. A statement executing with this access
option does not allow dirty reads, nonrepeatable reads, or phantoms.</para>
</section>
<section condition="hidden" id="i1010828">
<title>SKIP CONFLICT</title>
<para><indexterm><primary>Access options</primary><secondary>SKIP
CONFLICT</secondary></indexterm>This option allows transactions to
skip rows locked in a conflicting mode by another transaction. <indexterm>
<primary>SKIP CONFLICT</primary><secondary>publish/subscribe</secondary>
</indexterm>SKIP CONFLICT is not supported at the transaction level.
It can only be specified at the table or statement level. </para>
</section>
</section>
<section condition="hidden" id="i1016946">
<title>Database Integrity and Locking</title>
<para>To protect the integrity of the database, Trafodion SQL provides
locks on data. For example, Trafodion SQL locks a row when an executing
process accesses a row to modify it. The lock ensures that no other
process simultaneously modifies the same row. </para>
<para>Default locking normally protects data but reduces concurrency.
If your application has problems with lock contention, you might want
to use options that control the characteristics of locks.</para>
<para>Locks have these characteristics:</para>
<itemizedlist>
<listitem><para><xref linkend="i1004512" role="select:quotedtitle"
/> (short or long)</para></listitem>
<listitem><para><xref linkend="i1029444" role="select:quotedtitle"
/> (table lock, subset of rows, or single row) </para></listitem>
<listitem><para><xref linkend="i1004527" role="select:quotedtitle"
/> (exclusive, shared, no lock)</para></listitem>
<listitem><para><xref linkend="i1004541" role="select:quotedtitle"
/> (transaction or process)</para></listitem>
</itemizedlist>
<section id="i1004512">
<title>Lock Duration</title>
<para><indexterm><primary>Locking</primary><secondary>duration</secondary>
</indexterm>Lock duration controls how long a lock is held. You can
specify lock duration for only the read portion of a statement. <indexterm>
<primary>Access options</primary><secondary>SERIALIZABLE</secondary>
</indexterm>You can use the LOCK TABLE statement to lock a table.
Lock duration is also affected by whether you <indexterm><primary
>SERIALIZABLE</primary></indexterm>choose the <indexterm><primary
>Isolation levels</primary><secondary>SERIALIZABLE</secondary>
</indexterm>SERIALIZABLE<indexterm><primary>Locking</primary><secondary
>SERIALIZABLE access option</secondary></indexterm> access option<indexterm>
<primary>Locking</primary><secondary>SERIALIZABLE access option</secondary>
</indexterm> for DML statements. This access option causes the maximum
lock duration.</para>
</section>
<section id="i1029444">
<title>Lock Granularity</title>
<para><indexterm><primary>Locking</primary><secondary>granularity</secondary>
</indexterm>Lock granularity controls the number of rows affected
by a single lock. The level of granularity can be a table, a subset
of rows, or a single row.</para>
<para>You can control locks for the entire table with the LOCK TABLE
statement. Otherwise, Trafodion SQL determines the granularity by
considering the access option you specify, the table size and definition,
and the estimated percentage of rows the query will access.</para>
<para>Trafodion SQL can automatically increase the granularity of
locks for a particular volume per transaction, depending on processing
requirements. This increase in granularity is called lock escalation. </para>
<para>Trafodion SQL can automatically increase the granularity of
locks for a particular table partition, depending on processing requirements.
This increase in granularity is called <indexterm><primary>Locking</primary>
<secondary>escalation</secondary></indexterm>lock escalation. The
number of locks before escalation is about 8,000, provided no conflicting
lock exists. If a conflicting lock exists, escalation will occur anywhere
between 8,000 and 100,000, at about 8,000 lock increments. If the
lock conflict prevents lock escalation when the transaction hits the
volume lock limit, or the volume lock table space is exhausted, locking
errors will result. </para>
</section>
<section id="i1004527">
<title>Lock Mode</title>
<para><indexterm><primary>Locking</primary><secondary>modes</secondary>
</indexterm>Lock mode controls access to locked data. You can specify
lock mode only for rows that are read.</para>
<para><indexterm><primary>SHARE lock mode</primary></indexterm>SHARE
lock mode allows multiple users to lock and read the same data. <indexterm>
<primary>Locking</primary><secondary>EXCLUSIVE lock mode</secondary>
</indexterm>EXCLUSIVE lock<indexterm><primary>EXCLUSIVE lock mode</primary>
</indexterm><indexterm><primary>Locking</primary><secondary>SHARE
lock mode</secondary></indexterm>mode limits access to locked data
to the lock holder and to other users who specify READ UNCOMMITTED
(but not READ COMMITTED or SERIALIZABLE) access. Lock modes are the
same when you choose READ COMMITTED or SERIALIZABLE access.</para>
<para>Lock mode is sometimes determined by Trafodion SQL. SQL ensures
that an exclusive lock is in effect for write operations and usually
acquires a shared lock for operations that access data without modifying
it. You choose lock mode in these instances: </para>
<itemizedlist>
<listitem><para>On the <indexterm><primary>Locking</primary><secondary
>LOCK TABLE statement</secondary></indexterm>LOCK TABLE statement,
you can choose EXCLUSIVE or SHARE. </para></listitem>
<listitem><para>On the <indexterm><primary>Locking</primary><secondary
>SELECT statement</secondary></indexterm>SELECT statement, you can
specify IN EXCLUSIVE MODE or IN SHARE MODE.</para></listitem>
</itemizedlist>
</section>
<section id="i1004541">
<title>Lock Holder</title>
<para><indexterm><primary>Locking</primary><secondary>holder</secondary>
</indexterm><indexterm><primary>Locking</primary><secondary>release
of</secondary></indexterm>Only the lock holder can release a lock.
A transaction releases the locks it holds at the end of the transaction
in either of these cases:</para>
<itemizedlist>
<listitem><para>Locks on data read using SERIALIZABLE access</para>
</listitem>
<listitem><para>Locks on rows updated</para></listitem>
</itemizedlist>
</section>
</section>
<section id="i1009606">
<title>Transaction Management</title>
<para>A transaction (a set of database changes that must be completed
as a group) is the basic recoverable unit in case of a failure or
transaction interruption. Transactions are controlled through client
tools that interact with the database using ODBC or JDBC. The typical
order of events is: </para>
<procedure>
<step><para>Transaction is started.</para></step>
<step><para>Database changes are made.</para></step>
<step><para>Transaction is committed.</para></step>
</procedure>
<para>If, however, the changes cannot be made or if you do not want
to complete the transaction, you can abort the transaction so that
the database is rolled back to its original state.</para>
<para>This subsection discusses these considerations for transaction
management:</para>
<itemizedlist>
<listitem condition="hidden"><para><xref linkend="i1017673"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="i1009642" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="i1009675" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="i1009687" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="i1027603" role="select:quotedtitle page"
/></para></listitem>
<listitem condition="hidden"><para><xref linkend="i1026505"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="i1012239" role="select:quotedtitle page"
/></para></listitem>
<listitem condition="hidden"><para><xref linkend="transrollback"
role="select:quotedtitle page"/></para></listitem>
</itemizedlist>
<section condition="hidden" id="i1017673">
<title>Statement Atomicity</title>
<indexterm><primary>Statement atomicity</primary><secondary>description
of</secondary></indexterm>
<para>To maintain database consistency, transactions must be controlled
so that they complete successfully or are aborted. SQL does not automatically
abort transactions unless something changed that requires work to
be rolled back, such as a network problem in the middle of updating
a row. </para>
<para>SQL guarantees that an individual SQL statement within a transaction
completes successfully or has no effect on the database. </para>
<indexterm><primary>Statement atomicity</primary><secondary>automatic</secondary>
</indexterm>
<para>When an INSERT, UPDATE, or DELETE statement encounters an error,
that transaction is not aborted, but continues. The effect of the
SQL statement is rolled back, so the statement has no effect on the
database, but the transaction is not aborted. </para>
<para>Statement atomicity is met if these conditions are met:<itemizedlist>
<listitem><para>The UPD_ABORT_ON_ERROR default must be set to OFF
(the default).</para></listitem>
<listitem><para>The underlying table must not have referential integrity
constraints.</para></listitem>
<listitem><para>The SQL query is not:<itemizedlist>
<listitem><para>A publish/subscribe query with stream access</para>
</listitem>
<listitem><para>A CALL statement</para></listitem>
<listitem><para>A holdable cursor</para></listitem>
<listitem><para>A SELECT statement with an embedded UPDATE or DELETE</para>
</listitem>
<listitem><para>A DDL statement</para></listitem>
<listitem><para>An UPDATE STATISTICS statement</para></listitem>
</itemizedlist></para></listitem>
<listitem><para>The query plan does not choose VSBB inserts or use
Executor Server Process (ESP) parallelism.</para></listitem>
<listitem><para>The AUTOCOMMIT option must be set to ON.</para>
</listitem>
</itemizedlist></para>
<para>If these conditions are not met, the transaction is aborted
by Trafodion SQL if a failure occurs. This behavior occurs for all
INSERT, UPDATE, or DELETE statements in Trafodion SQL.</para>
</section>
<section id="i1009642">
<title>User-Defined and System-Defined Transactions</title>
<section>
<title>User-Defined Transactions</title>
<indexterm><primary>Transaction management</primary></indexterm>
<para>Transactions you define are called <emphasis>user-defined transactions</emphasis
>. To be sure that a sequence of statements executes successfully
or not at all, you can define one transaction consisting of these
statements by using the BEGIN WORK statement and COMMIT WORK statement.
You can abort a transaction by using the ROLLBACK WORK statement.
If AUTOCOMMIT is on, you do not have to end the transaction explicitly
as Trafodion SQL will end the transaction automatically. Sometimes
an error occurs that requires the user-defined transaction to be aborted.
Trafodion SQL will automatically abort the transaction and return
an error indicating that the transaction was rolled back.</para>
</section>
<section>
<title>System-Defined Transactions</title>
<para>In some cases, Trafodion SQL defines transactions for you. These
transactions are called <emphasis>system-defined transactions</emphasis
>. Most DML statements initiate transactions implicitly at the start
of execution. See <xref linkend="i1010466"
role="select:quotedtitle page"/>. However, even if a transaction is
initiated implicitly, you must end a transaction explicitly with the
COMMIT WORK statement or the ROLLBACK WORK statement. If AUTOCOMMIT
is on, you do not need to end a transaction explicitly.</para>
</section>
</section>
<section id="i1009675">
<title>Rules for DML Statements</title>
<indexterm><primary>Transaction management</primary><secondary>rules
for DML statements</secondary></indexterm>
<para>If deadlock occurs, the DML statement times out and receives
an error.</para>
</section>
<section id="i1009687">
<title>Effect of AUTOCOMMIT Option</title>
<indexterm><primary>Transaction management</primary><secondary>AUTOCOMMIT,
effect of</secondary></indexterm>
<para>AUTOCOMMIT is an option that can be set in a SET TRANSACTION
statement. It specifies whether Trafodion SQL will commit automatically,
or roll back if an error occurs, at the end of statement execution.
This option applies to any statement for which the system initiates
a transaction. See <xref linkend="i1010391"
role="select:quotedtitle page"/>.</para>
<para>If this option is set to ON, Trafodion SQL automatically commits
any changes, or rolls back any changes, made to the database at the
end of statement execution.</para>
</section>
<section id="i1027603">
<title>Concurrency</title>
<indexterm><primary>Concurrency</primary><secondary>description of</secondary>
</indexterm>
<para>Concurrency is defined by two or more processes accessing the
same data at the same time. The degree of concurrency available—whether
a process that requests access to data that is already being accessed
is given access or placed in a wait queue—depends on the purpose of
the access mode (read or update) and the isolation level. <phrase
>Currently, the only isolation level is READ COMMITTED.</phrase></para>
<para>Trafodion SQL provides concurrent database access for most operations
and controls database access through <phrase>concurrency control </phrase
><phrase condition="hidden">the mechanism for locking </phrase>and
the mechanism for opening and closing tables. For DML operations, <phrase
condition="hidden">access and locking options affect</phrase><phrase
>the access option affects</phrase> the degree of concurrency. See <xref
linkend="i1009133" role="select:quotedtitle page"/><phrase
condition="hidden">, <xref linkend="i1016946"
role="select:quotedtitle page"/>,</phrase><phrase condition="hidden"
> and <xref linkend="i1010391" role="select:quotedtitle page"/></phrase
>.</para>
<para condition="hidden">The following tables describe interactions
between SQL operations.</para>
<para condition="hidden"><xref linkend="i1028996" role="select:label"
/> compares operations with access modes and lists DDL and Utility
operations you can start while DML operations are in progress.</para>
<table condition="hidden" id="i1028996">
<title>Concurrent DDL/Utility Operation and File Access Modes</title>
<tgroup cols="4" tgroupstyle="TF  formal table">
<colspec/>
<colspec colname="COLSPEC2"/>
<colspec colname="COLSPEC0"/>
<colspec colname="COLSPEC1"/>
<thead>
<row><entry></entry><entry align="center" colsep="1" nameend="COLSPEC1"
namest="COLSPEC2">Access Mode</entry></row>
<row><entry>DDL Operations You Can Start</entry><entry>READ UNCOMMITTED</entry>
<entry>READ COMMITTED</entry><entry>SERIALIZABLE</entry></row>
</thead>
<tbody>
<row><entry>ALTER TABLE attributes</entry><entry>Allowed<footnote
id="access_mode">
<para>DDL operation aborts the DML operation.</para>
</footnote></entry><entry>Allowed<footnoteref linkend="access_mode"
/></entry><entry>Waits</entry></row>
</tbody>
</tgroup>
</table>
<para condition="hidden"><xref linkend="i1026195" role="select:label"
/> compares DDL and utility operations with DML operations and shows
DDL operations you can start while DML operations are in progress:</para>
<table condition="hidden" id="i1026195">
<title>Concurrent DDL/Utility and DML Operations</title>
<tgroup cols="5" tgroupstyle="TF  formal table">
<colspec/>
<colspec colname="COLSPEC4"/>
<colspec colname="COLSPEC2"/>
<colspec/>
<colspec colname="COLSPEC3"/>
<thead>
<row><entry></entry><entry align="center" colsep="1" nameend="COLSPEC3"
namest="COLSPEC4">DML Operation in Progress</entry></row>
<row><entry>DDL Operations You Can Start</entry><entry>SELECT UNCOMMITTED</entry>
<entry>SELECT SHARE</entry><entry>SELECT EXCLUSIVE</entry><entry>UPDATE/
INSERT/ DELETE</entry></row>
</thead>
<tbody>
<row><entry>ALTER TABLE attributes</entry><entry>Allowed<footnote
id="ddl_abort">
<para>DDL operation aborts the DML operation.</para>
</footnote></entry><entry>Allowed</entry><entry>Allowed</entry><entry
>Allowed</entry></row>
<row><entry>ALTER TABLE other</entry><entry>Allowed<footnoteref
linkend="ddl_abort"/></entry><entry>Waits</entry><entry>Waits</entry>
<entry>Waits</entry></row>
<row><entry>CREATE INDEX<phrase condition="hidden"> with POPULATE</phrase
></entry><entry>Allowed<footnoteref linkend="ddl_abort"/></entry><entry
>Allowed</entry><entry>Waits</entry><entry>Waits</entry></row>
<row condition="hidden"><entry>CREATE INDEX NO POPULATE</entry><entry
>Allowed</entry><entry>Allowed</entry><entry>Allowed</entry><entry
>Allowed</entry></row>
<row condition="hidden"><entry>CREATE TRIGGER subject table</entry>
<entry>Allowed</entry><entry>Allowed</entry><entry>Waits</entry><entry
>Waits</entry></row>
<row condition="hidden"><entry>CREATE TRIGGER referenced table</entry>
<entry>Allowed</entry><entry>Allowed</entry><entry>Allowed</entry>
<entry>Allowed</entry></row>
<row><entry>CREATE VIEW</entry><entry>Allowed</entry><entry>Allowed</entry>
<entry>Allowed</entry><entry>Allowed</entry></row>
<row><entry>GRANT</entry><entry>Allowed<footnoteref linkend="ddl_abort"
/></entry><entry>Waits</entry><entry>Waits</entry><entry>Waits</entry>
</row>
<row><entry>POPULATE INDEX</entry><entry>Allowed<footnoteref
linkend="ddl_abort"/></entry><entry>Allowed<footnoteref linkend="allow"
/></entry><entry>Allowed<footnoteref linkend="allow"/></entry><entry
>Waits</entry></row>
<row><entry>REVOKE</entry><entry>Allowed<footnoteref linkend="ddl_abort"
/></entry><entry>Allowed</entry><entry>Waits</entry><entry>Waits</entry>
</row>
<row><entry>UPDATE STATISTICS</entry><entry>Allowed</entry><entry
>Allowed</entry><entry>Allowed</entry><entry>Allowed<footnote id="allow">
<para>Allowed except during commit phase.</para>
</footnote></entry></row>
</tbody>
</tgroup>
</table>
<para condition="hidden"><xref linkend="i1026125" role="select:label"
/> compares DML operations you can start when DDL operations are in
progress:</para>
<table condition="hidden" id="i1026125">
<title>Concurrent DML and DDL Operations </title>
<tgroup cols="5" tgroupstyle="TF  formal table">
<colspec/>
<colspec colname="COLSPEC6"/>
<colspec colname="COLSPEC4"/>
<colspec/>
<colspec colname="COLSPEC5"/>
<thead>
<row><entry></entry><entry align="center" colsep="1" nameend="COLSPEC5"
namest="COLSPEC6">DML Operations You Can Start</entry></row>
<row><entry>DDL Operations in Progress</entry><entry align="center"
>SELECT UNCOMMITTED</entry><entry align="center">SELECT SHARE</entry>
<entry align="center">SELECT EXCLUSIVE</entry><entry align="center"
>UPDATE/ INSERT DELETE</entry></row>
</thead>
<tbody>
<row><entry>ALTER TABLE attributes</entry><entry>Allowed<footnote
id="DDL2_abort">
<para>DDL operation aborts the DML operation.</para>
</footnote></entry><entry>Allowed</entry><entry>Allowed</entry><entry
>Allowed</entry></row>
<row><entry>ALTER TABLE other</entry><entry>Allowed<footnoteref
linkend="DDL2_abort"/></entry><entry>Waits</entry><entry>Waits</entry>
<entry>Waits</entry></row>
<row><entry>CREATE INDEX <phrase condition="hidden">with POPULATE</phrase
></entry><entry>Allowed<footnoteref linkend="DDL2_abort"/></entry>
<entry>Allowed</entry><entry>Waits</entry><entry>Waits</entry></row>
<row condition="hidden"><entry>CREATE INDEX NO POPULATE</entry><entry
>Allowed</entry><entry>Allowed</entry><entry>Allowed</entry><entry
>Allowed</entry></row>
<row condition="hidden"><entry>CREATE TRIGGER subject table</entry>
<entry>Allowed</entry><entry>Allowed</entry><entry>Waits</entry><entry
>Waits</entry></row>
<row condition="hidden"><entry>CREATE TRIGGER reference table</entry>
<entry>Allowed</entry><entry>Allowed</entry><entry>Allowed</entry>
<entry>Allowed</entry></row>
<row><entry>CREATE VIEW</entry><entry>Allowed</entry><entry>Allowed</entry>
<entry>Allowed</entry><entry>Allowed</entry></row>
<row><entry>GRANT</entry><entry>Allowed<footnoteref linkend="DDL2_abort"
/></entry><entry>Waits</entry><entry>Waits</entry><entry>Waits</entry>
</row>
<row><entry>POPULATE INDEX</entry><entry>Allowed<footnoteref
linkend="DDL2_abort"/></entry><entry>Allowed<footnoteref
linkend="allow2"/></entry><entry>Allowed<footnoteref linkend="allow2"
/></entry><entry>Waits</entry></row>
<row><entry>REVOKE</entry><entry>Allowed<footnoteref
linkend="DDL2_abort"/></entry><entry>Allowed</entry><entry>Waits</entry>
<entry>Waits</entry></row>
<row><entry>UPDATE STATISTICS</entry><entry>Allowed</entry><entry
>Allowed</entry><entry>Allowed</entry><entry>Allowed<footnote
id="allow2">
<para>Allowed except during commit phase.</para>
</footnote></entry></row>
</tbody>
</tgroup>
</table>
<para condition="hidden"><xref linkend="i1022778" role="select:label"
/> describes the effect of various DDL and utility operations on table
timestamps:</para>
<table condition="hidden" id="i1022778">
<title>Operations Effect on Table Timestamps </title>
<tgroup cols="2" tgroupstyle="TF  formal table">
<thead>
<row><entry>Alter Operation</entry><entry>Timestamp Updated</entry>
</row>
</thead>
<tbody>
<row><entry>ALTER TABLE</entry><entry>Yes, if you add columns or add
or drop constraints No, if you change attributes</entry></row>
<row condition="hidden"><entry>ALTER TRIGGER</entry><entry>No</entry>
</row>
<row><entry>CREATE CATALOG</entry><entry>No</entry></row>
<row><entry>CREATE INDEX</entry><entry>Yes, if populated</entry></row>
<row><entry>CREATE SCHEMA</entry><entry>No</entry></row>
<row><entry>CREATE TABLE</entry><entry>No</entry></row>
<row condition="hidden"><entry>CREATE TRIGGER</entry><entry>Yes, of
the table on which the trigger is defined</entry></row>
<row><entry>CREATE VIEW</entry><entry>No</entry></row>
<row><entry>GRANT</entry><entry>No</entry></row>
<row><entry>POPULATE INDEX</entry><entry>Yes</entry></row>
<row><entry>PURGEDATA</entry><entry>Yes</entry></row>
<row><entry>REVOKE</entry><entry>No</entry></row>
<row><entry>UPDATE STATISTICS</entry><entry>No</entry></row>
</tbody>
</tgroup>
</table>
</section>
<section condition="hidden" id="i1026505">
<title>Transaction Access Modes</title>
<para>A transaction has an access mode that is READ ONLY or READ WRITE.
You can set the access mode of a transaction by using a SET TRANSACTION
statement. See <xref linkend="i1010391" role="select:quotedtitle page"
/>.</para>
<section>
<title>READ ONLY</title>
<para>If a transaction is executing with the READ ONLY access mode,
statements within the transaction can read, but cannot insert, delete,
or update, data in tables. This restriction means that among the DML
statements, only the SELECT statement can execute within that transaction.
DDL statements are not permitted in a READ ONLY transaction.</para>
<para>If the transaction isolation level is READ UNCOMMITTED, the
default access mode is READ ONLY. For READ COMMITTED, the default
access mode is not READ ONLY, but you can specify READ ONLY by using
the SET TRANSACTION statement.</para>
<para>READ ONLY transactions:</para>
<itemizedlist>
<listitem><para>Will not write anything into the transaction log</para>
</listitem>
<listitem><para>Will not abort if they extend beyond the system configured
auto abort interval</para></listitem>
<listitem><para>Will not pin the transaction log</para></listitem>
</itemizedlist>
<para>When AUTOCOMMIT is ON, the <phrase>database engine</phrase> automatically
uses READ ONLY transactions for select statements. This could reduce
concurrency if the select statement is long-running and the isolation
level is SERIALIZABLE. If you want to override this automatic choice,
the access mode can be set to READ WRITE using a SET TRANSACTION statement.
If AUTOCOMMIT is OFF, select statements will execute under a READ
WRITE transaction by default. If you want to execute them under a
READ ONLY transaction, a SET TRANSACTION must be issued.</para>
</section>
<section>
<title>READ WRITE</title>
<para>If a transaction is executing with the READ WRITE access mode,
statements within the transaction can read, insert, delete, or update
data in tables. Therefore, any DML statement can execute within that
transaction.</para>
<para>If the transaction isolation level is not READ UNCOMMITTED,
the default access mode is READ WRITE. However, you can specify READ
ONLY explicitly by using the SET TRANSACTION statement.</para>
</section>
</section>
<section id="i1012239">
<title>Transaction Isolation Levels</title>
<para>A transaction has an isolation level that is <phrase
condition="hidden"><xref linkend="i1009762" role="select:quotedtitle"
/>, </phrase><xref linkend="i1009771" role="select:quotedtitle"/><phrase
condition="hidden">, or <xref linkend="i1009779"
role="select:quotedtitle"/></phrase>. <phrase condition="hidden">The
Trafodion SQL implementation for REPEATABLE READ and SERIALIZABLE
is equivalent. </phrase></para>
<para condition="hidden">You can set the isolation level of a transaction
explicitly by using a SET TRANSACTION statement. See the <xref
linkend="i1010391" role="select:quotedtitle page"/>. The default isolation
level is READ COMMITTED.</para>
<section condition="hidden" id="i1009762">
<title>READ UNCOMMITTED</title>
<indexterm><primary>Transaction isolation levels</primary><secondary
>READ UNCOMMITTED</secondary></indexterm><indexterm><primary>Isolation
levels</primary><secondary>READ UNCOMMITTED</secondary></indexterm>
<para>This isolation level allows your transaction to access locked
data. You cannot use READ UNCOMMITTED for transactions that modify
the database.</para>
<para>READ UNCOMMITTED provides the lowest level of data consistency.
A transaction executing with this isolation level is allowed to:</para>
<itemizedlist>
<listitem><para>Read data modified by a concurrent transaction (sometimes
called <replaceable>dirty reads</replaceable>).</para></listitem>
<listitem><para>Read different committed values for the same item
at different times or find that the item no longer exists (sometimes
called <replaceable>nonrepeatable reads</replaceable>).</para>
</listitem>
<listitem><para>Read different sets of committed values satisfying
the same predicate at different times (sometimes called <replaceable
>phantoms</replaceable>).</para></listitem>
</itemizedlist>
</section>
<section id="i1009771">
<title>READ COMMITTED</title>
<indexterm><primary>Transaction isolation levels</primary><secondary
>READ COMMITTED</secondary></indexterm><indexterm><primary>Isolation
levels</primary><secondary>READ COMMITTED</secondary></indexterm>
<para>This option, which is ANSI compliant, allows your transaction
to access only committed data.</para>
<para>No row locks are acquired when READ COMMITTED is the specified
isolation level.</para>
<para>READ COMMITTED provides the next level of data consistency.
A transaction executing with this isolation level does not allow dirty
reads, but both nonrepeatable reads and phantoms are possible.</para>
<para>READ COMMITTED provides sufficient consistency for any transaction
that does not require a repeatable-read capability.</para>
<para>The default isolation level is READ COMMITTED.</para>
</section>
<section condition="hidden" id="i1009779">
<title>SERIALIZABLE or REPEATABLE READ </title>
<indexterm><primary>Locking</primary><secondary>SERIALIZABLE access
option</secondary></indexterm><indexterm><primary>Isolation levels</primary>
<secondary>REPEATABLE READ</secondary></indexterm><indexterm><primary
>Access options</primary><secondary>SERIALIZABLE</secondary></indexterm>
<indexterm><primary>Transaction isolation levels</primary><secondary
>SERIALIZABLE</secondary></indexterm><indexterm><primary>Isolation
levels</primary><secondary>SERIALIZABLE</secondary></indexterm>
<indexterm><primary>SERIALIZABLE</primary></indexterm><indexterm>
<primary>REPEATABLE READ</primary><secondary>description of</secondary>
</indexterm><indexterm><primary>Transaction isolation levels</primary>
<secondary>REPEATABLE READ</secondary></indexterm>
<para>This option locks all data accessed through the transaction
and holds the locks on data until the end of the transaction. </para>
<para>SERIALIZABLE provides the highest level of data consistency.
A transaction executing with this isolation level does not allow dirty
reads, nonrepeatable reads, or phantoms.</para>
</section>
</section>
<section condition="hidden" id="transrollback">
<title>Transaction Rollback Mode</title>
<indexterm><primary>Transaction rollback mode</primary></indexterm>
<para>The rollback mode for a transaction can be set to either ON
or OFF. A setting of ON denotes that the system will rollback the
effects of a transaction it aborts. A setting of OFF denotes that
the system does not need to perform rollback on abort, rather you
are responsible for continuing after the abort. The default is OFF.
The SET TRANSACTION option for rollback mode is <replaceable>norollback-option</replaceable
>.</para>
<para>When transactions that contain long running INSERT, UPDATE,
and DELETE statements are aborted, rollback is very expensive in system
resources and is time consuming. You may consider setting the rollback
mode to OFF for these statements. In some situations, not rolling
back aborted transactions can lead to an inconsistent database, with
respect to dependent objects such as indexes. For these situations,
Trafodion SQL raises an error during compilation. </para>
<para>When rollback mode is set to OFF, Trafodion SQL sets the auto
abort interval for the transaction to 0, indicating that this transaction
should never abort for exceeding a predefined time interval. Locks
on this table can be held for long durations, resulting in reduced
concurrency. You can override the default setting of never abort for
NO ROLLBACK type transactions by using the SET TRANSACTION AUTOABORT
statement. In addition, Trafodion SQL does not abort such transactions
for exceeding 45% of the audit trail. Such transactions need not be
limited by the 45% rule because rollback will not be performed on
them. Setting this option also prevents TMF from pinning the audit
trail for this transaction.</para>
</section>
</section>
<section id="i1004713">
<title>ANSI Compliance and Trafodion SQL Extensions</title>
<para><indexterm><primary>ANSI</primary><secondary>compliance, description
of</secondary></indexterm>Trafodion SQL complies most closely with
Core SQL 99. Trafodion SQL also includes some features from SQL 99
and part of the SQL 2003 standard, and special Trafodion SQL extensions
to the SQL language. </para>
<para>Statements and SQL elements in this manual are ANSI compliant
unless specified as Trafodion SQL extensions. <phrase condition="hidden"
>For details about Trafodion SQL conformance with SQL:1999 standards,
see Appendix D, Standard SQL and Trafodion SQL.</phrase></para>
<section>
<title>ANSI-Compliant Statements</title>
<indexterm><primary>SQL statements</primary><secondary>ANSI compliant</secondary>
</indexterm><indexterm><primary>Statements, SQL</primary><secondary
>ANSI compliant</secondary></indexterm>
<para>These statements are ANSI compliant, but some might contain
Trafodion SQL extensions:</para>
<itemizedlist>
<listitem><para>ALTER TABLE statement</para></listitem>
<listitem><para>CALL statement</para></listitem>
<listitem><para>COMMIT WORK statement</para></listitem>
<listitem><para>CREATE FUNCTION statement</para></listitem>
<listitem><para>CREATE PROCEDURE statement</para></listitem>
<listitem><para>CREATE ROLE statement</para></listitem>
<listitem><para>CREATE SCHEMA statement</para></listitem>
<listitem><para>CREATE TABLE statement</para></listitem>
<listitem><para>CREATE VIEW statement</para></listitem>
<listitem><para>DELETE statement</para></listitem>
<listitem><para>DROP FUNCTION statement</para></listitem>
<listitem><para>DROP PROCEDURE statement</para></listitem>
<listitem><para>DROP ROLE statement</para></listitem>
<listitem><para>DROP SCHEMA statement</para></listitem>
<listitem><para>DROP TABLE statement</para></listitem>
<listitem><para>DROP VIEW statement</para></listitem>
<listitem><para>EXECUTE statement</para></listitem>
<listitem><para>GRANT statement</para></listitem>
<listitem><para>GRANT ROLE statement</para></listitem>
<listitem><para>INSERT statement</para></listitem>
<listitem><para>MERGE statement</para></listitem>
<listitem><para>PREPARE statement</para></listitem>
<listitem><para>REVOKE statement</para></listitem>
<listitem><para>REVOKE ROLE statement</para></listitem>
<listitem><para>ROLLBACK WORK statement</para></listitem>
<listitem><para>SELECT statement</para></listitem>
<listitem><para>SET SCHEMA statement</para></listitem>
<listitem><para>SET TRANSACTION statement</para></listitem>
<listitem><para>TABLE statement</para></listitem>
<listitem><para>UPDATE statement</para></listitem>
<listitem><para>VALUES statement</para></listitem>
</itemizedlist>
</section>
<section>
<title>Statements That Are Trafodion SQL Extensions</title>
<indexterm><primary>SQL statements</primary><secondary>Trafodion SQL
extensions</secondary></indexterm><indexterm><primary>Statements,
SQL</primary><secondary>Trafodion SQL extensions</secondary></indexterm>
<indexterm><primary>Extensions, statements</primary></indexterm>
<para>These statements are Trafodion SQL extensions to the ANSI standard.</para>
<itemizedlist>
<listitem><para>ALTER LIBRARY statement</para></listitem>
<listitem><para>ALTER USER statement</para></listitem>
<listitem><para>BEGIN WORK statement</para></listitem>
<listitem><para>CONTROL QUERY CANCEL statement</para></listitem>
<listitem><para>CONTROL QUERY DEFAULT statement</para></listitem>
<listitem><para>CREATE INDEX statement</para></listitem>
<listitem><para>CREATE LIBRARY statement</para></listitem>
<listitem><para>DROP INDEX statement</para></listitem>
<listitem><para>DROP LIBRARY statement</para></listitem>
<listitem><para>EXPLAIN statement</para></listitem>
<listitem><para>GET statement</para></listitem>
<listitem><para>GET HBASE OBJECTS statement</para></listitem>
<listitem><para>GET VERSION OF METADATA statement</para></listitem>
<listitem><para>GET VERSION OF SOFTWARE statement</para></listitem>
<listitem><para>GRANT COMPONENT PRIVILEGE statement</para></listitem>
<listitem><para>INVOKE statement</para></listitem>
<listitem><para>LOAD statement</para></listitem>
<listitem><para>REGISTER USER statement</para></listitem>
<listitem><para>REVOKE COMPONENT PRIVILEGE statement</para></listitem>
<listitem><para>SHOWCONTROL statement</para></listitem>
<listitem><para>SHOWDDL statement</para></listitem>
<listitem><para>SHOWDDL SCHEMA statement</para></listitem>
<listitem><para>SHOWSTATS statement</para></listitem>
<listitem><para>UNLOAD statement</para></listitem>
<listitem><para>UNREGISTER USER statement</para></listitem>
<listitem><para>UPDATE STATISTICS statement</para></listitem>
<listitem><para>UPSERT statement</para></listitem>
</itemizedlist>
</section>
<section>
<title>ANSI-Compliant Functions</title>
<para><indexterm><primary>Functions, ANSI compliant</primary>
</indexterm>These functions are ANSI compliant, but some might contain
Trafodion SQL extensions:</para>
<itemizedlist>
<listitem><para>AVG function</para></listitem>
<listitem><para>CASE expression</para></listitem>
<listitem><para>CAST expression</para></listitem>
<listitem><para>CHAR_LENGTH</para></listitem>
<listitem><para>COALESCE</para></listitem>
<listitem><para>COUNT Function</para></listitem>
<listitem><para>CURRENT</para></listitem>
<listitem><para>CURRENT_DATE</para></listitem>
<listitem><para>CURRENT_TIME</para></listitem>
<listitem><para>CURRENT_TIMESTAMP</para></listitem>
<listitem><para>CURRENT_USER</para></listitem>
<listitem><para>EXTRACT</para></listitem>
<listitem><para>LOWER</para></listitem>
<listitem><para>MAX</para></listitem>
<listitem><para>MIN</para></listitem>
<listitem><para>NULLIF</para></listitem>
<listitem><para>OCTET_LENGTH</para></listitem>
<listitem><para>POSITION</para></listitem>
<listitem><para>SESSION_USER</para></listitem>
<listitem><para>SUBSTRING</para></listitem>
<listitem><para>SUM</para></listitem>
<listitem><para>TRIM</para></listitem>
<listitem><para>UPPER</para></listitem>
</itemizedlist>
<para>All other functions are Trafodion SQL extensions.</para>
</section>
</section>
<section id="i1011471">
<title>Trafodion SQL Error Messages</title>
<indexterm><primary>Error messages</primary></indexterm>
<para>Trafodion SQL reports error messages and exception conditions.
When an error condition occurs, Trafodion SQL returns a message number
and a brief description of the condition. For example, Trafodion SQL
might display this error message:</para>
<programlisting>
*** ERROR[1000]  A syntax error occurred.
</programlisting>
<para>The message number is the SQLCODE value (without the sign).
In this example, the SQLCODE value is 1000.</para>
<!--WRITER'S NOTE: Expose this paragraph when the Error Messages is available:-->
<para condition="hidden">To view detailed cause, effect, and recovery
information for Trafodion SQL and other errors, see the <citetitle
>Trafodion SQL Error Messages</citetitle>.</para>
</section>
</chapter>
<chapter id="i1076008">
<title>SQL Statements</title>
<para>This section describes the syntax and semantics of Trafodion
SQL statements.</para>
<para>Trafodion SQL statements <phrase condition="hidden">and utilities </phrase
>are entered interactively or from script files using a client-based
tool, such as the Trafodion Command Interface (TrafCI). To install
and configure a client application that enables you to connect to
and use a Trafodion database, see the <citetitle>Trafodion Client
Installation Guide</citetitle>.</para>
<section>
<title>Categories</title>
<para>The statements are categorized according to their functionality:</para>
<itemizedlist>
<listitem><para><xref linkend="i1004264" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1004466" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1004500" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="sec_stmts" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1065898" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="Prepared-Statements"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="i1004598" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1004630" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="SHOW-GET-Statements"
role="select:quotedtitle"/></para></listitem>
</itemizedlist>
<section id="i1004264">
<title>Data Definition Language (DDL) Statements</title>
<indexterm><primary>DDL statements</primary><see>Data Definition Language
(DDL) statements</see></indexterm><indexterm><primary>Data Definition
Language (DDL) statements</primary><secondary
sortas="[Data Definition
Language (DDL) statements:000">summary of</secondary></indexterm>
<para>Use these DDL statements to create, drop, or alter the definition
of a Trafodion SQL schema or object<phrase condition="hidden">, or
the authorization to use an object</phrase>.</para>
<note>
<para>DDL statements are not currently supported in transactions.
That means that you cannot run DDL statements inside a user-defined
transaction (BEGIN WORK...COMMIT WORK) or when AUTOCOMMIT is OFF.
To run these statements, AUTOCOMMIT must be turned ON (the default)
for the session.</para>
</note>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<tbody>
<row><entry><xref linkend="ALTER-LIBRARY" role="select:quotedtitle page"
/></entry><entry>Updates the physical filename for a library object
in a Trafodion database.</entry></row>
<row><entry><xref linkend="i1004893" role="select:quotedtitle page"
/></entry><entry>Changes a table.</entry></row>
<row><entry><xref linkend="AlterUser" role="select:quotedtitle page"
/></entry><entry>Changes attributes for a user.</entry></row>
<row><entry><xref linkend="CREATE-FUNCTION"
role="select:quotedtitle page"/></entry><entry>Registers a user-defined
function (UDF) written in C as a function within a Trafodion database.</entry>
</row>
<row><entry><xref linkend="i1075725" role="select:quotedtitle page"
/></entry><entry>Creates an index on a table.</entry></row>
<row><entry><xref linkend="CREATE-LIBRARY"
role="select:quotedtitle page"/></entry><entry>Registers a library
object in a Trafodion database.</entry></row>
<row><entry><xref linkend="CREATE-PROCEDURE"
role="select:quotedtitle page"/></entry><entry>Registers a Java method
as a stored procedure in Java (SPJ) within a Trafodion database.</entry>
</row>
<row><entry><xref linkend="CreateRole" role="select:quotedtitle page"
/></entry><entry>Creates a role.</entry></row>
<row><entry><xref linkend="i1061008" role="select:quotedtitle page"
/></entry><entry>Creates a schema in the database.</entry></row>
<row><entry><xref linkend="i1063425" role="select:quotedtitle page"
/></entry><entry>Creates a table.</entry></row>
<row><entry><xref linkend="i1076221" role="select:quotedtitle page"
/></entry><entry>Creates a view.</entry></row>
<row><entry><xref linkend="DROP-FUNCTION" role="select:quotedtitle page"
/></entry><entry>Removes a user-defined function (UDF) from the Trafodion
database.</entry></row>
<row><entry><xref linkend="i1007408" role="select:quotedtitle page"
/></entry><entry>Drops an index.</entry></row>
<row><entry><xref linkend="DROP-LIBRARY" role="select:quotedtitle page"
/></entry><entry>Removes a library object from the Trafodion database
and also removes the library file referenced by the library object.</entry>
</row>
<row><entry><xref linkend="DROP-PROCEDURE"
role="select:quotedtitle page"/></entry><entry>Removes a stored procedure
in Java (SPJ) from the Trafodion database.</entry></row>
<row><entry><xref linkend="DropRole" role="select:quotedtitle page"
/></entry><entry>Drops a role.</entry></row>
<row><entry><xref linkend="i1061009" role="select:quotedtitle page"
/></entry><entry>Drops a schema from the database.</entry></row>
<row><entry><xref linkend="i1007625" role="select:quotedtitle page"
/></entry><entry>Drops a table.</entry></row>
<row><entry><xref linkend="i1007707" role="select:quotedtitle page"
/></entry><entry>Drops a view.</entry></row>
<row condition="hidden"><entry><xref linkend="i1068219"
role="select:quotedtitle page"/></entry><entry>Grants access privileges
for a table or view to specified users or roles.</entry></row>
<row condition="hidden"><entry><xref linkend="GrantCompPriv_stmt"
role="select:quotedtitle page"/></entry><entry>Grants component privileges
to a specified user or role.</entry></row>
<row condition="hidden"><entry><xref linkend="GrantRole"
role="select:quotedtitle page"/></entry><entry>Grants one or more
roles to a user.</entry></row>
<row><entry><xref linkend="RegisterUser" role="select:quotedtitle page"
/></entry><entry>Registers a user in the SQL database, associating
the user's login name with a database username.</entry></row>
<row condition="hidden"><entry><xref linkend="i1059131"
role="select:quotedtitle page"/></entry><entry>Revokes access privileges
on a table or view from specified users or roles.</entry></row>
<row condition="hidden"><entry><xref linkend="RevokeCompPrivs_stmt"
role="select:quotedtitle page"/></entry><entry>Revokes component privileges
from a specified user or role.</entry></row>
<row condition="hidden"><entry><xref linkend="RevokeRole"
role="select:quotedtitle page"/></entry><entry>Removes one or more
roles from a user.</entry></row>
<row><entry><xref linkend="UnregisterUser"
role="select:quotedtitle page"/></entry><entry>Removes a database
username from the SQL database.</entry></row>
</tbody>
</tgroup>
</informaltable>
</section>
<section id="i1004466">
<title>Data Manipulation Language (DML) Statements</title>
<indexterm><primary>DML statements</primary><see>Data Manipulation
Language (DML) statements</see></indexterm><indexterm><primary>Data
Manipulation Language (DML) statements</primary><secondary sortas="000"
>summary of</secondary></indexterm>
<para>Use these DML statements to delete, insert, select, or update
rows in one or more tables:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<colspec colname="col1"/>
<colspec colname="col2"/>
<tbody>
<row><entry><xref linkend="i1007032" role="select:quotedtitle page"
/></entry><entry>Deletes rows from a table or view.</entry></row>
<row><entry><xref linkend="i1008135" role="select:quotedtitle page"
/></entry><entry>Inserts data into tables and views.</entry></row>
<row><entry><xref linkend="i1062270" role="select:quotedtitle page"
/></entry><entry>Either performs an upsert operation (that is, updates
a table if the row exists or inserts into a table if the row does
not exist) or updates (merges) matching rows from one table to another.</entry>
</row>
<row><entry><xref linkend="i1008894" role="select:quotedtitle page"
/></entry><entry>Retrieves data from tables and views.</entry></row>
<row><entry><xref linkend="TABLEstmt" role="select:quotedtitle page"
/></entry><entry>Equivalent to the query specification <computeroutput
>SELECT * FROM <replaceable>table</replaceable></computeroutput></entry>
</row>
<row><entry><xref linkend="i1073628" role="select:quotedtitle page"
/></entry><entry>Updates values in columns of a table or view.</entry>
</row>
<row><entry><xref linkend="UPSERT-Statement"
role="select:quotedtitle page"/></entry><entry>Updates a table if
the row exists or inserts into a table if the row does not exist.</entry>
</row>
<row><entry><xref linkend="VALUESstmt" role="select:quotedtitle page"
/></entry><entry>Displays the results of the evaluation of the expressions
and the results of row subqueries within the row value constructors.</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section id="i1004500">
<title>Transaction Control Statements</title>
<para>Use these statements to specify user-defined transactions and
to set attributes for the next transaction:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<colspec colname="col1"/>
<colspec colname="col2"/>
<tbody>
<row><entry><xref linkend="i1066431" role="select:quotedtitle page"
/></entry><entry>Starts a transaction.</entry></row>
<row><entry><xref linkend="i1075726" role="select:quotedtitle page"
/></entry><entry>Commits changes made during a transaction and ends
the transaction.</entry></row>
<row><entry><xref linkend="i1008837" role="select:quotedtitle page"
/></entry><entry>Undoes changes made during a transaction and ends
the transaction.</entry></row>
<row><entry><xref linkend="i1010391" role="select:quotedtitle page"
/></entry><entry>Sets attributes for the next SQL transaction — <phrase
condition="hidden">the isolation level, access mode, size of the diagnostics
area, and </phrase>whether to automatically commit database changes.</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section id="sec_stmts">
<title>Data Control and Security Statements</title>
<para>Use these statements to register users, create roles, and grant
and revoke privileges:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<colspec colname="col1" colwidth="1.00*"/>
<colspec colname="col4" colwidth="1.00*"/>
<tbody>
<row><entry><xref linkend="AlterUser" role="select:quotedtitle page"
/></entry><entry>Changes attributes associated with a user who is
registered in the database.</entry></row>
<row><entry><xref linkend="CreateRole" role="select:quotedtitle page"
/></entry><entry>Creates an SQL role.</entry></row>
<row><entry><xref linkend="DropRole" role="select:quotedtitle page"
/></entry><entry>Deletes an SQL role.</entry></row>
<row><entry><xref linkend="i1068219" role="select:quotedtitle page"
/></entry><entry>Grants access privileges on an SQL object to specified
users or roles.</entry></row>
<row><entry><xref linkend="GrantCompPriv_stmt"
role="select:quotedtitle page"/></entry><entry>Grants one or more
component privileges to a user or role.</entry></row>
<row><entry><xref linkend="GrantRole" role="select:quotedtitle page"
/></entry><entry>Grants one or more roles to a user.</entry></row>
<row><entry><xref linkend="RegisterUser" role="select:quotedtitle page"
/></entry><entry>Registers a user in the SQL database, associating
the user's login name with a database username.</entry></row>
<row><entry><xref linkend="i1059131" role="select:quotedtitle page"
/></entry><entry>Revokes access privileges on an SQL object from specified
users or roles.</entry></row>
<row><entry><xref linkend="RevokeCompPrivs_stmt"
role="select:quotedtitle page"/></entry><entry>Removes one or more
component privileges from a user or role.</entry></row>
<row><entry><xref linkend="RevokeRole" role="select:quotedtitle page"
/></entry><entry>Removes one or more roles from a user.</entry></row>
<row><entry><xref linkend="UnregisterUser"
role="select:quotedtitle page"/></entry><entry>Removes a database
username from the SQL database.</entry></row>
</tbody>
</tgroup>
</informaltable>
</section>
<section id="i1065898">
<title>Stored Procedure and User-Defined Function Statements</title>
<indexterm><primary>Stored procedure statements</primary></indexterm>
<indexterm><primary>Function statements</primary></indexterm><indexterm>
<primary>User-defined function (UDF) statements</primary></indexterm>
<para>Use these statements to create and execute stored procedures
in Java (SPJs) or create user-defined functions (UDFs) and to modify
authorization to access libraries or to execute SPJs or UDFs:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<colspec colname="col1"/>
<colspec colname="col2"/>
<tbody>
<row><entry><xref linkend="ALTER-LIBRARY" role="select:quotedtitle page"
/></entry><entry>Updates the physical filename for a library object
in a Trafodion database.</entry></row>
<row><entry><xref linkend="i1066433" role="select:quotedtitle page"
/></entry><entry>Initiates the execution of a stored procedure in
Java (SPJ) in a Trafodion database.</entry></row>
<row><entry><xref linkend="CREATE-FUNCTION"
role="select:quotedtitle page"/></entry><entry>Registers a user-defined
function (UDF) written in C as a function within a Trafodion database.</entry>
</row>
<row><entry><xref linkend="CREATE-LIBRARY"
role="select:quotedtitle page"/></entry><entry>Registers a library
object in a Trafodion database.</entry></row>
<row><entry><xref linkend="CREATE-PROCEDURE"
role="select:quotedtitle page"/></entry><entry>Registers a Java method
as a stored procedure in Java (SPJ) within a Trafodion database.</entry>
</row>
<row><entry><xref linkend="DROP-FUNCTION" role="select:quotedtitle page"
/></entry><entry>Removes a user-defined function (UDF) from the Trafodion
database.</entry></row>
<row><entry><xref linkend="DROP-LIBRARY" role="select:quotedtitle page"
/></entry><entry>Removes a library object from the Trafodion database
and also removes the library file referenced by the library object.</entry>
</row>
<row><entry><xref linkend="DROP-PROCEDURE"
role="select:quotedtitle page"/></entry><entry>Removes a stored procedure
in Java (SPJ) from the Trafodion database.</entry></row>
<row><entry><xref linkend="i1068219" role="select:quotedtitle page"
/></entry><entry>Grants privileges for accessing a library object
or executing an SPJ or UDF to specified users.</entry></row>
<row><entry><xref linkend="i1059131" role="select:quotedtitle page"
/></entry><entry>Revokes privileges for accessing a library object
or executing an SPJ or UDF from specified users.</entry></row>
</tbody>
</tgroup>
</informaltable>
</section>
<section id="Prepared-Statements">
<title>Prepared Statements</title>
<indexterm><primary>Prepared statements</primary></indexterm>
<para>Use these statements to prepare and execute an SQL statement:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<colspec colname="col1"/>
<colspec colname="col2"/>
<tbody>
<row><entry><xref linkend="i1064741" role="select:quotedtitle page"
/></entry><entry>Executes an SQL statement previously compiled by
a PREPARE statement.</entry></row>
<row><entry><xref linkend="i1062273" role="select:quotedtitle page"
/></entry><entry>Compiles an SQL statement for later use with the
EXECUTE statement in the same session.</entry></row>
</tbody>
</tgroup>
</informaltable>
</section>
<section id="i1004598">
<title>Control Statements</title>
<para>Use these statements to control the execution, default options,
plans, and performance of DML statements:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<colspec colname="col1"/>
<colspec colname="col2"/>
<tbody>
<row><entry><xref linkend="Control-Query-Cancel"
role="select:quotedtitle page"/></entry><entry>Cancels an executing
query that you identify with a query ID.</entry></row>
<row><entry><xref linkend="controlquerydefault"
role="select:quotedtitle page"/></entry><entry>Changes a default attribute
to influence a query plan.</entry></row>
</tbody>
</tgroup>
</informaltable>
</section>
<section id="i1004630">
<title>Object Naming Statements</title>
<para>Use this statements to specify default ANSI names for the schema:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<colspec colname="col1"/>
<colspec colname="col2"/>
<tbody>
<row><entry><xref linkend="i1010143" role="select:quotedtitle page"
/></entry><entry>Sets the default ANSI schema for unqualified object
names for the current session.</entry></row>
</tbody>
</tgroup>
</informaltable>
</section>
<section id="SHOW-GET-Statements">
<title>SHOW, GET, and EXPLAIN Statements</title>
<indexterm><primary>Prepared statements</primary></indexterm>
<para>Use these statements to display information about database objects
or query execution plans:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<colspec colname="col1"/>
<colspec colname="col2"/>
<tbody>
<row><entry><xref linkend="i1007383" role="select:quotedtitle page"
/></entry><entry>Displays information contained in the query execution
plan.</entry></row>
<row><entry><xref linkend="GET-Statement" role="select:quotedtitle page"
/></entry><entry>Displays the names of database objects, components,
component privileges, roles, or users that exist in the Trafodion
instance.</entry></row>
<row><entry><xref linkend="GET-HBASE-OBJECTS-Statement"
role="select:quotedtitle page"/></entry><entry>Displays a list of
HBase objects through an SQL interface</entry></row>
<row><entry><xref linkend="GET-VERSION-METADATA-Statement"
role="select:quotedtitle page"/></entry><entry>Displays the version
of the metadata in the Trafodion instance and indicates if the metadata
is current.</entry></row>
<row><entry><xref linkend="GET-VERSION-SOFTWARE-Statement"
role="select:quotedtitle page"/></entry><entry>Displays the version
of the Trafodion software that is installed on the system and indicates
if it is current.</entry></row>
<row><entry><xref linkend="INVOKE-Statement"
role="select:quotedtitle page"/></entry><entry>Generates a record
description that corresponds to a row in the specified table or view.</entry>
</row>
<row><entry><xref linkend="SHOWCONTROLstmt"
role="select:quotedtitle page"/></entry><entry>Displays the CONTROL
QUERY DEFAULT attributes in effect.</entry></row>
<row><entry><xref linkend="showddl" role="select:quotedtitle page"
/></entry><entry>Describes the DDL syntax used to create an object
as it exists in the metadata, or it returns a description of a user,
role, or component in the form of a GRANT statement.</entry></row>
<row><entry><xref linkend="SHOWDDL_SCHEMA"
role="select:quotedtitle page"/></entry><entry>Displays the DDL syntax
used to create a schema as it exists in the metadata and shows the
authorization ID that owns the schema.</entry></row>
<row><entry><xref linkend="SHOWSTATS" role="select:quotedtitle page"
/></entry><entry>Displays the histogram statistics for one or more
groups of columns within a table. These statistics are used to devise
optimized access plans.</entry></row>
</tbody>
</tgroup>
</informaltable>
</section>
</section>
<section id="ALTER-LIBRARY" pagebreak="yes">
<title>ALTER LIBRARY Statement</title>
<itemizedlist>
<listitem><para><xref linkend="ALTER-LIB-SYNTAX"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="ALTER-LIB-CONSIDERATIONS"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="ALTER-LIB-EXAMPLES"
role="select:quotedtitle"/></para></listitem>
</itemizedlist>
<indexterm><primary>ALTER LIBRARY statement</primary></indexterm>
<indexterm><primary>Data Definition Language (DDL) statements</primary>
<secondary>ALTER LIBRARY</secondary></indexterm><indexterm><primary
>Stored procedure statements</primary><secondary>ALTER LIBRARY</secondary>
</indexterm>
<para>The ALTER LIBRARY statement updates the physical filename for
a library object in a Trafodion database. A library object can be
an SPJ's JAR file or a UDF's library file.</para>
<para>ALTER LIBRARY is a Trafodion SQL extension.</para>
<note>
<para>DDL statements are not currently supported in transactions.
That means that you cannot run this statement inside a user-defined
transaction (BEGIN WORK...COMMIT WORK) or when AUTOCOMMIT is OFF.
To run this statement, AUTOCOMMIT must be turned ON (the default)
for the session.</para>
</note>
<indexterm><primary>ALTER LIBRARY statement</primary><secondary>syntax
diagram of</secondary></indexterm>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>ALTER LIBRARY [[<replaceable>catalog-name</replaceable
>.]<replaceable>schema-name</replaceable>.]<replaceable>library-name</replaceable
> 
   FILE <replaceable>library-filename</replaceable>
   [HOST NAME <replaceable>host-name</replaceable>]
   [LOCAL FILE <replaceable>host-filename</replaceable>]
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="ALTER-LIB-SYNTAX">
<title>Syntax Description of ALTER LIBRARY</title>
<variablelist>
<varlistentry><term>[[<replaceable>catalog-name</replaceable>.]<replaceable
>schema-name</replaceable>.]<replaceable>library-name</replaceable
></term>
<listitem><para>specifies the ANSI logical name of the library object,
where each part of the name is a valid SQL identifier with a maximum
of 128 characters. Specify the name of a library object that has already
been registered in the schema. If you do not fully qualify the library
name, Trafodion SQL qualifies it according to the schema of the current
session. For more information, see <xref linkend="i1032512"
role="select:quotedtitle page"/> and <xref linkend="i1013018"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term>FILE <replaceable>library-filename</replaceable
></term>
<listitem><para>specifies the full path of the redeployed library
file, which either an SPJ's JAR file or a UDF's library file.</para>
</listitem>
</varlistentry>
<varlistentry><term>HOST NAME <replaceable>host-name</replaceable
></term>
<listitem><para>specifies the name of the client host machine where
the deployed file resides.</para>
<!--WRITER'S NOTE: When is this option needed? What is it used for?-->
</listitem>
</varlistentry>
<varlistentry><term>LOCAL FILE <replaceable>host-filename</replaceable
></term>
<listitem><para>specifies the path on the client host machine where
the deployed file is stored.</para>
<!--WRITER'S NOTE: When is this option needed? What is it used for?-->
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="ALTER-LIB-CONSIDERATIONS">
<title>Considerations for ALTER LIBRARY</title>
<indexterm><primary>ALTER LIBRARY statement</primary><secondary>considerations
for</secondary></indexterm>
<itemizedlist>
<listitem><para>HOST NAME and LOCAL FILE are position dependent. <!--WRITER'S NOTE: What does this mean? Need an example.--></para>
</listitem>
</itemizedlist>
<section>
<title>Required Privileges</title>
<para>To issue an ALTER LIBRARY statement, one of the following must
be true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT.</para></listitem>
<listitem><para>You are the owner of the library. </para></listitem>
<listitem><para>You have the ALTER or ALTER_LIBRARY component privilege
for the SQL_OPERATIONS component.</para></listitem>
</itemizedlist>
</section>
</section>
<section id="ALTER-LIB-EXAMPLES">
<title>Examples of ALTER LIBRARY</title>
<indexterm><primary>ALTER LIBRARY statement</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>This ALTER LIBRARY statement updates the JAR file
(SPJs) for a library named SALESLIB in the SALES schema:</para>
<programlisting>ALTER LIBRARY sales.saleslib FILE Sales2.jar;</programlisting>
</listitem>
<listitem><para>This ALTER LIBRARY statement updates the library file
(UDFs) for a library named MYUDFS in the default schema:</para>
<programlisting>ALTER LIBRARY myudfs FILE $TMUDFLIB;</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1004893" pagebreak="yes">
<title>ALTER TABLE Statement</title>
<itemizedlist>
<listitem><para><xref linkend="i1084681" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1064105" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1005161" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>ALTER TABLE statement</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>Data Definition
Language  (DDL) statements</primary><secondary>ALTER TABLE</secondary>
</indexterm>
<para>The ALTER TABLE statement changes a Trafodion SQL table. See <xref
linkend="i1019224" role="select:quotedtitle page"/>.</para>
<note>
<para>DDL statements are not currently supported in transactions.
That means that you cannot run this statement inside a user-defined
transaction (BEGIN WORK...COMMIT WORK) or when AUTOCOMMIT is OFF.
To run this statement, AUTOCOMMIT must be turned ON (the default)
for the session.</para>
</note>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="4" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" nameend="col4" namest="col1"><programlisting
>ALTER TABLE <replaceable>name</replaceable> <replaceable>alter-action</replaceable
> 
  
<replaceable>alter-action</replaceable> is:
     ADD [COLUMN] <replaceable>column-definition</replaceable>
   | ADD IF NOT EXISTS <replaceable>column-definition</replaceable
>
   | ADD [CONSTRAINT <replaceable>constraint-name</replaceable>] <replaceable
>table-constraint</replaceable>
   | DROP CONSTRAINT <replaceable>constraint-name</replaceable> [RESTRICT]
   | RENAME TO <replaceable>new-name</replaceable> [CASCADE]
   | DROP COLUMN [IF EXISTS] <replaceable>column-name</replaceable
>

<replaceable>column-definition</replaceable> is:
   <replaceable>column-name data-type</replaceable> 
   ([DEFAULT <replaceable>default</replaceable>]
      [[CONSTRAINT <replaceable>constraint-name</replaceable>] <replaceable
>column-constraint</replaceable>]...) 

<replaceable>data-type</replaceable> is:
     CHAR[ACTER] [(<replaceable>length</replaceable>)[CHARACTERS]]
         [CHARACTER SET <replaceable>char-set-name</replaceable>]
         [UPSHIFT] [[NOT] CASESPECIFIC]
   | CHAR[ACTER] VARYING (<replaceable>length</replaceable>) 
         [CHARACTER SET <replaceable>char-set-name</replaceable>]
         [UPSHIFT] [[NOT] CASESPECIFIC]
   | VARCHAR (<replaceable>length</replaceable>) [CHARACTER SET <replaceable
>char-set-name</replaceable>]
         [UPSHIFT] [[NOT] CASESPECIFIC]
   | NUMERIC [(<replaceable>precision</replaceable> [,<replaceable
>scale</replaceable>])] [SIGNED|UNSIGNED] 
   | NCHAR [(<replaceable>length</replaceable>) [CHARACTER SET <replaceable
>char-set-name</replaceable>] 
         [UPSHIFT] [[NOT] CASESPECIFIC]
   | NCHAR VARYING(<replaceable>length</replaceable>) [CHARACTER SET <replaceable
>char-set-name</replaceable>] 
         [UPSHIFT] [[NOT] CASESPECIFIC]
   | SMALLINT [SIGNED|UNSIGNED]   
   | INT[EGER] [SIGNED|UNSIGNED]  
   | LARGEINT                     
   | DEC[IMAL] [(<replaceable>precision</replaceable> [,<replaceable
>scale</replaceable>])] [SIGNED|UNSIGNED] 
   | FLOAT [(<replaceable>precision</replaceable>)]   
   | REAL                  
   | DOUBLE PRECISION      
   | DATE                  
   | TIME [(<replaceable>time-precision</replaceable>)]            
   | TIMESTAMP [(<replaceable>timestamp-precision</replaceable>)]  
   | INTERVAL { <replaceable>start-field</replaceable> TO <replaceable
>end-field</replaceable> | <replaceable>single-field</replaceable
> } 

<replaceable>default</replaceable> is:
     <replaceable>literal</replaceable> 
   | NULL 
   | CURRENT_DATE 
   | CURRENT_TIME 
   | CURRENT_TIMESTAMP }</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<informaltable colsep="0" frame="all" pagebreak="yes" rowsep="0">
<tgroup cols="1" colsep="0" rowsep="0">
<colspec colname="col1"/>
<tbody>
<row><entry><programlisting><replaceable>column-constraint</replaceable
> is:
   NOT NULL
   | UNIQUE
   | CHECK (<replaceable>condition</replaceable>)
   | REFERENCES <replaceable>ref-spec</replaceable>

<replaceable>table-constraint</replaceable> is:
   UNIQUE (<replaceable>column-list</replaceable>)
   | CHECK (<replaceable>condition</replaceable>)
   | FOREIGN KEY <computeroutput>(<replaceable>column-list</replaceable
>) REFERENCES <replaceable>ref-spec</replaceable></computeroutput
>

<replaceable>ref-spec</replaceable> is:
   <replaceable>referenced-table</replaceable> [(<replaceable>column-list</replaceable
>)]

<replaceable>column-list</replaceable> is:
   <replaceable>column-name</replaceable>[, <replaceable>column-name</replaceable
>]...</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="i1084681">
<title>Syntax Description of ALTER TABLE</title>
<indexterm><primary>ALTER TABLE statement</primary><secondary>description
for</secondary></indexterm>
<variablelist>
<varlistentry><term><replaceable>name</replaceable></term>
<listitem id="i1084695"><para>specifies the current name of the object.
See <xref linkend="i1013018" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
<varlistentry><term>ADD [COLUMN] <replaceable>column-definition</replaceable
></term>
<listitem><para>adds a column to <replaceable>table</replaceable>. </para>
<para>The clauses for the <replaceable>column-definition</replaceable
> are:</para>
<variablelist>
<varlistentry><term><replaceable>column-name</replaceable></term>
<listitem><para>specifies the name for the new column in the table. <replaceable
>column-name</replaceable> is an SQL identifier. <replaceable>column-name</replaceable
> must be unique among column names in the table. If the column name
is a Trafodion SQL reserved word, you must delimit it by enclosing
it in double quotes. For example: <literal>"sql".myview</literal>.
See <xref linkend="i1032512" role="select:quotedtitle page"/>. </para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>data-type</replaceable></term>
<listitem><para>specifies the data type of the values that can be
stored in <replaceable>column-name</replaceable>. See <xref
linkend="i1010093" role="select:quotedtitle page"/>. If a default
is not specified, NULL is used.</para></listitem>
</varlistentry>
<varlistentry><term>DEFAULT <replaceable>default</replaceable></term>
<listitem><indexterm><primary>DEFAULT clause</primary><secondary>ALTER
TABLE use of</secondary></indexterm><para>specifies a default value
for the column or specifies that the column does not have a default
value. You can declare the default value explicitly by using the DEFAULT
clause, or you can enable null to be used as the default by omitting
both the DEFAULT and NOT NULL clauses. If you omit the DEFAULT clause
and specify NOT NULL, Trafodion SQL returns an error. For existing
rows of the table, the added column takes on its default value. </para>
<para>If you set the default to the datetime value CURRENT_DATE, CURRENT_TIME,
or CURRENT_TIMESTAMP, Trafodion SQL uses January 1, 1 A.D. 12:00:00.000000
as the default date and time for the existing rows. </para>
<para>For any row that you add after the column is added, if no value
is specified for the column as part of the add row operation, the
column receives a default value based on the current timestamp at
the time the row is added.</para>
</listitem>
</varlistentry>
<varlistentry><term>[[CONSTRAINT <replaceable>constraint-name</replaceable
>] <replaceable>column-constraint</replaceable>]</term>
<listitem><para>specifies a name for the column or table constraint. <replaceable
>constraint-name</replaceable> must have the same schema as <replaceable
>table</replaceable> and must be unique among constraint names in
its schema. If you omit the schema portions of the name you specify
in <replaceable>constraint-name</replaceable>, Trafodion SQL expands
the constraint name by using the schema for <replaceable>table</replaceable
>. See <xref linkend="i1013018" role="select:quotedtitle page"/>.</para>
<para>If you do not specify a constraint name, Trafodion SQL constructs
an SQL identifier as the name for the constraint in the schema for <replaceable
>table.</replaceable> The identifier consists of the fully qualified
table name concatenated with a system-generated unique identifier.
For example, a constraint on table A.B.C might be assigned a name
such as A.B.C_123..._01... . </para>
<variablelist>
<varlistentry><term><replaceable>column-constraint</replaceable> options:</term>
<listitem><para></para></listitem>
</varlistentry>
<varlistentry><term>NOT NULL</term>
<listitem><indexterm><primary>NOT NULL constraint</primary></indexterm>
<indexterm><primary>Constraints</primary><secondary>NOT NULL</secondary>
</indexterm><para>is a column constraint that specifies that the column
cannot contain nulls. If you omit NOT NULL, nulls are allowed in the
column. If you specify both NOT NULL and NO DEFAULT, each row inserted
in the table must include a value for the column. See <xref
linkend="i1018603" role="select:quotedtitle page"/>.  </para></listitem>
</varlistentry>
<varlistentry><term>UNIQUE</term>
<listitem><indexterm><primary>UNIQUE constraint</primary></indexterm>
<indexterm><primary>Constraints</primary><secondary>UNIQUE</secondary>
</indexterm><para>is a column constraint that specifies that the column
cannot contain more than one occurrence of the same value. If you
omit UNIQUE, duplicate values are allowed unless the column is part
of the PRIMARY KEY. Columns that you define as unique must be specified
as NOT NULL.</para></listitem>
</varlistentry>
<varlistentry><term>CHECK (<replaceable>condition</replaceable>)</term>
<listitem><indexterm><primary>CHECK constraint</primary></indexterm>
<indexterm><primary>Constraints</primary><secondary>CHECK</secondary>
</indexterm><para>is a constraint that specifies a condition that
must be satisfied for each row in the table. See <xref
linkend="i1012266" role="select:quotedtitle page"/>. You cannot refer
to the CURRENT_DATE, CURRENT_TIME, or CURRENT_TIMESTAMP function in
a CHECK constraint, and you cannot use subqueries in a CHECK constraint.</para>
</listitem>
</varlistentry>
<varlistentry><term>REFERENCES <replaceable>ref-spec</replaceable
></term>
<listitem><indexterm><primary>Referential integrity</primary><secondary
>FOREIGN KEY constraint</secondary></indexterm><indexterm><primary
>Constraints</primary><secondary>FOREIGN KEY</secondary></indexterm>
<para>specifies a REFERENCES column constraint. The maximum combined
length of the columns for a REFERENCES constraint is 2048 bytes.</para>
<variablelist>
<varlistentry><term id="refspec"><replaceable>ref-spec</replaceable
> is:</term>
<listitem><para><replaceable>referenced-table</replaceable> [(<replaceable
>column-list</replaceable>)]</para><para><replaceable>referenced-table</replaceable
> is the table referenced by the foreign key in a referential constraint. <replaceable
>referenced-table</replaceable> cannot be a view. <replaceable>referenced-table</replaceable
> cannot be the same as <replaceable>table</replaceable>. <replaceable
>referenced-table</replaceable> corresponds to the foreign key in
the <replaceable>table</replaceable>.</para>
<para><replaceable>column-list</replaceable> specifies the column
or set of columns in the <replaceable>referenced-table</replaceable
> that corresponds to the foreign key in <replaceable>table</replaceable
>. The columns in the column list associated with REFERENCES must
be in the same order as the columns in the column list associated
with FOREIGN KEY. If <replaceable>column-list</replaceable> is omitted,
the referenced table's PRIMARY KEY columns are the referenced columns.</para>
<para>A table can have an unlimited number of referential constraints,
and you can specify the same foreign key in more than one referential
constraint, but you must define each referential constraint separately.
You cannot create self-referencing foreign key constraints.</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term>ADD [CONSTRAINT <replaceable>constraint-name</replaceable
>] <replaceable>table-constraint</replaceable> </term>
<listitem><para>adds a constraint to the table and optionally specifies <replaceable
>constraint-name</replaceable> as the name for the constraint. The
new constraint must be consistent with any data already present in
the table. </para>
<variablelist>
<varlistentry><term>CONSTRAINT <replaceable>constraint-name</replaceable
></term>
<listitem><para>specifies a name for the column or table constraint. <replaceable
>constraint-name</replaceable> must have the same schema as <replaceable
>table</replaceable> and must be unique among constraint names in
its schema. If you omit the schema portions of the name you specify
in <replaceable>constraint-name</replaceable>, Trafodion SQL expands
the constraint name by using the schema for table. See <xref
linkend="i1013018" role="select:quotedtitle page"/>.</para><para>If
you do not specify a constraint name, Trafodion SQL constructs an
SQL identifier as the name for the constraint in the schema for table.
The identifier consists of the fully qualified table name concatenated
with a system-generated unique identifier. For example, a constraint
on table A.B.C might be assigned a name such as A.B.C_123..._01...
.</para>
<variablelist>
<varlistentry><term><replaceable>table-constraint</replaceable> options:</term>
<listitem></listitem>
</varlistentry>
<varlistentry><term>UNIQUE (<replaceable>column-list</replaceable
>)</term>
<listitem><indexterm><primary>UNIQUE constraint</primary></indexterm>
<indexterm><primary>Constraints</primary><secondary>UNIQUE</secondary>
</indexterm><para>is a table constraint that specifies that the column
or set of columns cannot contain more than one occurrence of the same
value or set of values.</para><para><replaceable>column-list</replaceable
> cannot include more than one occurrence of the same column. In addition,
the set of columns that you specify on a UNIQUE constraint cannot
match the set of columns on any other UNIQUE constraint for the table
or on the PRIMARY KEY constraint for the table. All columns defined
as unique must be specified as NOT NULL.</para>
<para>A UNIQUE constraint is enforced with a unique index. If there
is already a unique index on <replaceable>column-list</replaceable
>, Trafodion SQL uses that index. If a unique index does not exist,
the system creates a unique index.</para>
<para condition="hidden">The maximum combined length of the columns
for a UNIQUE constraint is 255 bytes.</para>
</listitem>
</varlistentry>
<varlistentry><term>CHECK (<replaceable>condition</replaceable>)</term>
<listitem><indexterm><primary>CHECK constraint</primary></indexterm>
<indexterm><primary>Constraints</primary><secondary>CHECK</secondary>
</indexterm><para>is a constraint that specifies a condition that
must be satisfied for each row in the table. See <xref
linkend="i1012266" role="select:quotedtitle page"/>. You cannot refer
to the CURRENT_DATE, CURRENT_TIME, or CURRENT_TIMESTAMP function in
a CHECK constraint, and you cannot use subqueries in a CHECK constraint. </para>
</listitem>
</varlistentry>
<varlistentry><term>FOREIGN KEY (<replaceable>column-list</replaceable
>) REFERENCES <replaceable>ref-spec</replaceable> NOT ENFORCED</term>
<listitem><indexterm><primary>FOREIGN KEY constraint</primary>
</indexterm><indexterm><primary>Referential integrity</primary>
<secondary>FOREIGN KEY constraint</secondary></indexterm><indexterm>
<primary>Constraints</primary><secondary>FOREIGN KEY</secondary>
</indexterm><para>is a table constraint that specifies a referential
constraint for the table, declaring that a column or set of columns
(called a foreign key) in <replaceable>table</replaceable> can contain
only values that match those in a column or set of columns in the
table specified in the REFERENCES clause. However, because NOT ENFORCED
is specified, this relationship is not checked. </para><para>The two
columns or sets of columns must have the same characteristics (data
type, length, scale, precision). Without the FOREIGN KEY clause, the
foreign key in <replaceable>table</replaceable> is the column being
defined; with the FOREIGN KEY clause, the foreign key is the column
or set of columns specified in the FOREIGN KEY clause. For information
about <replaceable>ref-spec</replaceable>, see REFERENCES <replaceable
>ref-spec</replaceable> NOT ENFORCED.</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term>DROP CONSTRAINT <replaceable>constraint-name</replaceable
> [RESTRICT]</term>
<listitem><para>drops a constraint from the table. </para><para>If
you drop a constraint, Trafodion SQL drops its dependent index if
Trafodion SQL originally created the same index. If the constraint
uses an existing index, the index is not dropped.</para>
<variablelist>
<varlistentry><term>CONSTRAINT <replaceable>constraint-name</replaceable
></term>
<listitem><para>specifies a name for the column or table constraint. <replaceable
>constraint-name</replaceable> must have the same schema as <replaceable
>table</replaceable> and must be unique among constraint names in
its schema. If you omit the schema portions of the name you specify
in <replaceable>constraint-name</replaceable>, Trafodion SQL expands
the constraint name by using the schema for table. See <xref
linkend="i1013018" role="select:quotedtitle page"/>.</para><para>If
you do not specify a constraint name, Trafodion SQL constructs an
SQL identifier as the name for the constraint in the schema for table.
The identifier consists of the fully qualified table name concatenated
with a system-generated unique identifier. For example, a constraint
on table A.B.C might be assigned a name such as A.B.C_123..._01...
.</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term>RENAME TO <replaceable>new-name</replaceable> [CASCADE]</term>
<listitem><indexterm><primary>ALTER TABLE statement</primary><secondary
>RENAME TO clause</secondary></indexterm><indexterm><primary>RENAME
TO clause</primary></indexterm><indexterm><primary>Renaming tables</primary>
</indexterm><indexterm><primary>Table</primary><secondary>renaming</secondary>
</indexterm><para>changes the logical name of the object within the
same schema.</para>
<variablelist>
<varlistentry><term><replaceable>new-name</replaceable></term>
<listitem><para>specifies the new name of the object after the RENAME
TO operation occurs. </para>
<variablelist>
<varlistentry><term>CASCADE</term>
<listitem><para>specifies that indexes and constraints on the renamed
object will be renamed.</para></listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term>ADD IF NOT EXISTS <replaceable>column-definition</replaceable
></term>
<listitem><para>adds a column to <replaceable>table</replaceable> if
it does not already exist in the table.</para><para>The clauses for
the <replaceable>column-definition</replaceable> are the same as described
in ADD [COLUMN] <replaceable>column-definition</replaceable>.</para>
</listitem>
</varlistentry>
<varlistentry><term>DROP COLUMN [IF EXISTS] <replaceable>column-name</replaceable
></term>
<listitem><para>drops the specified column from <replaceable>table</replaceable
>, including the column’s data. You cannot drop a primary key column.</para>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="i1064105">
<title>Considerations for ALTER TABLE</title>
<section id="i1005126">
<title>Effect of Adding a Column on View Definitions</title>
<indexterm><primary>ALTER TABLE statement</primary><secondary>considerations
for</secondary></indexterm>
<para>The addition of a column to a table has no effect on existing
view definitions. Implicit column references specified by SELECT *
in view definitions are replaced by explicit column references when
the definition clauses are originally evaluated.</para>
</section>
<section>
<title>Authorization and Availability Requirements</title>
<indexterm><primary>ALTER TABLE statement</primary><secondary>authorization
and availability requirements</secondary></indexterm><indexterm>
<primary>ALTER TABLE statement</primary><secondary>constraints implemented
with indexes</secondary></indexterm>
<para>ALTER TABLE works only on user-created tables.</para>
<section>
<title>Required Privileges</title>
<para>To issue an ALTER TABLE statement, one of the following must
be true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT.</para></listitem>
<listitem><para>You are the owner of the table.</para></listitem>
<listitem><para>You have the ALTER or ALTER_TABLE component privilege
for the SQL_OPERATIONS component.</para></listitem>
</itemizedlist>
</section>
<section id="RI-Constraint-Privileges-Alter-Table">
<title>Privileges Needed to Create a Referential Integrity Constraint</title>
<para>To create a referential integrity constraint (that is, a constraint
on the table that refers to a column in another table), one of the
following must be true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT. </para></listitem>
<listitem><para>You are the owner of the referencing and referenced
tables.</para></listitem>
<listitem><para>You have these privileges on the referencing and referenced
table:</para>
<itemizedlist>
<listitem><para>For the referencing table, you have the ALTER or ALTER_TABLE
component privilege for the SQL_OPERATIONS component.</para></listitem>
<listitem><para>For the referenced table, you have the REFERENCES
(or ALL) privilege on the referenced table through your username or
through a granted role.</para></listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<para>If the constraint refers to the other table in a query expression,
you must also have SELECT privileges on the other table.</para>
</section>
</section>
</section>
<section id="i1005161">
<title>Example of ALTER TABLE</title>
<indexterm><primary>ALTER TABLE statement</primary><secondary>examples
of</secondary></indexterm>
<para>This example adds a column:</para>
<programlisting>ALTER TABLE persnl.project 
  ADD COLUMN projlead 
    NUMERIC (4) UNSIGNED
</programlisting>
</section>
</section>
<section id="AlterUser" pagebreak="yes">
<title>ALTER USER Statement</title>
<itemizedlist>
<listitem><para><xref linkend="AlterUserSyntax"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="AlterUserConsid"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="AlterUserExample"
role="select:quotedtitle"/></para></listitem>
</itemizedlist>
<indexterm><primary>ALTER USER statement</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>Data Definition
Language (DDL) statements</primary><secondary>ALTER USER</secondary>
</indexterm>
<para>The ALTER USER statement changes attributes associated with
a user who is registered in the database. </para>
<para>ALTER USER is a Trafodion SQL extension.</para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>ALTER USER <replaceable>database-username</replaceable
> <replaceable>alter-action</replaceable>[, <replaceable>alter-action</replaceable
>]

<replaceable>alter-action</replaceable> is:
     SET EXTERNAL NAME <replaceable>directory-service-username</replaceable
>
   | SET { ONLINE | OFFLINE }
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="AlterUserSyntax">
<title>Syntax Description of ALTER USER</title>
<variablelist>
<varlistentry><term><replaceable>database-username</replaceable></term>
<listitem><para>is the name of a currently registered database user.</para>
</listitem>
</varlistentry>
<varlistentry><term>SET EXTERNAL NAME</term>
<listitem><para>changes the name that identifies the user in the directory
service. This is also the name the user specifies when connecting
to the database. </para>
<variablelist>
<varlistentry><term><replaceable>directory-service-username</replaceable
></term>
<listitem><para>specifies the new name of the user in the directory
service. <replaceable>directory-service-username</replaceable> is
a regular or delimited case-insensitive identifier. See <xref
linkend="csDelimitedIdentifier" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term>SET { ONLINE | OFFLINE }</term>
<listitem><para>changes the attribute that controls whether the user
is allowed to connect to the database. </para>
<variablelist>
<varlistentry><term>ONLINE</term>
<listitem><para>specifies that the user is allowed to connect to the
database.</para></listitem>
</varlistentry>
<varlistentry><term>OFFLINE</term>
<listitem><para>specifies that the user is not allowed to connect
to the database.</para></listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="AlterUserConsid">
<title>Considerations for ALTER USER</title>
<indexterm><primary>ALTER USER statement</primary><secondary>considerations
for</secondary></indexterm>
<para>Only a user with user administrative privileges (that is, a
user who has been granted the MANAGE_USERS component privilege) can
do the following:</para>
<itemizedlist>
<listitem><para>Set the EXTERNAL NAME for any user</para></listitem>
<listitem><para>Set the ONLINE | OFFLINE attribute for any user</para>
</listitem>
</itemizedlist>
<para>Initially, DB__ROOT is the only database user who has been granted
the MANAGE_USERS component privilege.</para>
</section>
<section id="AlterUserExample">
<title>Examples of ALTER USER</title>
<indexterm><primary>ALTER USER statement</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>To change a user's external name:</para>
<programlisting>ALTER USER ajones SET EXTERNAL NAME "Americas\ArturoJones";
</programlisting>
</listitem>
<listitem><para>To change a user's attribute to allow the user to
connect to the database:</para>
<programlisting>ALTER USER ajones SET ONLINE;</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1066431" pagebreak="yes">
<title>BEGIN WORK Statement</title>
<itemizedlist>
<listitem><para><xref linkend="BEGWKconsids" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1005228" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>Transaction control statements</primary><secondary
>BEGIN WORK</secondary></indexterm><indexterm><primary>Transaction
management</primary><secondary>BEGIN WORK</secondary></indexterm>
<para>The BEGIN WORK statement enables you to start a transaction
explicitly—where the transaction consists of the set of operations
defined by the sequence of SQL statements that begins immediately
after BEGIN WORK and ends with the next COMMIT or ROLLBACK statement.
See <xref linkend="i1009606" role="select:quotedtitle page"/>. BEGIN
WORK will raise an error if a transaction is currently active.</para>
<indexterm><primary>BEGIN WORK statement</primary><secondary>syntax
diagram of</secondary></indexterm>
<para>BEGIN WORK is a Trafodion SQL extension.</para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>BEGIN WORK
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="BEGWKconsids">
<title>Considerations for BEGIN WORK</title>
<indexterm><primary>BEGIN WORK statement</primary><secondary>considerations
for</secondary></indexterm>
<para>BEGIN WORK starts a transaction. COMMIT WORK or ROLLBACK WORK
ends a transaction.</para>
</section>
<section id="i1005228">
<title>Example of BEGIN WORK</title>
<indexterm><primary>BEGIN WORK statement</primary><secondary>example
of</secondary></indexterm>
<para>Group three separate statements—two INSERT statements and an
UPDATE statement—that update the database within a single transaction:</para>
<programlisting>
--- This statement initiates a transaction.
BEGIN WORK;
--- SQL operation complete.

INSERT INTO sales.orders VALUES (125, DATE '2008-03-23',
  DATE '2008-03-30', 75, 7654);
--- 1 row(s) inserted.

INSERT INTO sales.odetail VALUES (125, 4102, 25000, 2);
--- 1 row(s) inserted.

UPDATE invent.partloc SET qty_on_hand = qty_on_hand - 2
  WHERE partnum = 4102 AND loc_code = 'G45';
--- 1 row(s) updated.

--- This statement ends a transaction.
COMMIT WORK;
--- SQL operation complete.
</programlisting>
</section>
</section>
<section id="i1066433" pagebreak="yes">
<title>CALL Statement</title>
<itemizedlist>
<listitem><para><xref linkend="Syntax-Desc-CALL"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="Considerations-CALL"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="Examples-CALL" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>Stored procedure statements</primary><secondary
>CALL</secondary></indexterm><indexterm><primary>CALL statement</primary>
<secondary>syntax diagram of</secondary></indexterm>
<para>The CALL statement invokes a stored procedure in Java (SPJ)
in a Trafodion SQL database.<phrase condition="hidden"> To develop,
deploy, and manage SPJs, see the <citetitle>Trafodion Guide to Stored
Procedures in Java</citetitle>.</phrase></para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>CALL <replaceable>procedure-ref</replaceable
> ([<replaceable>argument-list</replaceable>])

<replaceable>procedure-ref</replaceable> is:
   [[<replaceable>catalog-name</replaceable>.]<replaceable>schema-name</replaceable
>.]<replaceable>procedure-name</replaceable>

<replaceable>argument-list</replaceable> is:
   <replaceable>SQL-expression</replaceable>[, <replaceable>SQL-expression</replaceable
>]...</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="Syntax-Desc-CALL">
<title>Syntax Description of CALL</title>
<indexterm><primary>CALL statement</primary><secondary>description
for</secondary></indexterm>
<variablelist>
<varlistentry><term><replaceable>procedure-ref</replaceable></term>
<listitem><para>specifies an ANSI logical name of the form:</para>
<programlisting>[[<replaceable>catalog-name</replaceable>.]<replaceable
>schema-name</replaceable>.]<replaceable>procedure-name</replaceable
></programlisting>
<para>where each part of the name is a valid SQL identifier with a
maximum of 128 characters. For more information, see <xref
linkend="i1032512" role="select:quotedtitle page"/> and <xref
linkend="i1013018" role="select:quotedtitle page"/>.</para>
<para>If you do not fully qualify the procedure name, Trafodion SQL
qualifies it according to the schema of the current session.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>argument-list</replaceable></term>
<listitem><para>accepts arguments for IN, INOUT, or OUT parameters.
The arguments consist of SQL expressions, including dynamic parameters,
separated by commas:</para>
<programlisting><replaceable>SQL-expression</replaceable>[{, <replaceable
>SQL-expression</replaceable>}...]</programlisting>
<para>Each expression must evaluate to a value of one of these data
types:</para>
<itemizedlist>
<listitem><para>Character value</para></listitem>
<listitem><para>Date-time value</para></listitem>
<listitem><para>Numeric value</para></listitem>
</itemizedlist>
<para>Interval value expressions are disallowed in SPJs. For more
information, see <xref linkend="Input-Parameter-Arguments"
role="select:quotedtitle page"/> and <xref
linkend="Output-Parameter-Arguments" role="select:quotedtitle page"
/>. </para>
<para>Do not specify result sets in the argument list.<phrase
condition="hidden"> For information about how to use result sets,
see the <citetitle>Trafodion Guide to Stored Procedures in Java</citetitle
>.</phrase></para>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="Considerations-CALL">
<title>Considerations for CALL</title>
<section>
<title>Usage Restrictions</title>
<indexterm><primary>CALL statement</primary><secondary>considerations
for</secondary></indexterm><indexterm><primary>CALL statement</primary>
<secondary>usage restrictions</secondary></indexterm>
<para>You can use a CALL statement as a stand-alone SQL statement
in applications or command-line interfaces, such as TrafCI.<phrase
> You cannot use a CALL statement inside a compound statement or with
rowsets.</phrase><phrase condition="hidden"> You can also use a CALL
statement in a trigger but not inside a compound statement or with
rowsets. If you use a CALL statement in a trigger, the CALL statement
must execute a stored procedure that does not have any OUT or INOUT
parameters or return any result sets.</phrase></para>
</section>
<section>
<title>Required Privileges</title>
<indexterm><primary>CALL statement</primary><secondary>required privileges</secondary>
</indexterm>
<para>To issue a CALL statement, one of the following must be true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT.</para></listitem>
<listitem><para>You are the owner of the stored procedure.</para>
</listitem>
<listitem><para>You have the EXECUTE (or ALL) privileges, either directly
through your username or through a granted role. For more information,
see the <xref linkend="i1068219" role="select:quotedtitle page"/>.</para>
</listitem>
</itemizedlist>
<para>When the stored procedure executes, it executes as the Trafodion
ID.</para>
</section>
<section id="Input-Parameter-Arguments">
<title>Input Parameter Arguments</title>
<para>You pass data to an SPJ by using IN or INOUT parameters. For
an IN parameter argument, use one of these SQL expressions:</para>
<itemizedlist>
<listitem><para>Literal</para></listitem>
<listitem><para>SQL function (including CASE and CAST expressions)</para>
</listitem>
<listitem><para>Arithmetic or concatenation operation</para></listitem>
<listitem><para>Scalar subquery</para></listitem>
<listitem><para>Dynamic parameter (for example, ?) in an application</para>
</listitem>
<listitem><para>Named (for example, ?param) or unnamed (for example,
?) parameter in TrafCI</para></listitem>
</itemizedlist>
<para>For an INOUT parameter argument, you can use only a dynamic,
named, or unnamed parameter. For more information, see <xref
linkend="i1013683" role="select:quotedtitle page"/>.</para>
</section>
<section id="Output-Parameter-Arguments">
<title>Output Parameter Arguments</title>
<para>An SPJ returns values in OUT and INOUT parameters. Output parameter
arguments must be dynamic parameters in an application (for example,
?) or named or unnamed parameters in HPDCI (for example, ?param or
?). Each calling application defines the semantics of the OUT and
INOUT parameters in its environment. <phrase condition="hidden">For
more information, see the <citetitle>Trafodion Guide to Stored Procedures
in Java</citetitle>.</phrase></para>
</section>
<section>
<title>Data Conversion of Parameter Arguments</title>
<para>Trafodion SQL performs an implicit data conversion when the
data type of a parameter argument is compatible with but does not
match the formal data type of the stored procedure. For stored procedure
input values, the conversion is from the actual argument value to
the formal parameter type. For stored procedure output values, the
conversion is from the actual output value, which has the data type
of the formal parameter, to the declared type of the dynamic parameter. </para>
</section>
<section>
<title>Null Input and Output</title>
<para>You can pass a null value as input to or output from an SPJ,
provided that the corresponding Java data type of the parameter supports
nulls. If a null is input or output for a parameter that does not
support nulls, Trafodion SQL returns an error. <phrase
condition="hidden">For more information about handling null input
and output, see the <citetitle>Trafodion Guide to Stored Procedures
in Java</citetitle>.</phrase></para>
</section>
<section>
<title>Transaction Semantics</title>
<para>The CALL statement automatically initiates a transaction if
no active transaction exists. However, the failure of a CALL statement
does not always automatically abort the transaction. <phrase
condition="hidden">For more information, see the <citetitle>Trafodion
Guide to Stored Procedures in Java</citetitle>.</phrase></para>
</section>
</section>
<section id="Examples-CALL">
<title>Examples of CALL</title>
<indexterm><primary>CALL statement</primary><secondary>examples of</secondary>
</indexterm>
<itemizedlist>
<listitem><para>In TrafCI, execute an SPJ named MONTHLYORDERS, which
has one IN parameter represented by a literal and one OUT parameter
represented by an unnamed parameter, ?:</para>
<programlisting>CALL sales.monthlyorders(3,?);</programlisting>
</listitem>
<listitem><para>This CALL statement executes a stored procedure, which
accepts one IN parameter (a date literal), returns one OUT parameter
(a row from the column, NUM_ORDERS), and returns two result sets:</para>
<programlisting>CALL sales.ordersummary('01/01/2001', ?);

NUM_ORDERS
--------------------
                  13

ORDERNUM    NUM_PARTS       AMOUNT           ORDER_DATE  LAST_NAME
----------  --------------  ---------------  ----------  ------------------

    100210               4         19020.00  2006-04-10  HUGHES
    100250               4         22625.00  2006-01-23  HUGHES
    101220               4         45525.00  2006-07-21  SCHNABL
    200300               3         52000.00  2006-02-06  SCHAEFFER
    200320               4          9195.00  2006-02-17  KARAJAN
    200490               2          1065.00  2006-03-19  WEIGL
      .
      .
      .

--- 13 row(s) selected.

ORDERNUM    PARTNUM   UNIT_PRICE    QTY_ORDERED PARTDESC
----------  --------  ------------  ----------  ------------------

    100210      2001       1100.00           3  GRAPHIC PRINTER,M1
    100210      2403        620.00           6  DAISY PRINTER,T2
    100210       244       3500.00           3  PC GOLD, 30 MB
    100210      5100        150.00          10  MONITOR BW, TYPE 1
    100250      6500         95.00          10  DISK CONTROLLER
    100250      6301        245.00          15  GRAPHIC CARD, HR
      .
      .
      .

--- 70 row(s) selected.

--- SQL operation complete.</programlisting>
<para condition="hidden">For more information about using SPJ result
sets, see the <citetitle>Trafodion Guide to Stored Procedures in Java</citetitle
>.</para>
</listitem>
<listitem condition="hidden"><para>This trigger contains a CALL statement,
which executes an SPJ named LOWERPRICE. An SPJ in a trigger must not
have any OUT or INOUT parameters or return any result sets.</para>
<programlisting>CREATE TRIGGER sales.setsalesprice
  AFTER UPDATE OF qty_on_hand 
    ON invent.partloc
  REFERENCING NEW as newqty
  FOR EACH ROWS
  WHEN (newqty.qty_on_hand > 500 )
  CALL sales.lowerprice();</programlisting>
</listitem>
</itemizedlist>
<para condition="hidden">For more examples, see the <citetitle>Trafodion
Guide to Stored Procedures in Java</citetitle>.</para>
</section>
</section>
<section id="i1075726" pagebreak="yes">
<title>COMMIT WORK Statement</title>
<itemizedlist>
<listitem><para><xref linkend="i1005360" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1005367" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>COMMIT WORK statement</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>Transaction
control statements</primary><secondary>COMMIT WORK</secondary>
</indexterm><indexterm><primary>Transaction management</primary>
<secondary>COMMIT WORK</secondary></indexterm>
<para>The COMMIT WORK statement commits any changes to objects made
during the current transaction<phrase condition="hidden">, releases
all locks on objects held by the transaction,</phrase> and ends the
transaction. See <xref linkend="i1009606" role="select:quotedtitle page"
/>. </para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>COMMIT [WORK] 
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<para>WORK is an optional keyword that has no effect.</para>
<para>COMMIT WORK issued outside of an active transaction generates
error 8605.</para>
<section id="i1005360">
<title>Considerations for COMMIT WORK</title>
<indexterm><primary>COMMIT WORK statement</primary><secondary>considerations
for</secondary></indexterm>
<para>BEGIN WORK starts a transaction. COMMIT WORK or ROLLBACK WORK
ends a transaction. </para>
<para condition="hidden">ODBC and JDBC result sets are discarded,
except for those accessed with a holdable cursor. For more information,
see <xref linkend="CursorsLanEle" role="select:quotedtitle page"/>.</para>
</section>
<section id="i1005367">
<title>Example of COMMIT WORK</title>
<indexterm><primary>COMMIT WORK statement</primary><secondary>example
of</secondary></indexterm>
<para>Suppose that your application adds information to the inventory.
You have received 24 terminals from a new supplier and want to add
the supplier and update the quantity on hand. The part number for
the terminals is 5100, and the supplier is assigned supplier number
17. The cost of each terminal is $800.</para>
<para>The transaction must add the order for terminals to PARTSUPP,
add the supplier to the SUPPLIER table, and update QTY_ON_HAND in
PARTLOC. After the INSERT and UPDATE statements execute successfully,
you commit the transaction, as shown:</para>
<programlisting>
-- This statement initiates a transaction.
BEGIN WORK;
--- SQL operation complete.

-- This statement inserts a new entry into PARTSUPP.
INSERT INTO invent.partsupp
VALUES (5100, 17, 800.00, 24);
--- 1 row(s) inserted.
</programlisting>
<programlisting>
-- This statement inserts a new entry into SUPPLIER.
INSERT INTO invent.supplier
VALUES (17, 'Super Peripherals','751 Sanborn Way',
  'Santa Rosa', 'California', '95405');
--- 1 row(s) inserted.

-- This statement updates the quantity in PARTLOC.
UPDATE invent.partloc
SET qty_on_hand = qty_on_hand + 24
WHERE partnum = 5100 AND loc_code = 'G43';
--- 1 row(s) updated.

-- This statement ends a transaction.
COMMIT WORK;
--- SQL operation complete.
</programlisting>
</section>
</section>
<section id="Control-Query-Cancel" pagebreak="yes">
<title>CONTROL QUERY CANCEL Statement</title>
<indexterm><primary>CONTROL QUERY CANCEL statement</primary><secondary
>syntax diagram of</secondary></indexterm>
<para>The CONTROL QUERY CANCEL statement cancels an executing query
that you identify with a query ID. You can execute the CONTROL QUERY
CANCEL statement in a client-based tool like TrafCI or through any
ODBC or JDBC application.</para>
<para>CONTROL QUERY CANCEL is a Trafodion SQL extension.</para>
<informaltable frame="all">
<tgroup cols="1" colsep="0" rowsep="0">
<colspec colname="col4"/>
<tbody>
<row><entry><programlisting>CONTROL QUERY CANCEL QID <replaceable
>query-id</replaceable> [COMMENT '<replaceable>comment-text</replaceable
>']
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section>
<title>Syntax Description of CONTROL QUERY CANCEL</title>
<variablelist>
<varlistentry><term><replaceable>query-id</replaceable></term>
<listitem><para>specifies the query ID of an executing query, which
is a unique identifier generated by the SQL compiler.</para></listitem>
</varlistentry>
<varlistentry><term>'<replaceable>comment-text</replaceable>'</term>
<listitem><para>specifies an optional comment to be displayed in the
canceled query’s error message.</para></listitem>
</varlistentry>
</variablelist>
</section>
<section>
<title>Considerations for CONTROL QUERY CANCEL</title>
<indexterm><primary>CONTROL QUERY CANCEL statement</primary><secondary
>considerations for</secondary></indexterm>
<section>
<title>Benefits of CONTROL QUERY CANCEL</title>
<para>For many queries, the CONTROL QUERY CANCEL statement allows
the termination of the query without stopping the master executor
process (MXOSRVR). This type of cancellation has these benefits over
standard ODBC/JDBC cancel methods:</para>
<itemizedlist>
<listitem><para>An ANSI-defined error message is returned to the client
session, and SQLSTATE is set to HY008.</para></listitem>
<listitem><para>Important cached objects persist after the query is
canceled, including the master executor process and its compiler,
the compiled statements cached in the master, and the compiler’s query
cache and its cached metadata and histograms.</para></listitem>
<listitem><para>The client does not need to reestablish its connection,
and its prepared statements are preserved.</para></listitem>
<listitem><para>When clients share connections using a middle-tier
application server, the effects of canceling one client’s executing
query no longer affect other clients sharing the same connection.</para>
</listitem>
</itemizedlist>
</section>
<section>
<title>Restrictions on CONTROL QUERY CANCEL</title>
<para>Some executing queries may not respond to a CONTROL QUERY CANCEL
statement within a 60-second interval. For those queries, Trafodion
SQL stops their ESP processes if there are any. If this action allows
the query to be canceled, you will see all the benefits listed above.</para>
<para>If the executing query does not terminate within 120 seconds
after the CONTROL QUERY CANCEL statement is issued, Trafodion SQL
stops the master executor process, terminating the query and generating
a lost connection error. In this case, you will not see any of the
benefits listed above. Instead, you will lose your connection and
will need to reconnect and re-prepare the query. This situation often
occurs with the CALL, DDL, and utility statements and rarely with
other statements.</para>
<para>The CONTROL QUERY CANCEL statement does not work with these
statements:</para>
<itemizedlist>
<listitem><para>Unique queries, which operate on a single row and
a single partition</para></listitem>
<listitem><para>Queries that are not executing, such as a query that
is being compiled</para></listitem>
<listitem><para>CONTROL QUERY DEFAULT, BEGIN WORK, COMMIT WORK, ROLLBACK
WORK, and EXPLAIN statements</para></listitem>
<listitem><para>Statically compiled metadata queries</para></listitem>
<listitem><para>Queries executed in anomalous conditions, such as
queries without runtime statistics or without a query ID</para>
</listitem>
</itemizedlist>
</section>
<section>
<title>Required Privileges</title>
<para>To issue a CONTROL QUERY CANCEL statement, one of the following
must be true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT.</para></listitem>
<listitem><para>You own (that is, issued) the query. </para></listitem>
<listitem><para>You have the QUERY_CANCEL component privilege for
the SQL_OPERATIONS component.</para></listitem>
</itemizedlist>
</section>
</section>
<section>
<title>Example of CONTROL QUERY CANCEL</title>
<indexterm><primary>CONTROL QUERY CANCEL statement</primary><secondary
>example of</secondary></indexterm>
<para>This CONTROL QUERY CANCEL statement cancels a specified query
and provides a comment concerning the cancel operation:</para>
<programlisting>control query cancel qid MXID11000010941212288634364991407000000003806U3333300_156016_S1 comment 'Query is consuming too many resources.';</programlisting>
<para>In a separate session, the client that issued the query will
see this error message indicating that the query has been canceled:</para>
<programlisting>>>execute s1;

*** ERROR[8007] The operation has been canceled. Query is consuming too many resources.</programlisting>
</section>
</section>
<section id="controlquerydefault" pagebreak="yes">
<title>CONTROL QUERY DEFAULT Statement</title>
<indexterm><primary>CONTROL QUERY DEFAULT statement</primary><secondary
>syntax diagram of</secondary></indexterm><indexterm><primary>Default
settings</primary><secondary>changing</secondary></indexterm>
<para>The CONTROL QUERY DEFAULT statement changes the default settings
for the current process. You can execute the CONTROL QUERY DEFAULT
statement in a client-based tool like TrafCI or through any ODBC or
JDBC application.</para>
<para>CONTROL QUERY DEFAULT is a Trafodion SQL extension.</para>
<informaltable frame="all">
<tgroup cols="1" colsep="0" rowsep="0">
<colspec colname="col4"/>
<tbody>
<row><entry><programlisting>{ CONTROL QUERY DEFAULT | CQD } <replaceable
>control-default-option</replaceable>  

<replaceable>control-default-option</replaceable> is: 

<replaceable>attribute</replaceable> {'<replaceable>attr-value</replaceable
>' | RESET} <literal condition="hidden">
| * RESET </literal></programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section>
<title>Syntax Description of CONTROL QUERY DEFAULT</title>
<variablelist>
<varlistentry><term><replaceable>attribute</replaceable></term>
<listitem><para>is a character string that represents an attribute
name. For descriptions of these attributes, see <xref
linkend="CQD_Attributes" role="select:quotedtitle page"/>. </para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>attr-value</replaceable></term>
<listitem><para>is a character string that specifies an attribute
value. You must specify <replaceable>attr-value</replaceable> as a
quoted string—even if the value is a number.</para></listitem>
</varlistentry>
<varlistentry><term>RESET</term>
<listitem><para>specifies that the attribute that you set by using
a CONTROL QUERY DEFAULT statement in the current session is to be
reset to the value or values in effect at the start of the current
session. </para></listitem>
</varlistentry>
<varlistentry condition="hidden"><term>* RESET</term>
<listitem><para>specifies all attributes are to be reset.</para>
</listitem>
</varlistentry>
</variablelist>
</section>
<section>
<title>Considerations for CONTROL QUERY DEFAULT</title>
<indexterm><primary>CONTROL QUERY DEFAULT statement</primary><secondary
>considerations for</secondary></indexterm>
<section>
<title>Scope of CONTROL QUERY DEFAULT</title>
<para>The result of the execution of a CONTROL QUERY DEFAULT statement
stays in effect until the current process terminates or until the
execution of another statement for the same attribute overrides it.
CQDs are applied at compile time, so CQDs do not affect any statements
that are already prepared. For example:</para>
<screen>PREPARE x FROM SELECT * FROM t;
CONTROL QUERY DEFAULT SCHEMA 'myschema';
EXECUTE x;                                                -- uses the default schema SEABASE
SELECT * FROM t2;                                         -- uses MYSCHEMA;
PREPARE y FROM SELECT * FROM t3;                    
CONTROL QUERY DEFAULT SCHEMA 'seabase';
EXECUTE y;                                                -- uses MYSCHEMA;</screen>
</section>
</section>
<section>
<title>Examples of CONTROL QUERY DEFAULT</title>
<indexterm><primary>CONTROL QUERY DEFAULT statement</primary><secondary
>examples of</secondary></indexterm>
<itemizedlist>
<listitem><para>Change the maximum supported length of the column
names to 200 for the current process:</para>
<screen>CONTROL QUERY DEFAULT HBASE_MAX_COLUMN_NAME_LENGTH '200';</screen>
</listitem>
<listitem><para>Reset the HBASE_MAX_COLUMN_NAME_LENGTH attribute to
its initial value in the current process: <screen>CONTROL QUERY DEFAULT HBASE_MAX_COLUMN_NAME_LENGTH RESET;</screen
></para></listitem>
</itemizedlist>
</section>
</section>
<section id="CREATE-FUNCTION" pagebreak="yes">
<title>CREATE FUNCTION Statement</title>
<itemizedlist>
<listitem><para><xref linkend="CREATE-FUNCTION-SYNTAX"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="CREATE-FUNCTION-CONSIDERATIONS"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="CREATE-FUNCTION-EXAMPLES"
role="select:quotedtitle"/></para></listitem>
</itemizedlist>
<indexterm><primary>CREATE FUNCTION statement</primary></indexterm>
<indexterm><primary>Data Definition Language (DDL) statements</primary>
<secondary>CREATE FUNCTION</secondary></indexterm>
<para>The CREATE FUNCTION statement registers a user-defined function
(UDF) written in C as a function within a Trafodion database. Currently,
Trafodion supports the creation of <emphasis>scalar UDFs</emphasis
>, which return a single value or row when invoked. Scalar UDFs are
invoked as SQL expressions in the SELECT list or WHERE clause of a
SELECT statement.</para>
<note>
<para>DDL statements are not currently supported in transactions.
That means that you cannot run this statement inside a user-defined
transaction (BEGIN WORK...COMMIT WORK) or when AUTOCOMMIT is OFF.
To run this statement, AUTOCOMMIT must be turned ON (the default)
for the session.</para>
</note>
<indexterm><primary>CREATE FUNCTION statement</primary><secondary
>syntax diagram of</secondary></indexterm>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>CREATE FUNCTION <replaceable>function-ref</replaceable
> ([<replaceable>parameter-declaration</replaceable>[, <replaceable
>parameter-declaration</replaceable>]...])
   {RETURN | RETURNS} (<replaceable>return-parameter-declaration</replaceable
>[, <replaceable>return-parameter-declaration</replaceable>]...)
   EXTERNAL NAME '<replaceable>character-string-literal</replaceable
>'
   LIBRARY [[<replaceable>catalog-name</replaceable>.]<replaceable
>schema-name</replaceable>.]<replaceable>library-name</replaceable
>
<literal>   [LANGUAGE C]
   [PARAMETER STYLE SQL]
   [NO SQL]
</literal>   [NOT  DETERMINISTIC | DETERMINISTIC]
   [FINAL CALL | NO FINAL CALL]
   [NO STATE AREA | STATE AREA <replaceable>size</replaceable>]
   [NO PARALLELISM | ALLOW ANY PARALLELISM]

<replaceable>function-ref</replaceable> is:
   [[<replaceable>catalog-name</replaceable>.]<replaceable>schema-name</replaceable
>.]<replaceable>function-name</replaceable>

<replaceable>parameter-declaration</replaceable> is:
   [IN] [<replaceable>sql-parameter-name</replaceable>] <replaceable
>sql-datatype</replaceable>

<replaceable>return-parameter-declaration</replaceable> is:
   [OUT] [<replaceable>sql-parameter-name</replaceable>] <replaceable
>sql-datatype</replaceable>
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="CREATE-FUNCTION-SYNTAX">
<title>Syntax Description of CREATE FUNCTION</title>
<variablelist>
<varlistentry><term><replaceable>function-ref</replaceable> ( [<replaceable
>parameter-declaration</replaceable>[, <replaceable>parameter-declaration</replaceable
>]...] )</term>
<listitem><para>specifies the name of the function and any SQL parameters
that correspond to the signature of the external function.</para>
<variablelist>
<varlistentry><term><replaceable>function-ref</replaceable></term>
<listitem><para>specifies an ANSI logical name of the form:</para>
<programlisting>[[<replaceable>catalog-name</replaceable>.]<replaceable
>schema-name</replaceable>.]<replaceable>function-name</replaceable
></programlisting>
<para>where each part of the name is a valid SQL identifier with a
maximum of 128 characters. For more information, see <xref
linkend="i1032512" role="select:quotedtitle page"/> and <xref
linkend="i1013018" role="select:quotedtitle page"/>.</para>
<para>Specify a name that is unique and does not exist for any procedure
or function in the same schema.<phrase condition="hidden"> Trafodion
SQL does not support the overloading of function names. That is, you
cannot register the same function name more than once with different
underlying functions.</phrase></para>
<para>If you do not fully qualify the function name, Trafodion SQL
qualifies it according to the schema of the current session.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>parameter-declaration</replaceable
></term>
<listitem><para>specifies an SQL parameter that corresponds to the
signature of the external function:</para>
<programlisting>[IN] [<replaceable>sql-parameter-name</replaceable
>] <replaceable>sql-datatype</replaceable></programlisting>
<variablelist>
<varlistentry><term>IN</term>
<listitem><para>specifies that the parameter passes data to the function.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>sql-parameter-name</replaceable></term>
<listitem><para>specifies an SQL identifier for the parameter. For
more information, see <xref linkend="i1032512"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>sql-datatype</replaceable></term>
<listitem><para>specifies an SQL data type that corresponds to the
data type of the parameter in the signature of the external function. <replaceable
>sql-datatype</replaceable> is one of the supported SQL data types
in Trafodion. See <xref linkend="i1010093"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term>{RETURN | RETURNS} (<replaceable>return-parameter-declaration</replaceable
>[, <replaceable>return-parameter-declaration</replaceable>]...)</term>
<listitem><para>specifies the type of output of the function.</para>
<variablelist>
<varlistentry><term><replaceable>return-parameter-declaration</replaceable
></term>
<listitem><para>specifies an SQL parameter for an output value:</para>
<programlisting>[OUT] [<replaceable>sql-parameter-name</replaceable
>] <replaceable>sql-datatype</replaceable></programlisting>
<variablelist>
<varlistentry><term>OUT</term>
<listitem><para>specifies that the parameter accepts data from the
function.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>sql-parameter-name</replaceable></term>
<listitem><para>specifies an SQL identifier for the return parameter.
For more information, see <xref linkend="i1032512"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>sql-datatype</replaceable></term>
<listitem><para>specifies an SQL data type for the return parameter. <replaceable
>sql-datatype</replaceable> is one of the supported SQL data types
in Trafodion. See <xref linkend="i1010093"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term>EXTERNAL NAME '<replaceable>method-name</replaceable
>'</term>
<listitem><para>specifies the case-sensitive name of the external
function’s method.</para></listitem>
</varlistentry>
<varlistentry><term>LIBRARY [[<replaceable>catalog-name</replaceable
>.]<replaceable>schema-name</replaceable>.]<replaceable>library-name</replaceable
></term>
<listitem><para>specifies the ANSI logical name of a library containing
the external function. If you do not fully qualify the library name,
Trafodion SQL qualifies it according to the schema of the current
session.</para></listitem>
</varlistentry>
<varlistentry><term>LANGUAGE C</term>
<listitem><para>specifies that the external function is written in
the C language. This clause is optional.</para></listitem>
</varlistentry>
<varlistentry><term>PARAMETER STYLE SQL</term>
<listitem><para>specifies that the run-time conventions for arguments
passed to the external function are those of the SQL language. This
clause is optional.</para></listitem>
</varlistentry>
<varlistentry><term>NO SQL</term>
<listitem><para>specifies that the function does not perform SQL operations.
This clause is optional.</para></listitem>
</varlistentry>
<varlistentry><term>DETERMINISTIC | NOT DETERMINISTIC</term>
<listitem><para>specifies whether the function always returns the
same values for OUT parameters for a given set of argument values
(DETERMINISTIC, the default behavior) or does not return the same
values (NOT DETERMINISTIC). If the function is deterministic, Trafodion
SQL is not required to execute the function each time to produce results;
instead, Trafodion SQL caches the results and reuses them during subsequent
executions, thus optimizing the execution.</para></listitem>
</varlistentry>
<varlistentry><term>FINAL CALL | NO FINAL CALL</term>
<listitem><para>specifies whether or not a final call is made to the
function. A final call enables the function to free up system resources.
The default is FINAL CALL.</para></listitem>
</varlistentry>
<varlistentry><term>NO STATE AREA | STATE AREA <replaceable>size</replaceable
></term>
<listitem><para>specifies whether or not a state area is allocated
to the function. <replaceable>size</replaceable> is an integer denoting
memory in bytes. Acceptable values range from 0 to 16000. The default
is NO STATE AREA.</para></listitem>
</varlistentry>
<varlistentry><term>NO PARALLELISM | ALLOW ANY PARALLELISM</term>
<listitem><para>specifies whether or not parallelism is applied when
the function is invoked. The default is ALLOW ANY PARALLELISM.</para>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="CREATE-FUNCTION-CONSIDERATIONS">
<title>Considerations for CREATE FUNCTION</title>
<indexterm><primary>CREATE FUNCTION statement</primary><secondary
>considerations for</secondary></indexterm>
<section>
<title>Required Privileges</title>
<para>To issue a CREATE FUNCTION statement, one of the following must
be true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT.</para></listitem>
<listitem><para>You are creating the function in a shared schema,
and you have the USAGE (or ALL) privilege on the library that will
be used in the creation of the function. The USAGE privilege provides
you with read access to the library’s underlying library file.</para>
</listitem>
<listitem><para>You are the private schema owner and have the USAGE
(or ALL) privilege on the library that will be used in the creation
of the function. The USAGE privilege provides you with read access
to the library’s underlying library file.</para></listitem>
<listitem><para>You have the CREATE or CREATE_ROUTINE component level
privilege for the SQL_OPERATIONS component and have the USAGE (or
ALL) privilege on the library that will be used in the creation of
the function. The USAGE privilege provides you with read access to
the library’s underlying library file.</para>
<note>
<para>In this case, if you create a function in a private schema,
it will be owned by the schema owner.</para>
</note>
</listitem>
</itemizedlist>
</section>
</section>
<section id="CREATE-FUNCTION-EXAMPLES">
<title>Examples of CREATE FUNCTION</title>
<indexterm><primary>CREATE FUNCTION statement</primary><secondary
>examples of</secondary></indexterm>
<itemizedlist>
<listitem><para>This CREATE FUNCTION statement creates a function
that adds two integers:</para>
<programlisting>create function add2 (int, int) 
       returns (total_value int)
       external name 'add2'
       library myudflib;</programlisting>
</listitem>
<listitem><para>This CREATE FUNCTION statement creates a function
that returns the minimum, maximum, and average values of five input
integers:</para>
<programlisting>create function mma5 (int, int, int, int, int) 
       returns (min_value int, max_value int, avg_value int)
       external name 'mma5'
       library myudflib;</programlisting>
</listitem>
<listitem><para>This CREATE FUNCTION statement creates a function
that reverses an input string of at most 32 characters:</para>
<programlisting>create function reverse (varchar(32)) 
       returns (reversed_string varchar(32))
       external name 'reverse'
       library myudflib;</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1075725" pagebreak="yes">
<title>CREATE INDEX Statement</title>
<itemizedlist>
<listitem><para><xref linkend="i1064117" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1005979" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1005999" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>Indexes</primary><secondary>CREATE INDEX statement</secondary>
</indexterm><indexterm><primary>Indexes</primary><secondary>CREATE
VOLATILE INDEX statement</secondary></indexterm><indexterm><primary
>CREATE INDEX statement</primary><secondary>volatile index</secondary>
</indexterm><indexterm><primary>Data Definition Language (DDL) statements</primary>
<secondary>CREATE INDEX </secondary></indexterm>
<para>The CREATE INDEX statement creates an SQL index based on one
or more columns of a table or table-like object. The CREATE VOLATILE
INDEX statement creates an SQL index with a lifespan that is limited
to the SQL session that the index is created. Volatile indexes are
dropped automatically when the session ends. See <xref
linkend="i1017920" role="select:quotedtitle page"/>.</para>
<para>CREATE INDEX is a Trafodion SQL extension.</para>
<note>
<para>DDL statements are not currently supported in transactions.
That means that you cannot run this statement inside a user-defined
transaction (BEGIN WORK...COMMIT WORK) or when AUTOCOMMIT is OFF.
To run this statement, AUTOCOMMIT must be turned ON (the default)
for the session.</para>
</note>
<indexterm><primary>CREATE INDEX statement</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>CREATE VOLATILE
INDEX statement</primary><secondary>syntax diagram of</secondary>
</indexterm>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>CREATE [VOLATILE] <literal
condition="hidden">[UNIQUE] </literal>INDEX <replaceable>index</replaceable
> ON <replaceable>table</replaceable>
   (<replaceable>column-name</replaceable> [ASC[ENDING] | DESC[ENDING]] 
     [,<replaceable>column-name</replaceable> [ASC[ENDING] | DESC[ENDING]]]...)
<literal>   [HBASE_OPTIONS (<replaceable>hbase-options-list</replaceable
>)]
   [SALT LIKE TABLE]

<literal><replaceable>hbase-options-list</replaceable> is:
   <replaceable>hbase-option</replaceable> = '<replaceable>value</replaceable
>'[, <replaceable>hbase-option</replaceable> = '<replaceable>value</replaceable
>']...</literal>
</literal><literal condition="hidden"> 
   [<replaceable>populate-option</replaceable>] 
</literal><literal condition="hidden">   [DIVISION LIKE TABLE]

</literal><literal condition="hidden"><replaceable>populate-option</replaceable
> is: 
</literal><literal condition="hidden">   [POPULATE | NO POPULATE]</literal
></programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="i1064117">
<title>Syntax Description of CREATE INDEX</title>
<variablelist>
<varlistentry condition="hidden"><term>UNIQUE</term>
<listitem><para>specifies that the values (including NULL values)
in the column or set of columns that make up the index cannot contain
more than one occurrence of the same value or set of values. For indexes
with multiple columns, the values of the columns as a group determine
uniqueness, not the values of the individual columns.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>index</replaceable></term>
<listitem><para>is an SQL identifier that specifies the simple name
for the new index. You cannot qualify <replaceable>index</replaceable
> with its schema name. Indexes have their own namespace within a
schema, so an index name might be the same as a table or constraint
name. However, no two indexes in a schema can have the same name.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>table</replaceable></term>
<listitem><para>is the name of the table for which to create the index.
See <xref linkend="i1013018" role="select:quotedtitle page"/>. </para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>column-name</replaceable> [ASC[ENDING]
| DESC[ENDING]]    [,<replaceable>column-name</replaceable> [ASC[ENDING]
| DESC[ENDING]]]...</term>
<listitem><para>specifies the columns in <replaceable>table</replaceable
> to include in the index. The order of the columns in the index need
not correspond to the order of the columns in the table. </para><para
>ASCENDING or DESCENDING specifies the storage and retrieval order
for rows in the index. The default is ASCENDING.</para>
<para>Rows are ordered by values in the first column specified for
the index. If multiple index rows share the same value for the first
column, the values in the second column are used to order the rows,
and so forth. If duplicate index rows occur in a nonunique index,
their order is based on the sequence specified for the columns of
the key of the underlying table. For ordering (but not for other purposes),
nulls are greater than other values. </para>
</listitem>
</varlistentry>
<varlistentry condition="hidden"><term>DIVISION LIKE TABLE</term>
<listitem><para>specifies that the index will use the same DIVISION
BY clause as the source table. For unique indexes, this option is
allowed only if the DIVISION BY clause of the source table references
only the unique columns listed in the CREATE INDEX statement. See <xref
linkend="i1063425" role="select:quotedtitle page"/>.</para><indexterm>
<primary>Hot/cold data</primary><secondary>CREATE INDEX statement</secondary>
</indexterm><indexterm><primary>CREATE INDEX statement</primary>
<secondary>DIVISION LIKE clause</secondary></indexterm><indexterm>
<primary>DIVISION LIKE clause</primary><secondary>on CREATE INDEX
statement</secondary></indexterm><indexterm><primary>CREATE INDEX
statement</primary><secondary>hot/cold data</secondary></indexterm>
</listitem>
</varlistentry>
<varlistentry condition="hidden"><term><replaceable>populate-option</replaceable
></term>
<listitem><para>When you create an index and do not specify POPULATE
or NO POPULATE, POPULATE is assumed. If you create an index using
NO POPULATE, you must later request a POPULATE INDEX utility to actually
load the data.</para>
<variablelist>
<varlistentry><term>NO POPULATE</term>
<listitem><para>specifies that the index is not to be populated when
it is created. The indexes are created, but no data is written to
the index, and it is marked <replaceable>offline</replaceable>. You
can drop an offline index with the DROP INDEX statement. The DROP
TABLE statement also drops offline indexes of the specified table.
DML statements have no effect on offline indexes. By using the POPULATE
INDEX utility, you can populate an offline index and remove its offline
designation.</para></listitem>
</varlistentry>
<varlistentry><term>POPULATE</term>
<listitem><para>Specifies that the index is to be created and populated.
If you omit the <replaceable>populate-option</replaceable>, the default
is POPULATE.</para></listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term>HBASE_OPTIONS (<replaceable>hbase-option</replaceable
> = '<replaceable>value</replaceable>'[, <replaceable>hbase-option</replaceable
> = '<replaceable>value</replaceable>']...)</term>
<listitem><para>a list of HBase options to set for the index. These
options are applied independently of any HBase options set for the
index’s table.</para>
<variablelist>
<varlistentry><term><replaceable>hbase-option</replaceable> = '<replaceable
>value</replaceable>'</term>
<listitem><para>is one of the these HBase options and its assigned
value:</para>
<informaltable frame="all">
<tgroup cols="2" colsep="1" rowsep="1">
<colspec colname="col1" colwidth="0.70*"/>
<colspec colname="col2" colwidth="1.30*"/>
<thead>
<row rowsep="1" valign="bottom"><entry align="left" valign="bottom"
>HBase Option</entry><entry align="left" valign="bottom">Accepted
Values<footnote>
<para>Values in boldface are default values.</para>
</footnote></entry></row>
</thead>
<tbody>
<row><entry>BLOCKCACHE</entry><entry><emphasis role="bold">'true'</emphasis
> | 'false'</entry></row>
<row><entry>BLOCKSIZE</entry><entry><emphasis role="bold">'65536'</emphasis
> | '<replaceable>positive-integer</replaceable>'</entry></row>
<row><entry>BLOOMFILTER</entry><entry>'NONE' | <emphasis role="bold"
>'ROW'</emphasis> | 'ROWCOL'</entry></row>
<row><entry>CACHE_BLOOMS_ON_WRITE</entry><entry><emphasis role="bold"
>'true'</emphasis> | 'false'</entry></row>
<row><entry>CACHE_DATA_ON_WRITE</entry><entry><emphasis role="bold"
>'true'</emphasis> | 'false'</entry></row>
<row><entry>CACHE_INDEXES_ON_WRITE</entry><entry><emphasis role="bold"
>'true'</emphasis> | 'false'</entry></row>
<row><entry>COMPACT</entry><entry><emphasis role="bold">'true'</emphasis
> | 'false'</entry></row>
<row><entry>COMPACT_COMPRESSION</entry><entry>'GZ' | 'LZ4' | 'LZO'
| <emphasis role="bold">'NONE'</emphasis> | 'SNAPPY'</entry></row>
<row><entry>COMPRESSION</entry><entry>'GZ' | 'LZ4' | 'LZO' | <emphasis
role="bold">'NONE'</emphasis> | 'SNAPPY'</entry></row>
<row><entry>DATA_BLOCK_ENCODING</entry><entry>'DIFF' | 'FAST_DIFF'
| <emphasis role="bold">'NONE'</emphasis> | 'PREFIX'</entry></row>
<row><entry>DURABILITY</entry><entry>'USE_DEFAULT' | <emphasis
role="bold">'SKIP_WAL'</emphasis> | 'ASYNC_WAL' | 'SYNC_WAL' | 'FSYNC_WAL'</entry>
</row>
<row><entry>EVICT_BLOCKS_ON_CLOSE</entry><entry>'true' | <emphasis
role="bold">'false'</emphasis></entry></row>
<row><entry>IN_MEMORY</entry><entry>'true' | <emphasis role="bold"
>'false'</emphasis></entry></row>
<row><entry>KEEP_DELETED_CELLS</entry><entry>'true' | <emphasis
role="bold">'false'</emphasis></entry></row>
<row><entry>MAX_FILESIZE</entry><entry>'<replaceable>positive-integer</replaceable
>'</entry></row>
<row><entry>MAX_VERSIONS</entry><entry><emphasis role="bold">'1'</emphasis
> | '<replaceable>positive-integer</replaceable>'</entry></row>
<row><entry>MEMSTORE_FLUSH_SIZE</entry><entry>'<replaceable>positive-integer</replaceable
>'</entry></row>
<row><entry>MIN_VERSIONS</entry><entry><emphasis role="bold">'0'</emphasis
> | '<replaceable>positive-integer</replaceable>'</entry></row>
<row><entry>PREFIX_LENGTH_KEY</entry><entry>'<replaceable>positive-integer</replaceable
>', which should be less than maximum length of the key for the table.
It applies only if the SPLIT_POLICY is KeyPrefixRegionSplitPolicy.</entry>
</row>
<row><entry>REPLICATION_SCOPE</entry><entry><emphasis role="bold"
>'0'</emphasis> | '1'</entry></row>
<row><entry>SPLIT_POLICY</entry><entry><emphasis role="bold">'org.apache.hadoop.hbase.regionserver.ConstantSizeRegionSplitPolicy'</emphasis
> | 'org.apache.hadoop.hbase.regionserver.IncreasingToUpperBoundRegionSplitPolicy'
| 'org.apache.hadoop.hbase.regionserver.KeyPrefixRegionSplitPolicy'</entry>
</row>
<row><entry>TTL</entry><entry><emphasis role="bold">'-1'</emphasis
> (forever) | '<replaceable>positive-integer</replaceable>'</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term>SALT LIKE TABLE</term>
<listitem><para>causes the index to use the same salting scheme (that
is, <literal>SALT USING <replaceable>num</replaceable> PARTITIONS
[ON (<replaceable>column</replaceable>[, <replaceable>column</replaceable
>]...)]</literal>) as its base table.</para></listitem>
</varlistentry>
</variablelist>
</section>
<section id="i1005979">
<title>Considerations for CREATE INDEX</title>
<indexterm><primary>CREATE INDEX statement</primary><secondary>considerations
for</secondary></indexterm><indexterm><primary>Indexes</primary>
<secondary>and transactions</secondary></indexterm>
<para>Indexes are created under a single transaction. When an index
is created, the following steps occur:</para>
<itemizedlist>
<listitem><para>Transaction begins (either a user-started transaction
or a system-started transaction).</para></listitem>
<listitem><para>Rows are written to the metadata.</para></listitem>
<listitem><para>Physical labels are created to hold the index (as
non audited).</para></listitem>
<listitem><para>The base table is locked for read shared access which
prevents inserts, updates, and deletes on the base table from occurring.</para>
</listitem>
<listitem><para>The index is loaded by reading the base table for
read uncommitted access using side tree inserts.<note><indexterm>
<primary>Side tree insert</primary><secondary>definition of</secondary>
</indexterm><indexterm><primary>INSERT statement</primary><secondary
>side tree</secondary></indexterm>
<para>A side tree insert is a fast way of loading data that can perform
specialized optimizations because the partitions are not audited and
empty.</para>
</note></para></listitem>
<listitem><para>After load is complete, the index audit attribute
is turned on and it is attached to the base table (to bring the index
online).</para></listitem>
<listitem><para>The transaction is committed, either by the system
or later by the requestor.</para></listitem>
</itemizedlist>
<para>If the operation fails after basic semantic checks are performed,
the index no longer exists and the entire transaction is rolled back
even if it is a user-started transaction. </para>
<section>
<title>Authorization and Availability Requirements</title>
<indexterm><primary>CREATE INDEX statement</primary><secondary>authorization
requirements </secondary></indexterm>
<para>An index always has the same security as the table it indexes.</para>
<para><phrase condition="hidden">When the POPULATE option is specified, </phrase
>CREATE INDEX locks out INSERT, DELETE, and UPDATE operations on the
table being indexed. If other processes have rows in the table locked
when the operation begins, CREATE INDEX waits until its lock request
is granted or timeout occurs. <phrase condition="hidden">If you want
to access the data while populating the index, use the POPULATE INDEX
utility.</phrase></para>
<para>You cannot access an index directly.</para>
<section>
<title>Required Privileges</title>
<para>To issue a CREATE INDEX statement, one of the following must
be true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT.</para></listitem>
<listitem><para>You are creating the table in a shared schema.</para>
</listitem>
<listitem><para>You are the private schema owner.</para></listitem>
<listitem><para>You are the owner of the table.</para></listitem>
<listitem><para>You have the ALTER, ALTER_TABLE, CREATE, or CREATE_INDEX
component privilege for the SQL_OPERATIONS component.</para>
<note>
<para>In this case, if you create an index in a private schema, it
will be owned by the schema owner.</para>
</note>
</listitem>
</itemizedlist>
</section>
</section>
<section>
<title>Limits on Indexes</title>
<indexterm><primary>CREATE INDEX statement</primary><secondary>limits
on indexes</secondary></indexterm><indexterm><primary>Limits</primary>
<secondary>indexes</secondary></indexterm>
<para>For nonunique indexes, the sum of the lengths of the columns
in the index plus the sum of the length of the clustering key of the
underlying table cannot exceed 2048 bytes. <phrase condition="hidden"
>For unique indexes, the sum of the lengths of the columns in the
index cannot exceed 2048 bytes.</phrase></para>
<para>No restriction exists on the number of indexes per table. </para>
</section>
</section>
<section id="i1005999">
<title>Examples of CREATE INDEX</title>
<itemizedlist>
<listitem><para><indexterm><primary>CREATE INDEX statement</primary>
<secondary>examples of</secondary></indexterm>This example creates
an index on two columns of a table:</para>
<programlisting>CREATE INDEX xempname
  ON persnl.employee (last_name, first_name);
</programlisting>
</listitem>
<listitem condition="hidden"><para>This example creates a unique index
with a division column. The table contains this DIVISION BY clause:
CREATE TABLE T... DIVISION BY ( <literal>left</literal>(<literal>b,3</literal
>) )...</para>
<programlisting>CREATE UNIQUE INDEX IX on <computeroutput>T(b,c)</computeroutput
> DIVISION LIKE TABLE;</programlisting>
</listitem>
<listitem condition="hidden"><para>This example attempts to create
a unique index with the DIVISION LIKE clause on column (c). However,
because the source table does not reference that column in the DIVISION
BY clause, this action is not allowed:</para>
<programlisting>CREATE UNIQUE INDEX IX2 ON T(c) DIVISION LIKE TABLE;</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="CREATE-LIBRARY" pagebreak="yes">
<title>CREATE LIBRARY Statement</title>
<itemizedlist>
<listitem><para><xref linkend="CREATE-LIB-SYNTAX"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="CREATE-LIB-CONSIDERATIONS"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="CREATE-LIB-EXAMPLES"
role="select:quotedtitle"/></para></listitem>
</itemizedlist>
<indexterm><primary>CREATE LIBRARY statement</primary></indexterm>
<indexterm><primary>Data Definition Language (DDL) statements</primary>
<secondary>CREATE LIBRARY</secondary></indexterm><indexterm><primary
>Stored procedure statements</primary><secondary>CREATE LIBRARY</secondary>
</indexterm>
<para>The CREATE LIBRARY statement registers a library object in a
Trafodion database. A library object can be an SPJ's JAR file or a
UDF's library file.</para>
<para>CREATE LIBRARY is a Trafodion SQL extension.</para>
<note>
<para>DDL statements are not currently supported in transactions.
That means that you cannot run this statement inside a user-defined
transaction (BEGIN WORK...COMMIT WORK) or when AUTOCOMMIT is OFF.
To run this statement, AUTOCOMMIT must be turned ON (the default)
for the session.</para>
</note>
<indexterm><primary>CREATE LIBRARY statement</primary><secondary>syntax
diagram of</secondary></indexterm>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>CREATE LIBRARY [[<replaceable>catalog-name</replaceable
>.]<replaceable>schema-name</replaceable>.]<replaceable>library-name</replaceable
> 
   FILE '<replaceable>library-filename</replaceable>'
   [HOST NAME '<replaceable>host-name</replaceable>']
   [LOCAL FILE '<replaceable>host-filename</replaceable>']
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="CREATE-LIB-SYNTAX">
<title>Syntax Description of CREATE LIBRARY</title>
<variablelist>
<varlistentry><term>[[<replaceable>catalog-name</replaceable>.]<replaceable
>schema-name</replaceable>.]<replaceable>library-name</replaceable
></term>
<listitem><para>specifies the ANSI logical name of the library object,
where each part of the name is a valid SQL identifier with a maximum
of 128 characters. Specify a name that is unique and does not exist
for libraries in the same schema. If you do not fully qualify the
library name, Trafodion SQL qualifies it according to the schema of
the current session. For more information, see <xref linkend="i1032512"
role="select:quotedtitle page"/> and <xref linkend="i1013018"
role="select:quotedtitle page"/>. </para></listitem>
</varlistentry>
<varlistentry><term>FILE '<replaceable>library-filename</replaceable
>'</term>
<listitem><para>specifies the full path of a deployed library file,
which either an SPJ's JAR file or a UDF's library file.</para>
<note>
<para>Make sure to upload the library file to the Trafodion cluster
and then copy the library file to the same directory on all the nodes
in the cluster before running the CREATE LIBRARY statement. Otherwise,
you will see an error message indicating that the JAR or DLL file
was not found.</para>
</note>
</listitem>
</varlistentry>
<varlistentry><term>HOST NAME '<replaceable>host-name</replaceable
>'</term>
<listitem><para>specifies the name of the client host machine where
the deployed file resides.</para>
<!--WRITER'S NOTE: When is this option needed? What is it used for?-->
</listitem>
</varlistentry>
<varlistentry><term>LOCAL FILE '<replaceable>host-filename</replaceable
>'</term>
<listitem><para>specifies the path on the client host machine where
the deployed file is stored.</para>
<!--WRITER'S NOTE: When is this option needed? What is it used for?-->
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="CREATE-LIB-CONSIDERATIONS">
<title>Considerations for CREATE LIBRARY</title>
<indexterm><primary>CREATE LIBRARY statement</primary><secondary>considerations
for</secondary></indexterm>
<itemizedlist>
<listitem><para>A library object cannot refer to a library file referenced
by another library object.  If the <replaceable>library-filename</replaceable
> is in use by another library object, the CREATE LIBRARY command
will fail.</para></listitem>
<listitem><para>The <replaceable>library-filename</replaceable> must
specify an existing file. Otherwise, the CREATE LIBRARY command will
fail.</para></listitem>
<listitem><para>The CREATE LIBRARY command does not verify that the
specified <replaceable>library-filename</replaceable> is a valid executable
file.</para></listitem>
<listitem><para>HOST NAME and LOCAL FILE are position dependent. <!--WRITER'S NOTE: What does this mean? Need an example.--></para>
</listitem>
</itemizedlist>
<section>
<title>Required Privileges</title>
<para>To issue a CREATE LIBRARY statement, one of the following must
be true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT.</para></listitem>
<listitem><para>You are creating the library in a shared schema and
have the MANAGE_LIBRARY privilege. </para></listitem>
<listitem><para>You are the private schema owner and have the MANAGE_LIBRARY
privilege.</para></listitem>
<listitem><para>You have the CREATE or CREATE_LIBRARY component privilege
for the SQL_OPERATIONS component and have the MANAGE_LIBRARY privilege.</para>
<note>
<para>In this case, if you create a library in a private schema, it
will be owned by the schema owner.</para>
</note>
</listitem>
</itemizedlist>
</section>
</section>
<section id="CREATE-LIB-EXAMPLES">
<title>Examples of CREATE LIBRARY</title>
<indexterm><primary>CREATE LIBRARY statement</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>This CREATE LIBRARY statement registers a library
named SALESLIB in the SALES schema for a JAR file (SPJs):</para>
<programlisting>CREATE LIBRARY sales.saleslib FILE '/opt/home/trafodion/spjjars/Sales.jar';</programlisting>
</listitem>
<listitem><para>This CREATE LIBRARY statement registers a library
named MYUDFS in the default schema for a library file (UDFs):</para>
<programlisting>CREATE LIBRARY myudfs FILE $UDFLIB;</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="CREATE-PROCEDURE" pagebreak="yes">
<title>CREATE PROCEDURE Statement</title>
<itemizedlist>
<listitem><para><xref linkend="CREATE-PROC-SYNTAX"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="CREATE-PROC-CONSIDERATIONS"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="CREATE-PROC-EXAMPLES"
role="select:quotedtitle"/></para></listitem>
</itemizedlist>
<indexterm><primary>CREATE PROCEDURE statement</primary></indexterm>
<indexterm><primary>Data Definition Language (DDL) statements</primary>
<secondary>CREATE PROCEDURE</secondary></indexterm><indexterm><primary
>Stored procedure statements</primary><secondary>CREATE PROCEDURE</secondary>
</indexterm>
<para>The CREATE PROCEDURE statement registers a Java method as a
stored procedure in Java (SPJ) within a Trafodion database.</para>
<note>
<para>DDL statements are not currently supported in transactions.
That means that you cannot run this statement inside a user-defined
transaction (BEGIN WORK...COMMIT WORK) or when AUTOCOMMIT is OFF.
To run this statement, AUTOCOMMIT must be turned ON (the default)
for the session.</para>
</note>
<indexterm><primary>CREATE PROCEDURE statement</primary><secondary
>syntax diagram of</secondary></indexterm>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>CREATE PROCEDURE <replaceable>procedure-ref</replaceable
>([<replaceable>sql-parameter-list</replaceable>])
   EXTERNAL NAME '<replaceable>java-method-name</replaceable> [<replaceable
>java-signature</replaceable>]'
   LIBRARY [[<replaceable>catalog-name</replaceable>.]<replaceable
>schema-name</replaceable>.]<replaceable>library-name</replaceable
>
   [EXTERNAL SECURITY <replaceable>external-security-type</replaceable
>]
   LANGUAGE JAVA
   PARAMETER STYLE JAVA
   [NO SQL | CONTAINS SQL | MODIFIES SQL DATA | READS SQL DATA]
   [DYNAMIC RESULT SETS <replaceable>integer</replaceable>]
   [TRANSACTION REQUIRED | NO TRANSACTION REQUIRED]
   [DETERMINISTIC | NOT DETERMINISTIC]
   [NO ISOLATE | ISOLATE]

<replaceable>procedure-ref</replaceable> is:
   [[<replaceable>catalog-name</replaceable>.]<replaceable>schema-name</replaceable
>.]<replaceable>procedure-name</replaceable>

<replaceable>sql-parameter-list</replaceable> is:
   <replaceable>sql-parameter</replaceable>[, <replaceable>sql-parameter</replaceable
>]...

<replaceable>sql-parameter</replaceable> is:
   [<replaceable>parameter-mode</replaceable>] [<replaceable>sql-identifier</replaceable
>] <replaceable>sql-datatype</replaceable>

<replaceable>parameter-mode</replaceable> is:
     IN
   | OUT
   | INOUT

<replaceable>java-method-name</replaceable> is:
   [<replaceable>package-name</replaceable>.]<replaceable>class-name</replaceable
>.<replaceable>method-name</replaceable>

<replaceable>java-signature</replaceable> is:
   ([<replaceable>java-parameter-list</replaceable>])

<replaceable>java-parameter-list</replaceable> is:
   <replaceable>java-datatype</replaceable>[, <replaceable>java-datatype</replaceable
>]...

<replaceable>external-security-type</replaceable> is:
     DEFINER
   | INVOKER
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<note>
<para>Delimited variables in this syntax diagram are case-sensitive.
Case-sensitive variables include <replaceable>java-method-name</replaceable
>, <replaceable>java-signature</replaceable>, and <replaceable>class-file-path</replaceable
>, and any delimited part of the <replaceable>procedure-ref</replaceable
>. The remaining syntax is not case-sensitive.</para>
</note>
<section id="CREATE-PROC-SYNTAX">
<title>Syntax Description of CREATE PROCEDURE</title>
<variablelist>
<varlistentry><term><replaceable>procedure-ref</replaceable>([<replaceable
>sql-parameter</replaceable>[, <replaceable>sql-parameter</replaceable
>]...])</term>
<listitem><para>specifies the name of the stored procedure in Java
(SPJ) and any SQL parameters that correspond to the signature of the
SPJ method.</para>
<variablelist>
<varlistentry><term><replaceable>procedure-ref</replaceable></term>
<listitem><para>specifies an ANSI logical name of the form:</para>
<programlisting>[[<replaceable>catalog-name</replaceable>.]<replaceable
>schema-name</replaceable>.]<replaceable>procedure-name</replaceable
></programlisting>
<para>where each part of the name is a valid SQL identifier with a
maximum of 128 characters. For more information, see <xref
linkend="i1032512" role="select:quotedtitle page"/> and <xref
linkend="i1013018" role="select:quotedtitle page"/>.</para>
<para>Specify a name that is unique and does not exist for any procedure
or function in the same schema. Trafodion SQL does not support the
overloading of procedure names. That is, you cannot register the same
procedure name more than once with different underlying SPJ methods.</para>
<para>If you do not fully qualify the procedure name, Trafodion SQL
qualifies it according to the schema of the current session.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>sql-parameter</replaceable></term>
<listitem><para>specifies an SQL parameter that corresponds to the
signature of the SPJ method:</para>
<programlisting>[<replaceable>parameter-mode</replaceable>] [<replaceable
>sql-identifier</replaceable>] <replaceable>sql-datatype</replaceable
></programlisting>
<variablelist>
<varlistentry><term><replaceable>parameter-mode</replaceable></term>
<listitem><para>specifies the mode IN, OUT, or INOUT of a parameter.
The default is IN.</para>
<variablelist>
<varlistentry><term>IN</term>
<listitem><para>specifies a parameter that passes data to an SPJ.</para>
</listitem>
</varlistentry>
<varlistentry><term>OUT</term>
<listitem><para>specifies a parameter that accepts data from an SPJ.
The parameter must be an array.</para></listitem>
</varlistentry>
<varlistentry><term>INOUT</term>
<listitem><para>specifies a parameter that passes data to and accepts
data from an SPJ. The parameter must be an array.</para></listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>sql-identifier</replaceable></term>
<listitem><para>specifies an SQL identifier for the parameter. For
more information, see <xref linkend="i1032512"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>sql-datatype</replaceable></term>
<listitem><para>specifies an SQL data type that corresponds to the
Java parameter of the SPJ method. <replaceable>sql-datatype</replaceable
> can be:</para>
<informaltable frame="all">
<tgroup cols="2" colsep="1" rowsep="1">
<colspec colname="col1"/>
<colspec colname="col2"/>
<thead>
<row rowsep="1" valign="bottom"><entry align="left" valign="bottom"
>SQL Data Type <indexterm><primary>SQL data types</primary></indexterm
><indexterm><primary>Data types</primary><secondary>SQL</secondary>
</indexterm> </entry><entry align="left" valign="bottom">Maps to Java
Data Type... <indexterm><primary>Java data types</primary></indexterm
><indexterm><primary>Data types</primary><secondary>Java</secondary>
</indexterm></entry></row>
</thead>
<tbody>
<row><entry><literallayout>CHAR[ACTER] 
CHAR[ACTER] VARYING 
VARCHAR 
PIC[TURE] X<footnote id="foot_picx">
<para>The Trafodion database stores PIC X as a CHAR data type.</para>
</footnote>
NCHAR 
NCHAR VARYING 
NATIONAL CHAR[ACTER] 
NATIONAL CHAR[ACTER] VARYING</literallayout></entry><entry><literal
>java.lang.String</literal></entry></row>
<row><entry><literallayout>DATE</literallayout></entry><entry><literal
>java.sql.Date</literal></entry></row>
<row><entry><literallayout>TIME</literallayout></entry><entry><literal
>java.sql.Time</literal></entry></row>
<row><entry><literallayout>TIMESTAMP</literallayout></entry><entry
><literal>java.sql.Timestamp</literal></entry></row>
<row><entry><indexterm><primary>Bignum</primary></indexterm><literallayout
>NUMERIC (including NUMERIC with a precision greater than eighteen)<footnote
id="foot_signed">
<para>Numeric data types of SQL parameters must be SIGNED, which is the default in the Trafodion database.</para>
</footnote>
DEC[IMAL]<footnoteref linkend="foot_signed"/>
PIC[TURE] S9<footnote id="foot_pics9">
<para>The Trafodion database stores PIC S9 as a DECIMAL or NUMERIC data type.</para>
</footnote></literallayout></entry><entry><literal>java.math.BigDecimal</literal
></entry></row>
<row><entry><literallayout>SMALLINT<footnoteref linkend="foot_signed"
/></literallayout></entry><entry><literal>short</literal></entry></row>
<row><entry><literallayout>INT[EGER]<footnoteref linkend="foot_signed"
/></literallayout></entry><entry><literal>int</literal> or <literal
>java.lang.Integer</literal><footnote id="foot_javawrap">
<para>By default, the SQL data type maps to a Java primitive type.
The SQL data type maps to a Java wrapper class only if you specify
the wrapper class in the Java signature of the EXTERNAL NAME clause.</para>
</footnote></entry></row>
<row><entry><literallayout>LARGEINT<footnoteref linkend="foot_signed"
/></literallayout></entry><entry><literal>long</literal> or <literal
>java.lang.Long</literal><footnoteref linkend="foot_javawrap"/></entry>
</row>
<row><entry><literallayout>FLOAT</literallayout></entry><entry><literal
>double</literal> or <literal>java.lang.Double</literal><footnoteref
linkend="foot_javawrap"/></entry></row>
<row><entry><literallayout>REAL</literallayout></entry><entry><literal
>float</literal> or <literal>java.lang.Float</literal><footnoteref
linkend="foot_javawrap"/></entry></row>
<row><entry><literallayout>DOUBLE PRECISION</literallayout></entry>
<entry><literal>double</literal> or <literal>java.lang.Double</literal
><footnoteref linkend="foot_javawrap"/></entry></row>
</tbody>
</tgroup>
</informaltable>
<para>For more information, see <xref linkend="i1010093"
role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term>EXTERNAL NAME '<replaceable>java-method-name</replaceable
> [<replaceable>java-signature</replaceable>]'</term>
<listitem>
<variablelist>
<varlistentry><term><replaceable>java-method-name</replaceable></term>
<listitem><para>specifies the case-sensitive name of the SPJ method
of the form:</para><para><programlisting>[<replaceable>package-name</replaceable
>.]<replaceable>class-name</replaceable>.<replaceable>method-name</replaceable
></programlisting></para>
<para>The Java method must exist in a Java class file, <literal><replaceable
>class-name</replaceable>.class</literal>, within a library registered
in the database. The Java method must be defined as <literal>public</literal
> and <literal>static</literal> and have a return type of <literal
>void</literal>. </para>
<para>If the class file that contains the SPJ method is part of a
package, you must also specify the package name. If you do not specify
the package name, the CREATE PROCEDURE statement fails to register
the SPJ.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>java-signature</replaceable></term>
<listitem><para>specifies the signature of the SPJ method and consists
of:</para><para><programlisting>([<replaceable>java-datatype</replaceable
>[, <replaceable>java-datatype</replaceable>]...])</programlisting
></para>
<para>The Java signature is necessary only if you want to specify
a Java wrapper class (for example, <literal>java.lang.Integer</literal
>) instead of a Java primitive data type (for example, <literal>int</literal
>). An SQL data type maps to a Java primitive data type by default.</para>
<para>The Java signature is case-sensitive and must be placed within
parentheses, such as <literal>(java.lang.Integer, java.lang.Integer)</literal
>. The signature must specify each of the parameter data types in
the order they appear in the Java method definition within the class
file. Each Java data type that corresponds to an OUT or INOUT parameter
must be followed by empty square brackets ([ ]), such as <literal
>java.lang.Integer[]</literal>.</para>
<variablelist>
<varlistentry><term><replaceable>java-datatype</replaceable></term>
<listitem><para>specifies a mappable Java data type. For the mapping
of the Java data types to SQL data types, see <replaceable>sql-datatype</replaceable
>.</para></listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term>LIBRARY [[<replaceable>catalog-name</replaceable
>.]<replaceable>schema-name</replaceable>.]<replaceable>library-name</replaceable
></term>
<listitem><para>specifies the ANSI logical name of a library containing
the SPJ method. If you do not fully qualify the library name, Trafodion
SQL qualifies it according to the schema of the current session.</para>
</listitem>
</varlistentry>
<varlistentry><term>EXTERNAL SECURITY <replaceable>external-security-type</replaceable
></term>
<listitem><para>determines the privileges, or rights, that users have
when executing (or calling) the SPJ. An SPJ can have one of these
types of external security:</para>
<itemizedlist>
<listitem><para>INVOKER determines that users can execute, or invoke,
the stored procedure using the privileges of the user who invokes
the stored procedure. This behavior is referred to as <emphasis>invoker
rights</emphasis> and is the default behavior if EXTERNAL SECURITY
is not specified. Invoker rights allow a user who has the execute
privilege on the SPJ to call the SPJ using his or her existing privileges.
In this case, the user must be granted privileges to access the underlying
database objects on which the SPJ operates.</para>
<note>
<para>Granting a user privileges to the underlying database objects
gives the user direct access to those database objects, which could
pose a risk to more sensitive or critical data to which users should
not have access. For example, an SPJ might operate on a subset of
the data in an underlying database object, but that database object
might contain other more sensitive or critical data to which users
should not have access.</para>
</note>
</listitem>
<listitem><para>DEFINER determines that users can execute, or invoke,
the stored procedure using the privileges of the user who created
the stored procedure. This behavior is referred to as <emphasis>definer
rights</emphasis>. The advantage of definer rights is that users are
allowed to manipulate data by invoking the stored procedure without
having to be granted privileges to the underlying database objects.
That way, users are restricted from directly accessing or manipulating
more sensitive or critical data in the database. However, be careful
about the users to whom you grant execute privilege on an SPJ with
definer external security because those users will be able to execute
the SPJ without requiring privileges to the underlying database objects.</para>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry><term>LANGUAGE JAVA</term>
<listitem><para>specifies that the external user-defined routine is
written in the Java language.</para></listitem>
</varlistentry>
<varlistentry><term>PARAMETER STYLE JAVA</term>
<listitem><para>specifies that the run-time conventions for arguments
passed to the external user-defined routine are those of the Java
language.</para></listitem>
</varlistentry>
<varlistentry><term>NO SQL</term>
<listitem><para>specifies that the SPJ cannot perform SQL operations.</para>
</listitem>
</varlistentry>
<varlistentry><term>CONTAINS SQL | MODIFIES SQL DATA | READS SQL DATA</term>
<listitem><para>specifies that the SPJ can perform SQL operations.
All these options behave the same as CONTAINS SQL, meaning that the
SPJ can read and modify SQL data. Use one of these options to register
a method that contains SQL statements. If you do not specify an SQL
access mode, the default is CONTAINS SQL.</para></listitem>
</varlistentry>
<varlistentry><term>DYNAMIC RESULT SETS <replaceable>integer</replaceable
></term>
<listitem><para>specifies the maximum number of result sets that the
SPJ can return. This option is applicable only if the method signature
contains a <literal>java.sql.ResultSet[]</literal> object. If the
method contains a result set object, the valid range is 1 to 255 inclusive.
The actual number of result sets returned by the SPJ method can be
less than or equal to this number. If you do not specify this option,
the default value is 0 (zero), meaning that the SPJ does not return
result sets.</para></listitem>
</varlistentry>
<!--WRITER'S NOTE: Verify this content with Pavani Puppula or Suresh Subbiah. What is the correct default option? Is only NO TRANSACTION REQUIRED supported by Trafodion in Release 1.0? Should this clause be hidden in the manual for Release 1.0?-->
<varlistentry><term>TRANSACTION REQUIRED | NO TRANSACTION REQUIRED</term>
<listitem><para>determines whether the SPJ must run in a transaction
inherited from the calling application (TRANSACTION REQUIRED, the
default option) or whether the SPJ runs without inheriting the calling
application’s transaction (NO TRANSACTION REQUIRED). Typically, you
will want the stored procedure to inherit the transaction from the
calling application. However, if the SPJ method does not access the
database or if you want the stored procedure to manage its own transactions,
you should set the stored procedure’s transaction attribute to NO
TRANSACTION REQUIRED. For more information, see <xref
linkend="Effect-of-Transaction-Attribute-on-SPJ"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term>DETERMINISTIC | NOT DETERMINISTIC</term>
<listitem><para>specifies whether the SPJ always returns the same
values for OUT and INOUT parameters for a given set of argument values
(DETERMINISTIC) or does not return the same values (NOT DETERMINISTIC,
the default option). If you specify DETERMINISTIC, Trafodion SQL is
not required to call the SPJ each time to produce results; instead,
Trafodion SQL caches the results and reuses them during subsequent
calls, thus optimizing the CALL statement.<phrase condition="hidden"
> In the current version, Trafodion SQL allows both options but always
treats the SPJ as nondeterministic.</phrase></para></listitem>
</varlistentry>
<varlistentry><term>NO ISOLATE | ISOLATE</term>
<listitem><para>specifies that the SPJ executes either in the environment
of the database server (NO ISOLATE) or in an isolated environment
(ISOLATE, the default option). Trafodion SQL allows both options but
always executes the SPJ in the UDR server process (ISOLATE).</para>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="CREATE-PROC-CONSIDERATIONS">
<title>Considerations for CREATE PROCEDURE</title>
<indexterm><primary>CREATE PROCEDURE statement</primary><secondary
>considerations for</secondary></indexterm>
<section>
<title>Required Privileges</title>
<para>To issue a CREATE PROCEDURE statement, one of the following
must be true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT.</para></listitem>
<listitem><para>You are creating the procedure in a shared schema,
and you have the USAGE (or ALL) privilege on the library that will
be used in the creation of the stored procedure. The USAGE privilege
provides you with read access to the library’s underlying JAR file,
which contains the SPJ Java method.</para></listitem>
<listitem><para>You are the private schema owner and have the USAGE
(or ALL) privilege on the library that will be used in the creation
of the stored procedure. The USAGE privilege provides you with read
access to the library’s underlying JAR file, which contains the SPJ
Java method.</para></listitem>
<listitem><para>You have the CREATE or CREATE_ROUTINE component level
privilege for the SQL_OPERATIONS component and have the USAGE (or
ALL) privilege on the library that will be used in the creation of
the stored procedure. The USAGE privilege provides you with read access
to the library’s underlying JAR file, which contains the SPJ Java
method.</para>
<note>
<para>In this case, if you create a stored procedure in a private
schema, it will be owned by the schema owner.</para>
</note>
</listitem>
</itemizedlist>
</section>
<!--WRITER'S NOTE: Verify this content with Pavani Puppula or Suresh Subbiah. What is the correct default option? Is only NO TRANSACTION REQUIRED supported by Trafodion in Release 1.0? Should this clause be hidden in the manual for Release 1.0?-->
<section id="Effect-of-Transaction-Attribute-on-SPJ">
<title>Effects of the Transaction Attribute on SPJs</title>
<section>
<title>Transaction Required</title>
<bridgehead>Using Transaction Control Statements or Methods</bridgehead>
<para>If you specify TRANSACTION REQUIRED (the default option), a
CALL statement automatically initiates a transaction if there is no
active transaction. In this case, you should not use transaction control
statements (or equivalent JDBC transaction methods) in the SPJ method.
Transaction control statements include COMMIT WORK and ROLLBACK WORK,
and the equivalent JDBC transaction methods are <literal>Connection.commit()</literal
> and <literal>Connection.rollback(</literal>). If you try to use
transaction control statements or methods in an SPJ method when the
stored procedure’s transaction attribute is set to TRANSACTION REQUIRED,
the transaction control statements or methods in the SPJ method are
ignored, and the Java virtual machine (JVM) does not report any errors
or warnings. When the stored procedure’s transaction attribute is
set to TRANSACTION REQUIRED, you should rely on the transaction control
statements or methods in the application that calls the stored procedure
and allow the calling application to manage the transactions.</para>
<bridgehead>Committing or Rolling Back a Transaction</bridgehead>
<para>If you do not use transaction control statements in the calling
application, the transaction initiated by the CALL statement might
not automatically commit or roll back changes to the database. When
AUTOCOMMIT is ON (the default setting), the database engine automatically
commits or rolls back any changes made to the database at the end
of the CALL statement execution. However, when AUTOCOMMIT is OFF,
the current transaction remains active until the end of the client
session or until you explicitly commit or roll back the transaction.
To ensure an atomic unit of work when calling an SPJ, use the COMMIT
WORK statement in the calling application to commit the transaction
when the CALL statement succeeds, and use the ROLLBACK WORK statement
to roll back the transaction when the CALL statement fails. </para>
</section>
<section>
<title>No Transaction Required</title>
<para>In some cases, you might not want the SPJ method to inherit
the transaction from the calling application. Instead, you might want
the stored procedure to manage its own transactions or to run without
a transaction. Not inheriting the calling application’s transaction
is useful in these cases:</para>
<itemizedlist>
<listitem><para>The stored procedure performs several long-running
operations, such as multiple DDL or table maintenance operations,
on the database. In this case, you might want to commit those operations
periodically from within the SPJ method to avoid locking tables for
a long time.</para></listitem>
<listitem><para>The stored procedure performs certain SQL operations
that must run without an active transaction. For example, INSERT,
UPDATE, and DELETE statements with the WITH NO ROLLBACK option are
rejected when a transaction is already active, as is the case when
a stored procedure inherits a transaction from the calling application.
The PURGEDATA utility is also rejected when a transaction is already
active.</para></listitem>
<listitem><para>The stored procedure does not access the database.
In this case, the stored procedure does not need to inherit the transaction
from the calling application. By setting the stored procedure’s transaction
attribute to NO TRANSACTION REQUIRED, you can avoid the overhead of
the calling application’s transaction being propagated to the stored
procedure.</para></listitem>
</itemizedlist>
<para>In these cases, you should set the stored procedure’s transaction
attribute to NO TRANSACTION REQUIRED when creating the stored procedure.</para>
<para>If you specify NO TRANSACTION REQUIRED and if the SPJ method
creates a JDBC default connection, that connection will have autocommit
enabled by default. You can either use the autocommit transactions
or disable autocommit (<literal>conn.setAutoCommit(false);</literal
>) and use the JDBC transaction methods, <literal>Connection.commit()</literal
> and <literal>Connection.rollback()</literal>, to commit or roll
back work where needed.</para>
</section>
</section>
</section>
<section id="CREATE-PROC-EXAMPLES">
<title>Examples of CREATE PROCEDURE</title>
<indexterm><primary>CREATE PROCEDURE statement</primary><secondary
>examples of</secondary></indexterm>
<itemizedlist>
<listitem><para>This CREATE PROCEDURE statement registers an SPJ named
LOWERPRICE, which does not accept any arguments:</para>
<programlisting>SET SCHEMA SALES;

CREATE PROCEDURE lowerprice()
  EXTERNAL NAME 'Sales.lowerPrice'
  LIBRARY saleslib
  LANGUAGE JAVA
  PARAMETER STYLE JAVA
  MODIFIES SQL DATA;</programlisting>
<para>Because the procedure name is not qualified by a catalog and
schema, Trafodion SQL qualifies it according to the current session
settings, where the catalog is TRAFODION (by default) and the schema
is set to SALES. Since the procedure needs to be able to read and
modify SQL data, MODIFIES SQL DATA is specified in the CREATE PROCEDURE
statement.</para>
<para>To call this SPJ, use this CALL statement:</para>
<programlisting>CALL lowerprice();</programlisting>
<para>The LOWERPRICE procedure lowers the price of items with 50 or
fewer orders by 10 percent in the database.</para>
</listitem>
<listitem><para>This CREATE PROCEDURE statement registers an SPJ named
TOTALPRICE, which accepts three input parameters and returns a numeric
value, the total price to an INOUT parameter:</para>
<programlisting>CREATE PROCEDURE trafodion.sales.totalprice(IN qty NUMERIC (18),
                                            IN rate VARCHAR (10),
                                            INOUT price NUMERIC (18,2))
  EXTERNAL NAME 'Sales.totalPrice'
  LIBRARY sales.saleslib
  LANGUAGE JAVA
  PARAMETER STYLE JAVA
  NO SQL;</programlisting>
<para>To call this SPJ in TrafCI, use these statements:</para>
<programlisting>SET PARAM ?p 10.00;

CALL sales.totalprice(23, 'standard', ?p);

p
--------------------
              253.97

--- SQL operation complete.</programlisting>
<para>Since the procedure does not read and modify any SQL data, NO
SQL is specified in the CREATE PROCEDURE statement.</para>
</listitem>
<listitem><para>This CREATE PROCEDURE statement registers an SPJ named
MONTHLYORDERS, which accepts an integer value for the month and returns
the number of orders:</para>
<programlisting>CREATE PROCEDURE sales.monthlyorders(IN INT, OUT number INT)
  EXTERNAL NAME 'Sales.numMonthlyOrders (int, java.lang.Integer[])'
  LIBRARY sales.saleslib
  LANGUAGE JAVA
  PARAMETER STYLE JAVA
  READS SQL DATA;</programlisting>
<para>Because the OUT parameter is supposed to map to the Java wrapper
class, <literal>java.lang.Integer</literal>, you must specify the
Java signature in the EXTERNAL NAME clause.</para>
<para>To invoke this SPJ, use this CALL statement:</para>
<programlisting>CALL sales.monthlyorders(3, ?);

ORDERNUM
-----------
          4

--- SQL operation complete.</programlisting>
</listitem>
<listitem><para>This CREATE PROCEDURE statement registers an SPJ named
ORDERSUMMARY, which accepts a date (formatted as a string) and returns
information about the orders on or after that date.</para>
<programlisting>CREATE PROCEDURE sales.ordersummary(IN on_or_after_date VARCHAR (20),
                                            OUT num_orders LARGEINT)
  EXTERNAL NAME 'Sales.orderSummary (int, long[])'
  LIBRARY sales.saleslib
  EXTERNAL SECURITY invoker
  LANGUAGE JAVA
  PARAMETER STYLE JAVA
  READS SQL DATA
  DYNAMIC RESULT SETS 2;</programlisting>
<para>To invoke this SPJ, use this CALL statement:</para>
<programlisting>CALL neo.sales.ordersummary('01-01-2014', ?);</programlisting>
<para>The ORDERSUMMARY procedure returns this information about the
orders on or after the specified date, 01-01-2014:</para>
<programlisting>NUM_ORDERS
--------------------
                  13

ORDERNUM NUM_PARTS            AMOUNT               ORDER_DATE LAST_NAME
-------- -------------------- -------------------- ---------- --------------------
  100210                    4 19020.00             2014-04-10 HUGHES
  100250                    4 22625.00             2014-01-23 HUGHES
  101220                    4 45525.00             2014-07-21 SCHNABL
  ... ... ... ... ...

--- 13 row(s) selected.

ORDERNUM PARTNUM UNIT_PRICE QTY_ORDERED PARTDESC
-------- ------- ---------- ----------- ------------------
  100210     244    3500.00           3 PC GOLD, 30 MB
  100210    2001    1100.00           3 GRAPHIC PRINTER,M1
  100210    2403     620.00           6 DAISY PRINTER,T2
  ... ... ... ... ...

--- 70 row(s) selected.

--- SQL operation complete.</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="CreateRole" pagebreak="yes">
<title>CREATE ROLE Statement</title>
<itemizedlist>
<listitem><para><xref linkend="CreateRoleSyntax"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="CreateRoleConsid"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="CreateRoleExample"
role="select:quotedtitle"/></para></listitem>
</itemizedlist>
<indexterm><primary>CREATE ROLE statement</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>Roles</primary>
<secondary>CREATE ROLE statement use of</secondary></indexterm>
<indexterm><primary>Data Definition Language (DDL) statements</primary>
<secondary>CREATE ROLE</secondary></indexterm>
<para>The CREATE ROLE statement creates an SQL role<phrase
condition="hidden"> and optionally a schema managed by that role</phrase
>. See <xref linkend="RolesElement" role="select:quotedtitle page"
/>. </para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>CREATE ROLE <replaceable>role-name</replaceable
> [ WITH ADMIN <replaceable>grantor</replaceable> ] <literal
condition="hidden">[<replaceable>schema-clause</replaceable>]
</literal>

<replaceable>grantor</replaceable> is:
     <replaceable>database-username</replaceable>
<literal condition="hidden">
<replaceable>schema-clause</replaceable> is:
     [ PRIVATE | SHARED ] SCHEMA [<replaceable>schema-name</replaceable
>]
</literal></programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="CreateRoleSyntax">
<title>Syntax Description of CREATE ROLE</title>
<variablelist>
<varlistentry><term><replaceable>role-name</replaceable></term>
<listitem><para>is an SQL identifier that specifies the new role. <replaceable
>role-name</replaceable> is a regular or delimited case-insensitive
identifier. See <xref linkend="csDelimitedIdentifier"
role="select:quotedtitle page"/>. <replaceable>role-name</replaceable
> cannot be an existing role name, and it cannot be a registered database
username. However, <replaceable>role-name</replaceable> can be a configured
directory-service username.</para></listitem>
</varlistentry>
<varlistentry><term>WITH ADMIN <replaceable>grantor</replaceable></term>
<listitem><para>specifies a role owner other than the current user.
This is an optional clause.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>grantor</replaceable></term>
<listitem><para>specifies a registered database username to whom you
assign the role owner.</para></listitem>
</varlistentry>
<varlistentry condition="hidden"><term>[ PRIVATE | SHARED ] SCHEMA
[<replaceable>schema-name</replaceable>]</term>
<listitem><para>creates a schema with the role as the owner of the
schema. If you omit the schema name, the name of the role is used
as the schema name. If a schema with the role name already exists,
the CREATE ROLE statement fails. If you omit PRIVATE or SHARED, a
private schema is created. If you omit the optional SCHEMA clause
from the CREATE ROLE statement, no schema is created, only a role.</para>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="CreateRoleConsid">
<title>Considerations for CREATE ROLE</title>
<indexterm><primary>CREATE ROLE statement</primary><secondary>considerations
for</secondary></indexterm>
<itemizedlist>
<listitem><para>To create a role, you must either be DB__ROOT or have
been granted the MANAGE_ROLES component privilege for SQL_OPERATIONS. </para>
</listitem>
<listitem><para>PUBLIC, _SYSTEM, NONE, and database usernames beginning
with DB__ are reserved. You cannot specify a <replaceable>role-name</replaceable
> with any such name.</para></listitem>
<listitem condition="hidden"><para>If you specify the SCHEMA clause,
any user granted the role can manage the schema and has full DDL authority
for all objects in the schema. </para></listitem>
</itemizedlist>
<section>
<title>Role Ownership</title>
<para> You can give role ownership to a user by specifying the user
in the WITH ADMIN <replaceable>grantor</replaceable> clause with the <replaceable
>grantor</replaceable> as the user.</para>
<para>The role owner can perform these operations:<itemizedlist>
<listitem><para>Grant and revoke the role to users.</para></listitem>
<listitem><para>Drop the role.</para></listitem>
</itemizedlist></para>
<para>Role ownership is permanent. After you create the role, the
ownership of the role cannot be changed or assigned to another user.</para>
</section>
</section>
<section id="CreateRoleExample">
<title>Examples of CREATE ROLE</title>
<indexterm><primary>CREATE ROLE statement</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>To create a role and assign the current user as the
role owner:</para>
<programlisting>CREATE ROLE clerks;
</programlisting>
</listitem>
<listitem><para>To create a role and assign another user as the role
owner: </para>
<programlisting>CREATE ROLE sales WITH ADMIN cmiller;</programlisting>
</listitem>
<listitem condition="hidden"><para>To create a role and a private
schema named SALES:</para>
<programlisting>CREATE ROLE sales SCHEMA;</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1061008" pagebreak="yes">
<title>CREATE SCHEMA Statement</title>
<itemizedlist>
<listitem><para><xref linkend="i1062377" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1084015" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1006263" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>CREATE SCHEMA statement</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>Data Definition
Language (DDL) statements</primary><secondary>CREATE SCHEMA</secondary>
</indexterm>
<para>The CREATE SCHEMA statement creates a schema in the database.
See <xref linkend="i1032499" role="select:quotedtitle page"/>. </para>
<note>
<para>DDL statements are not currently supported in transactions.
That means that you cannot run DDL statements inside a user-defined
transaction (BEGIN WORK...COMMIT WORK) or when AUTOCOMMIT is OFF.
To run these statements, AUTOCOMMIT must be turned ON (the default)
for the session.</para>
</note>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>CREATE [<replaceable>schema-class</replaceable
>] SCHEMA <replaceable>schema-clause</replaceable> 

<replaceable>schema-class</replaceable> is:
  [ PRIVATE | SHARED ]

<replaceable>schema-clause</replaceable> is:
  { <replaceable>schema-name</replaceable> [AUTHORIZATION <replaceable
>authid</replaceable>] | AUTHORIZATION <replaceable>authid</replaceable
> }
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="i1062377">
<title>Syntax Description of CREATE SCHEMA</title>
<variablelist>
<varlistentry><term><replaceable>schema-class</replaceable></term>
<listitem><para>indicates whether access to the schema is restricted
to the authorization ID by default (PRIVATE) or whether any database
user may add objects to the schema (SHARED). The default class is
PRIVATE.</para>
<note>
<para>Schemas created in Trafodion Release 0.9 or earlier are SHARED
schemas.</para>
</note>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>schema-name</replaceable></term>
<listitem><para>is a name for the new schema and is an SQL identifier
that specifies a unique name that is not currently a schema name.
This parameter is optional. However, if you do not specify a schema
name, you must specify the authorization clause. If a schema name
is not provided, the authorization ID is used for the schema name.
If the authorization ID name matches an existing schema, the CREATE
SCHEMA command fails.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>authid</replaceable></term>
<listitem><para>is the name of the database user or role will own
and administer the schema. If this clause is not present, the current
user becomes the schema owner.</para></listitem>
</varlistentry>
</variablelist>
</section>
<section id="i1084015">
<title>Considerations for CREATE SCHEMA</title>
<section>
<title>Reserved Schema Names</title>
<indexterm><primary>Reserved</primary><secondary>schema names</secondary>
</indexterm><indexterm><primary>CREATE SCHEMA statement</primary>
<secondary>reserved schema names</secondary></indexterm><indexterm>
<primary>Schemas </primary><secondary>reserved</secondary></indexterm>
<para>Schema names that begin with a leading underscore (_) are reserved
for future use.</para>
</section>
<section>
<title>AUTHORIZATION Clause</title>
<para>The AUTHORIZATION clause is optional. If you omit this clause,
the current user becomes the schema owner.</para>
<note>
<para>An authorization ID is assigned to a schema name even if authorization
is not enabled for the Trafodion database. However, no enforcement
occurs unless authorization is enabled.</para>
</note>
<para>The schema owner can perform operations on the schema and on
objects within the schema. For example:<itemizedlist>
<listitem><para>Alter DDL of objects</para></listitem>
<listitem><para>Drop the schema</para></listitem>
<listitem><para>Drop objects</para></listitem>
<listitem><para>Manage objects with utility commands such as UPDATE
STATISTICS and PURGEDATA</para></listitem>
</itemizedlist></para>
</section>
<section>
<title>Who Can Create a Schema</title>
<para>The privilege to create a schema is controlled by the component
privilege CREATE_SCHEMA for the SQL_OPERATIONS component. By default,
this privilege is granted to PUBLIC, but it can be revoked by DB__ROOT.</para>
<para>When authorization is initialized, these authorization IDs are
granted the CREATE_SCHEMA privilege:<itemizedlist>
<listitem><para>PUBLIC</para></listitem>
<listitem><para>DB__ROOT</para></listitem>
<listitem><para>DB__ROOTROLE</para></listitem>
</itemizedlist></para>
<para>DB__ROOT or anyone granted the DB_ROOTROLE role can grant the
CREATE_SCHEMA privilege.</para>
</section>
</section>
<section id="i1006263">
<title>Examples of CREATE SCHEMA</title>
<indexterm><primary>CREATE SCHEMA statement</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>This example creates a private schema schema named
MYSCHEMA, which will be owned by the current user:</para>
<programlisting>CREATE SCHEMA myschema;
</programlisting>
</listitem>
<listitem><para>This example creates a shared schema and designates <literal
>CliffG</literal> as the schema owner:</para>
<programlisting>CREATE SHARED SCHEMA hockey_league AUTHORIZATION "CliffG";
</programlisting>
</listitem>
<listitem><para>This example creates a private schema and designates
the role DBA as the schema owner:</para>
<programlisting>CREATE PRIVATE SCHEMA contracts AUTHORIZATION DBA;
</programlisting>
<para>Users with the role DBA granted to them can grant access to
objects in the CONTRACTS schema to other users and roles.</para>
</listitem>
<listitem><para>This example creates a schema named JSMITH:</para>
<programlisting>CREATE PRIVATE SCHEMA AUTHORIZATION JSmith;</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1063425" pagebreak="yes">
<title>CREATE TABLE Statement</title>
<itemizedlist>
<listitem><para><xref linkend="i1082090" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1063165" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1063184" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>CREATE TABLE statement</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>CREATE TABLE
LIKE statement</primary><secondary>syntax diagram of</secondary>
</indexterm><indexterm><primary>File options</primary><secondary>CREATE
TABLE use of</secondary></indexterm><indexterm><primary>Data Definition
Language (DDL) statements</primary><secondary>CREATE TABLE</secondary>
</indexterm><indexterm><primary>File options</primary><secondary>CREATE
TABLE use of</secondary></indexterm><indexterm><primary>CREATE VOLATILE
TABLE statement</primary><secondary>syntax diagram of</secondary>
</indexterm><indexterm><primary>CREATE TABLE AS statement</primary>
<secondary>syntax diagram of</secondary></indexterm><indexterm><primary
>Table</primary><secondary>creating</secondary></indexterm>
<para>The CREATE TABLE statement creates a Trafodion SQL table, which
is a mapping of a relational SQL table to an HBase table. <phrase
>The CREATE VOLATILE TABLE statement creates a temporary Trafodion
SQL table that exists only during an SQL session. </phrase>The CREATE
TABLE AS statement creates a table based on the data attributes of
a SELECT query and populates the table using the data returned by
the SELECT query. See <xref linkend="i1019224"
role="select:quotedtitle page"/>.</para>
<note>
<para>DDL statements are not currently supported in transactions.
That means that you cannot run this statement inside a user-defined
transaction (BEGIN WORK...COMMIT WORK) or when AUTOCOMMIT is OFF.
To run this statement, AUTOCOMMIT must be turned ON (the default)
for the session.</para>
</note>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="4" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" nameend="col4" namest="col1"><programlisting
>CREATE [VOLATILE] TABLE IF NOT EXISTS <replaceable>table</replaceable
> 
    { <replaceable>table-spec</replaceable> | <replaceable>like-spec</replaceable
> }
    [SALT USING <replaceable>num</replaceable> PARTITIONS [ON (<replaceable
>column</replaceable>[, <replaceable>column</replaceable>]...)]]
<literal condition="hidden">    [DIVISION BY (<replaceable>div-expr-list</replaceable
>)]
</literal>    [STORE BY {PRIMARY KEY | (<replaceable>key-column-list</replaceable
>)}]
    <literal>[HBASE_OPTIONS (<replaceable>hbase-options-list</replaceable
>)]
</literal>    <command>[LOAD IF EXISTS | NO LOAD]</command>
    [AS <replaceable>select-query</replaceable>]

<replaceable>table-spec</replaceable> is:
   (<replaceable>table-element</replaceable> [,<replaceable>table-element</replaceable
>]...)

<replaceable>table-element</replaceable> is:
     <replaceable>column-definition</replaceable>
   | [CONSTRAINT <replaceable>constraint-name</replaceable>] <replaceable
>table-constraint</replaceable>

<replaceable>column-definition</replaceable> is:
   <replaceable>column data-type</replaceable> 
   [DEFAULT <replaceable>default</replaceable> | NO DEFAULT]
   [[CONSTRAINT <replaceable>constraint-name</replaceable>] <replaceable
>column-constraint</replaceable>]...

<replaceable>data-type</replaceable> is:
   CHAR[ACTER] [(<replaceable>length</replaceable> [CHARACTERS])] 
         [CHARACTER SET <replaceable>char-set-name</replaceable>] 
         [UPSHIFT] [[NOT]CASESPECIFIC] 
   | CHAR[ACTER] VARYING (<replaceable>length</replaceable> [CHARACTERS]) 
         [CHARACTER SET <replaceable>char-set-name]</replaceable> 
         [UPSHIFT] [[NOT]CASESPECIFIC] 
   | VARCHAR (<replaceable>length</replaceable>) [CHARACTER SET <replaceable
>char-set-name</replaceable>] 
         [UPSHIFT] [[NOT]CASESPECIFIC]
   | NCHAR (<replaceable>length</replaceable>) [CHARACTERS] [UPSHIFT] [[NOT]CASESPECIFIC]  
   | NCHAR VARYING(<replaceable>length</replaceable> [CHARACTERS]) [UPSHIFT] [[NOT] CASESPECIFIC] 
   | NUMERIC [(<replaceable>precision</replaceable> [,<replaceable
>scale</replaceable>])] [SIGNED|UNSIGNED] 
   | SMALLINT [SIGNED|UNSIGNED]
   | INT[EGER] [SIGNED|UNSIGNED] 
   | LARGEINT
   | DEC[IMAL] [(<replaceable>precision</replaceable> [,<replaceable
>scale</replaceable>])] [SIGNED|UNSIGNED]
   | FLOAT [(<replaceable>precision</replaceable>)]   
   | REAL                  
   | DOUBLE PRECISION      
   | DATE                  
   | TIME [(<replaceable>time-precision</replaceable>)] 
   | TIMESTAMP [(<replaceable>timestamp-precision</replaceable>)]  
   | INTERVAL { <replaceable>start-field</replaceable> TO <replaceable
>end-field</replaceable> | <replaceable>single-field</replaceable
> }</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<informaltable colsep="0" frame="all" pagebreak="yes" rowsep="0">
<tgroup cols="1" colsep="0" rowsep="0">
<colspec colname="col1"/>
<tbody>
<row><entry><programlisting><replaceable>default</replaceable> is:
     <replaceable>literal</replaceable> 
   | NULL 
   | CURRENT_DATE 
   | CURRENT_TIME 
   | CURRENT_TIMESTAMP

<replaceable>column-constraint</replaceable> is:
     NOT NULL 
   | UNIQUE
   | PRIMARY KEY [ASC[ENDING] | DESC[ENDING]]
   | CHECK (<replaceable>condition</replaceable>)
   | REFERENCES <replaceable>ref-spec</replaceable>

<literal><replaceable>table-constraint</replaceable> is:
     UNIQUE (<replaceable>column-list</replaceable>)
   | PRIMARY KEY (<replaceable>key-column-list</replaceable>) 
   | CHECK (<replaceable>condition</replaceable>)   
   | FOREIGN KEY (<replaceable>column-list</replaceable>) REFERENCES <replaceable
>ref-spec</replaceable>

<replaceable>ref-spec</replaceable> is:
   <replaceable>referenced-table</replaceable> [(<replaceable>column-list</replaceable
>)]

<replaceable>column-list</replaceable> is:
   <replaceable>column-name</replaceable> [,<replaceable>column-name</replaceable
>]...

</literal><replaceable>key-column-list</replaceable> is:
   <replaceable>column-name</replaceable> [ASC[ENDING] | DESC[ENDING]]
      [,<replaceable>column-name</replaceable> [ASC[ENDING] | DESC[ENDING]]]... 
 
<literal condition="hidden"><replaceable>div-expr-list</replaceable
> is:
   (<replaceable>div-expr</replaceable> [, <replaceable>div-expr</replaceable
> ...])

</literal><replaceable>like-spec</replaceable> is:
   LIKE <replaceable>source-table</replaceable> [<replaceable>include-option</replaceable
>]

<literal><replaceable>hbase-options-list</replaceable> is:
   <replaceable>hbase-option</replaceable> = '<replaceable>value</replaceable
>'[, <replaceable>hbase-option</replaceable> = '<replaceable>value</replaceable
>']...</literal></programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="i1082090">
<title>Syntax Description of CREATE TABLE</title>
<variablelist>
<varlistentry><term>VOLATILE</term>
<listitem><para>specifies a volatile table, which is a table limited
to the session that creates the table. After the session ends, the
table is automatically dropped. See <xref linkend="considsVol"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term>IF NOT EXISTS</term>
<listitem><para>creates an HBase table if it does not already exist
when the table is created. This option does not apply to volatile
tables.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>table</replaceable></term>
<listitem><para>specifies the ANSI logical name of the table. See <xref
linkend="i1013018" role="select:quotedtitle page"/>. This name must
be unique among names of tables and views within its schema.</para>
</listitem>
</varlistentry>
<varlistentry><term>SALT USING <replaceable>num</replaceable> PARTITIONS
[ON (<replaceable>column</replaceable>[, <replaceable>column</replaceable
>]...)]</term>
<listitem><para>pre-splits the table into multiple regions when the
table is created. Salting adds a hash value of the row key as a key
prefix, thus avoiding hot spots for sequential keys. The number of
partitions that you specify can be a function of the number of region
servers present in the HBase cluster. You can specify a number from <phrase
>2 to 1024</phrase>. If you do not specify columns, the default is
to use all primary key columns.</para></listitem>
</varlistentry>
<varlistentry condition="hidden"><term>DIVISION BY (<replaceable>div-expr-list</replaceable
>)</term>
<listitem><para>specifies that the table separate frequently accessed
rows (“hot” data) from older, infrequently accessed data (“cold” data).
The DIVISION BY syntax defines how the hot and cold data are “divided”
or separated.</para><para condition="hidden"> For more information,
see.</para>
<indexterm><primary>CREATE TABLE statement</primary><secondary>DIVISION
BY clause</secondary></indexterm><indexterm><primary>DIVISION BY clause</primary>
<secondary>on CREATE TABLE statement</secondary></indexterm>
<variablelist>
<varlistentry id="expr_div"><term><replaceable>div-expr-list</replaceable
></term>
<listitem><para>is a list of expressions used for the DIVISION BY
clause. Note the following conditions about the expressions in the
list:<itemizedlist>
<listitem><para>Must reference only one column in the clustering key</para>
</listitem>
<listitem><para>Must have one of the following forms:</para></listitem>
</itemizedlist><indexterm><primary>DIVISION BY clause</primary>
<secondary>expressions to use</secondary></indexterm></para><para
condition="hidden">For more information about CREATE TABLE ... DIVISION
BY, see.</para>
<informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="1.08*"/>
<colspec colname="col4" colwidth="0.92*"/>
<thead>
<row rowsep="1" valign="bottom"><entry align="left" valign="bottom"
><replaceable>div-expr</replaceable> </entry><entry align="left"
valign="bottom"><replaceable>arg</replaceable> Descriptions</entry>
</row>
</thead>
<tbody>
<row><entry><literal>cast((</literal><replaceable>exact_numeric_column</replaceable
>[ + <replaceable>const</replaceable>1 ] ) / <replaceable>const</replaceable
>2 <literal>as</literal> <replaceable> numeric_data_type)</replaceable
></entry><entry><replaceable>const</replaceable> and <replaceable
>const </replaceable><replaceable>n </replaceable>are constant values
(literals). <replaceable>numeric_data_type</replaceable> is a numeric
data type</entry></row>
<row><entry>DATE_PART('YEAR', <replaceable>date_part_arg</replaceable
> )</entry><entry><replaceable>date_part_arg</replaceable> is one
of the following:<itemizedlist>
<listitem><para><replaceable>datetime_col</replaceable></para>
</listitem>
<listitem><para><replaceable>datetime_col </replaceable>+ <replaceable
>const</replaceable></para></listitem>
<listitem><para><replaceable>datetime_col </replaceable>– <replaceable
>const</replaceable></para></listitem>
<listitem><para>ADD_MONTHS (<replaceable>datetime_col</replaceable
>, <replaceable>const</replaceable> [, 0 ])</para></listitem>
<listitem><para>DATE_ADD (<replaceable>datetime_col</replaceable>, <replaceable
>const</replaceable>)</para></listitem>
<listitem><para>DATE_SUB (<replaceable>datetime_col</replaceable>, <replaceable
>const</replaceable>)</para></listitem>
</itemizedlist></entry></row>
<row><entry>DATE_PART('YEARQUARTER', <replaceable>date_part_arg</replaceable
> )</entry><entry rowsep="0"></entry></row>
<row><entry>DATE_PART('YEARMONTH', <replaceable>date_part_arg</replaceable
> )</entry><entry rowsep="0"></entry></row>
<row><entry>DATE_PART('YEARWEEK', <replaceable>datetime_col</replaceable
> )<note>
<para>YEARWEEK can be used only with a simple datetime column as an
argument. You cannot use YEARWEEK with <replaceable>datetime-expr</replaceable
></para>
</note></entry><entry rowsep="0"><replaceable>column_name</replaceable
>, <replaceable>exact_numeric_col</replaceable>, <replaceable>datetime_col</replaceable
>, <replaceable>character_col </replaceable>are column names</entry>
</row>
<row><entry>DATE_TRUNC (<replaceable>const</replaceable>, <replaceable
>datetime_col</replaceable> )</entry><entry rowsep="0"></entry></row>
<row><entry>DATEDIFF (YEAR, <replaceable>const</replaceable>, <replaceable
>datetime_col </replaceable>)</entry><entry rowsep="0"></entry></row>
<row><entry>DATEDIFF (QUARTER, <replaceable>const</replaceable>, <replaceable
>datetime_col</replaceable> )</entry><entry rowsep="0"></entry></row>
<row><entry>DATEDIFF (MONTH, <replaceable>const</replaceable>, <replaceable
>datetime_col </replaceable>)</entry><entry rowsep="0"></entry></row>
<row><entry>LEFT (<replaceable>character_col</replaceable>, <replaceable
>const</replaceable> )</entry><entry></entry></row>
<row><entry>SUBSTR[ING] (<replaceable>character_col</replaceable>,
1, <replaceable>const </replaceable>)</entry><entry></entry></row>
<row><entry>SUBSTR[ING] (<replaceable>character_col </replaceable
>FROM 1 FOR <replaceable>const</replaceable>)</entry><entry></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term>STORE BY { PRIMARY KEY | (<replaceable>key-column-list</replaceable
>)}</term>
<listitem><indexterm><primary>CREATE TABLE statement</primary>
<secondary>STORE BY clause</secondary></indexterm><indexterm><primary
>STORE BY clause</primary></indexterm><para>specifies a set of columns
on which to base the clustering key. The clustering key determines
the order of rows within the physical file that holds the table. The
storage order has an effect on how you can partition the object.<variablelist>
<varlistentry><term>PRIMARY KEY</term>
<listitem><para>bases the clustering key on the primary key columns.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>key-column-list</replaceable></term>
<listitem><para>bases the clustering key on the columns in the <replaceable
>key-column-list</replaceable>. The key columns in <replaceable>key-column-list</replaceable
> must be specified as NOT NULL and must be the same as the primary
key columns that are defined on the table. If STORE BY is not specified,
then the clustering key is the PRIMARY KEY.</para></listitem>
</varlistentry>
</variablelist></para></listitem>
</varlistentry>
<varlistentry><term>HBASE_OPTIONS (<replaceable>hbase-option</replaceable
> = '<replaceable>value</replaceable>'[, <replaceable>hbase-option</replaceable
> = '<replaceable>value</replaceable>']...)</term>
<listitem><para>a list of HBase options to set for the table.</para>
<variablelist>
<varlistentry><term><replaceable>hbase-option</replaceable> = '<replaceable
>value</replaceable>'</term>
<listitem><para>is one of the these HBase options and its assigned
value:</para>
<informaltable frame="all">
<tgroup cols="2" colsep="1" rowsep="1">
<colspec colname="col1" colwidth="0.70*"/>
<colspec colname="col2" colwidth="1.30*"/>
<thead>
<row rowsep="1" valign="bottom"><entry align="left" valign="bottom"
>HBase Option</entry><entry align="left" valign="bottom">Accepted
Values<footnote>
<para>Values in boldface are default values.</para>
</footnote></entry></row>
</thead>
<tbody>
<row><entry>BLOCKCACHE</entry><entry><emphasis role="bold">'true'</emphasis
> | 'false'</entry></row>
<row><entry>BLOCKSIZE</entry><entry><emphasis role="bold">'65536'</emphasis
> | '<replaceable>positive-integer</replaceable>'</entry></row>
<row><entry>BLOOMFILTER</entry><entry>'NONE' | <emphasis role="bold"
>'ROW'</emphasis> | 'ROWCOL'</entry></row>
<row><entry>CACHE_BLOOMS_ON_WRITE</entry><entry><emphasis role="bold"
>'true'</emphasis> | 'false'</entry></row>
<row><entry>CACHE_DATA_ON_WRITE</entry><entry><emphasis role="bold"
>'true'</emphasis> | 'false'</entry></row>
<row><entry>CACHE_INDEXES_ON_WRITE</entry><entry><emphasis role="bold"
>'true'</emphasis> | 'false'</entry></row>
<row><entry>COMPACT</entry><entry><emphasis role="bold">'true'</emphasis
> | 'false'</entry></row>
<row><entry>COMPACT_COMPRESSION</entry><entry>'GZ' | 'LZ4' | 'LZO'
| <emphasis role="bold">'NONE'</emphasis> | 'SNAPPY'</entry></row>
<row><entry>COMPRESSION</entry><entry>'GZ' | 'LZ4' | 'LZO' | <emphasis
role="bold">'NONE'</emphasis> | 'SNAPPY'</entry></row>
<row><entry>DATA_BLOCK_ENCODING</entry><entry>'DIFF' | 'FAST_DIFF'
| <emphasis role="bold">'NONE'</emphasis> | 'PREFIX'</entry></row>
<row><entry>DURABILITY</entry><entry>'USE_DEFAULT' | <emphasis
role="bold">'SKIP_WAL'</emphasis> | 'ASYNC_WAL' | 'SYNC_WAL' | 'FSYNC_WAL'</entry>
</row>
<row><entry>EVICT_BLOCKS_ON_CLOSE</entry><entry>'true' | <emphasis
role="bold">'false'</emphasis></entry></row>
<row><entry>IN_MEMORY</entry><entry>'true' | <emphasis role="bold"
>'false'</emphasis></entry></row>
<row><entry>KEEP_DELETED_CELLS</entry><entry>'true' | <emphasis
role="bold">'false'</emphasis></entry></row>
<row><entry>MAX_FILESIZE</entry><entry>'<replaceable>positive-integer</replaceable
>'</entry></row>
<row><entry>MAX_VERSIONS</entry><entry><emphasis role="bold">'1'</emphasis
> | '<replaceable>positive-integer</replaceable>'</entry></row>
<row><entry>MEMSTORE_FLUSH_SIZE</entry><entry>'<replaceable>positive-integer</replaceable
>'</entry></row>
<row><entry>MIN_VERSIONS</entry><entry><emphasis role="bold">'0'</emphasis
> | '<replaceable>positive-integer</replaceable>'</entry></row>
<row><entry>PREFIX_LENGTH_KEY</entry><entry>'<replaceable>positive-integer</replaceable
>', which should be less than maximum length of the key for the table.
It applies only if the SPLIT_POLICY is KeyPrefixRegionSplitPolicy.</entry>
</row>
<row><entry>REPLICATION_SCOPE</entry><entry><emphasis role="bold"
>'0'</emphasis> | '1'</entry></row>
<row><entry>SPLIT_POLICY</entry><entry><emphasis role="bold">'org.apache.hadoop.hbase.regionserver.ConstantSizeRegionSplitPolicy'</emphasis
> | 'org.apache.hadoop.hbase.regionserver.IncreasingToUpperBoundRegionSplitPolicy'
| 'org.apache.hadoop.hbase.regionserver.KeyPrefixRegionSplitPolicy'</entry>
</row>
<row><entry>TTL</entry><entry><emphasis role="bold">'-1'</emphasis
> (forever) | '<replaceable>positive-integer</replaceable>'</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term>LOAD IF EXISTS</term>
<listitem><para>loads data into an existing table. Must be used with
AS <replaceable>select-query</replaceable>. See <xref
linkend="loadifexists" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
<varlistentry><term>NO LOAD</term>
<listitem><para>creates a table with the CREATE TABLE AS statement,
but does not load data into the table. See <xref linkend="loadifexists"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term>AS <replaceable>select-query</replaceable></term>
<listitem><para>specifies a select query which is used to populate
the created table. A select query can be any SQL select statement.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>column data-type</replaceable></term>
<listitem><para>specifies the name and data type for a column in the
table. At least one column definition is required in a CREATE TABLE
statement.</para><para><replaceable>column</replaceable> is an SQL
identifier. <replaceable>column</replaceable> must be unique among
column names in the table. If the name is a Trafodion SQL reserved
word, you must delimit it by enclosing it in double quotes. Such delimited
parts are case-sensitive. For example: <literal>"join"</literal>. </para>
<para><replaceable>data-type</replaceable> is the data type of the
values that can be stored in <replaceable>column</replaceable>. A
default value must be of the same type as the column, including the
character set for a character column. See <xref linkend="i1010093"
role="select:quotedtitle page"/>. Data type also includes case specific
information, such as UPSHIFT.</para>
</listitem>
</varlistentry>
<varlistentry><term>[NOT] CASESPECIFIC </term>
<listitem><indexterm><primary>NOT CASESPECIFIC</primary></indexterm>
<para>specifies that the column contains strings that are not case
specific. The default is <literal>CASESPECIFIC</literal>. Comparison
between two values is done in a case insensitive way only if both
are case insensitive. This applies to comparison in a binary predicate,
LIKE predicate, and POSITION/REPLACE string function searches. See <xref
linkend="i1063184" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term>DEFAULT <replaceable>default</replaceable> | NO
DEFAULT</term>
<listitem><para><indexterm><primary>DEFAULT clause</primary><secondary
>CREATE TABLE use of</secondary></indexterm>specifies a default value
for the column or specifies that the column does not have a default
value. <xref linkend="i1005636" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
<varlistentry><term>CONSTRAINT <replaceable>constraint-name</replaceable
></term>
<listitem><para>specifies a name for the column or table constraint. <replaceable
>constraint-name</replaceable> must have the same schema as <replaceable
>table</replaceable> and must be unique among constraint names in
its schema. If you omit the schema portions of the name you specify
in <replaceable>constraint-name</replaceable>, Trafodion SQL expands
the constraint name by using the schema for <replaceable>table</replaceable
>. See <xref linkend="Constraint-Namese" role="select:quotedtitle page"
/> and <xref linkend="i1013018" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
<varlistentry><term>NOT NULL </term>
<listitem><indexterm><primary>NOT NULL constraint</primary></indexterm>
<indexterm><primary>Constraints</primary><secondary>NOT NULL</secondary>
</indexterm><para>is a column constraint that specifies that the column
cannot contain nulls. If you omit NOT NULL, nulls are allowed in the
column. If you specify both NOT NULL and NO DEFAULT, each row inserted
in the table must include a value for the column. See <xref
linkend="i1018603" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term>UNIQUE</term><term>or</term><term>UNIQUE (<replaceable
>column-list</replaceable>) </term>
<listitem><indexterm><primary>UNIQUE constraint</primary></indexterm>
<indexterm><primary>Constraints</primary><secondary>UNIQUE</secondary>
</indexterm><para>is a column or table constraint, respectively, that
specifies that the column or set of columns cannot contain more than
one occurrence of the same value or set of values. If you omit UNIQUE,
duplicate values are allowed unless the column is part of the PRIMARY
KEY.</para><para><replaceable>column-list</replaceable> cannot include
more than one occurrence of the same column. In addition, the set
of columns that you specify on a UNIQUE constraint cannot match the
set of columns on any other UNIQUE constraint for the table or on
the PRIMARY KEY constraint for the table. All columns defined as unique
must be specified as NOT NULL.</para>
<para>A UNIQUE constraint is enforced with a unique index. If there
is already a unique index on <replaceable>column-list</replaceable
>, Trafodion SQL uses that index. If a unique index does not exist,
the system creates a unique index.</para>
<para condition="hidden">The maximum combined length of the columns
for a UNIQUE constraint is 255 bytes.</para>
</listitem>
</varlistentry>
<varlistentry><term>PRIMARY KEY [ASC[ENDING] | DESC[ENDING]]</term>
<term>or</term><term>PRIMARY KEY (<replaceable>key-column-list</replaceable
>) </term>
<listitem><indexterm><primary>PRIMARY KEY constraint</primary>
</indexterm><indexterm><primary>Constraints</primary><secondary>PRIMARY
KEY</secondary></indexterm><para>is a column or table constraint,
respectively, that specifies a column or set of columns as the primary
key for the table. <replaceable>key-column-list</replaceable> cannot
include more than one occurrence of the same column. </para><para
>ASCENDING and DESCENDING specify the direction for entries in one
column within the key. The default is ASCENDING. </para>
<para>The PRIMARY KEY value in each row of the table must be unique
within the table. A PRIMARY KEY defined for a set of columns implies
that the column values are unique and not null. You can specify PRIMARY
KEY only once on any CREATE TABLE statement.</para>
<para>Trafodion SQL uses the primary key as the clustering key of
the table to avoid creating a separate, unique index to implement
the primary key constraint.</para>
<para>A PRIMARY KEY constraint is required in Trafodion SQL.</para>
</listitem>
</varlistentry>
<varlistentry><term>CHECK (<replaceable>condition</replaceable>)</term>
<listitem><indexterm><primary>CHECK constraint</primary></indexterm>
<indexterm><primary>Constraints</primary><secondary>CHECK</secondary>
</indexterm><para>is a constraint that specifies a condition that
must be satisfied for each row in the table. See <xref
linkend="i1012266" role="select:quotedtitle page"/>.<indexterm><primary
>CHECK constraint</primary></indexterm></para><para>You cannot refer
to the CURRENT_DATE, CURRENT_TIME, or CURRENT_TIMESTAMP function in
a CHECK constraint, and you cannot use subqueries in a CHECK constraint.</para>
</listitem>
</varlistentry>
<varlistentry><term>REFERENCES <replaceable>ref-spec</replaceable
></term>
<listitem><indexterm><primary>Referential integrity</primary><secondary
>FOREIGN KEY constraint</secondary></indexterm><para>specifies a REFERENCES
column constraint. The maximum combined length of the columns for
a REFERENCES constraint is 2048 bytes.</para>
<variablelist>
<varlistentry><term id="refspecCR"><replaceable>ref-spec</replaceable
> is:</term>
<listitem><para><replaceable>referenced-table</replaceable> [(<replaceable
>column-list</replaceable>)]</para><para><replaceable>referenced-table</replaceable
> is the table referenced by the foreign key in a referential constraint. <replaceable
>referenced-table</replaceable> cannot be a view. <replaceable>referenced-table</replaceable
> cannot be the same as <replaceable>table</replaceable>. <replaceable
>referenced-table</replaceable> corresponds to the foreign key in
the <replaceable>table</replaceable>.</para>
<para><replaceable>column-list</replaceable> specifies the column
or set of columns in the <replaceable>referenced-table</replaceable
> that corresponds to the foreign key in <replaceable>table</replaceable
>. The columns in the column list associated with REFERENCES must
be in the same order as the columns in the column list associated
with FOREIGN KEY. If <replaceable>column-list</replaceable> is omitted,
the referenced table's PRIMARY KEY columns are the referenced columns.</para>
<para>A table can have an unlimited number of referential constraints,
and you can specify the same foreign key in more than one referential
constraint, but you must define each referential constraint separately.
You cannot create self-referencing foreign key constraints.</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term>FOREIGN KEY (<replaceable>column-list</replaceable
>) REFERENCES <replaceable>ref-spec</replaceable></term>
<listitem><indexterm><primary>Constraints</primary><secondary>FOREIGN
KEY</secondary></indexterm><indexterm><primary>FOREIGN KEY constraint</primary>
</indexterm><indexterm><primary>Referential integrity</primary>
<secondary>FOREIGN KEY constraint</secondary></indexterm><para>is
a table constraint that specifies a referential constraint for the
table, declaring that a column or set of columns (called a foreign
key) in <replaceable>table</replaceable> can contain only values that
match those in a column or set of columns in the table specified in
the REFERENCES clause.</para><para>The two columns or sets of columns
must have the same characteristics (data type, length, scale, precision).
Without the FOREIGN KEY clause, the foreign key in <replaceable>table</replaceable
> is the column being defined; with the FOREIGN KEY clause, the foreign
key is the column or set of columns specified in the FOREIGN KEY clause.
For information about <replaceable>ref-spec</replaceable>, see REFERENCES <replaceable
>ref-spec</replaceable>.</para>
</listitem>
</varlistentry>
<varlistentry><term>LIKE <replaceable>source-table</replaceable> [<replaceable
>include-option</replaceable>]...</term>
<listitem><para>directs Trafodion SQL to create a table like the existing
table, <replaceable>source-table</replaceable>, omitting constraints
(with the exception of the NOT NULL and PRIMARY KEY constraints) and <phrase
condition="hidden">constraints (with the exception of the NOT NULL
and PRIMARY KEY constraints), DIVISION BY clause, and </phrase>partitions
unless the <replaceable>include-option</replaceable> clauses are specified.</para>
<variablelist>
<varlistentry><term><replaceable>source-table</replaceable></term>
<listitem><para>is the ANSI logical name for the existing table and
must be unique among names of tables and views<phrase condition="hidden"
>, and procedures</phrase> within its schema.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>include-option</replaceable></term>
<listitem>
<variablelist>
<varlistentry condition="hidden"><term>WITH DIVISION</term>
<listitem><para>specifies whether the new table should use the DIVISION
BY clause of the source table. For more information, see <xref
linkend="CR_Like_Div" role="select:quotedtitle page"/>.</para>
<indexterm><primary>CREATE TABLE LIKE statement</primary><secondary
>WITH DIVISION clause</secondary></indexterm>
<note>
<para>If you specify the LIKE clause and the DIVISION BY clause, you
cannot specify WITH DIVISION.</para>
</note>
</listitem>
</varlistentry>
<varlistentry><term>WITH CONSTRAINTS</term>
<listitem><para>directs Trafodion SQL to use constraints from <replaceable
>source-table</replaceable>. Constraint names for <replaceable>table</replaceable
> are randomly generated unique names.</para><para>When you perform
a CREATE TABLE LIKE, whether or not you include the <literal>WITH
CONSTRAINTS</literal> clause, the target table will have all the NOT
NULL column constraints that exist for the source table with different
constraint names.</para>
</listitem>
</varlistentry>
<varlistentry><term>WITH PARTITIONS</term>
<listitem><para>directs Trafodion SQL to use partition definitions
from <replaceable>source-table</replaceable>. Each new table partition
resides on the same volume as its original <replaceable>source-table</replaceable
> counterpart. The new table partitions do not inherit partition names
from the original table. Instead, Trafodion SQL generates new names
based on the physical file location.</para>
<!--WRITER'S NOTE: Verify with Anoop that this is true.-->
<para>If you specify the LIKE clause and the <phrase>SALT USING <replaceable
>num</replaceable> PARITIONS clause</phrase>, you cannot specify <literal
>WITH PARTITIONS</literal>.</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="i1063165">
<title>Considerations for CREATE TABLE</title>
<para>The following subsections provide considerations for various
CREATE TABLE options:</para>
<itemizedlist>
<listitem><para><xref linkend="Authorization-Requirements-Create-Table"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="considsVol"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="CRTABLIKE" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="loadifexists"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="conCRTABAS"
role="select:quotedtitle page"/></para></listitem>
<listitem condition="hidden"><para><xref linkend="ResTableNames"
role="select:quotedtitle page"/></para></listitem>
</itemizedlist>
</section>
<section id="Authorization-Requirements-Create-Table">
<title>Authorization and Availability Requirements</title>
<section>
<title>Required Privileges</title>
<para>To issue a CREATE TABLE statement, one of the following must
be true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT.</para></listitem>
<listitem><para>You are creating the table in a shared schema.</para>
</listitem>
<listitem><para>You are the private schema owner.</para></listitem>
<listitem><para>You have the CREATE or CREATE_TABLE component privilege
for the SQL_OPERATIONS component.</para>
<note>
<para>In this case, if you create a table in a private schema, it
will be owned by the schema owner.</para>
</note>
</listitem>
</itemizedlist>
</section>
<section id="RI-Constraint-Privileges-Create-Table">
<title>Privileges Needed to Create a Referential Integrity Constraint</title>
<para>To create a referential integrity constraint (that is, a constraint
on the table that refers to a column in another table), one of the
following must be true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT. </para></listitem>
<listitem><para>You are the owner of the referencing and referenced
tables.</para></listitem>
<listitem><para>You have these privileges on the referencing and referenced
table:</para>
<itemizedlist>
<listitem><para>For the referencing table, you have the CREATE or
CREATE_TABLE component privilege for the SQL_OPERATIONS component.</para>
</listitem>
<listitem><para>For the referenced table, you have the REFERENCES
(or ALL) privilege on the referenced table through your username or
through a granted role.</para></listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<para>If the constraint refers to the other table in a query expression,
you must also have SELECT privileges on the other table.</para>
</section>
</section>
<section id="considsVol">
<title>Considerations for CREATE VOLATILE TABLE</title>
<indexterm><primary>CREATE VOLATILE TABLE statement</primary><secondary
>considerations for</secondary></indexterm><indexterm><primary>Volatile
tables</primary><secondary>considerations</secondary></indexterm>
<indexterm><primary>CREATE TABLE statement</primary><secondary>considerations
for volatile tables</secondary></indexterm>
<itemizedlist>
<listitem><para>Volatile temporary tables are closely linked to the
session. Their namespace is unique across multiple concurrent sessions,
and therefore allow multiple sessions to use the same volatile temporary
table names simultaneously without any conflicts.</para></listitem>
<listitem><para>Volatile tables support creation of indexes.</para>
</listitem>
<listitem><para>Volatile tables are partitioned by the system. The
number of partitions is limited to four partitions by default. <phrase
>The partitions will be distributed across the cluster. </phrase>The
default value is four partitions regardless of the system configuration.</para>
</listitem>
<listitem><para>Statistics are not automatically updated for volatile
tables. If you need statistics, you must explicitly run UPDATE STATISTICS. </para>
</listitem>
<listitem><para>Volatile tables can be created and accessed using
one-part, two-part, or three-part names. However, you must use the
same name (one part, two part, or three part) for any further DDL
or DML statements on the created volatile table. See <xref
linkend="i1063184" role="select:quotedtitle page"/>.</para></listitem>
<listitem><para> Trafodion SQL allows users to explicitly specify
primary key and STORE BY clauses on columns that contain null values.</para>
</listitem>
<listitem><para> Trafodion SQL does not require that the first column
in a volatile table contain not null values and be the primary key.
Instead, Trafodion SQL attempts to partition the table, if possible,
using an appropriate suitable key column as the primary and partitioning
key. For more information, see <xref
linkend="How_Neoview_SQL_Selects_Suitable_Keys"
role="select:quotedtitle page"/>.</para></listitem>
</itemizedlist>
<section>
<title>Restrictions for CREATE VOLATILE TABLE</title>
<indexterm><primary>CREATE VOLATILE TABLE statement</primary><secondary
>restrictions</secondary></indexterm><indexterm><primary>Volatile
tables</primary><secondary>considerations</secondary></indexterm>
<para>These items are not supported for volatile tables:</para>
<itemizedlist>
<listitem><para>ALTER statement</para></listitem>
<listitem><para>User constraints</para></listitem>
<listitem><para>Creating views<phrase condition="hidden">, triggers,
materialized views</phrase></para></listitem>
<listitem><para>Creating non-volatile indexes on a volatile table
or a volatile index on a non-volatile table</para></listitem>
<listitem><para>CREATE TABLE LIKE operations</para></listitem>
<listitem><para>Utility operations, such as PURGEDATA</para></listitem>
</itemizedlist>
</section>
<section id="How_Neoview_SQL_Supports_Nullable_Keys">
<title>How Trafodion SQL Supports Nullable Keys for Volatile Tables</title>
<indexterm><primary>Volatile tables</primary><secondary>nullable keys</secondary>
</indexterm><indexterm><primary>CREATE VOLATILE TABLE statement</primary>
<secondary>nullable keys</secondary></indexterm>
<itemizedlist>
<listitem><para>Allows nullable keys in primary key, STORE BY, and
unique constraints.</para></listitem>
<listitem><para>A null value is treated as the highest value for that
column.</para></listitem>
<listitem><para>A null value as equal to other null values and only
one value is allowed for that column.</para></listitem>
</itemizedlist>
</section>
<section id="How_Neoview_SQL_Selects_Suitable_Keys">
<title>How Trafodion SQL Selects Suitable Keys for Volatile Tables</title>
<indexterm><primary>CREATE VOLATILE TABLE statement</primary><secondary
>suitable keys</secondary></indexterm><indexterm><primary>Volatile
tables</primary><secondary>suitable keys</secondary></indexterm>
<para>Trafodion SQL searches for the first suitable column in the
list of columns of the table being created. Once the column is located,
the table is partitioned on it. The searched columns in the table
might be explicitly specified (as in a CREATE TABLE statement) or
implicitly created (as in a CREATE TABLE AS SELECT statement).</para>
<para>The suitable key column is selected only if no primary key or
STORE BY clause has been specified in the statement. If any of these
clauses have been specified, they are used to select the key columns.</para>
<indexterm><primary>Suitable keys</primary><secondary>guidelines for
selecting</secondary></indexterm>
<para>Trafodion SQL follows these guidelines to search for and select
suitable keys:</para>
<itemizedlist>
<listitem><para>A suitable column can be a nullable column.</para>
</listitem>
<listitem><para>Certain data types in Trafodion SQL cannot be used
as a partitioning key. Currently, this includes any floating point
columns (REAL, DOUBLE PRECISION, and FLOAT).</para></listitem>
<listitem><para>Trafodion SQL searches for a suitable column according
to this predefined order:</para>
<itemizedlist>
<listitem><para>Numeric columns are chosen first, followed by fixed
CHAR, DATETIME, INTERVAL, and VARCHAR data types.</para></listitem>
<listitem><para>Within numeric data types, the order is binary NUMERIC
(LARGEINT, INTEGER, SMALLINT), and DECIMAL.</para></listitem>
<listitem><para>An unsigned column is given preference over a signed
column.</para></listitem>
<listitem><para>A non-nullable column is given preference over a nullable
column.</para></listitem>
<listitem><para>If all data types are the same, the first column is
selected.</para></listitem>
</itemizedlist>
</listitem>
<listitem><para>If a suitable column is not located, the volatile
table becomes a non-partitioned table with a system-defined SYSKEY
as its primary key. </para></listitem>
<listitem><para>If a suitable column is located, it becomes the partitioning
key where the primary key is <replaceable>suitable_column</replaceable
>, <literal>SYSKEY</literal>. This causes the table to be partitioned
while preventing the duplicate key and null-to-non-null errors.</para>
</listitem>
</itemizedlist>
<para><xref linkend="Precedence_of_Data_Types" role="select:label"
/> shows the order of precedence, from low to high, of data types
when Trafodion SQL searches for a suitable key. A data type appearing
later has precedence over previously-appearing data types. Data types
that do not appear in <xref linkend="Precedence_of_Data_Types"
role="select:label"/> cannot be chosen as a key column.</para>
<table frame="topbot" id="Precedence_of_Data_Types">
<title>Precedence of Data Types During Suitable Key Searches</title>
<tgroup cols="1" colsep="0" rowsep="0">
<colspec colname="col1"/>
<thead>
<row rowsep="1" valign="bottom"><entry align="left" valign="bottom"
>Precedence of Data Types (From Low to High)</entry></row>
</thead>
<tbody>
<row><entry><para>VARCHAR</para></entry></row>
<row><entry><para>INTERVAL</para></entry></row>
<row><entry><para>DATETIME</para></entry></row>
<row><entry><para>CHAR(ACTER)</para></entry></row>
<row><entry><para>DECIMAL (signed, unsigned)</para></entry></row>
<row><entry><para>SMALLINT (signed, unsigned)</para></entry></row>
<row><entry><para>INTEGER (signed, unsigned)</para></entry></row>
<row valign="top"><entry><para>LARGEINT (signed only)</para></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
<section>
<title>Creating Nullable Constraints in a Volatile Table</title>
<indexterm><primary>Volatile tables</primary><secondary>nullable constraints</secondary>
</indexterm><indexterm><primary>CREATE VOLATILE TABLE statement</primary>
<secondary>nullable constraints</secondary></indexterm>
<para>These examples show the creation of nullable constraints (primary
key, STORE BY, and unique) in a volatile table:<!--WRITER'S NOTE: All examples tested and successful 4/23/10--></para>
<programlisting>create volatile table t (a int, primary key(a));
create volatile table t (a int, store by primary key);
create volatile table t (a int unique);
</programlisting>
</section>
<section>
<title>Creating a Volatile Table With a Nullable Primary Key</title>
<indexterm><primary>Volatile tables</primary><secondary>nullable primary
key</secondary></indexterm>
<para>This example creates a volatile table with a nullable primary
key:<!--WRITER'S NOTE: Example tested and successful 4/23/10--></para>
<programlisting>>>create volatile table t (a int, primary key(a));

  --- SQL operation complete.
</programlisting>
<para>Only one unique null value is allowed:<!--WRITER'S NOTE: All examples tested and successful 4/23/10--></para>
<programlisting>>>insert into t values (null);

  --- 1 row(s) inserted.
  >>insert into t values (null);

  *** ERROR[8102] The operation is prevented by a unique constraint.

  --- 0 row(s) inserted.
</programlisting>
</section>
<section>
<title>Examples for Selecting Suitable Keys for Volatile Tables</title>
<indexterm><primary>Volatile tables</primary><secondary>examples</secondary>
</indexterm><indexterm><primary>CREATE VOLATILE TABLE statement</primary>
<secondary>examples of</secondary></indexterm>
<para>These examples show the order by which Trafodion SQL selects
a suitable key based on the precedence rules described in <xref
linkend="How_Neoview_SQL_Selects_Suitable_Keys"
role="select:quotedtitle page"/>:</para>
<itemizedlist>
<listitem><para>Selects column <literal>a</literal> as the primary
and partitioning key:<!--WRITER'S NOTE: Example tested and successful 4/23/10--></para>
<programlisting>create volatile table t (a int);</programlisting>
</listitem>
<listitem><para>Selects column <literal>b</literal> because <literal
>int</literal> has a higher precedence than <literal>char</literal
>:<!--WRITER'S NOTE: Example tested and successful 4/23/10--></para>
<programlisting>create volatile table t (a char(10), b int);</programlisting>
</listitem>
<listitem><para>Selects column <literal>b</literal> because <literal
>not null</literal> has precedence over <literal>nullable</literal
> columns:<!--WRITER'S NOTE: Example tested and successful 4/23/10--></para>
<programlisting>create volatile table t (a int, b int not null);</programlisting>
</listitem>
<listitem><para>Selects column <literal>b</literal> because <literal
>int</literal> has precedence over <literal>decimal</literal>:<!--WRITER'S NOTE: Example tested and successful 4/23/10--></para>
<programlisting>create volatile table t (a decimal(10), b int);</programlisting>
</listitem>
<listitem><para>Selects the first column, <literal>a</literal>, because
both columns have the same data type:<!--WRITER'S NOTE: Example tested and successful 4/23/10--></para>
<programlisting>create volatile table t (a int not null, b int not null);</programlisting>
</listitem>
<listitem><para>Selects column <literal>b</literal> because <literal
>char</literal> has precedence over <literal>date</literal>:<!--WRITER'S NOTE: Example tested and successful 4/23/10--></para>
<programlisting>create volatile table t (a date, b char(10));</programlisting>
</listitem>
<listitem><para>Selects column <literal>b</literal> because the <literal
>real</literal> data type is not part of the columns to be examined:<!--WRITER'S NOTE: Example tested and successful 4/23/10--></para>
<programlisting>create volatile table t (a real, b date);</programlisting>
</listitem>
<listitem><para>Does not select any column as the primary/partitioning
key. SYSKEY is used automatically. <!--WRITER'S NOTE: See email from Viral Shah (via Dhana Suresh) 5/3/10--></para>
<programlisting>create volatile table t (a real, b double precision not null);</programlisting>
</listitem>
</itemizedlist>
<para>Similar examples would be used for CREATE TABLE AS SELECT queries.</para>
</section>
</section>
<section id="CRTABLIKE">
<title>Considerations for CREATE TABLE ... LIKE</title>
<indexterm><primary>CREATE TABLE LIKE statement</primary><secondary
>considerations for</secondary></indexterm><indexterm condition="hidden">
<primary>CREATE TABLE LIKE statement</primary><secondary>IDENTITY
columns</secondary></indexterm>
<para>The CREATE TABLE LIKE statement does not create views, owner
information, or privileges for the new table based on the source table.
Privileges associated with a new table created by using the LIKE specification
are defined as if the new table is created explicitly by the current
user.</para>
<section id="CrTabLike_FileAtt">
<title>CREATE TABLE ... LIKE and File Attributes</title>
<indexterm><primary>CREATE TABLE LIKE statement</primary><secondary
>COMPRESSION attribute</secondary></indexterm><indexterm><primary
>CREATE TABLE LIKE statement</primary><secondary>file attributes</secondary>
</indexterm>
<para>CREATE TABLE ... LIKE creates a table like another table, with
the exception of file attributes. File attributes include COMPRESSION,
and so on. If you do not include the attribute value as part of the
CREATE TABLE ... LIKE command, SQL creates the table with the default
value for the attributes and not the value from the source object.
For example, to create a table like another table that specifies compression,
you must specify the compression attribute value as part of the CREATE
TABLE... LIKE statement. In the following example, the original CREATE
TABLE statement creates a table without compression. However, in the
CREATE TABLE ... LIKE statement, compression is specified. </para>
<screen>
-- Original Table
create table NPTEST
(FIRST_NAME CHAR(12) CHARACTER SET ISO88591 COLLATE DEFAULT NO DEFAULT
NOT NULL
, LAST_NAME CHAR(24) CHARACTER SET ISO88591 COLLATE
DEFAULT NO DEFAULT NOT NULL
  , ADDRESS CHAR(128) CHARACTER SET ISO88591 COLLATE
DEFAULT DEFAULT NULL
  , ZIP INT DEFAULT 0 
  , PHONE CHAR(10) CHARACTER SET ISO88591 COLLATE
DEFAULT DEFAULT NULL , SSN LARGEINT NO DEFAULT NOT NULL 
  , INFO1 CHAR(128) CHARACTER SET ISO88591 COLLATE
DEFAULT DEFAULT NULL , INFO2 CHAR(128) CHARACTER SET ISO88591 COLLATE
DEFAULT DEFAULT NULL , primary key (SSN,first_name,last_name)
)
max table size  512

-- CREATE TABLE LIKE

create table LSCE002 like NPTEST  ATTRIBUTE compression type hardware;</screen>
</section>
<section condition="hidden" id="CR_Like_Div">
<title>CREATE TABLE ... LIKE and WITH DIVISION</title>
<indexterm><primary>CREATE TABLE LIKE statement</primary><secondary
>WITH DIVISION clause</secondary></indexterm><indexterm><primary>WITH
DIVISION clause</primary><secondary>CREATE TABLE LIKE statement</secondary>
</indexterm><indexterm><primary>CREATE TABLE LIKE statement</primary>
<secondary>multi-temperate data</secondary></indexterm>
<para>Trafodion SQL provides additional options for multi-temperate
data with the CREATE TABLE LIKE statement. You can use the WITH DIVISION
clause to cause the new table to use the same DIVISION BY clause of
the source table. You can also provide a completely different DIVISION
BY clause in the CREATE TABLE LIKE statement. The following table
shows how the syntax can be used:</para>
<informaltable frame="topbot">
<tgroup cols="3" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="1.00*"/>
<colspec colname="col2" colwidth="0.52*"/>
<colspec colname="col3" colwidth="1.48*"/>
<thead>
<row rowsep="1" valign="bottom"><entry align="left" valign="bottom"
>Case</entry><entry align="left" valign="bottom">New Table Created
With Division Column</entry><entry align="left" valign="bottom">Result</entry>
</row>
</thead>
<tbody>
<row><entry><itemizedlist>
<listitem><para>User specifies CREATE TABLE ... LIKE ... WITH DIVISION...
Source table contains valid DIVISION BY clause.</para></listitem>
</itemizedlist></entry><entry>Yes</entry><entry>New table is created
with DIVISION BY specification from source table.</entry></row>
<row><entry><itemizedlist>
<listitem><para>User specifies CREATE TABLE ... LIKE ... WITH DIVISION...,
but no DIVISION BY clause exists in the source table.</para></listitem>
</itemizedlist></entry><entry>No</entry><entry>Because no DIVISION
BY clause exists in the source table, the WITH DIVISION clause is
ignored.</entry></row>
<row><entry><itemizedlist>
<listitem><para>User specifies CREATE TABLE ... LIKE .... without
the WITH DIVISION clause. Source table has DIVISION BY clause.</para>
</listitem>
</itemizedlist></entry><entry>No</entry><entry>Because WITH DIVISION
was not specified, the new table does not use the division columns.</entry>
</row>
<row><entry><itemizedlist>
<listitem><para>User specifies CREATE TABLE ... LIKE ...WITH DIVISION...
DIVISION BY...</para></listitem>
</itemizedlist></entry><entry>No</entry><entry>This is an error. You
cannot use both WITH DIVISION and DIVISION BY. It does not matter
if the source table contains a DIVISION BY clause.</entry></row>
</tbody>
</tgroup>
</informaltable>
</section>
<section condition="hidden">
<title>CREATE TABLE ... LIKE and IDENTITY Columns</title>
<para>For tables with IDENTITY columns, the target table inherits
the IDENTITY property of a column along with the corresponding sequence
generating properties from the source table. Neither Trafodion SQL's
CREATE TABLE LIKE support nor its behavior with respect to the IDENTITY
column is ANSI compliant.</para>
<indexterm><primary>CREATE TABLE LIKE statement</primary><secondary
>example of</secondary></indexterm>
<!--WRITER'S NOTE: Example tested and successful 4/23/10-->
<programlisting>CREATE TABLE tbl1_src(
   Id_col INTEGER UNSIGNED GENERATED ALWAYS AS IDENTITY
                      (
                       START WITH 1
                       INCREMENT BY 2) NOT NULL,
   Col2 INTEGER NOT NULL, PRIMARY KEY(Id_col)
                      );

CREATE TABLE tbl_tgt LIKE tbl1_src;</programlisting>
<para>These statements will result in <literal>tbl_tgt</literal> having
the same column attributes and IDENTITY column attributes as table <literal
>tbl1_src</literal>.<!--WRITER'S NOTE: Example tested and successful 4/23/10--><programlisting
>CREATE TABLE tbl_tgt(
   Id_col INTEGER UNSIGNED GENERATED ALWAYS AS IDENTITY
                    (
                     START WITH 1
                     INCREMENT BY 2) NOT NULL,
   Col2 INTEGER NOT NULL, PRIMARY KEY(Id_col)
                    );</programlisting></para>
<para>The CREATE TABLE LIKE statement using AS SELECT syntax inserts
rows into the newly created table. CREATE TABLE LIKE inherits the
same internal sequence generator properties in the target table as
were defined in the source table. The AS SELECT clause selects rows
from the source table and provides user-specified values to the IDENTITY
column for the target table. As user-specified values are used, the
internal sequence generator table created for the target table will
still contain a current value based on the IDENTITY column START WITH
property. Subsequent inserts, using the DEFAULT specification, might
generate values using the internal sequence generator table already
present in the target table. This might lead to inserts failing with
duplicate errors. To avoid this problem, when a target table is created
using the CREATE TABLE LIKE AS SELECT statement, the internal sequence
generator current value should be recalibrated to a value greater
than the maximum value currently in the IDENTITY column. This allows
Trafodion SQL to generate unique values on subsequent inserts and
to avoid duplicate values.</para>
<!--WRITER'S NOTE: Example tested and successful 4/23/10-->
<bridgehead>Example 2</bridgehead>
<programlisting id="tablet1">CREATE TABLE t1 (a LARGEINT GENERATED BY DEFAULT AS IDENTITY
                   (MINVALUE 0
                    MAXVALUE 99999
                    START WITH 0)
                    NOT NULL, 
                 b INT UNSIGNED NOT NULL,
                   PRIMARY KEY(a));

INSERT INTO t1 VALUES (DEFAULT,1),(DEFAULT,2),(DEFAULT,3);

SELECT * FROM t1;

A     B

0      1
1      2
2      3
</programlisting>
<para>Create table <literal>t2</literal> like table <literal>t1</literal
>. The CREATE TABLE LIKE target table <literal>t2</literal> will inherit
the internal sequence generator properties from the source table <literal
>t1</literal>. The AS SELECT syntax will select all rows from table <literal
>t1</literal> and insert them into table <literal>t2</literal>. The
IDENTITY column values will be user-specified values.<!--WRITER'S NOTE: Example tested and successful 4/23/10--></para>
<programlisting>CREATE TABLE t2 LIKE t1 AS SELECT a,b FROM t1;

SELECT MAX(a) from t2;

(EXPR)
--------
       2</programlisting>
<para>Table <literal>t2</literal> is created with an internal sequence
generator table START WITH value of 0. The current value in the internal
sequence generator is 0. To recalibrate the current value of the internal
sequence generator table, use the ALTER TABLE ALTER COLUMN command. </para>
<para>CREATE TABLE LIKE AS SELECT will fail with an error if the IDENTITY
column from the target table is a GENERATED ALWAYS AS IDENTITY column
type. Only user-specified values are valid for the AS SELECT feature
of CREATE TABLE LIKE.</para>
</section>
<section condition="hidden" id="ALTTAB_recal_curr_val">
<title>Recalibrating the Current Value of the Internal Sequence Generator
Table</title>
<para>Recalibrating the <indexterm><primary>Sequence-generator table</primary>
<secondary>recalibrating the current value</secondary></indexterm
>current value of the internal sequence <indexterm><primary>CREATE
TABLE LIKE statement</primary><secondary>recalibrating the IDENTITY
column</secondary></indexterm>generator <indexterm><primary>Recalibrating
the current value</primary><secondary>CREATE TABLE LIKE</secondary>
</indexterm>may be necessary after a CREATE TABLE AS or CREATE TABLE
LIKE AS command. The INSERT... SELECT from the table creation will
have provided user-specified values for the target table IDENTITY
column. The internal sequence generator associated with the target
table IDENTITY column would remain at its initial default value based
on the START WITH property. This could lead to possible duplicates
occurring in subsequent row insertions.</para>
<para>To avoid inserts failing with duplicate errors, when a target
table is created using the CREATE TABLE LIKE ... AS SELECT statement,
the internal sequence generator current value should be recalibrated
to a value greater than the maximum value currently in the IDENTITY
column. This allows subsequent inserts to have values generated that
are unique and duplicates are avoided. To recalibrate the current
value of the internal sequence generator table, use the ALTER TABLE
ALTER COLUMN <replaceable>recalibrate-option</replaceable>.</para>
<para>Following is an <indexterm><primary>Recalibrating the current
value</primary><secondary>example of</secondary></indexterm>example
of table <literal>t2</literal> that has been created using CREATE
TABLE LIKE AS <literal>t1</literal>. Table <literal>t1</literal> has
an IDENTITY column named 'a' with a START WITH property of 0. Table <literal
>t2</literal> has been created like table <literal>t1</literal>. Column <literal
>a</literal> is also an IDENTITY column defined with a START WITH
property of 0. This could lead to duplicate errors being generated
until the current value of the internal sequence generator table is
larger than the maximum value of the IDENTITY column in table <literal
>t2</literal>. To alleviate the problem, the internal sequence generator
table will be recalibrated using the ALTER TABLE ALTER COLUMN RECALIBRATE
command.<!--WRITER'S NOTE: Examples tested and successful 4/23/10--></para>
<programlisting>CREATE TABLE t1 (a LARGEINT
                 GENERATED BY DEFAULT AS IDENTITY
                (MINVALUE 0
                 MAXVALUE 99999
                 START WITH 0)
                NOT NULL,
                b INT UNSIGNED NOT NULL,
                PRIMARY KEY(a));

INSERT INTO t1 VALUES(default,1),(default,2),(default,3);

SELECT * FROM t1;

A            B
--------	---------
      0         1
      1         2
      2         3
</programlisting>
<para>The CREATE TABLE LIKE target table <literal>t2</literal> will
inherit the internal sequence generator properties from the source
table <literal>t1</literal>. The AS SELECT syntax will select all
rows from table <literal>t1</literal> and insert them into table <literal
>t2</literal>. The IDENTITY column values will be user-specified values.<!--WRITER'S NOTE: Example tested and successful 4/23/10--><programlisting
>CREATE TABLE t2 LIKE t1 AS SELECT a,b FROM t1;

</programlisting>Table t2 has been created with an internal sequence
generator table START WITH value of 0. The current value in the internal
sequence generator table is 0.<!--WRITER'S NOTE: Example tested and successful 4/23/10--></para>
<programlisting>ALTER TABLE t2 ALTER COLUMN a RECALIBRATE;</programlisting>
<para>The current maximum value of the IDENTITY column is added to
the INCREMENT BY property of the internal sequence generator table
and saved as the new current value in the internal sequence generator
table. The recalibration of the internal sequence generator current
value is now complete. Unique values will be generated for the IDENTITY
column. For details on the syntax of ALTER TABLE and the recalibrate
options, see the <xref linkend="i1004893" role="select:quotedtitle page"
/>.</para>
<note>
<para>If the table containing the IDENTITY column was newly created
and has no rows added, the ALTER TABLE ALTER COLUMN RECALIBRATE operation
is reported as successful. However, the internal sequence generator
current value remains unchanged as no update is necessary.</para>
</note>
</section>
</section>
<section id="conCRTABAS">
<title>Considerations for CREATE TABLE AS</title>
<para><!--WRITER'S NOTE: These considerations were added per Joe DiNapoli's request. 4/30/10 Need to have these reviewed by someone in Dhana's group.-->These
considerations apply to CREATE TABLE AS:</para>
<itemizedlist>
<listitem><para>Access to the table built by CREATE TABLE AS will
be a full table scan because a primary and clustering key cannot be
easily defined.</para></listitem>
<listitem><para>Compile time estimates and runtime information is
not generated for CREATE TABLE AS tables.</para></listitem>
<listitem><para>You cannot manage CREATE TABLE AS tables using WMS
compile time or runtime rules.</para></listitem>
<listitem><para>You cannot specify a primary key for a CREATE TABLE
AS table without explicitly defining all the columns in the CREATE
TABLE statement.</para></listitem>
<listitem><para>You cannot generate an explain plan for a CREATE TABLE
AS ...INSERT/SELECT statement. You can, however, use the EXPLAIN plan
for a CREATE TABLE AS ... INSERT/SELECT statement if you use the NO
LOAD option.</para></listitem>
<listitem><para>You cannot use the ORDER BY clause in a CREATE TABLE
AS statement. The compiler transparently orders the selected rows
to improve the efficiency of the insert.</para></listitem>
<listitem condition="hidden"><para>Information in the section <xref
linkend="GenbyDef" role="select:quotedtitle page"/>.</para></listitem>
</itemizedlist>
<section id="loadifexists">
<title>Considerations for LOAD IF EXISTS and NO LOAD options of CREATE
TABLE AS</title>
<indexterm><primary>CREATE TABLE AS statement</primary><secondary
>LOAD IF EXISTS</secondary></indexterm><indexterm><primary>Loading
data into tables</primary><secondary>LOAD IF EXISTS option</secondary>
</indexterm>
<para>The LOAD IF EXISTS option in a CREATE TABLE AS statement causes
data to be loaded into an existing table. If you do not specify the
LOAD IF EXISTS option and try to load data into an existing table,
the CREATE TABLE AS statement fails to execute. Use the LOAD IF EXISTS
option with the AS clause in these scenarios:</para>
<para><itemizedlist>
<listitem><para>Running CREATE TABLE AS without re-creating the table.
The table must be empty. Otherwise, the CREATE TABLE AS statement
returns an error. Delete the data in the table by using a DELETE statement
before issuing the CREATE TABLE AS statement.</para></listitem>
<listitem><para>Using CREATE TABLE AS to incrementally add data to
an existing table. You must start a user-defined transaction before
issuing the CREATE TABLE AS statement. If you try to execute the CREATE
TABLE AS statement without starting a user-defined transaction, an
error is returned, stating that data already exists in the table.
With a user-defined transaction, newly added rows are rolled back
if an error occurs.</para></listitem>
</itemizedlist></para>
<para>The NO LOAD option in a CREATE TABLE AS statement creates a
table with the CREATE TABLE AS statement, but does not load data into
the table. The option is useful if you must create a table to review
its structure and to analyze the SELECT part of the CREATE TABLE AS
statement with the EXPLAIN statement. You can also use EXPLAIN to
analyze the implicated INSERT/SELECT part of the CREATE TABLE AS ...
NO LOAD statement. For example:<programlisting>CREATE TABLE ttgt NO LOAD AS (SELECT ...);</programlisting
></para>
</section>
<section condition="hidden" id="GenbyDef">
<title>CREATE TABLE AS ... GENERATED BY DEFAULT AS IDENTITY</title>
<para>The CREATE TABLE AS statement is supported for the GENERATED
BY DEFAULT AS IDENTITY <indexterm><primary>CREATE TABLE AS statement</primary>
<secondary>IDENTITY columns</secondary></indexterm>column. The values <indexterm>
<primary>CREATE TABLE AS statement</primary><secondary>considerations
for</secondary></indexterm>for the GENERATED BY DEFAULT AS IDENTITY
can be user-specified or system-generated. You cannot use the CREATE
TABLE AS statement with the GENERATED ALWAYS AS IDENTITY column. </para>
<para>In this <indexterm><primary>CREATE TABLE AS statement</primary>
<secondary>examples of</secondary></indexterm>GENERATED BY DEFAULT
AS IDENTITY example, table <literal>t2</literal> is created starting
with 15 in the IDENTITY column, as defined in the CREATE TABLE statement. </para>
<para><!--WRITER'S NOTE: This example set all tested successfully 4/29/10--><programlisting
>CREATE TABLE t1 (a LARGEINT GENERATED ALWAYS AS IDENTITY
                  (MINVALUE 10
                   MAXVALUE 99999
                   START WITH 15)
                   NOT NULL,
                 b INT UNSIGNED NOT NULL,
                   PRIMARY KEY(a));

INSERT INTO t1 VALUES(DEFAULT,1);

SELECT * FROM t1;

A     B

15    1


CREATE TABLE t2 (a LARGEINT GENERATED BY DEFAULT AS IDENTITY NOT NULL, 
                 b INT, PRIMARY KEY(a)) AS SELECT a,b FROM t1; --A full select 
                                                               --list is required

SELECT * FROM t2;

A     B

15    1

</programlisting>The CREATE TABLE AS SELECT statement, using a full
select list from the source table, provides the values for the GENERATED
ALWAYS AS IDENTITY column as user-specified values. The target table
will contain the same values for the IDENTITY column as were selected
from the source table. As user-specified values are provided for the
IDENTITY column, the internal sequence generator associated with table <literal
>t2</literal> has not been updated with these values. A subsequent
insert into table <literal>t2</literal> using the internal sequence
generator will generate values as specified by the internal sequence
generator options.</para>
<para>In this example, the START WITH option is not defined, so the
internal sequence generator starts with a default value of '0'. When
an insert is performed, the internal sequence generator will generate
values to be used as the IDENTITY column value. <!--WRITER'S NOTE: Example tested and corrected order of output, 4/29/10--><programlisting
>INSERT INTO t2 VALUES(DEFAULT,2);

SELECT * FROM t2;

A     B

15     1
 0     2 (Value is generated by the internal sequence generator)

</programlisting>This may cause duplicates to be experienced because
the current value of the internal sequence generator is incremented
to values that are already present in the IDENTITY column of table <literal
>t2</literal>. To avoid this problem, we recommend that you determine
a START WITH value that is greater than the largest value of the IDENTITY
column of the source table. For example:<programlisting>SELECT MAX(a) FROM t1;

(EXPR)
---------
       15
</programlisting>The CREATE TABLE AS statement for table <literal
>t2</literal> would then include internal sequence generator options.
This sets the current value of the created internal sequence generator
table to a value greater than the maximum value of the IDENTITY column
to be added:<!--WRITER'S NOTE: This example set tested fine 4/29/10--><programlisting
>CREATE TABLE t2 (a LARGEINT GENERATED BY DEFAULT AS IDENTITY
                   (MINVALUE 10
                    MAXVALUE 99999
                    START WITH 16)
                 NOT NULL, b INT UNSIGNED NOT NULL,
                 PRIMARY KEY(a)) AS SELECT a,b FROM t1;

SELECT * FROM t2;

A     B

15    1

INSERT INTO t2 VALUES (DEFAULT,1);

SELECT * FROM t2;

A     B

15     1
16     1
</programlisting></para>
<para>In the next example, table <literal>t3</literal> provokes an
error because you tried to create a column with the GENERATED ALWAYS
AS IDENTITY column, which is not allowed.<!--WRITER'S NOTE: Example tested successfully 4/29/10--><programlisting
>CREATE TABLE t3 (a LARGEINT GENERATED ALWAYS AS IDENTITY NOT NULL,
                 b INT, PRIMARY KEY(a)) AS SELECT a,b FROM t1;

*** ERROR[3428] IDENTITY column A defined as GENERATED ALWAYS cannot 
accept values specified by the user.
</programlisting></para>
</section>
</section>
<section condition="hidden" id="ResTableNames">
<title>Reserved Table Names</title>
<para>Table names <indexterm><primary> CREATE TABLE statement</primary>
<secondary>reserved table names</secondary></indexterm>prefixed by
the name of a user metadata table are reserved. You cannot create
tables with such names. For example, you cannot create tables that
are prefixed by these names:<indexterm><primary>Reserved</primary>
<secondary>table names</secondary></indexterm><indexterm><primary
>Table</primary><secondary> names, reserved</secondary></indexterm
></para>
<itemizedlist>
<listitem><para>HISTOGRAMS</para></listitem>
<listitem><para>HISTOGRAM_INTERVALS</para></listitem>
<listitem><para>MVS_TABLE_INFO_UMD</para></listitem>
<listitem><para>MVS_UMD</para></listitem>
<listitem><para>MVS_USED_UMD</para></listitem>
</itemizedlist>
</section>
<section id="SQ_SQLEXtoCrTab">
<title>Trafodion SQL Extensions to CREATE TABLE</title>
<indexterm><primary>CREATE TABLE statement</primary><secondary>Trafodion
SQL extensions</secondary></indexterm>
<para>This statement is supported for compliance with ANSI SQL:1999
Entry Level. Trafodion SQL extensions to the CREATE TABLE statement
are ASCENDING, DESCENDING, and PARTITION clauses. CREATE TABLE LIKE
is also an extension. </para>
</section>
<section id="i1063184">
<title>Examples of CREATE TABLE</title>
<indexterm><primary>CREATE TABLE statement</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>This example creates a table. The clustering key is
the primary key.</para>
<programlisting>CREATE TABLE SALES.ODETAIL
  ( ordernum     NUMERIC (6) UNSIGNED  NO DEFAULT  NOT NULL,
    partnum      NUMERIC (4) UNSIGNED  NO DEFAULT  NOT NULL,
    unit_price   NUMERIC (8,2)         NO DEFAULT  NOT NULL,
    qty_ordered  NUMERIC (5) UNSIGNED  NO DEFAULT  NOT NULL,
    PRIMARY KEY (ordernum, partnum)  );  
</programlisting>
</listitem>
<listitem><para>This example creates a table like the JOB table with
the same constraints:</para>
<programlisting>CREATE TABLE PERSNL.JOB_CORPORATE 
  LIKE PERSNL.JOB WITH CONSTRAINTS;
</programlisting>
</listitem>
<listitem><para>This is an example of NOT CASESPECIFIC usage:</para>
<programlisting>CREATE TABLE T (a char(10) NOT CASESPECIFIC, b char(10));
INSERT INTO T values ('a', 'A');
</programlisting>
</listitem>
<listitem><para>A row is not returned in this example. Constant ‘A’
is case sensitive, whereas column ‘a’ is insensitive.</para>
<programlisting>SELECT * FROM T WHERE a = 'A';
</programlisting>
</listitem>
<listitem><para>The row is returned in this example. Both sides are
case sensitive.</para>
<programlisting>SELECT * FROM T WHERE a = 'A' (not casespecific);
</programlisting>
</listitem>
<listitem><para><phrase>The row is returned in this example.</phrase
> A case sensitive comparison is done because column ‘b’ is case sensitive.</para>
<programlisting>SELECT * FROM T WHERE b = 'A';
</programlisting>
</listitem>
<listitem><para><phrase>The row is returned in this example.</phrase
> A case sensitive comparison is done because column ‘b’ is case sensitive.</para>
<programlisting>SELECT * FROM T WHERE b = 'A' (not casespecific);
</programlisting>
</listitem>
</itemizedlist>
</section>
<section>
<title>Examples of CREATE TABLE AS</title>
<indexterm><primary>CREATE TABLE AS statement</primary><secondary
>examples of</secondary></indexterm>
<para>This section shows the column attribute rules used to generate
and specify the column names and data types of the table being created.</para>
<itemizedlist>
<listitem><para>If <replaceable>column-attributes</replaceable> are
not specified, the select list items of the select-query are used
to generate the column names and data attributes of the created table.
If the select list item is a column, then it is used as the name of
the created column. For example:</para>
<programlisting>create table t as select a,b from t1
</programlisting>
<para>Table t has 2 columns named (a,b) and the same data attributes
as columns from table t1.</para>
</listitem>
<listitem><para>If the select list item is an expression, it must
be renamed with an AS clause. An error is returned if expressions
are not named. For example:</para>
<programlisting>create table t as select a+1 as c from t1
</programlisting>
<para>Table t has 1 column named (c) and data attribute of (a+1)</para>
<programlisting>create table t as select a+1 from t1
</programlisting>
<para>An error is returned, expression must be renamed.</para>
</listitem>
<listitem><para>If <replaceable>column-attributes</replaceable> are
specified and contains <replaceable>datatype-info</replaceable>, then
they override the attributes of the select items in the select query.
These data attributes must be compatible with the corresponding data
attributes of the select list items in the select-query.</para>
<programlisting>create table t(a int) as select b from t1
</programlisting>
<para>Table t has one column named “a” with data type “int”.</para>
<programlisting>create table t(a char(10)) as select a+1 b from t1;
</programlisting>
<para>An error is returned because the data attribute of column “a”,
a char, does not match the data attribute of the select list item
“b” a numeric.</para>
</listitem>
<listitem><para>If <replaceable>column-attributes</replaceable> are
specified and they only contain <replaceable>column-name</replaceable
>, then the specified column-name override any name that was derived
from the select query.</para>
<programlisting>create table t(c,d) as select a,b from t1
</programlisting>
<para>Table t has 2 columns, c and d, which has the data attributes
of columns a and b from table t1.</para>
</listitem>
<listitem><para>If <replaceable>column-attributes</replaceable> are
specified, then they must contain attributes corresponding to all
select list items in the <replaceable>select-query</replaceable>.
An error is returned, if a mismatch exists.</para>
<programlisting>create table t(a int) as select b,c from t1
</programlisting>
<para>An error is returned. Two items need to be specified as part
of the table-attributes.</para>
</listitem>
<listitem><para>The <replaceable>column-attributes</replaceable> must
specify either the <replaceable>column-name</replaceable> <replaceable
>datatype-info</replaceable> pair or just the <replaceable>column-name</replaceable
> for all columns. You cannot specify some columns with just the name
and others with name and data type.</para>
<programlisting>create table t(a int, b) as select c,d from t1
</programlisting>
<para>An error is returned.</para>
</listitem>
</itemizedlist>
<para>In the following example, table <literal>t1</literal> is created.
Table <literal>t2</literal> is created using the CREATE TABLE AS syntax
without table attributes:<programlisting>CREATE TABLE t1 (c1 int not null primary key,
                 c2 char(50));

CREATE TABLE t2	(c1 int, c2 char (50) UPSHIFT NOT NULL)
                AS SELECT * FROM t1;</programlisting></para>
</section>
</section>
<section id="i1076221" pagebreak="yes">
<title>CREATE VIEW Statement</title>
<itemizedlist>
<listitem><para><xref linkend="i1062394" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1006997" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1007020" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>CREATE VIEW statement</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>CREATE VIEW
statement</primary><secondary>syntax diagram of</secondary></indexterm>
<indexterm><primary>Data Definition Language (DDL) statements</primary>
<secondary>CREATE VIEW</secondary></indexterm><indexterm><primary
>Views</primary><secondary>CREATE VIEW statement</secondary></indexterm>
<indexterm><primary>Data Definition Language (DDL) statements</primary>
<secondary>CREATE VIEW</secondary></indexterm><indexterm><primary
>Views</primary><secondary>CREATE VIEW statement</secondary></indexterm>
<para>The CREATE VIEW statement creates a Trafodion SQL view. See <xref
linkend="i1040744" role="select:quotedtitle page"/>.</para>
<note>
<para>DDL statements are not currently supported in transactions.
That means that you cannot run this statement inside a user-defined
transaction (BEGIN WORK...COMMIT WORK) or when AUTOCOMMIT is OFF.
To run this statement, AUTOCOMMIT must be turned ON (the default)
for the session.</para>
</note>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>CREATE <literal>[OR REPLACE]</literal
> VIEW <replaceable>view</replaceable> 
   [(<replaceable>column-name</replaceable> ] [,<replaceable>column-name</replaceable
> ...)] 
      AS <replaceable>query-expr</replaceable> [<replaceable>order-by-clause</replaceable
>] 
   [WITH CHECK OPTION] 
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="i1062394">
<title>Syntax Description of CREATE VIEW</title>
<variablelist>
<varlistentry><term>OR REPLACE</term>
<listitem><para>creates a view if one does not exist or replaces a
view if a view of the same name exists. The view being replaced might
have the same view definition or a different view definition.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>view</replaceable></term>
<listitem><para>specifies the ANSI logical name of the view. See <xref
linkend="i1013018" role="select:quotedtitle page"/>. This name must
be unique among names of tables and views within its schema.</para>
</listitem>
</varlistentry>
<varlistentry><term>(<replaceable>column-name</replaceable> [,<replaceable
>column-name</replaceable> ]...) </term>
<listitem><para>specifies names for the columns of the view. Column
names in the list must match one-for-one with columns in the table
specified by <replaceable>query-expr</replaceable>. </para><para>If
you omit this clause, columns in the view have the same names as the
corresponding columns in <replaceable>query-expr</replaceable>. You
must specify this clause if any two columns in the table specified
by <replaceable>query-expr </replaceable>have the same name or if
any column of that table does not have a name. For example, this query
expression <literal>SELECT MAX(salary), AVG(salary) AS average_salary
FROM employee</literal> the first column does not have a name.</para>
<para>No two columns of the view can have the same name; if a view
refers to more than one table and the select list refers to columns
from different tables with the same name, you must specify new names
for columns that would otherwise have duplicate names.</para>
</listitem>
</varlistentry>
<varlistentry><term>AS <replaceable>query-expr</replaceable></term>
<listitem><para>specifies the columns for the view and sets the selection
criteria that determines the rows that make up the view. For information
about character string literals, see <xref linkend="i1011528"
role="select:quotedtitle page"/>. For the syntax and syntax description
of <replaceable>query-expr</replaceable>, see <xref linkend="i1008894"
role="select:quotedtitle page"/>. The CREATE VIEW statement provides
this restriction with regard to the <replaceable>query-expr</replaceable
> syntax: <literal>[ANY <replaceable>N</replaceable>]</literal>, <literal
>[FIRST <replaceable>N</replaceable>]</literal> select list items
are not allowed in a view.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>order-by-clause</replaceable></term>
<listitem><para>specifies the order in which to sort the rows of the
final result table. For the syntax and syntax description of the <replaceable
>order-by-clause</replaceable>, see <xref linkend="i1008894"
role="select:quotedtitle page"/>. The CREATE VIEW statement restricts
the <replaceable>order-by-clause</replaceable> with regard to the <replaceable
>access-clause</replaceable> and <replaceable>mode-clause</replaceable
>. The <replaceable>access-mode</replaceable> and <replaceable>mode-clause</replaceable
> cannot follow the <replaceable>order-by-clause</replaceable>.</para>
</listitem>
</varlistentry>
<varlistentry><term>WITH CHECK OPTION</term>
<listitem><indexterm><primary>CREATE VIEW statement</primary><secondary
>WITH CHECK OPTION within</secondary></indexterm><para>specifies that
no row can be inserted or updated in the database through the view
unless the row satisfies the view definition—that is, the search condition
in the WHERE clause of the query expression must evaluate to true
for any row that is inserted or updated. This option is only allowed
for updatable views.</para><para>If you omit this option, a newly
inserted row or an updated row need not satisfy the view definition,
which means that such a row can be inserted or updated in the table
but does not appear in the view. This check is performed each time
a row is inserted or updated.</para>
<para>WITH CHECK OPTION does not affect the query expression; rows
must always satisfy the view definition.</para>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="i1006997">
<title>Considerations for CREATE VIEW</title>
<indexterm><primary>CREATE VIEW statement</primary><secondary>considerations
for</secondary></indexterm>
<itemizedlist>
<listitem><para>If you specify CREATE OR REPLACE VIEW:</para>
<itemizedlist>
<listitem><para>A new view is created if a view of the same name does
not exist. </para></listitem>
<listitem><para>If a view of same name exists, the old view definition
is dropped, and a view with a new definition is created. No check
will be done to see if the new view is identical to the view it is
replacing. The CREATE OR REPLACE VIEW command will unilaterally drop
the old view definition and replace it with the new view definition. </para>
</listitem>
<listitem><para>The privileges granted on the old view will be re-granted
on the new view. If the re-grant of privileges fails, the CREATE OR
REPLACE VIEW operation fails. </para></listitem>
<listitem><para>When CREATE OR REPLACE VIEW replaces an existing view,
any dependent views will be dropped. </para></listitem>
</itemizedlist>
</listitem>
<listitem><para>You can specify GROUP BY using ordinals to refer to
the relative position within the SELECT list. For example, <literal
>GROUP BY 3, 2, 1</literal>.</para></listitem>
<listitem><para>Dynamic parameters are not allowed.</para></listitem>
</itemizedlist>
<section>
<title>Effect of Adding a Column on View Definitions</title>
<para>The addition of a column to a table has no effect on any existing
view definitions or conditions included in constraint definitions.
Any implicit column references specified by SELECT * in view or constraint
definitions are replaced by explicit column references when the definition
clauses are originally evaluated.</para>
</section>
<section>
<title>Authorization and Availability Requirements</title>
<para>To issue a CREATE VIEW statement, you must have SELECT privileges
on the objects underlying the view or be the owner of the objects
underlying the view, and one of the following must be true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT.</para></listitem>
<listitem><para>You are creating the view in a shared schema.</para>
</listitem>
<listitem><para>You are the private schema owner.</para></listitem>
<listitem><para>You have the CREATE or CREATE_VIEW component privilege
for the SQL_OPERATIONS component.</para>
<note>
<para>In this case, if you create a view in a private schema, it will
be owned by the schema owner.</para>
</note>
</listitem>
</itemizedlist>
<para>When you create a view on a single table, the owner of the view
is automatically given all privileges WITH GRANT OPTION on the view.
However, when you create a view that spans multiple tables, the owner
of the view is given only SELECT privileges WITH GRANT OPTION. If
you try to grant privileges to another user on the view other than
SELECT, you will receive a warning that you lack the grant option
for that privilege.</para>
</section>
<section>
<title>Updatable and Non-Updatable Views</title>
<indexterm><primary>CREATE VIEW statement</primary><secondary>updatability
requirements</secondary></indexterm><indexterm><primary>Updatable
view, requirements for</primary></indexterm><indexterm><primary>Views</primary>
<secondary>updatability requirements</secondary></indexterm>
<para>Single table views can be updatable. Multi-table views cannot
be updatable.</para>
<para>To define an updatable view, a query expression must also meet
these requirements:</para>
<itemizedlist>
<listitem><para>It cannot contain a JOIN, UNION, or EXCEPT clause.</para>
</listitem>
<listitem><para>It cannot contain a GROUP BY or HAVING clause.</para>
</listitem>
<listitem><para>It cannot directly contain the keyword DISTINCT.</para>
</listitem>
<listitem><para>The FROM clause must refer to exactly one table or
one updatable view.</para></listitem>
<listitem><para>It cannot contain a WHERE clause that contains a subquery.</para>
</listitem>
<listitem><para>The select list cannot include expressions or functions
or duplicate column names.</para></listitem>
</itemizedlist>
</section>
<section condition="hidden" id="Isolation_Level_Guidelines">
<title>Isolation Level Guidelines</title>
<indexterm><primary>Isolation levels</primary><secondary>guidelines
for CREATE VIEW</secondary></indexterm><indexterm><primary>CREATE
VIEW statement</primary><secondary>isolation level guidelines</secondary>
</indexterm>
<para>The isolation level specified in the CREATE VIEW SELECT statement
is implemented when the view is used in a DML statement.</para>
<para>For descriptions of these four access options, see <xref
linkend="i1009133" role="select:quotedtitle page"/>.</para>
<section>
<title>Single Table in a View</title>
<programlisting>create view v as select * from t for read uncommitted access;
select * from v;
</programlisting>
<para>The SELECT statement reads rows in table <literal>t</literal
> in READ UNCOMMITTED access. The same behavior would occur with this
SELECT statement:</para>
<programlisting>select * from t for read uncommitted access;</programlisting>
</section>
<section>
<title>Multiple Tables in a View</title>
<programlisting>create view v as select * from t1, t2 for serializable access;
select * from v;</programlisting>
<para>The SELECT statement reads rows in tables <literal>t1</literal
> and <literal>t2</literal> in SERIALIZABLE access. The same behavior
would occur with this SELECT statement:</para>
<programlisting>select * from t1,t2 for serializable access</programlisting>
</section>
<section
id="Explicit_User_Specified_Isolation_Level_on_SELECT_From_a_View">
<title>Explicit User-Specified Isolation Level on SELECT From a View</title>
<para>An explicitly-specified access option in the view definition
cannot be overwritten, either by another explicit access option in
the query or by a session-level isolation setting. After the view
definition has been expanded, the isolation level that is closest
to the specified table in the query is used.</para>
<para>For example:</para>
<programlisting>create view v as select * from t1 for read uncommitted access;
select * from v for serializable access;</programlisting>
<para>After view expansion, the query in this example becomes:</para>
<programlisting>select * from (select * from t1 for read uncommitted access) for serializable access;</programlisting>
<para>Because the isolation level closest to table <literal>t1</literal
> is READ UNCOMMITTED, READ UNCOMMITTED is used when the rows are
read.</para>
</section>
<section>
<title>Nested View Definitions</title>
<para>The semantics used with nested view definitions are the same
as those described in <xref
linkend="Explicit_User_Specified_Isolation_Level_on_SELECT_From_a_View"
role="select:quotedtitle page"/>. After nested view expansion, the
isolation level closest to the table is used.</para>
<para>For example:</para>
<programlisting>create view v as select * from t1, t2 for serializable access;
create view v1 as select * from v for read uncommitted access;
select * from v1;</programlisting>
<para>In this example, the query becomes:</para>
<programlisting>select * from (select * from t1,t2 for serializable access) 
    for read uncommitted access;</programlisting>
<para>Because the isolation level closest to table <literal>t1</literal
> and <literal>t2</literal> is SERIALIZABLE access, SERIALIZABLE access
is used when the rows from those tables are read.</para>
</section>
</section>
<section id="ORDER_BY_Clause_Guidelines">
<title>ORDER BY Clause Guidelines</title>
<indexterm><primary>CREATE VIEW statement</primary><secondary>ORDER
BY clause</secondary></indexterm><indexterm><primary>ORDER BY clause </primary>
<secondary>guidelines for CREATE VIEW</secondary></indexterm>
<para>The ORDER BY clause can be specified in the SELECT portion of
a CREATE VIEW definition. Any SELECT syntax that is valid when the
SELECT portion is specified on its own is also valid during the view
definition. An ORDER BY clause can contain either the column name
from the SELECT list or from <replaceable>select-list-index</replaceable
>.</para>
<para>When a DML statement is issued against the view, the rules documented
in the following sections are used to apply the ORDER BY clause.</para>
<section id="When_To_Use_ORDER_BY">
<title>When to Use ORDER BY</title>
<para>An ORDER BY clause is used in a view definition only when the
clause is under the root of the Select query that uses that view.
If the ORDER BY clause appears in other intermediate locations or
in a subquery, it is ignored.</para>
<para>Consider this CREATE VIEW statement:</para>
<programlisting>create view v as select a from t order by a;
select * from v x, v y;</programlisting>
<para>Or this INSERT statement:</para>
<programlisting>insert into t1 select * from v;</programlisting>
<para>In these two examples, the ORDER BY clause is ignored during
DML processing because the first appears as part of a derived table
and the second as a subquery selects, both created after the view
expansion.</para>
<para>If the same query is issued using explicit derived tables instead
of a view, a syntax error is returned:</para>
<programlisting>select * from (select a from t order by a) x, (select a from t order by a) y;</programlisting>
<para>This example returns a syntax error because an ORDER BY clause
is not supported in a subquery.</para>
<para>The ORDER BY clause is ignored if it is part of a view and used
in places where it is not supported. This is different than returning
an error when the same query was written with explicit ORDER BY clause,
as is shown in the preceding examples.</para>
</section>
<section>
<title>ORDER BY in a View Definition With No Override</title>
<para>If the SELECT query reads from the view with no explicit ORDER
BY override, the ORDER BY semantics of the view definition are used.</para>
<para>In this example, the ordering column is the one specified in
the CREATE VIEW statement:</para>
<programlisting>create view v as select * from t order by a
Select * from v
</programlisting>
<para>The SELECT query becomes equivalent to:</para>
<programlisting>select * from t order by a;</programlisting>
</section>
<section>
<title>ORDER BY in a View Definition With User Override</title>
<para>If a SELECT query contains an explicit ORDER BY clause, it overrides
the ORDER BY clause specified in the view definition.</para>
<para>For example:</para>
<programlisting>create view v as select a,b from t order by a;
select * from v order by b;</programlisting>
<para>In this example, <literal>order by b</literal> overrides the <literal
>order by a</literal> specified in the view definition.</para>
<para>The SELECT query becomes equivalent to:</para>
<programlisting>select a,b from t order by b;</programlisting>
</section>
<section>
<title>Nested View Definitions</title>
<para>In case of nested view definitions, the ORDER BY clause in the
topmost view definition overrides the ORDER BY clause of any nested
view definitions.</para>
<para>For example:</para>
<programlisting>create view v1 as select a,b from t1 order by a;
create view v2 as select  a,b from v1 order by b;
select * from v2;</programlisting>
<para>In this example, the ORDER BY specified in the definition of
view <literal>v2</literal> overrides the ORDER BY specified in the
definition of view <literal>v1</literal>.</para>
<para>The SELECT query becomes equivalent to:</para>
<programlisting>select a,b from (select a, b from t) x order by b;</programlisting>
</section>
</section>
</section>
<section id="i1007020">
<title>Examples of CREATE VIEW</title>
<indexterm><primary>CREATE VIEW statement</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>This example creates a view on a single table without
a view column list:</para>
<programlisting>CREATE VIEW SALES.MYVIEW1 AS
  SELECT ordernum, qty_ordered FROM SALES.ODETAIL;
</programlisting>
</listitem>
<listitem><para>This example replaces the view, MYVIEW1, with a different
view definition:</para>
<programlisting>CREATE OR REPLACE VIEW SALES.MYVIEW1 AS 
  SELECT ordernum, qty_ordered FROM SALES.ODETAIL
  WHERE unit_price > 100;</programlisting>
</listitem>
<listitem><para>This example creates a view with a column list:</para>
<programlisting>CREATE VIEW SALES.MYVIEW2 
  (v_ordernum, t_partnum) AS
  SELECT v.ordernum, t.partnum 
    FROM SALES.MYVIEW1 v, SALES.ODETAIL t;  
</programlisting>
</listitem>
<listitem><para>This example creates a view from two tables by using
an INNER JOIN:</para>
<programlisting>CREATE VIEW MYVIEW4 
  (v_ordernum, v_partnum) AS 
  SELECT od.ordernum, p.partnum 
    FROM SALES.ODETAIL OD INNER JOIN SALES.PARTS P 
    ON od.partnum = p.partnum;
</programlisting>
</listitem>
</itemizedlist>
<section id="vertpartexp">
<title>Vertical Partition Example</title>
<indexterm><primary>CREATE VIEW statement</primary><secondary>vertical
partition example</secondary></indexterm><indexterm><primary>Vertical
partition</primary><secondary>example</secondary></indexterm>
<para>This example creates three logical vertical partitions for a
table, <literal>vp0</literal>, <literal>vp1</literal>, and <literal
>vp2</literal> and then creates a view <literal>vp</literal> to access
them.</para>
<para>A view can be used to obtain a composite representation of a
set of closely related tables. In the following example tables <literal
>vp0</literal>, <literal>vp1</literal> and <literal>vp2</literal> all
have a key column <literal>a</literal>. This key column is known to
contain identical rows for all three tables. The three tables <literal
>vp0</literal>, <literal>vp1</literal> and <literal>vp2</literal> also
contain columns <literal>b</literal>, <literal>c</literal> and <literal
>d</literal> respectively. We can create a view <literal>vp</literal
> that combines these three tables and provides the interface of columns <literal
>a</literal>, <literal>b</literal>, <literal>c</literal> and <literal
>d</literal> belonging to a single object.  </para>
<para>Trafodion SQL has the ability to eliminate redundant joins in
a query. Redundant joins occur when:</para>
<itemizedlist>
<listitem><para>Output of join contains expressions from only one
of its two children</para></listitem>
<listitem><para>Every row from this child will match one and only
one row from the other child</para></listitem>
</itemizedlist>
<indexterm condition="hidden"><primary>Vertical partition </primary>
<secondary>FOREIGN KEY constraint</secondary></indexterm><indexterm
condition="hidden"><primary>FOREIGN KEY constraint</primary></indexterm>
<para>Suppose tables A and B denote generic tables. To check if the
rule “every row from this child will match one and only one row from
the other child” is true, Trafodion SQL uses the fact that the join
of Table A with table or subquery B preserves all the rows of A if
the join predicate contains an equi-join predicate that references
a key of B, and one of the following is true: The <phrase
condition="hidden">equi-join predicate references only the key and
a NOT ENFORCED referential constraint exists between A(foreign key)
and B(key) and no local predicates exist on B, or the </phrase>join
is a left outer join where B is the inner table. In this example,
for the join between <literal>vp0</literal> and <literal>vp1</literal
>, <literal>vp0</literal> fills the role of table A and <literal>vp1</literal
> fills the role of table B.  For the join between <literal>vp1</literal
> and <literal>vp2</literal>, <literal>vp1</literal> fills the role
of table A and <literal>vp2</literal> fills the role of table B.</para>
<para>The view <literal>vp</literal> shown in this example uses left
outer joins to combine the three underlying tables. Therefore, if
the select list in a query that accesses <literal>vp</literal> does
not contain column <literal>d</literal> from <literal>vp2</literal
> then the join to table <literal>vp2</literal> in the view <literal
>vp</literal> will not be performed. <phrase condition="hidden">The
NOT ENFORCED referential constraint appears as an option in the HP
Database Manager. It can also be used in the TrafCI product. For information
about TrafCI, see the <citetitle>Trafodion Command Interface Guide</citetitle
>.</phrase></para>
<note condition="hidden">
<para>The NOT ENFORCED referential constraint (REFERENCES/FOREIGN
KEY) is used to help the optimizer eliminate redundant joins, and
not to enforce referential integrity.</para>
</note>
<programlisting>create table vp0(a integer not null, b integer, primary key(a)); 
create table vp1(a integer not null, c integer, primary key(a)); 
create table vp2(a integer not null, d integer, primary key(a));

create view vp(a,b,c,d) as
select vp0.a, b, c, d
from vp0 left outer join vp1 on vp0.a=vp1.a
         left outer join vp2 on vp0.a=vp2.a;

select a, b from vp;  -- reads only vp0
select a, c from vp;  -- reads vp0 and vp1 
select d from vp; -- reads vp0 and vp2
</programlisting>
</section>
</section>
</section>
<section id="i1007032" pagebreak="yes">
<title>DELETE Statement</title>
<itemizedlist>
<listitem><para><xref linkend="i1064226" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1064483" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1007329" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>Data Manipulation Language (DML) statements</primary>
<secondary>DELETE</secondary></indexterm><indexterm><primary>DELETE
statement</primary><secondary>syntax diagram of</secondary></indexterm>
<para>The DELETE statement is a DML statement that deletes a row or
rows from a table or an updatable view. Deleting rows from a view
deletes the rows from the table on which the view is based. DELETE
does not remove a table or view, even if you delete the last row in
the table or view.</para>
<para>Trafodion SQL provides searched DELETE—deletes rows whose selection
depends on a search condition.</para>
<para>For the searched DELETE form, if no WHERE clause exists, all
rows are deleted from the table or view. </para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting><emphasis role="bold">Searched DELETE is:
</emphasis>
DELETE FROM <replaceable>table</replaceable>

[WHERE <replaceable>search-condition </replaceable>] 

   [[FOR] <replaceable>access-option</replaceable> <literal>ACCESS</literal
>] 

<replaceable>access-option</replaceable> <literal>is</literal>: 
   READ COMMITTED <literal condition="hidden">
 | SERIALIZABLE 
 | REPEATABLE READ
 | SKIP CONFLICT 
</literal></programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="i1064226">
<title>Syntax Description of DELETE</title>
<variablelist>
<varlistentry><term><replaceable>table</replaceable> </term>
<listitem><para>names the user table or view from which to delete
rows. <replaceable>table</replaceable> must be a base table or an
updatable view. To refer to a table or view, use the ANSI logical
name.</para><para>See <xref linkend="i1013018"
role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
<varlistentry><term>WHERE <replaceable>search-condition</replaceable
> </term>
<listitem><indexterm><primary>Search condition</primary><secondary
>DELETE statement use of</secondary></indexterm><indexterm><primary
>DELETE statement</primary><secondary>WHERE clause</secondary>
</indexterm><para>specifies a search condition that selects rows to
delete. Within the search condition, any columns being compared are
columns in the table or view being deleted from. See <xref
linkend="i1012266" role="select:quotedtitle page"/>.</para><para>If
you do not specify a search condition, all rows in the table or view
are deleted.</para>
</listitem>
</varlistentry>
<varlistentry><term>[FOR] <replaceable>access-option</replaceable
> ACCESS </term>
<listitem><indexterm><primary>DELETE statement</primary><secondary
>access options</secondary></indexterm><indexterm><primary>Access
options</primary><secondary>DELETE statement use of</secondary>
</indexterm><para>specifies the access option required for data used
to evaluate the search condition. See <xref linkend="i1009133"
role="select:quotedtitle page"/>.</para>
<variablelist>
<varlistentry><term>READ COMMITTED</term>
<listitem><para>specifies that any data used to evaluate the search
condition must come from committed rows. </para></listitem>
</varlistentry>
<varlistentry condition="hidden"><term>SERIALIZABLE | REPEATABLE READ</term>
<listitem><indexterm><primary>Concurrency</primary><secondary>DELETE
statement</secondary></indexterm><para>specifies that the DELETE statement
and any concurrent process (accessing the same data) execute as if
the statement and the other process had run serially rather than concurrently. </para>
</listitem>
</varlistentry>
<varlistentry condition="hidden"><term>SKIP CONFLICT</term>
<listitem><indexterm><primary>DELETE statement</primary><secondary
>SKIP CONFLICT access</secondary></indexterm><para>enables transactions
to skip rows locked in a conflicting mode by another transaction.
The rows under consideration are the result of evaluating the search
condition for the DELETE statement. You cannot use the SKIP CONFLICT
in a SET TRANSACTION statement. </para></listitem>
</varlistentry>
</variablelist>
<para>The default access option is the isolation level of the containing
transaction. </para>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="i1064483">
<title>Considerations for DELETE</title>
<indexterm><primary>DELETE statement</primary><secondary>considerations
for</secondary></indexterm>
<section>
<title>Authorization Requirements</title>
<indexterm><primary>DELETE statement</primary><secondary>authorization
requirements</secondary></indexterm>
<para>DELETE requires authority to read and write to the table or
view being deleted from and authority to read tables or views specified
in subqueries used in the search condition. </para>
</section>
<section>
<title>Transaction Initiation and Termination</title>
<para>The DELETE statement automatically initiates a transaction if
no transaction is active. Otherwise, you can explicitly initiate a
transaction with the BEGIN WORK statement. When a transaction is started,
the SQL statements execute within that transaction until a COMMIT
or ROLLBACK is encountered or an error occurs.</para>
</section>
<section>
<title>Isolation Levels of Transactions and Access Options of Statements</title>
<indexterm><primary>Concurrency</primary><secondary>DELETE statement</secondary>
</indexterm><indexterm><primary>DELETE statement</primary><secondary
>isolation levels</secondary></indexterm>
<para>The isolation level of an SQL transaction defines the degree
to which the operations on data within that transaction are affected
by operations of concurrent transactions. When you specify access
options for the DML statements within a transaction, you override
the isolation level of the containing transaction. Each statement
then executes with its individual access option. </para>
<para condition="hidden">You can explicitly set the isolation level
of a transaction with the SET TRANSACTION statement. See <xref
linkend="i1010391" role="select:quotedtitle page"/>.</para>
</section>
</section>
<section id="i1007329">
<title>Examples of DELETE</title>
<indexterm><primary>DELETE statement</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>Remove all rows from the JOB table:</para>
<programlisting>DELETE FROM persnl.job;

--- 10 row(s) deleted.
</programlisting>
</listitem>
<listitem><para>Remove from the table ORDERS any orders placed with
sales representative 220 by any customer except customer number 1234:</para>
<programlisting>DELETE FROM sales.orders
WHERE salesrep = 220 AND custnum &lt;> 1234;

--- 2 row(s) deleted.
</programlisting>
</listitem>
<listitem><para>Remove all suppliers not in Texas from the table PARTSUPP:</para>
<programlisting>DELETE FROM invent.partsupp
WHERE suppnum IN 
  (SELECT suppnum FROM samdbcat.invent.supplier 
   WHERE state &lt;> 'TEXAS');

--- 41 row(s) deleted.
</programlisting>
<para>This statement achieves the same result: </para>
<programlisting>DELETE FROM invent.partsupp
WHERE suppnum NOT IN 
  (SELECT suppnum FROM samdbcat.invent.supplier 
   WHERE state = 'TEXAS');

--- 41 row(s) deleted.
</programlisting>
</listitem>
<listitem pagebreak="yes"><para>This is an example of a self-referencing
DELETE statement, where the table from which rows are deleted is scanned
in a subquery:<programlisting>delete from table1 where a in
(select a from table1 where b > 200)</programlisting></para></listitem>
</itemizedlist>
</section>
</section>
<section id="DROP-FUNCTION" pagebreak="yes">
<title>DROP FUNCTION Statement</title>
<itemizedlist>
<listitem><para><xref linkend="DROP-FUNCTION-SYNTAX"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="DROP-FUNCTION-CONSIDERATIONS"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="DROP-FUNCTION-EXAMPLES"
role="select:quotedtitle"/></para></listitem>
</itemizedlist>
<indexterm><primary>DROP FUNCTION statement</primary></indexterm>
<indexterm><primary>Data Definition Language (DDL) statements</primary>
<secondary>DROP FUNCTION</secondary></indexterm>
<para>The DROP FUNCTION statement removes a user-defined function
(UDF) from the Trafodion database.</para>
<note>
<para>DDL statements are not currently supported in transactions.
That means that you cannot run this statement inside a user-defined
transaction (BEGIN WORK...COMMIT WORK) or when AUTOCOMMIT is OFF.
To run this statement, AUTOCOMMIT must be turned ON (the default)
for the session.</para>
</note>
<indexterm><primary>DROP FUNCTION statement</primary><secondary>syntax
diagram of</secondary></indexterm>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>DROP FUNCTION [[<replaceable>catalog-name</replaceable
>.]<replaceable>schema-name</replaceable>.]<replaceable>function-name</replaceable
><literal condition="hidden"> [RESTRICT | CASCADE]</literal>
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="DROP-FUNCTION-SYNTAX">
<title>Syntax Description of DROP FUNCTION</title>
<variablelist>
<varlistentry><term>[[<replaceable>catalog-name</replaceable>.]<replaceable
>schema-name</replaceable>.]<replaceable>function-name</replaceable
></term>
<listitem><para>specifies the ANSI logical name of the function, where
each part of the name is a valid SQL identifier with a maximum of
128 characters. Specify the name of a function that has already been
registered in the schema. If you do not fully qualify the function
name, Trafodion SQL qualifies it according to the schema of the current
session. For more information, see <xref linkend="i1032512"
role="select:quotedtitle page"/> and <xref linkend="i1013018"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry condition="hidden"><term>[RESTRICT | CASCADE]</term>
<listitem><para>If you specify RESTRICT, the DROP FUNCTION operation
fails if the function is used in a trigger.</para><para>If you specify
CASCADE, both the function and any triggers that use the function
are dropped during the DROP FUNCTION operation.</para>
<para>The default value is RESTRICT.</para>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="DROP-FUNCTION-CONSIDERATIONS">
<title>Considerations for DROP FUNCTION</title>
<indexterm><primary>DROP FUNCTION statement</primary><secondary>considerations
for</secondary></indexterm>
<itemizedlist>
<listitem condition="hidden"><para>RESTRICT requires that all triggers
that use the function be dropped before you drop the function. CASCADE
automatically drops any triggers that are using the function.</para>
</listitem>
</itemizedlist>
<section>
<title>Required Privileges</title>
<para>To issue a DROP FUNCTION statement, one of the following must
be true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT.</para></listitem>
<listitem><para>You are the owner of the function.</para></listitem>
<listitem><para>You have the DROP or DROP_ROUTINE component privilege
for SQL_OPERATIONS component.</para></listitem>
</itemizedlist>
</section>
</section>
<section id="DROP-FUNCTION-EXAMPLES">
<title>Examples of DROP FUNCTION</title>
<indexterm><primary>DROP FUNCTION statement</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>This DROP FUNCTION statement removes the function
named ADD2 from the default schema:</para>
<programlisting>DROP FUNCTION add2;</programlisting>
</listitem>
<listitem><para>This DROP FUNCTION statement removes the function
named MMA5 from the default schema:</para>
<programlisting>DROP PROCEDURE mma5;</programlisting>
</listitem>
<listitem><para>This DROP FUNCTION statement removes the function
named REVERSE from the default schema:</para>
<programlisting>DROP PROCEDURE reverse;</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1007408" pagebreak="yes">
<title>DROP INDEX Statement</title>
<itemizedlist>
<listitem><para><xref linkend="i1062475" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1078610" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1007447" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>DROP INDEX statement</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>DROP VOLATILE
INDEX statement</primary><secondary>syntax diagram of</secondary>
</indexterm><indexterm><primary>Data Definition Language (DDL) statements</primary>
<secondary>DROP INDEX</secondary></indexterm><indexterm><primary>DROP
INDEX statement</primary><secondary>authorization and availability
requirements</secondary></indexterm><indexterm><primary>DROP VOLATILE
INDEX statement</primary><secondary>syntax diagram of</secondary>
</indexterm><indexterm><primary>Indexes</primary><secondary>DROP INDEX
statement</secondary></indexterm>
<para>The DROP INDEX statement drops a Trafodion SQL index. See <xref
linkend="i1017920" role="select:quotedtitle page"/>.</para>
<para>DROP INDEX is a Trafodion SQL extension.</para>
<note>
<para>DDL statements are not currently supported in transactions.
That means that you cannot run this statement inside a user-defined
transaction (BEGIN WORK...COMMIT WORK) or when AUTOCOMMIT is OFF.
To run this statement, AUTOCOMMIT must be turned ON (the default)
for the session.</para>
</note>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>DROP [VOLATILE] INDEX <replaceable>index</replaceable
> </programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="i1062475">
<title>Syntax Description of DROP INDEX</title>
<variablelist>
<varlistentry><term><replaceable>index</replaceable></term>
<listitem><para>is the index to drop.</para><para>For information,
see <xref linkend="i1013018" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="i1078610">
<title>Considerations for DROP INDEX</title>
<indexterm><primary>DROP INDEX statement</primary><secondary>considerations
for</secondary></indexterm><indexterm><primary>DROP VOLATILE INDEX
statement</primary><secondary>considerations for</secondary></indexterm>
<section>
<title>Required Privileges</title>
<para>To issue a DROP INDEX statement, one of the following must be
true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT.</para></listitem>
<listitem><para>You are the owner of the index or the table associated
with the index.</para></listitem>
<listitem><para>You have the DROP or DROP_INDEX component privilege
for the SQL_OPERATIONS component.</para></listitem>
</itemizedlist>
</section>
</section>
<section id="i1007447">
<title>Examples of DROP INDEX</title>
<indexterm><primary>DROP VOLATILE INDEX statement</primary><secondary
>examples of</secondary></indexterm><indexterm><primary>DROP INDEX
statement</primary><secondary>example of</secondary></indexterm>
<itemizedlist>
<listitem><para>This example drops an index:</para>
<programlisting>DROP INDEX myindex;
</programlisting>
</listitem>
<listitem><para>This example drops a volatile index:</para>
<programlisting>DROP VOLATILE INDEX vindex;
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="DROP-LIBRARY" pagebreak="yes">
<title>DROP LIBRARY Statement</title>
<itemizedlist>
<listitem><para><xref linkend="DROP-LIB-SYNTAX"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="DROP-LIB-CONSIDERATIONS"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="DROP-LIB-EXAMPLES"
role="select:quotedtitle"/></para></listitem>
</itemizedlist>
<indexterm><primary>DROP LIBRARY statement</primary></indexterm>
<indexterm><primary>Data Definition Language (DDL) statements</primary>
<secondary>DROP LIBRARY</secondary></indexterm><indexterm><primary
>Stored procedure statements</primary><secondary>DROP LIBRARY</secondary>
</indexterm>
<para>The DROP LIBRARY statement removes a library object from the
Trafodion database and also removes the library file referenced by
the library object.</para>
<para>DROP LIBRARY is a Trafodion SQL extension.</para>
<note>
<para>DDL statements are not currently supported in transactions.
That means that you cannot run this statement inside a user-defined
transaction (BEGIN WORK...COMMIT WORK) or when AUTOCOMMIT is OFF.
To run this statement, AUTOCOMMIT must be turned ON (the default)
for the session.</para>
</note>
<indexterm><primary>DROP LIBRARY statement</primary><secondary>syntax
diagram of</secondary></indexterm>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>DROP LIBRARY [[<replaceable>catalog-name</replaceable
>.]<replaceable>schema-name</replaceable>.]<replaceable>library-name</replaceable
> [RESTRICT | CASCADE]
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="DROP-LIB-SYNTAX">
<title>Syntax Description of DROP LIBRARY</title>
<variablelist>
<varlistentry><term>[[<replaceable>catalog-name</replaceable>.]<replaceable
>schema-name</replaceable>.]<replaceable>library-name</replaceable
></term>
<listitem><para>specifies the ANSI logical name of the library object,
where each part of the name is a valid SQL identifier with a maximum
of 128 characters. Specify the name of a library object that has already
been registered in the schema. If you do not fully qualify the library
name, Trafodion SQL qualifies it according to the schema of the current
session. For more information, see <xref linkend="i1032512"
role="select:quotedtitle page"/> and <xref linkend="i1013018"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term>[RESTRICT | CASCADE]</term>
<listitem><para>If you specify RESTRICT, the DROP LIBRARY operation
fails if any stored procedures in Java (SPJs) or user-defined functions
(UDFs) were created based on the specified library.</para><para>If
you specify CASCADE, any such dependent procedures or functions are
removed as part of the DROP LIBRARY operation.</para>
<para>The default value is RESTRICT.</para>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="DROP-LIB-CONSIDERATIONS">
<title>Considerations for DROP LIBRARY</title>
<indexterm><primary>DROP LIBRARY statement</primary><secondary>considerations
for</secondary></indexterm>
<itemizedlist>
<listitem><para>RESTRICT requires that all procedures and functions
that refer to the library object be dropped before you drop the library
object. CASCADE automatically drops any procedures or functions that
are using the library.</para></listitem>
<listitem><para>If the library filename referenced by the library
object does not exist, Trafodion SQL issues a warning.</para></listitem>
</itemizedlist>
<section>
<title>Required Privileges</title>
<para>To issue a DROP LIBRARY statement, one of the following must
be true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT.</para></listitem>
<listitem><para>You are the owner of the library.</para></listitem>
<listitem><para>You have the DROP or DROP_LIBRARY component privilege
for the SQL_OPERATIONS component.</para></listitem>
</itemizedlist>
</section>
</section>
<section id="DROP-LIB-EXAMPLES">
<title>Examples of DROP LIBRARY</title>
<indexterm><primary>DROP LIBRARY statement</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>This DROP LIBRARY statement removes the library named
SALESLIB from the SALES schema, removes the <filename>Sales2.jar</filename
> file referenced by the library, and drops any stored procedures
in Java (SPJs) that were created based on this library:</para>
<programlisting>DROP LIBRARY sales.saleslib CASCADE;</programlisting>
</listitem>
<listitem><para>This DROP LIBRARY statement removes the library named
MYUDFS from the default schema and removes the $TMUDFS library file
referenced by the library:</para>
<programlisting>DROP LIBRARY myudfs RESTRICT;</programlisting>
<para>RESTRICT prevents the DROP LIBRARY operation from dropping any
user-defined functions (UDFs) that were created based on this library.
If any UDFs were created based on this library, the DROP LIBRARY operation
fails.</para>
</listitem>
</itemizedlist>
</section>
</section>
<section id="DROP-PROCEDURE" pagebreak="yes">
<title>DROP PROCEDURE Statement</title>
<itemizedlist>
<listitem><para><xref linkend="DROP-PROC-SYNTAX"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="DROP-PROC-CONSIDERATIONS"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="DROP-PROC-EXAMPLES"
role="select:quotedtitle"/></para></listitem>
</itemizedlist>
<indexterm><primary>DROP PROCEDURE statement</primary></indexterm>
<indexterm><primary>Data Definition Language (DDL) statements</primary>
<secondary>DROP PROCEDURE</secondary></indexterm><indexterm><primary
>Stored procedure statements</primary><secondary>DROP PROCEDURE</secondary>
</indexterm>
<para>The DROP PROCEDURE statement removes a stored procedure in Java
(SPJ) from the Trafodion database.</para>
<note>
<para>DDL statements are not currently supported in transactions.
That means that you cannot run this statement inside a user-defined
transaction (BEGIN WORK...COMMIT WORK) or when AUTOCOMMIT is OFF.
To run this statement, AUTOCOMMIT must be turned ON (the default)
for the session.</para>
</note>
<indexterm><primary>DROP PROCEDURE statement</primary><secondary>syntax
diagram of</secondary></indexterm>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>DROP PROCEDURE [[<replaceable>catalog-name</replaceable
>.]<replaceable>schema-name</replaceable>.]<replaceable>procedure-name</replaceable
><literal condition="hidden"> [RESTRICT | CASCADE]</literal>
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="DROP-PROC-SYNTAX">
<title>Syntax Description of DROP PROCEDURE</title>
<variablelist>
<varlistentry><term>[[<replaceable>catalog-name</replaceable>.]<replaceable
>schema-name</replaceable>.]<replaceable>procedure-name</replaceable
></term>
<listitem><para>specifies the ANSI logical name of the stored procedure
in Java (SPJ), where each part of the name is a valid SQL identifier
with a maximum of 128 characters. Specify the name of a procedure
that has already been registered in the schema. If you do not fully
qualify the procedure name, Trafodion SQL qualifies it according to
the schema of the current session. For more information, see <xref
linkend="i1032512" role="select:quotedtitle page"/> and <xref
linkend="i1013018" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry condition="hidden"><term>[RESTRICT | CASCADE]</term>
<listitem><para>If you specify RESTRICT, the DROP PROCEDURE operation
fails if the procedure is used in a trigger.</para><para>If you specify
CASCADE, both the procedure and any triggers that use the procedure
are dropped during the DROP PROCEDURE operation.</para>
<para>The default value is RESTRICT.</para>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="DROP-PROC-CONSIDERATIONS">
<title>Considerations for DROP PROCEDURE</title>
<indexterm><primary>DROP PROCEDURE statement</primary><secondary>considerations
for</secondary></indexterm>
<itemizedlist>
<listitem condition="hidden"><para>RESTRICT requires that all triggers
that use the procedure be dropped before you drop the procedure. CASCADE
automatically drops any triggers that are using the procedure.</para>
</listitem>
</itemizedlist>
<section>
<title>Required Privileges</title>
<para>To issue a DROP PROCEDURE statement, one of the following must
be true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT.</para></listitem>
<listitem><para>You are the owner of the procedure.</para></listitem>
<listitem><para>You have the DROP or DROP_ROUTINE component privilege
for SQL_OPERATIONS component.</para></listitem>
</itemizedlist>
</section>
</section>
<section id="DROP-PROC-EXAMPLES">
<title>Examples of DROP PROCEDURE</title>
<indexterm><primary>DROP PROCEDURE statement</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>This DROP PROCEDURE statement removes the procedure
named LOWERPRICE from the SALES schema:</para>
<programlisting>DROP PROCEDURE sales.lowerprice;</programlisting>
</listitem>
<listitem><para>This DROP PROCEDURE statement removes the procedure
TOTALPRICE from the default schema for the session, which is the SALES
schema:</para>
<programlisting>SET SCHEMA sales;
DROP PROCEDURE totalprice;</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="DropRole" pagebreak="yes">
<title>DROP ROLE Statement</title>
<itemizedlist>
<listitem><para><xref linkend="DropRoleSyntax" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="DropRoleConsid" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="DropRoleExample"
role="select:quotedtitle"/></para></listitem>
</itemizedlist>
<indexterm><primary>Data Definition Language (DDL) statements</primary>
<secondary>DROP ROLE</secondary></indexterm><indexterm><primary>DROP
ROLE statement</primary><secondary>syntax diagram of</secondary>
</indexterm><indexterm><primary>Roles</primary><secondary>DROP ROLE
statement use of</secondary></indexterm>
<para>The DROP ROLE statement deletes an SQL role. See <xref
linkend="RolesElement" role="select:quotedtitle page"/>. </para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>DROP ROLE <replaceable>role-name</replaceable
> </programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="DropRoleSyntax">
<title>Syntax Description of DROP ROLE</title>
<variablelist>
<varlistentry><term><replaceable>role-name</replaceable></term>
<listitem><para>is an existing role name. The role cannot be dropped
if any of the following are true:<itemizedlist>
<listitem><para>Any privileges are granted to the role.</para>
</listitem>
<listitem><para>The role is granted to any users.</para></listitem>
<listitem><para>The role owns any schemas.</para></listitem>
</itemizedlist></para></listitem>
</varlistentry>
</variablelist>
</section>
<section id="DropRoleConsid">
<title>Considerations for DROP ROLE</title>
<indexterm><primary>DROP ROLE statement</primary><secondary>considerations
for</secondary></indexterm>
<itemizedlist>
<listitem><para>To drop a role, you must own the role or have user
administrative privileges for the role. You have user administrative
privileges for the role if you have been granted the MANAGE_ROLES
component privilege. Initially, DB__ROOT is the only database user
who has been granted the MANAGE_ROLES component privilege.</para>
</listitem>
<listitem><para>Role names beginning with DB__ are reserved and can
only be dropped by DB__ROOT.</para></listitem>
<listitem><para>You can determine all users to whom a role has been
granted by using the SHOWDDL ROLE statement. See the <xref
linkend="showddl" role="select:quotedtitle page"/>.</para></listitem>
</itemizedlist>
</section>
<section>
<title>Before You Drop a Role</title>
<para>Before dropping a role, follow these guidelines:</para>
<itemizedlist>
<listitem><para>You must revoke all privileges granted to the role.</para>
</listitem>
<listitem><para>You must revoke the role from all users to whom it
was granted.</para></listitem>
<listitem><para>You must drop all schemas the role is a manager (or
owner) of.</para></listitem>
</itemizedlist>
<para>You can determine all users to whom a role has been granted
with the SHOWDDL statement. See the <xref linkend="showddl"
role="select:quotedtitle page"/>.</para>
</section>
<section>
<title>Active Sessions for the User</title>
<para><phrase>In Trafodion Release 0.9, </phrase>when you revoke a
role from a user, the effects on any active sessions for the user
are undefined. We recommend that you disconnect such sessions. The
user then reconnects to establish new sessions with the updated set
of privileges. </para>
<para>Starting in Trafodion Release 1.0, when you revoke a role from
a user, the change in privileges is automatically propagated to and
detected by active sessions. There is no need for users to disconnect
from and reconnect to a session to see the updated set of privileges.</para>
</section>
<section id="DropRoleExample">
<title>Examples of DROP ROLE</title>
<indexterm><primary>DROP ROLE statement</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>To drop a role: </para>
<programlisting>DROP ROLE clerks;
</programlisting>
</listitem>
<listitem><para>To drop a role with dependent privileges: </para>
<programlisting>-- User administrator creates a role:
CREATE ROLE clerks;
-- User administrator grants privileges on a table to the role:
GRANT ALL PRIVILEGES ON TABLE invent.partloc TO clerks;
-- User administrator grants the role to a user:
GRANT ROLE clerks TO JSmith;
-- JSmith creates a view based upon the granted privilege:
CREATE VIEW invent.partlocView (partnum, loc_code)
  AS SELECT partnum, loc_code FROM invent.partloc;
-- If the user administrator attempts to drop the role, this
--   would fail because of the view created based on
--   the granted privilege.
-- To successfully drop the role, the dependent view
--   and grant must be removed first. For this example:
-- 1. JSmith drops the view:
DROP VIEW invent.partlocView;
-- 2. User administrator revokes the role from the user:
REVOKE ROLE clerks FROM JSmith;
-- 3. User administrator revokes all privileges the role has been granted
REVOKE ALL ON invent.partloc FROM clerks;
-- 4. User administrator drops the role:
DROP ROLE clerks;
-- The DROP ROLE operation succeeds.</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1061009" pagebreak="yes">
<title>DROP SCHEMA Statement</title>
<itemizedlist>
<listitem><para><xref linkend="i1062488" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1007514" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1061965" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>DROP SCHEMA statement</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>Data Definition
Language (DDL) statements</primary><secondary>DROP SCHEMA</secondary>
</indexterm>
<para>The DROP SCHEMA statement drops a schema from the database.
See<xref linkend="i1032499" role="select:quotedtitle page"/>. </para>
<note>
<para>DDL statements are not currently supported in transactions.
That means that you cannot run DDL statements inside a user-defined
transaction (BEGIN WORK...COMMIT WORK) or when AUTOCOMMIT is OFF.
To run these statements, AUTOCOMMIT must be turned ON (the default)
for the session.</para>
</note>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>DROP SCHEMA <replaceable>schema-name</replaceable
> [RESTRICT|CASCADE]
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="i1062488">
<title>Syntax Description of DROP SCHEMA</title>
<variablelist>
<varlistentry><term><replaceable>schema-name</replaceable></term>
<listitem><para>is the name of the schema to delete.</para></listitem>
</varlistentry>
<varlistentry><term>RESTRICT</term>
<listitem><para>If you specify RESTRICT, an error is reported if the
specified schema is not empty. The default is RESTRICT.</para>
</listitem>
</varlistentry>
<varlistentry><term>CASCADE</term>
<listitem><para>If you specify CASCADE, objects in the specified schema
and the schema itself are dropped. Any objects in other schemas that
were dependent on objects in this schema are dropped as well.</para>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="i1007514">
<title>Considerations for DROP SCHEMA</title>
<indexterm><primary>DROP SCHEMA statement</primary><secondary>considerations
for</secondary></indexterm>
<section>
<title>Authorization Requirements</title>
<indexterm><primary>DROP SCHEMA statement</primary><secondary>authorization
and availability requirements</secondary></indexterm>
<para>To drop a schema, one of the following must be true:</para>
<itemizedlist>
<listitem><para>You are the owner of the schema.</para></listitem>
<listitem><para>You have been granted the role that owns the schema.</para>
</listitem>
<listitem><para>You have been granted the DROP_SCHEMA privilege.</para>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1061965">
<title>Example of DROP SCHEMA</title>
<indexterm><primary>DROP SCHEMA statement</primary><secondary>example
of</secondary></indexterm>
<para>This example drops an empty schema:</para>
<programlisting>DROP SCHEMA sales;
</programlisting>
</section>
</section>
<section id="i1007625" pagebreak="yes">
<title>DROP TABLE Statement</title>
<itemizedlist>
<listitem><para><xref linkend="i1062523" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1007647" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1075620" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>DROP TABLE statement</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>DROP VOLATILE
TABLE statement</primary><secondary>syntax diagram of</secondary>
</indexterm><indexterm><primary>Table</primary><secondary>dropping</secondary>
</indexterm><indexterm><primary>Data Definition Language (DDL) statements</primary>
<secondary>DROP TABLE</secondary></indexterm>
<para>The DROP TABLE statement deletes a Trafodion SQL table and its
dependent objects such as indexes and constraints. See <xref
linkend="i1019224" role="select:quotedtitle page"/>.</para>
<note>
<para>DDL statements are not currently supported in transactions.
That means that you cannot run this statement inside a user-defined
transaction (BEGIN WORK...COMMIT WORK) or when AUTOCOMMIT is OFF.
To run this statement, AUTOCOMMIT must be turned ON (the default)
for the session.</para>
</note>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>DROP [VOLATILE] TABLE [IF EXISTS] <replaceable
>table</replaceable> [RESTRICT|CASCADE]
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="i1062523">
<title>Syntax Description of DROP TABLE</title>
<indexterm><primary>DROP TABLE statement</primary><secondary>considerations
for</secondary></indexterm>
<variablelist>
<varlistentry><term>VOLATILE</term>
<listitem><para>specifies that the table to be dropped is a volatile
table.</para></listitem>
</varlistentry>
<varlistentry><term>IF EXISTS</term>
<listitem><para>drops the HBase table if it exists. This option does
not apply to volatile tables.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>table</replaceable></term>
<listitem><para>is the name of the table to delete.</para></listitem>
</varlistentry>
<varlistentry><term>RESTRICT</term>
<listitem><para>If you specify RESTRICT and the table is referenced
by another object, the specified table cannot be dropped. The default
is RESTRICT.</para></listitem>
</varlistentry>
<varlistentry><term>CASCADE</term>
<listitem><para>If you specify CASCADE, the table and all objects
referencing the table (such as a view) are dropped. </para></listitem>
</varlistentry>
</variablelist>
</section>
<section id="i1007647">
<title>Considerations for DROP TABLE</title>
<section>
<title>Authorization Requirements</title>
<indexterm><primary>DROP VOLATILE TABLE statement</primary><secondary
>authorization requirements</secondary></indexterm><indexterm><primary
>DROP TABLE statement</primary><secondary>authorization requirements</secondary>
</indexterm>
<para>To issue a DROP TABLE statement, one of the following must be
true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT.</para></listitem>
<listitem><para>You are the owner of the table.</para></listitem>
<listitem><para>You have the DROP or DROP_TABLE component privilege
for the SQL_OPERATIONS component.</para></listitem>
</itemizedlist>
</section>
</section>
<section id="i1075620">
<title>Examples of DROP TABLE</title>
<indexterm><primary>DROP TABLE statement</primary><secondary>examples
of</secondary></indexterm><indexterm><primary>DROP VOLATILE TABLE
statement</primary><secondary>examples of</secondary></indexterm>
<itemizedlist>
<listitem><para>This example drops a table:</para>
<programlisting>DROP TABLE mysch.mytable;
</programlisting>
</listitem>
<listitem><para>This example drops a volatile table:</para>
<programlisting>DROP VOLATILE TABLE vtable;
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1007707" pagebreak="yes">
<title>DROP VIEW Statement</title>
<itemizedlist>
<listitem><para><xref linkend="i1062527" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1007729" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1007734" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>DROP VIEW statement</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>Views</primary>
<secondary>DROP VIEW statement</secondary></indexterm><indexterm>
<primary>Data Definition Language (DDL) statements</primary><secondary
>DROP VIEW</secondary></indexterm>
<para>The DROP VIEW statement deletes a Trafodion SQL view. See <xref
linkend="i1040744" role="select:quotedtitle page"/>. </para>
<note>
<para>DDL statements are not currently supported in transactions.
That means that you cannot run this statement inside a user-defined
transaction (BEGIN WORK...COMMIT WORK) or when AUTOCOMMIT is OFF.
To run this statement, AUTOCOMMIT must be turned ON (the default)
for the session.</para>
</note>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>DROP VIEW <replaceable>view</replaceable
> [RESTRICT|CASCADE]
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="i1062527">
<title>Syntax Description of DROP VIEW</title>
<variablelist>
<varlistentry><term><replaceable>view</replaceable></term>
<listitem><para>is the name of the view to delete.</para></listitem>
</varlistentry>
<varlistentry><term>RESTRICT</term>
<listitem><para>If you specify RESTRICT, you cannot drop the specified
view if it is referenced in the query expression of any other view
or in the search condition of another object's constraint. The default
is RESTRICT.</para></listitem>
</varlistentry>
<varlistentry><term>CASCADE</term>
<listitem><para>If you specify CASCADE, any dependent objects are
dropped.</para></listitem>
</varlistentry>
</variablelist>
</section>
<section id="i1007729">
<title>Considerations for DROP VIEW</title>
<indexterm><primary>DROP VIEW statement</primary><secondary>considerations
for</secondary></indexterm>
<section>
<title>Authorization Requirements</title>
<indexterm><primary>DROP VIEW statement</primary><secondary>authorization
requirements</secondary></indexterm>
<para>To issue a DROP VIEW statement, one of the following must be
true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT.</para></listitem>
<listitem><para>You are the owner of the view.</para></listitem>
<listitem><para>You have the DROP or DROP_VIEW component privilege
for the SQL_OPERATIONS component.</para></listitem>
</itemizedlist>
</section>
</section>
<section id="i1007734">
<title>Example of DROP VIEW</title>
<indexterm><primary>DROP VIEW statement</primary><secondary>example
of</secondary></indexterm>
<para>This example drops a view:</para>
<programlisting>DROP VIEW mysch.myview;
</programlisting>
</section>
</section>
<section id="i1064741" pagebreak="yes">
<title>EXECUTE Statement</title>
<itemizedlist>
<listitem><para><xref linkend="i1077523" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1077500" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1077505" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>EXECUTE statement</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Resource control statements</primary>
<secondary>EXECUTE statement</secondary></indexterm>
<para>The EXECUTE statement executes an SQL statement previously compiled
by a PREPARE statement<phrase> in a Trafodion Command Interface (TrafCI)
session</phrase>.</para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>EXECUTE <replaceable>statement-name</replaceable
> 
   [ USING <replaceable>param</replaceable> [,<replaceable>param</replaceable
>]...] ]

<replaceable>param</replaceable> is:
   ?<replaceable>param-name</replaceable> | <replaceable>literal-value</replaceable
>
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="i1077523">
<title>Syntax Description of EXECUTE</title>
<variablelist>
<varlistentry><term><replaceable>statement-name</replaceable> </term>
<listitem><para>is the name of a prepared SQL statement—that is, the
statement name used in the PREPARE statement. <replaceable>statement-name</replaceable
> is an SQL identifier. See <xref linkend="i1032512"
role="select:quotedtitle page"/>. </para></listitem>
</varlistentry>
<varlistentry><term>USING <replaceable>param</replaceable> [,<replaceable
>param</replaceable>]... <replaceable> param</replaceable> is:     ?<replaceable
>param-name</replaceable> | <replaceable>literal-value</replaceable
></term>
<listitem><para>specifies values for unnamed parameters (represented
by <literal>?</literal>) in the prepared statement in the form of
either a parameter name (<literal>?</literal><replaceable>param-name</replaceable
>) or a literal value (<replaceable>literal-value</replaceable>).
The data type of a parameter value must be compatible with the data
type of the associated parameter in the prepared statement.</para><para
>Parameter values (<replaceable>param</replaceable>) are substituted
for unnamed parameters in the prepared statement by position—the i-th
value in the USING clause is the value for the i-th parameter in the
statement. If fewer parameter values exist in the USING clause than
unnamed parameters in the PREPARE statement, Trafodion SQL returns
an error. If more parameter values exist in the USING clause than
the unnamed parameters in the PREPARE statement, Trafodion SQL issues
warning 15019.</para>
<para>The USING clause does not set parameter values for named parameters
(represented by <literal>?</literal><replaceable>param‑name</replaceable
>) in a prepared statement. To set parameter values for named parameters,
use the <indexterm><primary>SET PARAM command</primary></indexterm
>SET PARAM command. For more information, see the <citetitle>Trafodion
Command Interface Guide</citetitle>.</para>
<variablelist>
<varlistentry><term>?<replaceable>param-name</replaceable></term>
<listitem><para>The value for a <literal>?</literal><replaceable>param-name</replaceable
> must be previously specified with the SET PARAM command. The <replaceable
>param-name</replaceable> is case-sensitive. For information about
the SET PARAM command, see the <citetitle>Trafodion Command Interface
Guide</citetitle>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>literal-value</replaceable> </term>
<listitem><para>is a numeric or character literal that specifies the
value for the unnamed parameter.</para><para>If <replaceable>literal-value</replaceable
> is a character literal and the target column type is character,
you do not have to enclose it in single quotation marks. Its data
type is determined from the data type of the column to which the literal
is assigned. If the <replaceable>literal-value</replaceable> contains
leading or trailing spaces, commas, or if it matches any parameter
names that are already set, enclose the <replaceable>literal-value</replaceable
> in single quotes.</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
<para>See the <xref linkend="i1062273" role="select:quotedtitle page"
/>. For information about the SET PARAM command, see the <citetitle
>Trafodion Command Interface Guide</citetitle>.</para>
</section>
<section id="i1077500">
<title>Considerations for EXECUTE</title>
<section>
<title>Scope of EXECUTE</title>
<indexterm><primary>EXECUTE statement</primary><secondary>considerations
for</secondary></indexterm><indexterm><primary>EXECUTE statement</primary>
<secondary>scope of</secondary></indexterm>
<para>A statement must be compiled by PREPARE before you EXECUTE it,
but after it is compiled, you can execute the statement multiple times
without recompiling it. The statement must have been compiled during
the same <phrase>TrafCI </phrase>session as its execution.</para>
</section>
</section>
<section id="i1077505">
<title>Examples of EXECUTE</title>
<indexterm><primary>EXECUTE statement</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>Use PREPARE to compile a statement once, and then
execute the statement multiple times with different parameter values.
This example uses the SET PARAM command to set parameter values for
named parameters (represented by <literal>?</literal><replaceable
>param‑name</replaceable>) in the prepared statement.</para>
<programlisting>
SQL>prepare findemp from
+>select * from persnl.employee
+>where salary > ?sal and jobcode = ?job;

--- SQL command prepared.

SQL>set param ?sal 40000.00;

SQL>set param ?job 450;

SQL>execute findemp;
</programlisting>
<programlisting>
EMPNUM FIRST_NAME      LAST_NAME      DEPTNUM JOBCODE SALARY
------ --------------- -------------- ------- ------- --------
   232 THOMAS          SPINNER           4000     450 45000.00

--- 1 row(s) selected.
</programlisting>
<programlisting>
SQL>set param ?sal 20000.00;

SQL>set param ?job 300;

SQL>execute findemp;
</programlisting>
<programlisting>
EMPNUM FIRST_NAME      LAST_NAME      DEPTNUM JOBCODE SALARY
------ --------------- -------------- ------- ------- --------
    75 TIM             WALKER            3000     300 32000.00
    89 PETER           SMITH             3300     300 37000.40
...

--- 13 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Specify literal values in the USING clause of the
EXECUTE statement for unnamed parameters in the prepared statement:</para>
<programlisting>
SQL>prepare findemp from
+>select * from persnl.employee
+>where salary > ? and jobcode = ?;

--- SQL command prepared.

SQL>execute findemp using 40000.00,450;
</programlisting>
<programlisting>
EMPNUM FIRST_NAME      LAST_NAME      DEPTNUM JOBCODE SALARY
------ --------------- -------------- ------- ------- --------
   232 THOMAS          SPINNER           4000     450 45000.00

--- 1 row(s) selected.
</programlisting>
<programlisting>
SQL>execute findemp using 20000.00, 300;
</programlisting>
<programlisting>
EMPNUM FIRST_NAME      LAST_NAME      DEPTNUM JOBCODE SALARY
------ --------------- -------------- ------- ------- --------
    75 TIM             WALKER            3000     300 32000.00
    89 PETER           SMITH             3300     300 37000.40
...

--- 13 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Use SET PARAM to assign a value to a parameter name
and specify both the parameter name and a literal value in the EXECUTE
USING clause:</para>
<programlisting>
SQL>prepare findemp from
+>select * from persnl.employee
+>where salary > ? and jobcode = ?;

--- SQL command prepared.

SQL>set param ?Salary 40000.00;

SQL>execute findemp using ?Salary, 450;

EMPNUM FIRST_NAME      LAST_NAME      DEPTNUM JOBCODE SALARY 
------ --------------- -------------- ------- ------- --------    
232    THOMAS          SPINNER           4000     450 45000.00</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1007383" pagebreak="yes">
<title>EXPLAIN Statement</title>
<indexterm><primary>Explain statement</primary><secondary>reviewing
query execution plans</secondary></indexterm><indexterm><primary>Query
execution plan</primary><secondary>reviewing</secondary></indexterm>
<para>The EXPLAIN statement helps you to review query execution plans.
You can use the EXPLAIN statement anywhere you can execute other SQL
statements (for example, SELECT). <phrase condition="hidden">For information
about TrafCI, see the <citetitle>Trafodion Command Interface Guide</citetitle
>. </phrase>For more information on the EXPLAIN function, see <xref
linkend="i1008313" role="select:quotedtitle page"/>.</para>
<para>EXPLAIN is a Trafodion SQL extension.</para>
<informaltable frame="all">
<tgroup cols="1" colsep="1" rowsep="1">
<colspec colname="col4"/>
<tbody>
<row><entry><programlisting>EXPLAIN [OPTIONS {'f'<literal
condition="hidden"> | 'n' | 'e' | 'm'</literal>}] {FOR QID <literal
condition="hidden"><computeroutput><replaceable>qid</replaceable></computeroutput
> | </literal><replaceable>query-text</replaceable> | <replaceable
>prepared-stmt-name</replaceable>}</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<para condition="hidden">The syntax for the EXPLAIN statement supports
four output options. <xref linkend="i1009424" role="select:label"
/> summarizes the options. </para>
<table frame="topbot" id="i1009424">
<title>EXPLAIN Statement Options</title>
<tgroup cols="3" colsep="0" rowsep="0">
<colspec colwidth="0.88*"/>
<colspec colwidth="0.58*"/>
<colspec colwidth="1.54*"/>
<thead>
<row rowsep="1" valign="bottom"><entry>Syntax</entry><entry>Option
Type</entry><entry>Purpose</entry></row>
</thead>
<tbody>
<row><entry><literal>OPTIONS 'f'</literal></entry><entry>Formatted</entry>
<entry>Provides the simple, basic information contained in the query
execution plan. This information is formatted for readability and
limited to 79 characters (one line) per operator.</entry></row>
<row condition="hidden"><entry><literal>OPTIONS 'n'</literal></entry>
<entry>Normal user</entry><entry>Provides the most important information
contained in the query execution plan. This information is formatted
for readability and is the default output format.</entry></row>
<row condition="hidden"><entry><literal>OPTIONS 'e'</literal></entry>
<entry>Expert user</entry><entry>Provides all information contained
in the query execution plan. This information is formatted for readability.</entry>
</row>
<row condition="hidden"><entry><literal>OPTIONS 'm'</literal></entry>
<entry>Machine readable</entry><entry>Provides all information contained
in the query execution plan. This information is formatted for machine
readability (easy to parse with software tools). Same format as EXPLAIN
function (see <xref linkend="i1008313" role="select:quotedtitle page"
/>).</entry></row>
</tbody>
</tgroup>
</table>
<indexterm><primary>Explain statement</primary><secondary>displayed</secondary>
</indexterm><indexterm><primary>Query execution plan</primary>
<secondary>displayed</secondary></indexterm>
<para>Plans displayed by the EXPLAIN statement<phrase condition="hidden"
> OPTIONS ‘n’, ‘e’, and ‘f’</phrase> are ordered from top (root operator)
to bottom (leaf operators). <phrase condition="hidden">The machine-readable
format (option ‘m’) orders plans from bottom (leaf operators) to top
(root operator).</phrase></para>
<indexterm><primary>Explain statement</primary><secondary>operators</secondary>
</indexterm><indexterm><primary>Query execution plan</primary>
<secondary>operators</secondary></indexterm><indexterm><primary>Operators
in query execution plan</primary></indexterm>
<!--WRITER'S NOTE: Expose this xref when a Query Guide becomes available.-->
<para condition="hidden">For detailed information about the operators
in the query execution plan, see the <citetitle>Trafodion Query Guide</citetitle
>.</para>
<section>
<title>Syntax Description of EXPLAIN</title>
<indexterm><primary>Explain statement</primary><secondary>syntax</secondary>
</indexterm>
<variablelist>
<varlistentry><term>f</term>
<listitem><para>formatted. See <xref linkend="i1004366"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry condition="hidden"><term>n</term>
<listitem><para>normal user (default setting). See <xref
linkend="i1004402" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry condition="hidden"><term>e</term>
<listitem><para>expert user. See <xref linkend="i1004485"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry condition="hidden"><term>m</term>
<listitem><para>machine readable format. See <xref linkend="i1004515"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<!--WRITER'S NOTE: Expose the qid option when WMS becomes available.-->
<varlistentry condition="hidden"><term><replaceable>qid</replaceable
></term>
<listitem><para>a delimited identifier or regular identifier, which
represents the query ID. This example shows the query ID, which contains
lowercase characters, as a delimited identifier:<programlisting>QID "MXID01001011194212103659400053369000000085905admin00_2605_S1"</programlisting
></para></listitem>
</varlistentry>
<varlistentry><term><replaceable>query-text</replaceable></term>
<listitem><para>a DML statement such as SELECT * FROM T3.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>prepared-stmt-name</replaceable></term>
<listitem><para>an SQL identifier containing the name of a statement
already prepared in this session. An SQL identifier is case-insensitive
(will be in uppercase) unless it is double-quoted. It must be double-quoted
if it contains blanks, lowercase letters, or special characters. It
must start with a letter. When you refer to the prepared query in
a SELECT statement, you must use uppercase. </para></listitem>
</varlistentry>
</variablelist>
</section>
<section>
<title>Considerations for EXPLAIN</title>
<itemizedlist>
<listitem><para><xref linkend="Privileges-EXPLAIN"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="EXPLAIN-While-Queries-Are-Running"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="i1004343" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="i1004346" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="i1004366" role="select:quotedtitle page"
/></para></listitem>
<listitem condition="hidden"><para><xref linkend="i1004402"
role="select:quotedtitle page"/></para></listitem>
<listitem condition="hidden"><para><xref linkend="i1004485"
role="select:quotedtitle page"/></para></listitem>
<listitem condition="hidden"><para><xref linkend="i1004515"
role="select:quotedtitle page"/></para></listitem>
</itemizedlist>
<section id="Privileges-EXPLAIN">
<title>Required Privileges</title>
<para>To issue an EXPLAIN statement, one of the following must be
true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT.</para></listitem>
<listitem><para>You own (that is, issued) the query specified in the
EXPLAIN statement.</para></listitem>
<listitem><para>You have the SHOW component privilege for the SQL_OPERATIONS
component. The SHOW component privilege is granted to PUBLIC by default.</para>
</listitem>
</itemizedlist>
</section>
<section id="EXPLAIN-While-Queries-Are-Running">
<title>Obtaining EXPLAIN Plans While Queries Are Running</title>
<indexterm><primary>Explain statement</primary><secondary>plan in
running query</secondary></indexterm><indexterm><primary>Query execution
plan</primary><secondary>in running query</secondary></indexterm>
<para>Trafodion SQL provides the ability to capture an EXPLAIN plan
for a query at any time while the query is running with the FOR QID
option. By default, this behavior is disabled for a Trafodion database
session. <phrase condition="hidden">To enable this feature, contact
your HP Support representative for assistance.</phrase></para>
<note>
<para>Enable this feature before you start preparing and executing
queries.</para>
</note>
<para>After the feature is enabled, use the FOR QID option in an EXPLAIN
statement to get the query execution plan of a running query. </para>
<para>The EXPLAIN function or statement returns the plan that was
generated when the query was prepared. EXPLAIN with the FOR QID option
retrieves all the information from the original plan of the executing
query. The plan is available until the query finishes executing and
is removed or deallocated.</para>
</section>
<section id="i1004343">
<title>Case Considerations</title>
<para>In most cases, words in the commands can be in uppercase or
lowercase. The options letter must be single quoted and in lowercase.</para>
</section>
<section id="i1004346">
<title>Number Considerations</title>
<para>Costs are given in a generic unit of effort. They show relative
costs of an operation.</para>
<para condition="hidden">When numbers are displayed as 0.01 for OPTIONS
‘n’ (or 0.0001 for OPTIONS ‘e’), the numbers have likely been rounded
up and are usually much smaller than shown. However, if the numbers
are zero, the display shows “0”.</para>
<para>When trailing decimal digits are zero, they are dropped. For
example, 6.4200 would display as 6.42 and 5.0 would display as 5,
without a decimal point.</para>
</section>
<section id="i1004366">
<title>Formatted [OPTIONS 'f'] Considerations</title>
<indexterm><primary>Explain statement</primary><secondary>OPTIONS
’f’ considerations</secondary></indexterm><indexterm><primary>OPTIONS
on Explain statement</primary><secondary>’f’</secondary></indexterm>
<para>The formatted option is the simplest option. It provides essential,
brief information about the plan and shows the operators and their
order within the query execution plan. </para>
<para>OPTIONS 'f' formats the EXPLAIN output into these fields: </para>
<informaltable frame="topbot">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colwidth="0.70*"/>
<colspec colwidth="1.30*"/>
<tbody>
<row><entry>LC</entry><entry>Left child sequence number</entry></row>
<row><entry>RC</entry><entry>Right child sequence number</entry></row>
<row><entry>OP</entry><entry>The sequence number of the operator in
the query plan</entry></row>
<row><entry>OPERATOR</entry><entry>The operator type</entry></row>
<row><entry>OPT</entry><entry>Query optimizations that were applied</entry>
</row>
<row><entry>DESCRIPTION</entry><entry>Additional information about
the operator</entry></row>
<row><entry>CARD</entry><entry>Estimated number of rows returned by
the plan. CARDINALITY and ROWS_OUT are the same.</entry></row>
</tbody>
</tgroup>
</informaltable>
<para condition="hidden">If the query plan contains certain special
tables or trigger temp tables, the DESCRIPTION field will show TT
for trigger temp. This simplifies reading plans that include special
tables.</para>
<indexterm><primary>Explain statement</primary><secondary>examples
of</secondary></indexterm>
<para>This example uses OPTIONS 'f ':</para>
<programlisting>>>explain options 'f' select * from region;

LC   RC   OP   OPERATOR              OPT       DESCRIPTION           CARD
---- ---- ---- --------------------  --------  --------------------  ---------

1    .    2    root                                                  1.00E+002
.    .    1    trafodion_scan                  REGION                1.00E+002

--- SQL operation complete.</programlisting>
<para>To use the EXPLAIN statement with a prepared statement, first
prepare the query. Then use the EXPLAIN statement:</para>
<programlisting>PREPARE q FROM SELECT * FROM REGION;

EXPLAIN options 'f' q;
</programlisting>
<para condition="hidden">The FILE_SCAN operator is the only operator
in this example that shows additional information in the OPT and DESCRIPTION
fields. 'fs' indicates that fast-scan optimization was used. 'fr'
indicates that fast-reply data-move optimization was used. The table
name is shown in the DESCRIPTION field. <phrase condition="hidden"
>For information about these special optimization techniques, see
the listing of each operator in the <citetitle>Trafodion Query Guide</citetitle
>.</phrase></para>
</section>
<section condition="hidden" id="i1004402">
<title>Normal User [OPTIONS 'n'] Considerations</title>
<para>The normal user option<indexterm><primary>Explain statement</primary>
<secondary>OPTIONS ’n’ considerations</secondary></indexterm> provides
more <indexterm><primary>OPTIONS on Explain statement</primary>
<secondary>’n’</secondary></indexterm>information about the query
plan than OPTIONS 'f'. OPTIONS 'n' is the default option, so you can
simply execute EXPLAIN <replaceable>query-text</replaceable> without
specifying OPTIONS 'n'.</para>
<para>OPTIONS 'n' provides two digits of precision for floating-point
cost values.</para>
<para>OPTIONS 'n' provides a plan summary and values of the fields
for the operators in the query execution plan. <xref linkend="i1009436"
role="select:label"/> describes the plan summary.</para>
<table frame="topbot" id="i1009436">
<title>Plan Summary Information</title>
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colwidth="0.71*"/>
<colspec colwidth="1.29*"/>
<tbody>
<row><entry>MODULE_NAME</entry><entry>Shows DYNAMICALLY COMPILED when
a query statement or prepared statement is supplied as the argument
to the EXPLAIN statement.</entry></row>
<row><entry> STATEMENT_NAME</entry><entry> Name of the prepared statement.
For example, in the prepared statement <literal>PREPARE newstmt from
SELECT * FROM T, </literal>the STATEMENT_NAME field value is <literal
>NEWSTMT</literal>.</entry></row>
<row><entry>PLAN_ID</entry><entry>An identifier generated by the database.</entry>
</row>
<row><entry>ROWS_OUT</entry><entry>Estimated number of rows returned
by the plan.</entry></row>
<row><entry>EST_TOTAL_COST</entry><entry>Estimated total cost of the
plan.</entry></row>
<row><entry>STATEMENT</entry><entry>SQL query being explained in this
query plan.</entry></row>
</tbody>
</tgroup>
</table>
<para>The EXPLAIN plan output<indexterm><primary>Explain statement</primary>
<secondary>output</secondary></indexterm> provides the following information,
as applicable, for each operator of the query execution plan. The
"NODE LISTING" heading means a list of the plan's operators will follow.</para>
<table frame="topbot" id="i1009452">
<title>Node Listing Information </title>
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colwidth="0.68*"/>
<colspec colwidth="1.32*"/>
<thead>
<row rowsep="1" valign="bottom"><entry>Field</entry><entry>Description</entry>
</row>
</thead>
<tbody>
<row><entry>Operator name</entry><entry>Current operator type, such
as FILE_SCAN, HASH_JOIN, NESTED_JOIN, and so on.</entry></row>
<row><entry>SEQ_NO</entry><entry>Sequence number of the current operator
in the query execution plan; indicates the sequence in which the query
plan is generated.</entry></row>
<row><entry>Children information</entry><entry>Sequence number of
the operator’s children (operators that feed data up to this operator).
There can be 0, 1, or 2 children shown as NO CHILDREN, ONLY CHILD
6, or CHILDREN 5, 7.</entry></row>
<row><entry>TABLE_NAME</entry><entry>Name of base table, shown only
on operators that access the table.</entry></row>
<row><entry>REQUESTS_IN</entry><entry>Estimated number of requests<indexterm>
<primary>REQUESTS_IN</primary></indexterm> for execution<indexterm>
<primary>EXPLAIN output columns</primary><secondary>REQUESTS_IN</secondary>
</indexterm> of this operator. The value is 1 except for the right
child operator (inner scan) of a nested-loop join.</entry></row>
<row><entry>ROWS_OUT or ROWS/REQUEST </entry><entry>Estimated number
of rows<indexterm><primary>ROWS_OUT</primary></indexterm><indexterm>
<primary>ROWS/REQUEST</primary></indexterm> returned<indexterm><primary
>EXPLAIN output columns</primary><secondary>ROWS_OUT</secondary>
</indexterm> by the plan or, when REQUESTS_IN is greater than one,
the value is the estimated number of rows returned per input request.</entry>
</row>
<row><entry>EST_OPER_COST</entry><entry>Estimated cost associated
with executing the current operator.</entry></row>
<row><entry>EST_TOTAL_COST</entry><entry>Estimated cost associated
with execution of the current operator and all children.</entry></row>
<row><entry>DESCRIPTION</entry><entry>Additional information about
the operation. For example, in the case of a scan, the description
field shows scan_type, scan_direction, lock_mode, access_mode, columns_retrieved,
optimization information, and so on. For details about all operators
and their description fields, see the <citetitle>Trafodion Query Guide</citetitle
>.</entry></row>
</tbody>
</tgroup>
</table>
<para>This example uses OPTIONS 'n':<indexterm><primary>Explain statement</primary>
<secondary>examples of</secondary></indexterm></para>
<programlisting>>>explain options 'n' select * from region;

------------------------------------------------------------------ PLAN SUMMARY
MODULE_NAME .............. DYNAMICALLY COMPILED
STATEMENT_NAME ........... NOT NAMED
PLAN_ID .................. 212141478299499838
ROWS_OUT ............... 100
EST_TOTAL_COST ........... 0.01
STATEMENT ................ select * from region;
 
 
------------------------------------------------------------------ NODE LISTING
ROOT ======================================  SEQ_NO 3        ONLY CHILD 2
REQUESTS_IN .............. (not found)
ROWS_OUT ............... 100
EST_OPER_COST ............ 0.01
EST_TOTAL_COST ........... 0.01
DESCRIPTION
  max_card_est ......... 100
  fragment_id ............ 0
  parent_frag ............ (none)
  fragment_type .......... master
  xn_access_mode ......... read_only
  xn_autoabort_interval    0
  auto_query_retry ....... enabled
  plan_version ....... 2,400
  SESSION_USERNAME ....... MXID01010130744212141209524355662000000044209superus
                             er00
  LDAP_USERNAME .......... superuser
  NVCI_PROCESS ........... ON
<emphasis role="bold">Is the below SHOWCONTROL_UNEXTERNALI line related to the SHOWCONTROL statement that is not supported for the Trafodion project??? DELETE???</emphasis
>
  SHOWCONTROL_UNEXTERNALI  OFF
  SCHEMA ................. USR
  GENERATE_EXPLAIN ....... ON
  select_list ............ NEO.USR.REGION.R_KEY, NEO.USR.REGION.R_NAME,
                             NEO.USR.REGION.R_COMMENT
 
 
PARTITION_ACCESS ==========================  SEQ_NO 2        ONLY CHILD 1
REQUESTS_IN .............. (not found)
ROWS_OUT ............... 100
EST_OPER_COST ............ 0.01
EST_TOTAL_COST ........... 0.01
DESCRIPTION
  max_card_est ......... 100
  fragment_id ............ 2
  parent_frag ............ 0
  fragment_type .......... dp2
  buffer_size ....... 31,000
  record_length ........ 306
  space_usage ............ 5:32:100:144
  bottom_node_map ........ (\THE0105:13)
 
 
FILE_SCAN =================================  SEQ_NO 1        NO CHILDREN
TABLE_NAME ............... NEO.USR.REGION
REQUESTS_IN .............. (not found)
ROWS_OUT ............... 100
EST_OPER_COST ............ 0.01
EST_TOTAL_COST ........... 0.01
DESCRIPTION
  max_card_est ......... 100
  fragment_id ............ 2
  parent_frag ............ 0
  fragment_type .......... dp2
  scan_type .............. full scan of table NEO.USR.REGION
  scan_direction ......... forward
  lock_state ............. cursor
  consistency_level ...... read_committed
  columns_retrieved ...... 3
  fast_scan .............. used
  fast_replydata_move .... used
  key_columns ............ R_KEY
  begin_key .............. (R_KEY = &lt;min>
  end_key ................ (R_KEY = &lt;max>
  
--- SQL operation complete.
</programlisting>
</section>
<section condition="hidden" id="i1004485">
<title>Expert User [OPTIONS 'e'] Considerations</title>
<para>The expert user option<indexterm><primary>Explain statement</primary>
<secondary>OPTIONS ’e’ considerations</secondary></indexterm> provides
all the plan data <indexterm><primary>OPTIONS on Explain statement</primary>
<secondary>’e’</secondary></indexterm>from the EXPLAIN plan in a readable
and understandable format. Like the normal user option, the expert
user option provides a plan summary at the top of the output (<xref
linkend="i1009436" role="select:label page"/>) and a node (or operator)
listing. The difference between the normal user and expert user output
is in the detail costs. The expert user option provides additional
costing information and provides four digits of precision for all
floating-point numbers.</para>
<para>Detail cost fields break down the EST_TOTAL_COST<indexterm>
<primary>EST_TOTAL_COST field</primary></indexterm><indexterm><primary
>EXPLAIN output columns</primary><secondary>EST_TOTAL_COST</secondary>
</indexterm> field into four components:</para>
<informaltable frame="topbot">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colwidth="0.55*"/>
<colspec colwidth="1.45*"/>
<tbody>
<row><entry>cpu_cost</entry><entry>Relative estimate of the processor
cost needed to execute the instructions of this operator and all children.</entry>
</row>
<row><entry>io_cost</entry><entry>Relative estimate of the I/O cost
(depends on the number of seeks and amount of data transferred) needed
to perform the I/O for this operator and all children.</entry></row>
<row><entry>msg_cost</entry><entry>Relative estimate of the messaging
cost (depends on the number of local/remote messages and amount of
data sent) for this operator and all children.</entry></row>
<row><entry>idle_cost</entry><entry>Relative estimate of the idle
cost (depends on the amount of expected wait for an event) for this
operator and all children. Events are opening a table, starting an
ESP process, and so on.</entry></row>
</tbody>
</tgroup>
</informaltable>
<para>This example uses OPTIONS ‘e’:<indexterm><primary>Explain statement</primary>
<secondary>examples of</secondary></indexterm></para>
<programlisting>>>explain options 'e' select * from region;
 
------------------------------------------------------------------ PLAN SUMMARY
MODULE_NAME .............. DYNAMICALLY COMPILED
STATEMENT_NAME ........... NOT NAMED
PLAN_ID .................. 212141478299499838
ROWS_OUT ............... 100
EST_TOTAL_COST ........... 0.01
STATEMENT ................ select * from region;
 
 
------------------------------------------------------------------ NODE LISTING
ROOT ======================================  SEQ_NO 3        ONLY CHILD 2
REQUESTS_IN .............. (not found)
ROWS_OUT ............... 100
EST_OPER_COST ............ 0.0001
EST_TOTAL_COST ........... 0.01
  (none)
DESCRIPTION
  max_card_est ......... 100
  fragment_id ............ 0
  parent_frag ............ (none)
  fragment_type .......... master
  xn_access_mode ......... read_only
  xn_autoabort_interval    0
  auto_query_retry ....... enabled
  plan_version ....... 2,400
  SESSION_USERNAME ....... MXID01010130744212141209524355662000000044209superus
                             er00
  LDAP_USERNAME .......... superuser
  NVCI_PROCESS ........... ON
<emphasis role="bold">Is the below SHOWCONTROL_UNEXTERNALI line related to the SHOWCONTROL statement that is not supported for the Trafodion project??? DELETE???</emphasis
>
  SHOWCONTROL_UNEXTERNALI  OFF
  SCHEMA ................. USR
  GENERATE_EXPLAIN ....... ON
  select_list ............ NEO.USR.REGION.R_KEY, NEO.USR.REGION.R_NAME,
                             NEO.USR.REGION.R_COMMENT
 
 
PARTITION_ACCESS ==========================  SEQ_NO 2        ONLY CHILD 1
REQUESTS_IN .............. (not found)
ROWS_OUT ............... 100
EST_OPER_COST ............ 0.0007
EST_TOTAL_COST ........... 0.0099
  (none)
DESCRIPTION
  max_card_est ......... 100
  fragment_id ............ 2
  parent_frag ............ 0
  fragment_type .......... dp2
  buffer_size ....... 31,000
  record_length ........ 306
  space_usage ............ 5:32:100:144
  bottom_node_map ........ (\THE0105:13)
 
 
FILE_SCAN =================================  SEQ_NO 1        NO CHILDREN
TABLE_NAME ............... NEO.USR.REGION
REQUESTS_IN .............. (not found)
ROWS_OUT ............... 100
EST_OPER_COST ............ 0.0093
EST_TOTAL_COST ........... 0.0093
  (none)
DESCRIPTION
  max_card_est ......... 100
  fragment_id ............ 2
  parent_frag ............ 0
  fragment_type .......... dp2
  scan_type .............. full scan of table NEO.USR.REGION
  scan_direction ......... forward
  lock_state ............. cursor
  consistency_level ...... read_committed
  columns_retrieved ...... 3
  fast_scan .............. used
  fast_replydata_move .... used
  key_columns ............ R_KEY
  begin_key .............. (R_KEY = &lt;min>
  end_key ................ (R_KEY = &lt;max>

---SQL operation complete.</programlisting>
</section>
<section condition="hidden" id="i1004515">
<title>Machine-Readable [OPTIONS 'm'] Considerations</title>
<para>The machine-readable format<indexterm><primary>Explain statement</primary>
<secondary>OPTIONS ’m’ considerations</secondary></indexterm> also
displays <indexterm><primary>OPTIONS on Explain statement</primary>
<secondary>’m’</secondary></indexterm>all of the plan data, but in
a format easy to process by programs, one line per operator. This
option provides the same output as the EXPLAIN function, but uses
a different command to obtain the output. Each line is about 4000
characters long. This format makes the output of this mode difficult
for humans to read (which is why it is called <replaceable>machine
readable</replaceable>.) The advantage of this format is that the
results can be easily stored, retrieved, and manipulated by SQL statements.
For additional information about the EXPLAIN function, see the <xref
linkend="i1008313" role="select:quotedtitle page"/>. For information
about a use for this format, see the <citetitle>Trafodion Query Guide</citetitle
>.</para>
<para>The fields of the OPTIONS ‘m’ output are slightly different
than the fields shown in OPTIONS 'n' and 'e' output: </para>
<informaltable frame="topbot">
<tgroup cols="3" colsep="0" rowsep="0">
<colspec colwidth="1.00*"/>
<colspec colwidth="0.58*"/>
<colspec colwidth="1.42*"/>
<thead>
<row rowsep="1" valign="bottom"><entry>Column Name</entry><entry>Data
Type</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><indexterm><primary>EXPLAIN output columns</primary>
<secondary>MODULE_NAME</secondary></indexterm>MODULE_NAME</entry><entry
>CHAR(60) </entry><entry>Reserved for future use.</entry></row>
<row><entry><indexterm><primary>EXPLAIN output columns</primary>
<secondary>STATEMENT_NAME</secondary></indexterm>STATEMENT_NAME</entry>
<entry>CHAR(60) </entry><entry>Statement name; truncated on the right
if longer than 60 characters.</entry></row>
<row><entry><indexterm><primary>EXPLAIN output columns</primary>
<secondary>PLAN_ID</secondary></indexterm>PLAN_ID</entry><entry>LARGEINT</entry>
<entry>Unique system-generated plan ID automatically assigned by SQL;
generated at compile time.</entry></row>
<row><entry><indexterm><primary>EXPLAIN output columns</primary>
<secondary>SEQ_NUM</secondary></indexterm>SEQ_NUM</entry><entry>INT</entry>
<entry>Sequence number of the current operator in the operator tree;
indicates the sequence in which the operator tree is generated.</entry>
</row>
<row><entry><indexterm><primary>EXPLAIN output columns</primary>
<secondary>OPERATOR</secondary></indexterm>OPERATOR</entry><entry
>CHAR(30)</entry><entry>Current operator type. For a full list of
valid operator types, see the <citetitle>Trafodion Query Guide</citetitle
>.</entry></row>
<row><entry><indexterm><primary>EXPLAIN output columns</primary>
<secondary>LEFT_CHILD_SEQ_ NUM</secondary></indexterm>LEFT_CHILD_
SEQ_NUM</entry><entry>INT</entry><entry>Sequence number for the first
child operator of the current operator; null if operator has no child
operators.</entry></row>
<row><entry><indexterm><primary>EXPLAIN output columns</primary>
<secondary>RIGHT_CHILD_ SEQ_NUM</secondary></indexterm>RIGHT_CHILD_
SEQ_NUM</entry><entry>INT</entry><entry>Sequence number for the second
child operator of the current operator; null if operator does not
have a second child.</entry></row>
<row><entry><indexterm><primary>EXPLAIN output columns</primary>
<secondary>TNAME</secondary></indexterm>TNAME</entry><entry>CHAR(60)</entry>
<entry>For operators in scan group, full name of base table, truncated
on the right if too long for column. If correlation name differs from
table name, simple correlation name first and then table name in parentheses.</entry>
</row>
<row><entry><indexterm><primary>EXPLAIN output columns</primary>
<secondary>CARDINALITY</secondary></indexterm>CARDINALITY</entry><entry
>REAL</entry><entry>Estimated number of rows that are returned by
the current operator. Cardinality appears as ROWS/REQUEST in some
forms of EXPLAIN output. For the right child of a nested join, multiply
the cardinality by the number of requests to get the total number
of rows produced by this operator.</entry></row>
<row><entry><indexterm><primary>EXPLAIN output columns</primary>
<secondary>OPERATOR_COST</secondary></indexterm>OPERATOR_COST</entry>
<entry>REAL</entry><entry>Estimated cost associated with the current
operator to execute the operator.</entry></row>
<row><entry><indexterm><primary>EXPLAIN output columns</primary>
<secondary>TOTAL_COST</secondary></indexterm>TOTAL_COST</entry><entry
>REAL</entry><entry>Estimated cost associated with the current operator
to execute the operator, including the cost of all subtrees in the
operator tree.</entry></row>
<row><entry><indexterm><primary>EXPLAIN output columns</primary>
<secondary>DETAIL_COST</secondary></indexterm>DETAIL_COST</entry><entry
>VARCHAR (200)</entry><entry>Cost vector of five items, which are
described in detail in the next table.</entry></row>
<row><entry><indexterm><primary>EXPLAIN output columns</primary>
<secondary>DESCRIPTION</secondary></indexterm>DESCRIPTION</entry><entry
>VARCHAR (3000)</entry><entry>Additional information about the operator.
For a detailed look at all operators, see the <citetitle>Trafodion
Query Guide</citetitle>.</entry></row>
</tbody>
</tgroup>
</informaltable>
<para>The DETAIL_COST column contains these cost factors:</para>
<table frame="topbot">
<title>Cost Factors of DETAIL_COST column</title>
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colwidth="0.52*"/>
<colspec colwidth="1.48*"/>
<tbody>
<row><entry>CPU_TIME<indexterm><primary>DETAIL_COST in EXPLAIN output</primary>
<secondary>CPU_TIME</secondary></indexterm></entry><entry>An estimate
of the number of seconds of processor time it might take to execute
the instructions for this operator. A value of 1.0 is 1 second.</entry>
</row>
<row><entry>IO_TIME<indexterm><primary>DETAIL_COST in EXPLAIN output</primary>
<secondary>IO_TIME</secondary></indexterm></entry><entry>An estimate
of the number of seconds of I/O time (seeks plus data transfer) to
perform the I/O for this operator.</entry></row>
<row><entry>MSG_TIME<indexterm><primary>DETAIL_COST in EXPLAIN output</primary>
<secondary>MSG_TIME</secondary></indexterm></entry><entry>An estimate
of the number of seconds it takes for the messaging for this operator.
The estimate includes the time for the number of local and remote
messages and the amount of data sent.</entry></row>
<row><entry>IDLETIME<indexterm><primary>DETAIL_COST in EXPLAIN output</primary>
<secondary>IDLETIME</secondary></indexterm></entry><entry>An estimate
of the number of seconds to wait for an event to happen. The estimate
includes the amount of time to open a table or start an ESP process.</entry>
</row>
<row><entry>PROBES<indexterm><primary>DETAIL_COST in EXPLAIN output</primary>
<secondary>PROBES</secondary></indexterm></entry><entry>The number
of times the operator will be executed. Usually, this value is 1,
but it can be greater when you have, for example, an inner scan of
a nested-loop join. </entry></row>
</tbody>
</tgroup>
</table>
<para>The following example has been edited to allow it to be displayed
here (lines folded, trailing blanks removed, and so on).</para>
<para>This example uses OPTIONS ‘m’:<indexterm><primary>Explain statement</primary>
<secondary>examples of</secondary></indexterm></para>
<programlisting>>>explain options ‘m’ select * from region;
</programlisting>
<programlisting width="6.0in">
MODULE_NAME                                                   STATEMENT_NAME                                
                PLAN_ID               SEQ_NUM      OPERATOR                        LEFT_CHILD_SEQ_NUM  
RIGHT_CHILD_SEQ_NUM  TNAME                                                         CARDINALITY      
OPERATOR_COST    TOTAL_COST       DETAIL_COST                                                               
                                                                                                            
                    DESCRIPTION
------------------------------------------------------------  --------------------------------------------
----------------  --------------------  -----------  ------------------------------  ------------------  -
------------------  ------------------------------------------------------------  ---------------  -------
--------  ---------------  -------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------
---------------  -------------------
 
?                                                             __EXPL_STMT_NAME__                            
                212141478299499838    1            FILE_SCAN                       ?                   ?    
                NEO.USR.REGION                                                1.0000000E+002   9.2547051E-
003   9.2547051E-003   CPU_TIME:= 0.000374705 IO_TIME:= 0.00888 MSG_TIME:= 0 IDLETIME:= 0  PROBES:= 1       
                                                                                                            
         max_card_est: 100 fragment_id: 2 parent_frag: 0 fragment_type: dp2 scan_type: full scan of table 
NEO.USR.REGION scan_direction: forward  lock_state: cursor consistency_level: read_committed 
columns_retrieved: 3 fast_scan: used fast_replydata_move: used key_columns: R_KEY begin_key: (R_KEY = &lt;min>) 
end_key: (R_KEY = &lt;max>) 
?                                                             __EXPL_STMT_NAME__                            
                212141478299499838    2            PARTITION_ACCESS                1                   ?    
                                                                              1.0000000E+002   6.8757636E-
004   9.9422819E-003   CPU_TIME:= 0.00106228 IO_TIME:= 0.00888 MSG_TIME:= 0 IDLETIME:= 0  PROBES:= 1        
                                                                                                            
         max_card_est: 100 fragment_id: 2 parent_frag: 0 fragment_type: dp2 buffer_size: 31000  
record_length: 306  space_usage: 5:32:100:144 bottom_node_map: (\THE0105:13) 
?                                                             __EXPL_STMT_NAME__                            
                212141478299499838    3            ROOT                            2                   ?    
                                                                              1.0000000E+002   3.7297573E-
005   9.9795795E-003   CPU_TIME:= 0.00109958 IO_TIME:= 0.00888 MSG_TIME:= 0 IDLETIME:= 0.098  PROBES:= 1    
                                                                                                            
         max_card_est: 100 fragment_id: 0 parent_frag: (none) fragment_type: master statement:  select * 
from region; xn_access_mode: read_only xn_autoabort_interval: 0 auto_query_retry: enabled plan_version: 
2400 SESSION_USERNAME: MXID01010130744212141209524355662000000044209superuser00 LDAP_USERNAME: superuser 
<emphasis role="bold">Is the below SHOWCONTROL_UNEXTERNALI line related to the SHOWCONTROL statement that is not supported for the Trafodion project??? DELETE???</emphasis
>
NVCI_PROCESS: ON SHOWCONTROL_UNEXTERNALIZED_ATTRS: OFF SCHEMA: USR GENERATE_EXPLAIN: ON select_list: 
NEO.USR.REGION.R_KEY, NEO.USR.REGION.R_NAME, NEO.USR.REGION.R_COMMENT 

 *** SQL operation complete.
</programlisting>
</section>
<!--WRITER'S NOTE: Hide this information for now until I can update the output for Trafodion.-->
<section condition="hidden" id="i1004565">
<title>Example of EXPLAIN Statement Using ODBC</title>
<indexterm><primary>Explain statement</primary><secondary>ODBC example</secondary>
</indexterm>
<para>Suppose an application prepares a SELECT statement: “SELECT
* FROM ODBC_PERSNL.EMPLOYEE”. Use SQLGetCursorName to find the statement
name. In this example, the returned statement name is "SQL_CUR_21". </para>
<para>To get the plan for “SELECT * FROM ODBC_PERSNL.EMPLOYEE”, the
application must allocate another statement handle and issue SQLExecDirect
on “EXPLAIN options ‘f’ SQL_CUR_21”. The plan is returned as a result-set.
Use SQLFetch to retrieve the result.</para>
<programlisting>SQLPrepare: StatementText = " SELECT * FROM ODBC_PERSNL.EMPLOYEE;"
SQLGetCursorName: Out:*CursorName = "SQL_CUR_21"
SQLAllocHandle: HandleType = SQL_HANDLE_STMT=3
SQLExecDirect: StatementText = "EXPLAIN options 'f' "SQL_CUR_21"

SQLPrepare:
In:	StatementHandle = 0x003B1A10, 
    StatementText = "select * from odbc_persnl.employee;", TextLength = 35
Return:	SQL_SUCCESS=0

SQLGetCursorName:
In:	StatementHandle = 0x003B1A10, CursorName = 0x001577E8, 
    BufferLength = 300, NameLengthPtr = 0x001552C0
Return: 	SQL_SUCCESS=0
Out:		  *CursorName = "SQL_CUR_3", *NameLengthPtr = 9

SQLAllocHandle:
In:	HandleType = SQL_HANDLE_STMT=3, InputHandle = 0x003B1908, 
    OutputHandlePtr = 0x00157F68
Return:	 SQL_SUCCESS=0
Out:		 *OutputHandlePtr = 0x003B2FF0

SQLExecDirect:
In:	Statementhandle = 0x003B2FF0, 
    StatementText = "explain options 'f' SQL_CUR_3", Statementlength = 29
Return:	SQL_SUCCESS=0

Get Data All:
"EXPLAIN OUTPUT(FORMATTED)"
" "
"LC   RC   OP   OPERATOR              OPT       DESCRIPTION           CARD   "
"---  ---  ---  --------------------  --------  --------------------  ---------"
" "
"3    .    4    root                                                  1.76E+003"
"2    .    3    split_top                       1:64(hash2)           1.76E+003"
"1    .    2    partition_access                                      1.76E+003"
".    .    1    file_scan             fs fr     EMPLOYEE              1.76E+003"
8 rows fetched from 1 column.
</programlisting>
</section>
<!--WRITER'S NOTE: Hide this information for now until I can update the output for Trafodion.-->
<section condition="hidden" id="i1005332">
<title>Example of EXPLAIN Statement Using JDBC</title>
<indexterm><primary>Explain statement</primary><secondary>JDBC example</secondary>
</indexterm>
<programlisting>import common.*;
import java.sql.*;

public class j1
{
    public static void main(String args[])
    {

    Connection          connection;
    Statement           stmt;
    PreparedStatement   pStmt;
    ResultSet           rs;
    DatabaseMetaData    dbMeta;
    int                 rowNo;
    String table   = "cat_expR2.sch_expR2.nation";
    String sqlText = "explain select * from " + table;

    try
    {
        connection = expUtils.getPropertiesConnection();
        for (int i = 0; i &lt; 10; i++)
        {
                switch (i)
                    {
            case 0:
                System.out.println("");
                stmt = connection.createStatement();
                rs = stmt.executeQuery(sqlText);
                System.out.println(sqlText);
                break;
            default:
                rs = null;
                continue;
            }

            ResultSetMetaData rsMD = rs.getMetaData();
            System.out.println("");
            for (int j = 1; j &lt;= rsMD.getColumnCount(); j++)
            {
                System.out.println(rsMD.getColumnName(j));
            }
            rowNo = 0;
            while (rs.next())
            {
                rowNo++;
                    for (int j=1; j &lt;= rsMD.getColumnCount(); j++)
                    {
                     System.out.println(rs.getObject(j));
                    }

                        }
            System.out.println("");
            System.out.println("--- SQL operation complete");
            rs.close();
            }

        connection.close();
    }
    catch (SQLException e)
    {
        SQLException nextException;

        nextException = e;
        do
        {
            System.out.println(nextException.getMessage());
            System.out.println("SQLState   " + nextException.getSQLState());
            System.out.println("Error Code " + nextException.getErrorCode());
        } while ((nextException = nextException.getNextException()) != null);
    }
    }
}</programlisting>
</section>
</section>
</section>
<section id="GET-Statement" pagebreak="yes">
<title>GET Statement</title>
<itemizedlist>
<listitem><para><xref linkend="GETSyntax" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="GETConsiderations"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="GETExample" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>GET statement</primary><secondary>syntax diagram
of</secondary></indexterm>
<para>The GET statement displays the names of database objects, components,
component privileges, roles, or users that exist in the Trafodion
instance.</para>
<para>GET is a Trafodion SQL extension.</para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>GET <replaceable>option</replaceable>

<replaceable>option</replaceable> is:
     COMPONENT PRIVILEGES ON <replaceable>component-name</replaceable
> [FOR <replaceable>auth-name</replaceable>]
   | COMPONENTS
<literal condition="hidden">   | ALL LIBRARIES FOR USER <replaceable
>database-username</replaceable>
   | ALL LIBRARIES IN SCHEMA [<replaceable>catalog-name</replaceable
>.]<replaceable>schema-name</replaceable>
</literal><literal>   | FUNCTIONS FOR LIBRARY [[<replaceable>catalog-name</replaceable
>.]<replaceable>schema-name</replaceable>.]<replaceable>library-name</replaceable
>
   | FUNCTIONS [IN SCHEMA [<replaceable>catalog-name</replaceable
>.]<replaceable>schema-name</replaceable>]
   | LIBRARIES [IN SCHEMA [<replaceable>catalog-name</replaceable
>.]<replaceable>schema-name</replaceable>]
   | PROCEDURES FOR LIBRARY [[<replaceable>catalog-name</replaceable
>.]<replaceable>schema-name</replaceable>.]<replaceable>library-name</replaceable
>
   | PROCEDURES [IN SCHEMA [<replaceable>catalog-name</replaceable
>.]<replaceable>schema-name</replaceable>]
</literal>   | ROLES [FOR USER <replaceable>database-username</replaceable
>]
   | SCHEMAS [IN CATALOG <replaceable>catalog-name</replaceable>]
   <literal>| SCHEMAS FOR [USER | ROLE] <replaceable>authorization-id</replaceable
>
</literal>   | TABLES [IN SCHEMA [<replaceable>catalog-name</replaceable
>.]<replaceable>schema-name</replaceable>]
   | USERS [FOR ROLE <replaceable>role-name</replaceable>]
   | VIEWS [IN SCHEMA [<replaceable>catalog-name</replaceable>.]<replaceable
>schema-name</replaceable>] 
   | VIEWS ON TABLE [[<replaceable>catalog-name</replaceable>.]<replaceable
>schema-name</replaceable>.]<replaceable>table-name</replaceable>
<literal condition="hidden">
<replaceable>catalog-name</replaceable> is:
   TRAFODION
</literal></programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="GETSyntax">
<title>Syntax Description of GET</title>
<variablelist>
<varlistentry><term> COMPONENT PRIVILEGES ON <replaceable>component-name</replaceable
></term>
<listitem><para>displays the names of the component privileges available
for the specified component.</para></listitem>
</varlistentry>
<varlistentry><term> COMPONENT PRIVILEGES ON <replaceable>component-name</replaceable
> FOR <replaceable>auth-name</replaceable></term>
<listitem><para>displays the component privileges that have been granted
to the specified authorization name for the specified component. The <replaceable
>auth-name</replaceable> is either a registered database username
or an existing role name and can be a regular or delimited case-insensitive
identifier. See <xref linkend="csDelimitedIdentifier"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term>COMPONENTS</term>
<listitem><para>displays a list of all the existing components.</para>
</listitem>
</varlistentry>
<varlistentry condition="hidden"><term>ALL LIBRARIES FOR USER <replaceable
>database-username</replaceable></term>
<listitem><para>displays the libraries owned by the specified user.
The <replaceable>database-username</replaceable> can be a regular
or delimited case-insensitive identifier. See <xref
linkend="csDelimitedIdentifier" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
<varlistentry condition="hidden"><term>ALL LIBRARIES IN SCHEMA [<replaceable
>catalog-name</replaceable>.]<replaceable>schema-name</replaceable
></term>
<listitem><para>displays all the libraries in the specified schema.</para>
</listitem>
</varlistentry>
<varlistentry><term>FUNCTIONS</term>
<listitem><para>displays the names of all the user-defined functions
(UDFs) in the catalog and schema of the current session. By default,
the catalog is TRAFODION, and the schema is SEABASE.</para></listitem>
</varlistentry>
<varlistentry><term>FUNCTIONS FOR LIBRARY [[<replaceable>catalog-name</replaceable
>.]<replaceable>schema-name</replaceable>.]<replaceable>library-name</replaceable
></term>
<listitem><para>displays the UDFs that reference the specified library.</para>
</listitem>
</varlistentry>
<varlistentry><term>FUNCTIONS IN SCHEMA [<replaceable>catalog-name</replaceable
>.]<replaceable>schema-name</replaceable></term>
<listitem><para>displays the names of all the UDFs in the specified
schema. <phrase condition="hidden">For the <replaceable>catalog-name</replaceable
>, you can specify only TRAFODION.</phrase> </para></listitem>
</varlistentry>
<varlistentry><term>LIBRARIES</term>
<listitem><para>displays the names of all the libraries in the catalog
and schema of the current session. By default, the catalog is TRAFODION,
and the schema is SEABASE.</para></listitem>
</varlistentry>
<varlistentry><term>LIBRARIES IN SCHEMA [<replaceable>catalog-name</replaceable
>.]<replaceable>schema-name</replaceable></term>
<listitem><para>displays the libraries in the specified schema.</para>
</listitem>
</varlistentry>
<varlistentry><term>PROCEDURES</term>
<listitem><para>displays the names of all the procedures in the catalog
and schema of the current session. By default, the catalog is TRAFODION,
and the schema is SEABASE.</para></listitem>
</varlistentry>
<varlistentry><term>PROCEDURES FOR LIBRARY [[<replaceable>catalog-name</replaceable
>.]<replaceable>schema-name</replaceable>.]<replaceable>library-name</replaceable
></term>
<listitem><para>displays the procedures that reference the specified
library.</para></listitem>
</varlistentry>
<varlistentry><term>PROCEDURES IN SCHEMA [<replaceable>catalog-name</replaceable
>.]<replaceable>schema-name</replaceable></term>
<listitem><para>displays the names of all the procedures in the specified
schema. <phrase condition="hidden">For the <replaceable>catalog-name</replaceable
>, you can specify only TRAFODION.</phrase> </para></listitem>
</varlistentry>
<varlistentry><term>ROLES</term>
<listitem><para>displays a list of all the existing roles.</para>
</listitem>
</varlistentry>
<varlistentry><term>ROLES FOR USER <replaceable>database-username</replaceable
></term>
<listitem><para>displays all the roles that have been granted to the
specified database user. The <replaceable>database-username</replaceable
> can be a regular or delimited case-insensitive identifier. See <xref
linkend="csDelimitedIdentifier" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
<varlistentry><term>SCHEMAS</term>
<listitem><para>displays the names of all the schemas in the catalog
of the current session. By default, the catalog is TRAFODION.</para>
</listitem>
</varlistentry>
<varlistentry><term>SCHEMAS IN CATALOG <replaceable>catalog-name</replaceable
></term>
<listitem><para>displays the names of all the schemas in the specified
catalog. For the <replaceable>catalog-name</replaceable>, you can
specify only TRAFODION.</para></listitem>
</varlistentry>
<varlistentry><term>SCHEMAS FOR [USER | ROLE] <replaceable>authorization-id</replaceable
></term>
<listitem><para>displays all the schemas managed (or owned) by a specified
user or role. <replaceable>authorization-id</replaceable> is the name
of a user or role. You may specify either USER or ROLE for users or
roles.</para></listitem>
</varlistentry>
<varlistentry><term>TABLES</term>
<listitem><para>displays the names of all the tables in the catalog
and schema of the current session. By default, the catalog is TRAFODION,
and the schema is SEABASE.</para></listitem>
</varlistentry>
<varlistentry><term>TABLES IN SCHEMA [<replaceable>catalog-name</replaceable
>.]<replaceable>schema-name</replaceable></term>
<listitem><para>displays the names of all the tables in the specified
schema. <phrase condition="hidden">For the <replaceable>catalog-name</replaceable
>, you can specify only TRAFODION.</phrase> </para></listitem>
</varlistentry>
<varlistentry><term>USERS</term>
<listitem><para>displays a list of all the registered database users.</para>
</listitem>
</varlistentry>
<varlistentry><term>USERS FOR ROLE <replaceable>role-name</replaceable
></term>
<listitem><para>displays all the database users who have been granted
the specified role. The <replaceable>role-name</replaceable> can be
a regular or delimited case-insensitive identifier. See <xref
linkend="csDelimitedIdentifier" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
<varlistentry><term>VIEWS</term>
<listitem><para>displays the names of all the views in the catalog
and schema of the current session. By default, the catalog is TRAFODION,
and the schema is SEABASE.</para></listitem>
</varlistentry>
<varlistentry><term>VIEWS IN SCHEMA [<replaceable>catalog-name</replaceable
>.]<replaceable>schema-name</replaceable></term>
<listitem><para>displays the names of all the views in the specified
schema. For the <replaceable>catalog-name</replaceable>, you can specify
only TRAFODION. </para></listitem>
</varlistentry>
<varlistentry><term>VIEWS ON TABLE [[<replaceable>catalog-name</replaceable
>.]<replaceable>schema-name</replaceable>.]<replaceable>table-name</replaceable
></term>
<listitem><para>displays the names of all the views that were created
for the specified table. If you do not qualify the table name with
catalog and schema names, GET uses the catalog and schema of the current
session. For the <replaceable>catalog-name</replaceable>, you can
specify only TRAFODION.</para></listitem>
</varlistentry>
</variablelist>
</section>
<section id="GETConsiderations">
<title>Considerations for GET</title>
<para><indexterm><primary>GET statement</primary><secondary>considerations
for</secondary></indexterm></para>
<important>
<para>The GET COMPONENT PRIVILEGES, GET COMPONENTS, GET ROLES FOR
USER, and GET USERS FOR ROLE statements work only when authentication
and authorization are enabled in Trafodion. For more information,
see <ulink
url="https://wiki.trafodion.org/wiki/index.php/Enabling_Security_Features_in_Trafodion"
>Enabling Security Features</ulink> in the Trafodion wiki.</para>
</important>
<para>The GET statement displays delimited object names in their internal
format. For example, the GET statement returns the delimited name <literal
>"my ""table"""</literal> as <literal>my "table"</literal>.</para>
<section>
<title>Required Privileges</title>
<para>To issue a GET statement, one of the following must be true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT.</para></listitem>
<listitem><para>You have the SHOW component privilege for the SQL_OPERATIONS
component. The SHOW component privilege is granted to PUBLIC by default.</para>
</listitem>
</itemizedlist>
</section>
</section>
<section id="GETExample">
<title>Examples of GET</title>
<indexterm><primary>GET statement</primary><secondary>examples of</secondary>
</indexterm>
<itemizedlist>
<listitem><para>This GET statement displays the names of all the schemas
in the catalog of the current session, which happens to be the TRAFODION
catalog:</para>
<programlisting>GET SCHEMAS;
</programlisting>
</listitem>
<listitem><para>This GET statement displays the names of all the schemas
in the specified catalog, TRAFODION:</para>
<programlisting>GET SCHEMAS IN CATALOG TRAFODION;</programlisting>
</listitem>
<listitem><para>This GET statement displays the names of schemas owned
by DB__ROOT:</para>
<programlisting>GET SCHEMAS FOR USER DB__ROOT;</programlisting>
</listitem>
<listitem><para>This GET statement displays the names of all the tables
in the catalog and schema of the current session, which happens to
be TRAFODION.SEABASE:</para>
<programlisting>GET TABLES;</programlisting>
</listitem>
<listitem><para>This GET statement displays the names of all the tables
in the specified schema, SEABASE2, in the TRAFODION catalog:</para>
<programlisting>GET TABLES IN SCHEMA SEABASE2;</programlisting>
</listitem>
<listitem><para>This GET statement displays the names of all the views
in the catalog and schema of the current session, which happens to
be TRAFODION.SEABASE:</para>
<programlisting>GET VIEWS;</programlisting>
</listitem>
<listitem><para>This GET statement displays the names of all the views
in the specified schema, SEABASE2, the TRAFODION catalog:</para>
<programlisting>GET VIEWS IN SCHEMA SEABASE2;</programlisting>
</listitem>
<listitem><para>This GET statement displays the names of all the views
that were created for the specified table, T, in the TRAFODION.SEABASE
schema:</para>
<programlisting>GET VIEWS ON TABLE T;</programlisting>
</listitem>
<listitem><para>This GET statement displays the names of the libraries
in the catalog and schema of the current session, which happens to
be TRAFODION.SEABASE:</para>
<programlisting>GET LIBRARIES;</programlisting>
</listitem>
<listitem><para>This GET statement displays the names of the libraries
in the TRAFODION._MD_ schema:</para>
<programlisting>GET LIBRARIES IN SCHEMA "_MD_";</programlisting>
</listitem>
<listitem><para>This GET statement displays the names of procedures
registered in the library, TRAFODION._MD_.UDR_LIBRARY:</para>
<programlisting>GET PROCEDURES FOR LIBRARY "_MD_".UDR_LIBRARY;</programlisting>
</listitem>
<listitem><para>This GET statement displays the names of procedures
in the TRAFODION._MD_ schema:</para>
<programlisting>GET PROCEDURES IN SCHEMA "_MD_";</programlisting>
</listitem>
<listitem><para>This GET statement displays the names of procedures
in the catalog and schema of the current session, which happens to
be TRAFODION.SEABASE:</para>
<programlisting>GET PROCEDURES;</programlisting>
</listitem>
<listitem><para>This GET statement displays the names of user-defined
functions (UDFs) in the catalog and schema of the current session,
which happens to be TRAFODION.SEABASE:</para>
<programlisting>GET FUNCTIONS;</programlisting>
</listitem>
<listitem><para>This GET statement displays the names of UDFs in MYSCHEMA:</para>
<programlisting>GET FUNCTIONS IN SCHEMA MYSCHEMA;</programlisting>
</listitem>
<listitem><para>This GET statement displays the names of UDFs created
in the library, TRAFODION.MYSCHEMA.MYUDFS:</para>
<programlisting>GET FUNCTIONS FOR LIBRARY MYSCHEMA.MYUDFS;</programlisting>
</listitem>
<listitem><para>This GET statement displays a list of all the existing
components:</para>
<programlisting>get components;</programlisting>
</listitem>
<listitem><para>This GET statement displays the names of the component
privileges available for the SQL_OPERATIONS component:</para>
<programlisting>get component privileges on sql_operations;</programlisting>
</listitem>
<listitem><para>This GET statement displays the component privileges
that have been granted to the DB__ROOT user for the SQL_OPERATIONS
component:</para>
<programlisting>get component privileges on sql_operations for db__root;</programlisting>
</listitem>
<listitem><para>This GET statement displays a list of all the existing
roles:</para>
<programlisting>get roles;</programlisting>
</listitem>
<listitem><para>This GET statement displays all the roles that have
been granted to the DB__ROOT user:</para>
<programlisting>get roles for user db__root;</programlisting>
</listitem>
<listitem><para>This GET statement displays a list of all the registered
database users:</para>
<programlisting>get users;</programlisting>
</listitem>
<listitem><para>This GET statement displays all the database users
who have been granted the DB__ROOTROLE role:</para>
<programlisting>get users for role db__rootrole;</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="GET-HBASE-OBJECTS-Statement" pagebreak="yes">
<title>GET HBASE OBJECTS Statement</title>
<itemizedlist>
<listitem><para><xref linkend="GET-HBASE-OBJECTS-Syntax"
role="select:quotedtitle page"/></para></listitem>
<listitem condition="hidden"><para><xref
linkend="GET-HBASE-OBJECTS-Considerations" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="GET-HBASE-OBJECTS-Example"
role="select:quotedtitle"/></para></listitem>
</itemizedlist>
<indexterm><primary>GET HBASE OBJECTS statement</primary><secondary
>syntax diagram of</secondary></indexterm>
<para>The GET HBASE OBJECTS statement displays a list of HBase objects
directly from HBase, not from the Trafodion metadata, and it can be
run in any SQL interface, such as the Trafodion Command Interface
(TrafCI). This command is equivalent to running a <literal>list</literal
> command from an HBase shell, but without having to start and connect
to an HBase shell.</para>
<para>GET HBASE OBJECTS is a Trafodion SQL extension.</para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>GET [ USER | SYSTEM | EXTERNAL | ALL } HBASE OBJECTS
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="GET-HBASE-OBJECTS-Syntax">
<title>Syntax Description of GET HBASE OBJECTS</title>
<variablelist>
<varlistentry><term>USER</term>
<listitem><para>displays a list of the Trafodion user objects.</para>
</listitem>
</varlistentry>
<varlistentry><term>SYSTEM</term>
<listitem><para>displays a list of the Trafodion system objects, such
as metadata, repository, privileges, and Distributed Transaction Manager
(DTM) tables.</para></listitem>
</varlistentry>
<varlistentry><term>EXTERNAL</term>
<listitem><para>displays a list of non-Trafodion objects.</para>
</listitem>
</varlistentry>
<varlistentry><term>ALL</term>
<listitem><para>displays a list of all objects, including user, system,
and external objects.</para></listitem>
</varlistentry>
</variablelist>
</section>
<section condition="hidden" id="GET-HBASE-OBJECTS-Considerations">
<title>Considerations for GET HBASE OBJECTS</title>
<para><indexterm><primary>GET HBASE OBJECTS statement</primary>
<secondary>considerations for</secondary></indexterm></para>
</section>
<section id="GET-HBASE-OBJECTS-Example">
<title>Examples of GET HBASE OBJECTS</title>
<indexterm><primary>GET HBASE OBJECTS statement</primary><secondary
>examples of</secondary></indexterm>
<itemizedlist>
<listitem><para>This GET HBASE OBJECTS statement displays the Trafodion
user objects in HBase:</para>
<screen><computeroutput>Apache Trafodion Conversational Interface 1.3.0 
(c) Copyright (c) 2015 Apache Software Foundation
>></computeroutput><userinput>get user hbase objects;</userinput><computeroutput
>

TRAFODION.SCH.SB_HISTOGRAMS
TRAFODION.SCH.SB_HISTOGRAM_INTERVALS
TRAFODION.SCH.T006T1
TRAFODION.SCH.T006T2
TRAFODION.SCH.T006T3
TRAFODION.SCH.T006T4
TRAFODION.SCH.T006T5
TRAFODION.SCH.T006T6
TRAFODION.SCH.T006T7
TRAFODION.SCH.T006T8
TRAFODION.SCH.X1
TRAFODION.SCH.X2
TRAFODION.SCH.X3

--- SQL operation complete.</computeroutput></screen>
</listitem>
<listitem><para>This GET HBASE OBJECTS statement displays the Trafodion
system objects in HBase:</para>
<screen><computeroutput>>></computeroutput><userinput>get system hbase objects;</userinput
><computeroutput>

TRAFODION._DTM_.TLOG0_CONTROL_POINT
…
TRAFODION._DTM_.TLOG1_LOG_f
TRAFODION._MD_.AUTHS
TRAFODION._MD_.COLUMNS
TRAFODION._MD_.DEFAULTS
TRAFODION._MD_.INDEXES
TRAFODION._MD_.KEYS
TRAFODION._MD_.LIBRARIES
TRAFODION._MD_.LIBRARIES_USAGE
TRAFODION._MD_.OBJECTS
TRAFODION._MD_.OBJECTS_UNIQ_IDX
TRAFODION._MD_.REF_CONSTRAINTS
TRAFODION._MD_.ROUTINES
TRAFODION._MD_.SEQ_GEN
TRAFODION._MD_.TABLES
TRAFODION._MD_.TABLE_CONSTRAINTS
TRAFODION._MD_.TEXT
TRAFODION._MD_.UNIQUE_REF_CONSTR_USAGE
TRAFODION._MD_.VERSIONS
TRAFODION._MD_.VIEWS
TRAFODION._MD_.VIEWS_USAGE
TRAFODION._REPOS_.METRIC_QUERY_AGGR_TABLE
TRAFODION._REPOS_.METRIC_QUERY_TABLE
TRAFODION._REPOS_.METRIC_SESSION_TABLE
TRAFODION._REPOS_.METRIC_TEXT_TABLE

--- SQL operation complete.</computeroutput></screen>
</listitem>
<listitem><para>This GET HBASE OBJECTS statement displays the external,
non-Trafodion objects in HBase:</para>
<screen><computeroutput>>></computeroutput><userinput>get external hbase objects;</userinput
><computeroutput>

obj1
obj2

--- SQL operation complete.
>></computeroutput></screen>
</listitem>
</itemizedlist>
</section>
</section>
<section id="GET-VERSION-METADATA-Statement" pagebreak="yes">
<title>GET VERSION OF METADATA Statement</title>
<itemizedlist>
<listitem><para><xref linkend="GET-VERSION-METADATA-Considerations"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="GET-VERSION-METADATA-Example"
role="select:quotedtitle"/></para></listitem>
</itemizedlist>
<indexterm><primary>GET VERSION OF METADATA statement</primary>
<secondary>syntax diagram of</secondary></indexterm>
<para>The GET VERSION OF METADATA statement displays the version of
the metadata in the Trafodion instance and indicates if the metadata
is current.</para>
<para>GET VERSION OF METADATA is a Trafodion SQL extension.</para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>GET VERSION OF METADATA</programlisting
></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="GET-VERSION-METADATA-Considerations">
<title>Considerations for GET VERSION OF METADATA</title>
<para><indexterm><primary>GET VERSION OF METADATA statement</primary>
<secondary>considerations for</secondary></indexterm></para>
<itemizedlist>
<listitem><para>If the metadata is compatible with the installed Trafodion
software version, the GET VERSION OF METADATA statement indicates
that the metadata is current:</para>
<programlisting>Current Version 3.0. Expected Version 3.0.
Metadata is current.</programlisting>
</listitem>
<listitem><para>If the metadata is incompatible with the installed
Trafodion software version, the GET VERSION OF METADATA statement
indicates that you need to upgrade or reinitialize the metadata:</para>
<programlisting>Current Version 2.3. Expected Version 3.0.
  Metadata need to be upgraded or reinitialized.</programlisting>
</listitem>
</itemizedlist>
</section>
<section id="GET-VERSION-METADATA-Example">
<title>Examples of GET VERSION OF METADATA</title>
<indexterm><primary>GET VERSION OF METADATA statement</primary>
<secondary>examples of</secondary></indexterm>
<itemizedlist>
<listitem><para>This GET VERSION OF METADATA statement displays the
metadata version in a Trafodion Release 1.0.0 instance:</para>
<programlisting>get version of metadata;

  Current Version 3.0. Expected Version 3.0.
  Metadata is current.

--- SQL operation complete.</programlisting>
</listitem>
<listitem><para>This GET VERSION OF METADATA statement displays the
metadata version in a Trafodion Release 0.9.0 instance:</para>
<programlisting>get version of metadata;

  Current Version 2.3. Expected Version 2.3.
  Metadata is current.

--- SQL operation complete.</programlisting>
</listitem>
<listitem><para>If the metadata is incompatible with the installed
Trafodion software version, you will see this output indicating that
you need to upgrade or reinitialize the metadata:</para>
<programlisting>get version of metadata;

  Current Version 2.3. Expected Version 3.0.
  Metadata need to be upgraded or reinitialized.

--- SQL operation complete.</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="GET-VERSION-SOFTWARE-Statement" pagebreak="yes">
<title>GET VERSION OF SOFTWARE Statement</title>
<itemizedlist>
<listitem><para><xref linkend="GET-VERSION-SOFTWARE-Considerations"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="GET-VERSION-SOFTWARE-Example"
role="select:quotedtitle"/></para></listitem>
</itemizedlist>
<indexterm><primary>GET VERSION OF SOFTWARE statement</primary>
<secondary>syntax diagram of</secondary></indexterm>
<para>The GET VERSION OF SOFTWARE statement displays the version of
the Trafodion software that is installed on the system and indicates
if it is current.</para>
<para>GET VERSION OF SOFTWARE is a Trafodion SQL extension.</para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>GET VERSION OF SOFTWARE</programlisting
></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="GET-VERSION-SOFTWARE-Considerations">
<title>Considerations for GET VERSION OF SOFTWARE</title>
<para><indexterm><primary>GET VERSION OF SOFTWARE statement</primary>
<secondary>considerations for</secondary></indexterm></para>
<itemizedlist>
<listitem><para>If the software on the system is current, the GET
VERSION OF SOFTWARE statement displays this output:</para>
<programlisting>System Version 1.0.0. Expected Version 1.0.0.
  Software is current.</programlisting>
</listitem>
<listitem><para>In rare circumstances where something went wrong with
the Trafodion software installation and mismatched objects were installed,
the GET VERSION OF SOFTWARE statement displays this output:</para>
<programlisting>System Version 0.9.1. Expected Version 1.0.0.
  Version of software being used is not compatible with version of software on the system.</programlisting>
</listitem>
</itemizedlist>
</section>
<section id="GET-VERSION-SOFTWARE-Example">
<title>Examples of GET VERSION OF SOFTWARE</title>
<indexterm><primary>GET VERSION OF SOFTWARE statement</primary>
<secondary>examples of</secondary></indexterm>
<itemizedlist>
<listitem><para>This GET VERSION OF SOFTWARE statement displays the
software version for Trafodion Release 1.0.0:</para>
<programlisting>get version of software;

  System Version 1.0.0. Expected Version 1.0.0.
  Software is current.

--- SQL operation complete.</programlisting>
</listitem>
<listitem><para>This GET VERSION OF SOFTWARE statement displays the
software version for Trafodion Release 0.9.0:</para>
<programlisting>get version of software;

  System Version 0.9.0. Expected Version 0.9.0.
  Software is current.

--- SQL operation complete.</programlisting>
</listitem>
<listitem><para>If something went wrong with the Trafodion software
installation and if mismatched objects were installed, you will see
this output indicating that the software being used is incompatible
with the software on the system:</para>
<programlisting>get version of software;

  System Version 0.9.1. Expected Version 1.0.0.
  Version of software being used is not compatible with version of software on the system.

--- SQL operation complete.</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1068219" pagebreak="yes">
<title>GRANT Statement</title>
<itemizedlist>
<listitem><para><xref linkend="GrantPrivSyntax"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="GrantPrivConsid"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="GrantPrivExample"
role="select:quotedtitle"/></para></listitem>
</itemizedlist>
<indexterm><primary>GRANT statement</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Access privileges</primary>
<secondary>tables</secondary></indexterm><indexterm><primary>Privileges</primary>
<secondary>GRANT statement use of</secondary></indexterm><indexterm>
<primary>Data Definition Language (DDL) statements</primary><secondary
>GRANT</secondary></indexterm>
<para>The GRANT statement grants access privileges on an SQL <phrase
>object</phrase> to specified users or roles.<phrase condition="hidden"
> The statement can specify either the object name or a synonym.</phrase
></para>
<important>
<para>This statement works only when authentication and authorization
are enabled in Trafodion. For more information, see <ulink
url="https://wiki.trafodion.org/wiki/index.php/Enabling_Security_Features_in_Trafodion"
>Enabling Security Features</ulink> in the Trafodion wiki.</para>
</important>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>GRANT {<replaceable>privilege</replaceable
> [,<replaceable>privilege</replaceable>]... |ALL [PRIVILEGES]} 
  ON [<replaceable>object-type</replaceable>] [<replaceable>schema</replaceable
>.]<replaceable>object</replaceable> 
  TO {<replaceable>grantee</replaceable> [,<replaceable>grantee</replaceable
> ]...}
    [WITH GRANT OPTION]
    [[GRANTED] BY <replaceable>grantor</replaceable>]

<replaceable>privilege</replaceable> is:
   SELECT <literal condition="hidden">[(<replaceable>column</replaceable
> [,<replaceable>column</replaceable>]...)]</literal>
 | DELETE  
 | INSERT <literal condition="hidden"> [(<replaceable>column</replaceable
> [,<replaceable>column</replaceable>]...)]</literal>
 | REFERENCES <literal condition="hidden">[(<replaceable>column</replaceable
> [,<replaceable>column</replaceable>]...)]</literal>
 | UPDATE <literal condition="hidden">[(<replaceable>column</replaceable
> [,<replaceable>column</replaceable>]...)]</literal>
<literal> | EXECUTE 
</literal><literal> | USAGE
</literal>
<literal><replaceable>object-type</replaceable> is:
   TABLE
 | PROCEDURE
 | LIBRARY
 | FUNCTION

</literal><replaceable>grantee</replaceable> is:
     <replaceable>auth-name</replaceable>

<replaceable>grantor</replaceable> is:
     <replaceable>role-name</replaceable>
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="GrantPrivSyntax">
<title>Syntax Description of GRANT</title>
<variablelist>
<varlistentry><term><replaceable>privilege</replaceable> [,<replaceable
>privilege</replaceable> ] ... | ALL [PRIVILEGES]</term>
<listitem><para>specifies the privileges to grant. You can specify
these privileges for <phrase>an object</phrase>.</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL1  desc list">
<colspec colwidth="0.35*"/>
<colspec colwidth="1.65*"/>
<tbody>
<row><entry>SELECT</entry><entry>Can use the SELECT statement.</entry>
</row>
<row><entry>DELETE</entry><entry>Can use the DELETE statement.</entry>
</row>
<row><entry>INSERT</entry><entry>Can use the INSERT statement.</entry>
</row>
<row><entry>REFERENCES</entry><entry>Can create constraints that reference
the object.</entry></row>
<row><entry>UPDATE</entry><entry>Can use the UPDATE statement on table
objects.</entry></row>
<row><entry>EXECUTE</entry><entry>Can execute a stored procedure using
a CALL statement or can execute a user-defined function (UDF).</entry>
</row>
<row><entry>USAGE</entry><entry>Can access a library using the CREATE
PROCEDURE or CREATE FUNCTION statement. This privilege provides you
with read access to the library’s underlying library file.</entry></row>
<row><entry>ALL </entry><entry>All the applicable privileges. When
you specify ALL for a table or view, this includes the SELECT, DELETE,
INSERT, REFERENCES, and UPDATE privileges. <phrase>When the object
is a stored procedure or user-defined function (UDF), only the EXECUTE
privilege is applied. When the object is a library, only the UPDATE
and USAGE privileges are applied.</phrase></entry></row>
</tbody>
</tgroup>
</informaltable>
</listitem>
</varlistentry>
<varlistentry condition="hidden"><term>( <replaceable>column</replaceable
> [, <replaceable>column</replaceable> ] ... )</term>
<listitem><para>names the columns of the object to which the SELECT,
INSERT, UPDATE or REFERENCES privileges apply. If you specify these
privileges without column names, the privileges apply to all columns
of the table or view, now and in the future (if columns are added
later). </para></listitem>
</varlistentry>
<varlistentry><term>ON [<replaceable>object-type</replaceable>]  [<replaceable
>schema</replaceable>.]<replaceable>object</replaceable></term>
<listitem><para>specifies an object on which to grant privileges. <replaceable
>object-type</replaceable> can be:</para>
<itemizedlist>
<listitem><para>[TABLE] [<replaceable>schema</replaceable>.]<replaceable
>object</replaceable>, where <replaceable>object</replaceable> is
a table or view. See <xref linkend="i1013018"
role="select:quotedtitle page"/>.</para></listitem>
<listitem><para>[PROCEDURE] [<replaceable>schema</replaceable>.]<replaceable
>procedure-name</replaceable>, where <replaceable>procedure-name</replaceable
> is the name of a stored procedure in Java (SPJ) registered in the
database.</para></listitem>
<listitem><para>[LIBRARY] [<replaceable>schema</replaceable>.]<replaceable
>library-name</replaceable>, where <replaceable>library-name</replaceable
> is the name of a library object in the database.</para></listitem>
<listitem><para>[FUNCTION] [<replaceable>schema</replaceable>.]<replaceable
>function-name</replaceable>, where <replaceable>function-name</replaceable
> is the name of a user-defined function (UDF) in the database.</para>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry><term>TO {<replaceable>grantee</replaceable> [, <replaceable
>grantee</replaceable>] ... }</term>
<listitem><para>specifies one or more <replaceable>auth-names</replaceable
> to which you grant privileges.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>auth-name</replaceable></term>
<listitem><para>specifies the name of an authorization ID to which
you grant privileges. See <xref linkend="AuthIDsElement"
role="select:quotedtitle page"/>. The authorization ID must be a registered
database username, an existing role name, or PUBLIC. The name is a
regular or delimited case-insensitive identifier. See <xref
linkend="csDelimitedIdentifier" role="select:quotedtitle page"/>.
If you grant a privilege to PUBLIC, the privilege remains available
to all users, unless it is later revoked from PUBLIC.</para></listitem>
</varlistentry>
<varlistentry><term>WITH GRANT OPTION</term>
<listitem><para>specifies that the <replaceable>auth-name</replaceable
> to which a privilege is granted may in turn grant the same privilege
to other users or roles.</para></listitem>
</varlistentry>
<varlistentry><term>[GRANTED] BY <replaceable>grantor</replaceable
></term>
<listitem><para>allows you to grant privileges on behalf of a role.
If not specified, the privileges will be granted on your behalf as
the current user/grantor.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>role-name</replaceable></term>
<listitem><para>specifies a role on whose behalf the GRANT operation
is performed. To grant the privileges on behalf of a role, you must
be a member of the role, and the role must have the authority to grant
the privileges; that is, the role must have been granted the privileges
WITH GRANT OPTION.</para></listitem>
</varlistentry>
</variablelist>
</section>
<section id="GrantPrivConsid">
<title>Considerations for GRANT</title>
<indexterm><primary>GRANT statement</primary><secondary>considerations
for</secondary></indexterm>
<section>
<title>Authorization and Availability Requirements</title>
<indexterm><primary>GRANT statement</primary><secondary>authorization
and availability requirements</secondary></indexterm>
<para>To grant a privilege on an object, you must have both that privilege
and the right to grant that privilege. Privileges can be granted directly
to you or to one of the roles you have been granted. You can grant
a privilege on an object if you are the owner of the object (by which
you are implicitly granted all privileges on the object) or the owner
of the schema containing the object, or if you have been granted both
the privilege and the WITH GRANT OPTION for the privilege.</para>
<para>If granting privileges on behalf of a role, you must specify
the role in the [GRANTED] BY clause. To grant the privileges on behalf
of a role, you must be a member of the role, and the role must have
the authority to grant the privileges; that is, the role must have
been granted the privileges WITH GRANT OPTION.</para>
<para>If you lack authority to grant one or more of the specified
privileges, SQL returns a warning (yet does grant the specified privileges
for which you do have authority to grant). If you lack authority to
grant any of the specified privileges, SQL returns an error.</para>
</section>
</section>
<section id="GrantPrivExample">
<title>Examples of GRANT</title>
<indexterm><primary>GRANT statement</primary><secondary>examples of</secondary>
</indexterm>
<itemizedlist>
<listitem><para>To grant SELECT and DELETE privileges on a table to
two specified users:</para>
<programlisting>GRANT SELECT, DELETE ON TABLE invent.partloc
  TO ajones, "MO.Neill@company.com";
</programlisting>
</listitem>
<listitem><para>To grant SELECT privileges on a table to a user:<programlisting
>GRANT SELECT ON TABLE invent.partloc TO ajones;</programlisting></para>
</listitem>
<listitem condition="hidden"><para>To grant SELECT and DELETE privileges
on a table to two specified users and allow these users to grant these
privileges to other users:</para>
<programlisting>GRANT SELECT, DELETE ON TABLE invent.partloc
  TO ajones, "MO.Neill@company.com" WITH GRANT OPTION;
</programlisting>
</listitem>
<listitem condition="hidden"><para>To grant SELECT privileges on a
table to a user and a role:<programlisting>GRANT SELECT ON TABLE invent.partloc TO ajones, clerks;</programlisting
></para></listitem>
<listitem condition="hidden"><para>To grant all privileges to a role
on behalf of the table owner, JSMITH grants the SELECT privilege on
the table to the role CLERKS. CMILLER, who has been granted the role
CLERKS, grants the privilege to another user on behalf of the role:<screen
>
-- JSMITH:
GRANT SELECT ON invent.partloc TO clerks WITH GRANT OPTION;

-- CMILLER:
GRANT SELECT ON invent.partloc TO fred GRANTED BY clerks;
</screen></para></listitem>
</itemizedlist>
</section>
</section>
<section id="GrantCompPriv_stmt" pagebreak="yes">
<title>GRANT COMPONENT PRIVILEGE Statement</title>
<itemizedlist>
<listitem><para><xref linkend="GrantCompPriv_syntax"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="GrantCompPriv_Consids"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="GrantCompPriv_xmp"
role="select:quotedtitle"/></para></listitem>
</itemizedlist>
<indexterm><primary>Component privilege statements</primary><secondary
>GRANT COMPONENT PRIVILEGE</secondary></indexterm><indexterm><primary
>GRANT COMPONENT PRIVILEGE statement</primary></indexterm><indexterm>
<primary>Data Definition Language (DDL) statements</primary><secondary
>GRANT COMPONENT PRIVILEGE</secondary></indexterm><indexterm><primary
>GRANT COMPONENT PRIVILEGE statement</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Privileges</primary>
<secondary>GRANT COMPONENT PRIVILEGE statement use of</secondary>
</indexterm>
<para>The GRANT COMPONENT PRIVILEGE statement grants one or more component
privileges to a user or role. See <xref linkend="i1040985"
role="select:quotedtitle page"/> and <xref linkend="RolesElement"
role="select:quotedtitle page"/>.</para>
<para>GRANT COMPONENT PRIVILEGE is a Trafodion SQL extension.</para>
<important>
<para>This statement works only when authentication and authorization
are enabled in Trafodion. For more information, see <ulink
url="https://wiki.trafodion.org/wiki/index.php/Enabling_Security_Features_in_Trafodion"
>Enabling Security Features</ulink> in the Trafodion wiki.</para>
</important>
<informaltable frame="all">
<tgroup cols="1" colsep="1" rowsep="1">
<colspec colname="col4"/>
<tbody>
<row><entry><programlisting>GRANT COMPONENT PRIVILEGE {<replaceable
>privilege-name</replaceable> [, <replaceable>privilege-name</replaceable
>]...} 
 ON <replaceable>component-name</replaceable>
 TO <replaceable>grantee</replaceable>
 [WITH GRANT OPTION] [[GRANTED] BY <replaceable>grantor</replaceable
>]

<replaceable>grantee</replaceable> is:
     <replaceable>auth-name</replaceable>

<computeroutput><replaceable>grantor</replaceable> is:
     <replaceable>role-name</replaceable></computeroutput></programlisting
></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="GrantCompPriv_syntax">
<title>Syntax Description of GRANT COMPONENT PRIVILEGE</title>
<variablelist>
<varlistentry><term><replaceable>privilege-name</replaceable></term>
<listitem><para>specifies one or more component privileges to grant.
The comma-separated list can include only privileges within the same
component.</para>
<informaltable frame="all">
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="col1"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<thead>
<row rowsep="1" valign="bottom"><entry align="left" valign="bottom"
>Component</entry><entry align="left" valign="bottom">Component Privilege</entry>
<entry align="left" valign="bottom">Description</entry></row>
</thead>
<tbody>
<row><entry>SQL_OPERATIONS</entry><entry>ALTER</entry><entry><para
>Privilege to alter database objects</para></entry></row>
<row><entry></entry><entry>ALTER_LIBRARY</entry><entry><para>Privilege
to alter libraries</para></entry></row>
<!--WRITER'S NOTE: ALTER_ROUTINE is not supported; no plans to support it.-->
<row condition="hidden"><entry></entry><entry>ALTER_ROUTINE</entry>
<entry><para>Privilege to alter routines</para></entry></row>
<!--WRITER'S NOTE: ALTER_ROUTINE_ACTION is not supported; no plans to support it.-->
<row condition="hidden"><entry></entry><entry>ALTER_ROUTINE_ACTION</entry>
<entry><para>Privilege to alter routine actions</para></entry></row>
<!--WRITER'S NOTE: Expose this privilege when ALTER SCHEMA is documented in the manual.-->
<row condition="hidden"><entry></entry><entry>ALTER_SCHEMA</entry>
<entry><para>Privilege to alter schemas</para></entry></row>
<!--WRITER'S NOTE: Expose this privilege when sequences are documented in the manual.-->
<row condition="hidden"><entry></entry><entry>ALTER_SEQUENCE</entry>
<entry><para>Privilege to alter sequences</para></entry></row>
<!--WRITER'S NOTE: ALTER_SYNONYM is not supported; no plans to support it.-->
<row condition="hidden"><entry></entry><entry>ALTER_SYNONYM</entry>
<entry><para>Privilege to alter synonyms</para></entry></row>
<row><entry></entry><entry>ALTER_TABLE</entry><entry><para>Privilege
to alter tables</para></entry></row>
<!--WRITER'S NOTE: ALTER_TRIGGER is not supported; no plans to support it.-->
<row condition="hidden"><entry></entry><entry>ALTER_TRIGGER</entry>
<entry><para>Privilege to alter triggers</para></entry></row>
<row><entry></entry><entry>ALTER_VIEW</entry><entry><para>Privilege
to alter views</para></entry></row>
<row><entry></entry><entry>CREATE</entry><entry><para>Privilege to
create database objects</para></entry></row>
<row><entry></entry><entry>CREATE_CATALOG</entry><entry><para>Privilege
to create catalogs in the database</para></entry></row>
<row><entry></entry><entry>CREATE_INDEX</entry><entry><para>Privilege
to create indexes</para></entry></row>
<row><entry></entry><entry>CREATE_LIBRARY</entry><entry><para>Privilege
to create libraries in the database</para></entry></row>
<!--WRITER'S NOTE: CREATE_PROCEDURE privilege is not supported; use CREATE_ROUTINE instead.-->
<row condition="hidden"><entry></entry><entry>CREATE_PROCEDURE</entry>
<entry><para>Privilege to create stored procedures in the database</para
></entry></row>
<row><entry></entry><entry>CREATE_ROUTINE</entry><entry><para>Privilege
to create stored procedures in Java (SPJs), user-defined functions
(UDFs), table-mapping functions, and other routines in the database</para
></entry></row>
<!--WRITER'S NOTE: CREATE_ROUTINE_ACTION is not supported; no plans to support it.-->
<row condition="hidden"><entry></entry><entry>CREATE_ROUTINE_ACTION</entry>
<entry><para>Privilege to create routine actions in the database</para
></entry></row>
<row><entry></entry><entry>CREATE_SCHEMA</entry><entry><para>Privilege
to create schemas in the database</para></entry></row>
<!--WRITER'S NOTE: Expose this privilege when sequences are documented in the manual.-->
<row condition="hidden"><entry></entry><entry>CREATE_SEQUENCE</entry>
<entry><para>Privilege to create sequences in the database</para></entry>
</row>
<!--WRITER'S NOTE: CREATE_SYNONYM is not supported; no plans to support it.-->
<row condition="hidden"><entry></entry><entry>CREATE_SYNONYM</entry>
<entry><para>Privilege to create synonyms in the database</para></entry>
</row>
<row><entry></entry><entry>CREATE_TABLE</entry><entry><para>Privilege
to create tables in the database</para></entry></row>
<!--WRITER'S NOTE: CREATE_TRIGGER is not supported; no plans to support it.-->
<row condition="hidden"><entry></entry><entry>CREATE_TRIGGER</entry>
<entry><para>Privilege to create triggers in the database</para></entry>
</row>
<row><entry></entry><entry>CREATE_VIEW</entry><entry><para>Privilege
to create views in the database</para></entry></row>
<row><entry></entry><entry>DROP</entry><entry><para>Privilege to drop
database objects</para></entry></row>
<row><entry></entry><entry>DROP_CATALOG</entry><entry><para>Privilege
to drop catalogs</para></entry></row>
<row><entry></entry><entry>DROP_INDEX</entry><entry><para>Privilege
to drop indexes</para></entry></row>
<row><entry></entry><entry>DROP_LIBRARY</entry><entry><para>Privilege
to drop libraries</para></entry></row>
<!--WRITER'S NOTE: DROP_PROCEDURE privilege is not supported; use DROP_ROUTINE instead.-->
<row condition="hidden"><entry></entry><entry>DROP_PROCEDURE</entry>
<entry><para>Privilege to drop procedures</para></entry></row>
<row><entry></entry><entry>DROP_ROUTINE</entry><entry><para>Privilege
to drop stored procedures in Java (SPJs), user-defined functions (UDFs),
table-mapping functions, and other routines from the database</para
></entry></row>
<!--WRITER'S NOTE: DROP_ROUTINE_ACTION is not supported; no plans to support it.-->
<row condition="hidden"><entry></entry><entry>DROP_ROUTINE_ACTION</entry>
<entry><para>Privilege to drop routine actions</para></entry></row>
<row><entry></entry><entry>DROP_SCHEMA</entry><entry><para>Privilege
to drop schemas</para></entry></row>
<!--WRITER'S NOTE: Expose this privilege when sequences are documented in the manual.-->
<row condition="hidden"><entry></entry><entry>DROP_SEQUENCE</entry>
<entry><para>Privilege to drop sequences</para></entry></row>
<!--WRITER'S NOTE: DROP_SYNONYM is not supported; no plans to support it.-->
<row condition="hidden"><entry></entry><entry>DROP_SYNONYM</entry>
<entry><para>Privilege to drop synonyms</para></entry></row>
<row><entry></entry><entry>DROP_TABLE</entry><entry><para>Privilege
to drop tables</para></entry></row>
<!--WRITER'S NOTE: DROP_TRIGGER is not supported; no plans to support it.-->
<row condition="hidden"><entry></entry><entry>DROP_TRIGGER</entry>
<entry><para>Privilege to drop triggers</para></entry></row>
<row><entry></entry><entry>DROP_VIEW</entry><entry><para>Privilege
to drop views</para></entry></row>
<!--WRITER'S NOTE: Expose this privilege when CREATE/DROP COMPONENT PRIVILEGES and REGISTER/UNREGISTER COMPONENT statements are documented in the manual.-->
<row condition="hidden"><entry></entry><entry>MANAGE_COMPONENTS</entry>
<entry><para>Privilege to create and drop component privileges and
to register and unregister components.</para></entry></row>
<row><entry></entry><entry>MANAGE_LIBRARY</entry><entry><para>Privilege
to perform library-related commands, such as creating and dropping
libraries</para></entry></row>
<row><entry></entry><entry>MANAGE_LOAD</entry><entry><para>Privilege
to perform LOAD and UNLOAD commands</para></entry></row>
<row><entry></entry><entry>MANAGE_ROLES</entry><entry><para>Privilege
to create, alter, drop, grant, and revoke roles</para></entry></row>
<row><entry></entry><entry>MANAGE_STATISTICS</entry><entry><para>Privilege
to update and display statistics</para></entry></row>
<row><entry></entry><entry>MANAGE_USERS</entry><entry><para>Privilege
to register or unregister users, alter users, and grant or revoke
component privileges.</para></entry></row>
<!--WRITER'S NOTE: REMAP_USER is not supported; no plans to support it.-->
<row condition="hidden"><entry></entry><entry>REMAP_USER</entry><entry
><para>Privilege to execute the MAP_USER stored procedure to map predefined
database users to LDAP users.</para></entry></row>
<!--WRITER'S NOTE: Expose this privilege when an activate command is documented in the manual.-->
<row condition="hidden"><entry></entry><entry>QUERY_ACTIVATE</entry>
<entry><para>Privilege to activate a query that has been suspended.</para
></entry></row>
<row><entry></entry><entry>QUERY_CANCEL</entry><entry><para>Privilege
to cancel an executing query.</para></entry></row>
<!--WRITER'S NOTE: Expose this privilege when a suspend command is documented in the manual.-->
<row condition="hidden"><entry></entry><entry>QUERY_SUSPEND</entry>
<entry><para>Privilege to suspend an executing query.</para></entry>
</row>
<row><entry></entry><entry>SHOW</entry><entry><para>Privilege to run
EXPLAIN, GET, INVOKE, and SHOW commands. The SHOW privilege has been
granted to PUBLIC by default.</para></entry></row>
<!--WRITER'S NOTE: USE_ALTERNATE_SCHEMA is not supported; no plans to support it.-->
<row condition="hidden"><entry></entry><entry>USE_ALTERNATE_SCHEMA</entry>
<entry><para>Privilege to ???</para></entry></row>
</tbody>
</tgroup>
</informaltable>
</listitem>
</varlistentry>
<varlistentry><term>ON <replaceable>component-name</replaceable></term>
<listitem><para>specifies a component name on which to grant component
privileges. Currently, the only valid component name is SQL_OPERATIONS.</para>
</listitem>
</varlistentry>
<varlistentry><term>TO <replaceable>grantee</replaceable></term>
<listitem><para>specifies an <replaceable>auth-name</replaceable> to
which you grant component privileges.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>auth-name</replaceable></term>
<listitem><para>specifies the name of an authorization ID to which
you grant privileges. See <xref linkend="AuthIDsElement"
role="select:quotedtitle page"/>. The authorization ID must be a registered
database username, existing role name, or PUBLIC. The name is a regular
or delimited case-insensitive identifier. See <xref
linkend="csDelimitedIdentifier" role="select:quotedtitle page"/>.
If you grant a privilege to PUBLIC, the privilege remains available
to all users, unless it is later revoked from PUBLIC.</para></listitem>
</varlistentry>
<varlistentry><term>WITH GRANT OPTION</term>
<listitem><para>specifies that the <replaceable>auth-name</replaceable
> to which a component privilege is granted may in turn grant the
same component privilege to other users or roles.</para></listitem>
</varlistentry>
<varlistentry><term>[GRANTED] BY <replaceable>grantor</replaceable
></term>
<listitem><para>allows you to grant component privileges on behalf
of a role. If not specified, the privileges will be granted on your
behalf as the current user/grantor.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>role-name</replaceable></term>
<listitem><para> specifies a role on whose behalf the GRANT COMPONENT
PRIVILEGE operation is performed. To grant the privileges on behalf
of a role, you must be a member of the role, and the role must have
the authority to grant the privileges; that is, the role must have
been granted the privileges WITH GRANT OPTION.</para></listitem>
</varlistentry>
</variablelist>
</section>
<section id="GrantCompPriv_Consids">
<title>Considerations for GRANT COMPONENT PRIVILEGE</title>
<indexterm><primary>GRANT COMPONENT PRIVILEGE statement</primary>
<secondary>considerations for</secondary></indexterm>
<itemizedlist>
<listitem><para>A user or role granted a component privilege WITH
GRANT OPTION can grant the same component privilege to other users
or roles. </para></listitem>
<listitem><para>If all of the component privileges have already been
granted, SQL returns an error.</para></listitem>
<listitem><para>If one or more component privileges has already been
granted, SQL silently ignores the granted privileges and proceeds
with the grant operation.</para></listitem>
</itemizedlist>
<section>
<title>Authorization and Availability Requirements</title>
<indexterm><primary>GRANT COMPONENT PRIVILEGE statement</primary>
<secondary>authorization and availability requirements</secondary>
</indexterm>
<para>To grant a component privilege, you must have one of these privileges:<itemizedlist>
<listitem><para>User administrative privileges (that is, a user who
has been granted the MANAGE_USERS component privilege). Initially,
DB__ROOT is the only database user who has been granted the MANAGE_USERS
component privilege.</para></listitem>
<listitem><para>A user other than a user administrator who has the
WITH GRANT OPTION for the component privilege.</para></listitem>
<listitem><para>A user who was granted a role that has the WITH GRANT
OPTION privilege for the component privilege.</para></listitem>
</itemizedlist></para>
</section>
</section>
<section id="GrantCompPriv_xmp">
<title>Example of GRANT COMPONENT PRIVILEGE</title>
<indexterm><primary>GRANT COMPONENT PRIVILEGE statement</primary>
<secondary>example of</secondary></indexterm>
<para>Grant a component privilege, CREATE_TABLE, on a component, SQL_OPERATIONS,
to SQLUSER1:</para>
<screen>
GRANT COMPONENT PRIVILEGE CREATE_TABLE ON SQL_OPERATIONS TO sqluser1;</screen>
</section>
</section>
<section id="GrantRole" pagebreak="yes">
<title>GRANT ROLE Statement</title>
<itemizedlist>
<listitem><para><xref linkend="GrantRoleSyntax"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="GrantRoleConsid"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="GrantRoleExample"
role="select:quotedtitle"/></para></listitem>
</itemizedlist>
<indexterm><primary>GRANT ROLE statement</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>Roles</primary>
<secondary>GRANT ROLE statement use of</secondary></indexterm>
<indexterm><primary>Privileges</primary><secondary>GRANT ROLE statement
use of</secondary></indexterm><indexterm><primary>Data Definition
Language (DDL) statements</primary><secondary>GRANT ROLE</secondary>
</indexterm>
<para>The GRANT ROLE statement grants one or more roles to a user.
See <xref linkend="RolesElement" role="select:quotedtitle page"/>.</para>
<important>
<para>This statement works only when authentication and authorization
are enabled in Trafodion. For more information, see <ulink
url="https://wiki.trafodion.org/wiki/index.php/Enabling_Security_Features_in_Trafodion"
>Enabling Security Features</ulink> in the Trafodion wiki.</para>
</important>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>GRANT ROLE {<replaceable>role-name</replaceable
> [,<replaceable>role-name</replaceable> ]...}
  TO <replaceable>grantee</replaceable>
   
<replaceable>grantee</replaceable> is:
     <replaceable>database-username</replaceable>
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="GrantRoleSyntax">
<title>Syntax Description of GRANT ROLE</title>
<variablelist>
<varlistentry><term><replaceable>role-name</replaceable> [,<replaceable
>role-name</replaceable>] ...</term>
<listitem><para>specifies the existing roles to grant. </para>
</listitem>
</varlistentry>
<varlistentry><term>TO <replaceable>grantee</replaceable></term>
<listitem><para>specifies the registered database username to whom
to grant the roles.</para></listitem>
</varlistentry>
</variablelist>
</section>
<section id="GrantRoleConsid">
<title>Considerations for GRANT ROLE</title>
<indexterm><primary>GRANT ROLE statement</primary><secondary>considerations
for</secondary></indexterm>
<itemizedlist>
<listitem><para>To grant roles to other grantees, you must own the
roles or have user administrative privileges for the roles. You have
user administrative privileges for roles if you have been granted
the MANAGE_ROLES component privilege. Initially, DB__ROOT is the only
database user who has been granted the MANAGE_ROLES component privilege.</para>
</listitem>
<listitem><para><phrase>In Trafodion Release 0.9, </phrase>when you
grant a role to a grantee, the effects on any active sessions for
the grantee are undefined, and users will need to disconnect such
sessions and reconnect to establish a new session with the updated
set of privileges. <phrase>Starting in Trafodion Release 1.0, when
you grant a role to a user, the additional privileges are automatically
propagated to and detected by active sessions. There is no need for
users to disconnect from and reconnect to a session to see the updated
set of privileges.</phrase></para></listitem>
<listitem><para>If any errors occur in processing a GRANT ROLE statement
that names multiple roles, then no grants are done.</para></listitem>
<listitem><para>If you attempt to grant a role but a grant with the
same role and grantee already exists, SQL ignores the request and
returns a successful operation.</para></listitem>
</itemizedlist>
</section>
<section id="GrantRoleExample">
<title>Example of GRANT ROLE</title>
<indexterm><primary>GRANT ROLE statement</primary><secondary>example
of</secondary></indexterm>
<para>To grant multiple roles to a grantee:</para>
<programlisting>GRANT ROLE clerks, sales TO jsmith;
</programlisting>
</section>
</section>
<section id="i1008135" pagebreak="yes">
<title>INSERT Statement</title>
<itemizedlist>
<listitem><para><xref linkend="i1062641" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1085477" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1059929" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>Access options</primary><secondary>INSERT statement
use of</secondary></indexterm><indexterm><primary>INSERT statement</primary>
<secondary>syntax diagram of</secondary></indexterm><indexterm><primary
>Data Manipulation Language (DML) statements</primary><secondary>INSERT</secondary>
</indexterm>
<para>The INSERT statement is a DML statement that inserts rows in
a table or view.</para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>INSERT INTO <replaceable>table</replaceable
> [(<replaceable>target-col-list</replaceable>)] <replaceable>insert-source</replaceable
> 

<replaceable>target-col-list</replaceable> is: 
   <replaceable>colname</replaceable> [,<replaceable>colname</replaceable
>]... 

<replaceable>insert-source</replaceable> is:
   <replaceable>query-expr</replaceable> [<replaceable>order-by-clause</replaceable
>] [<replaceable>access-clause</replaceable>] | DEFAULT VALUES 
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="i1062641">
<title>Syntax Description of INSERT</title>
<variablelist>
<varlistentry><term><replaceable>table</replaceable></term>
<listitem><para>names the user table or view in which to insert rows. <replaceable
>table</replaceable> must be a base table or an updatable view. </para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>(target-col-list) </replaceable></term>
<listitem><indexterm><primary>INSERT statement</primary><secondary
>target column list</secondary></indexterm><para>names the columns
in the table or view in which to insert values. The data type of each
target column must be compatible with the data type of its corresponding
source value. Within the list, each target column must have the same
position as its associated source value, whose position is determined
by the columns in the table derived from the evaluation of the query
expression (<replaceable>query‑expr</replaceable>).</para><para>If
you do not specify all of the columns in <replaceable>table</replaceable
> in the <replaceable>target-col-list</replaceable>, column default
values are inserted into the columns that do not appear in the list.
See <xref linkend="i1013833" role="select:quotedtitle page"/>.</para>
<para>If you do not specify <replaceable>target-col-list</replaceable
>, row values from the source table are inserted into all columns
in <replaceable>table</replaceable>. The order of the column values
in the source table must be the same order as that of the columns
specified in the CREATE TABLE for <replaceable>table</replaceable
>. (This order is the same as that of the columns listed in the result
table of SHOWDDL <replaceable>table</replaceable>.)</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>insert-source </replaceable></term>
<listitem><para>specifies the rows of values to be inserted into all
columns of <replaceable>table</replaceable> or, optionally, into specified
columns of <replaceable>table</replaceable>.</para>
<variablelist>
<varlistentry><term><replaceable>query-expr</replaceable> </term>
<listitem><para>For the description of <replaceable>query‑expr</replaceable
>, <replaceable>order-by-clause</replaceable>, and <replaceable>access-clause</replaceable
>, see the <xref linkend="i1008894" role="select:quotedtitle page"
/>. </para></listitem>
</varlistentry>
<varlistentry><term>DEFAULT VALUES</term>
<listitem><para>is equivalent to a <replaceable>query-expr</replaceable
> of the form VALUES (DEFAULT, ...). The value of each DEFAULT is
the default value defined in the column descriptor of <replaceable
>colname</replaceable>, which is contained in the table descriptor
of <replaceable>table</replaceable>. Each default value is inserted
into its column to form a new row. If you specify DEFAULT VALUES,
you cannot specify a column list. You can use DEFAULT VALUES only
when all columns in <replaceable>table</replaceable> have default
values.</para></listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="i1085477">
<title>Considerations for INSERT</title>
<indexterm><primary>INSERT statement</primary><secondary>considerations
for</secondary></indexterm>
<section>
<title>Authorization Requirements</title>
<para>INSERT requires authority to read and write to the table or
view receiving the data and authority to read tables or views specified
in the query expression (or any of its subqueries) in the INSERT statement. </para>
</section>
<section>
<title>Transaction Initiation and Termination</title>
<para>The INSERT statement automatically initiates a transaction if
no transaction is active. Alternatively, you can explicitly initiate
a transaction with the BEGIN WORK statement. After a transaction is
started, the SQL statements execute within that transaction until
a COMMIT or ROLLBACK is encountered or an error occurs. If AUTOCOMMIT
is ON, the transaction terminates at the end of the INSERT statement.</para>
</section>
<section>
<title>Self-Referencing INSERT and BEGIN WORK or AUTOCOMMIT OFF</title>
<indexterm><primary>INSERT statement</primary><secondary>self-referencing</secondary>
</indexterm><indexterm><primary>Self-referencing INSERT</primary>
</indexterm>
<para>A self-referencing INSERT statement is one that references,
in the statement's <replaceable>insert-source</replaceable>, the same
table or view into which rows will be inserted (see <xref
linkend="self-refupdate" role="select:quotedtitle page"/>). A self-referencing
INSERT statement will not execute correctly and an error is raised
if either BEGIN WORK or AUTOCOMMIT OFF is used unless the compiler's
plan sorts the rows before they are inserted. If you want to use a
self-referencing INSERT statement, you should avoid the use of BEGIN
WORK or AUTOCOMMIT OFF. For information about AUTOCOMMIT, see the <xref
linkend="i1010391" role="select:quotedtitle page"/>.</para>
</section>
<section>
<title>Isolation Levels of Transactions and Access Options of Statements</title>
<indexterm><primary>Concurrency</primary><secondary>INSERT statement</secondary>
</indexterm>
<para>The isolation level of an SQL transaction defines the degree
to which the operations on data within that transaction are affected
by operations of concurrent transactions. When you specify access
options for the DML statements within a transaction, you override
the isolation level of the containing transaction. Each statement
then executes with its individual access option. </para>
<para condition="hidden">You can explicitly set the isolation level
of a transaction with the SET TRANSACTION statement. See <xref
linkend="i1010391" role="select:quotedtitle page"/>. </para>
</section>
<section>
<title>Use of a VALUES Clause for the Source Query Expression</title>
<indexterm><primary>INSERT statement</primary><secondary>VALUES specification
within</secondary></indexterm>
<para>If the query expression consists of the VALUES keyword followed
by rows of values, each row consists of a list of value expressions
or a row subquery (a subquery that returns a single row of column
values). A value in a row can also be a scalar subquery (a subquery
that returns a single row consisting of a single column value). </para>
<para>Within a VALUES clause, the operands of a value expression can
be numeric, string, datetime, or interval values; however, an operand
cannot reference a column (except in the case of a scalar or row subquery
returning a value or values in its result table).</para>
</section>
<section>
<title>Requirements for Inserted Rows</title>
<para>Each row to be inserted must satisfy the constraints of the
table or underlying base table of the view. A table constraint is
satisfied if the check condition is not false—it is either true or
has an unknown value. </para>
</section>
<section>
<title>Using Compatible Data Types</title>
<indexterm><primary>INSERT statement</primary><secondary>compatible
data types</secondary></indexterm><indexterm><primary>Compatible data
types</primary></indexterm><indexterm><primary>Comparable data types</primary>
</indexterm>
<para>To insert a row, you must provide a value for each column in
the table that has no default value. The data types of the values
in each row to be inserted must be compatible with the data types
of the corresponding target columns. </para>
<para><emphasis role="bold">Inserting Character Values</emphasis></para>
<para>Any character string data type is compatible with all other
character string data types that have the same character set. For
fixed length, an inserted value shorter than the column length is
padded on the right with blank characters of the appropriate character
set (for example, ISO88591 blanks (HEX20). If the value is longer
than the column length, string truncation of nonblank trailing characters
returns an error, and the truncated string is not inserted. </para>
<para>For variable length, a shorter inserted value is not padded.
As is the case for fixed length, if the value is longer than the column
length, string truncation of nonblank trailing characters returns
an error, and the truncated string is not inserted. </para>
<para><emphasis role="bold">Inserting Numeric Values</emphasis></para>
<para>Any numeric data type is compatible with all other numeric data
types. If you insert a value into a numeric column that is not large
enough, an overflow error occurs. If a value has more digits to the
right of the decimal point than specified by the scale for the column
definition, the value is truncated.</para>
<para><emphasis role="bold">Inserting Interval Values</emphasis></para>
<para>A value of interval data type is compatible with another value
of interval data type only if the two data types are both year-month
or both day-time intervals. </para>
<para><emphasis role="bold">Inserting Date and Time Values</emphasis
></para>
<para>Date, time, and timestamp are the three Trafodion SQL datetime
data types. A value with a datetime data type is compatible with another
value with a datetime data type only if the values have the same datetime
fields. </para>
<para><emphasis role="bold">Inserting Nulls</emphasis></para>
<para>and inserting values with specific data types, you might want
to insert nulls. To insert null, use the keyword NULL. NULL only works
with the VALUES clause. Use <literal>cast (null as <replaceable>type</replaceable
>)</literal> for select-list. </para>
</section>
</section>
<section id="i1059929">
<title>Examples of INSERT</title>
<indexterm><primary>INSERT statement </primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>Insert a row into the CUSTOMER table without using
a <replaceable>target-col-list</replaceable>:</para>
<programlisting>INSERT INTO sales.customer 
  VALUES (4777, 'ZYROTECHNIKS', '11211 40TH ST.',
          'BURLINGTON', 'MASS.', '01803', 'A2');

--- 1 row(s) inserted.
</programlisting>
<para>The column name list is not specified for this INSERT statement.
This operation works because the number of values listed in the VALUES
clause is equal to the number of columns in the CUSTOMER table, and
the listed values appear in the same order as the columns specified
in the CREATE TABLE statement for the CUSTOMER table. </para>
<para>By issuing this SELECT statement, this specific order is displayed:</para>
<programlisting>SELECT * FROM sales.customer 
  WHERE custnum = 4777;

CUSTNUM  CUSTNAME       STREET         ... POSTCODE  CREDIT
-------  -------------  --------------     --------  ------
  4777   ZYROTECHNIKS   11211 4OTH ST. ... 01803     A2

--- 1 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Insert a row into the CUSTOMER table using a <replaceable
>target-col-list</replaceable>:</para>
<programlisting>INSERT INTO sales.customer
  (custnum, custname, street, city, state, postcode)
  VALUES (1120, 'EXPERT MAILERS', '5769 N. 25TH PL', 
          'PHOENIX', 'ARIZONA', '85016');

--- 1 row(s) inserted.
</programlisting>
<para>Unlike the previous example, the insert source of this statement
does not contain a value for the CREDIT column, which has a default
value. As a result, this INSERT must include the column name list.</para>
<para>This SELECT statement shows the default value 'C1' for CREDIT:</para>
<programlisting>SELECT * FROM sales.customer 
  WHERE custnum = 1120;

CUSTNUM  CUSTNAME        STREET                POSTCODE  CREDIT
-------  --------------  ------------------    --------  ------
  1120   EXPERT MAILERS  5769 N. 25TH PL       85016     C1

--- 1 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Insert multiple rows into the JOB table by using only
one INSERT statement:</para>
<programlisting>
INSERT INTO persnl.job 
   VALUES (100,'MANAGER'),
          (200,'PRODUCTION SUPV'),
          (250,'ASSEMBLER'),
          (300,'SALESREP'),
          (400,'SYSTEM ANALYST'),
          (420,'ENGINEER'),
          (450,'PROGRAMMER'),
          (500,'ACCOUNTANT'),
          (600,'ADMINISTRATOR'),
          (900,'SECRETARY');

--- 10 row(s) inserted.
</programlisting>
</listitem>
<listitem><para>The PROJECT table consists of five columns using the
data types numeric, varchar, date, timestamp, and interval. Insert
values by using these types:</para>
<programlisting>INSERT INTO persnl.project
  VALUES (1000, 'SALT LAKE CITY', DATE '2007-10-02',
  TIMESTAMP '2007-12-21 08:15:00.00', INTERVAL '30' DAY);

--- 1 row(s) inserted.
</programlisting>
</listitem>
<listitem><para>Suppose that CUSTLIST is a view of all columns of
the CUSTOMER table except the credit rating. Insert information from
the SUPPLIER table into the CUSTOMER table through the CUSTLIST view,
and then update the credit rating:</para>
<programlisting>INSERT INTO sales.custlist
  (SELECT * FROM invent.supplier
   WHERE suppnum = 10);

UPDATE sales.customer 
  SET credit = 'A4' 
  WHERE custnum = 10; 
</programlisting>
<para>You could use this sequence in the following situation. Suppose
that one of your suppliers has become a customer. If you use the same
number for both the customer and supplier numbers, you can select
the information from the SUPPLIER table for the new customer and insert
it into the CUSTOMER table through the CUSTLIST view (as shown in
the example). </para>
<para id="i1064284">This operation works because the columns of the
SUPPLIER table contain values that correspond to the columns of the
CUSTLIST view. Further, the credit rating column in the CUSTOMER table
is specified with a default value. If you want a credit rating that
is different from the default, you must update this column in the
row of new customer data.   </para>
</listitem>
</itemizedlist>
<section id="self-refupdate">
<title>Examples of Self-Referencing Inserts</title>
<itemizedlist>
<listitem><para>This is an example of a self-referencing insert:<programlisting
>insert into table1 select pk+?, b, c from table1</programlisting
></para></listitem>
<listitem><para>This is an example of a self-referencing insert where
the target of the insert, <literal>table1</literal>, is also used
in a subquery of the insert-source:<programlisting>insert into table1 
  select a+16, b, c from table2 where table2.b not in
    (select b from table1 where a > 16)</programlisting></para><para
>The source table is not affected by the insert.</para>
</listitem>
</itemizedlist>
</section>
</section>
</section>
<section id="INVOKE-Statement" pagebreak="yes">
<title>INVOKE Statement</title>
<itemizedlist>
<listitem><para><xref linkend="INVOKE-Syntax" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="INVOKE-Considerations"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="INVOKE-Example" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>INVOKE statement</primary><secondary>syntax diagram
of</secondary></indexterm>
<para>The INVOKE statement generates a record description that corresponds
to a row in the specified table, view, or index. The record description
includes a data item for each column in the table, view, or index<phrase
>, including the primary key but excluding the SYSKEY column. It includes
the SYSKEY column of a view only if the view explicitly listed the
column in its definition.</phrase></para>
<para>INVOKE is a Trafodion SQL extension.</para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>INVOKE  <replaceable>table-name</replaceable
> 
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="INVOKE-Syntax">
<title>Syntax Description of INVOKE </title>
<variablelist>
<varlistentry><term><replaceable>table-name</replaceable></term>
<listitem><para>specifies the name of a table, view, or index for
which to generate a record description. See <xref linkend="i1013018"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
</section>
<section id="INVOKE-Considerations">
<title>Considerations for INVOKE</title>
<indexterm><primary>INVOKE statement</primary><secondary>considerations
for</secondary></indexterm>
<section>
<title>Required Privileges</title>
<para>To issue an INVOKE statement, one of the following must be true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT.</para></listitem>
<listitem><para>You are the owner of the table.</para></listitem>
<listitem><para>You have the SHOW component privilege for the SQL_OPERATIONS
component. The SHOW component privilege is granted to PUBLIC by default.</para>
</listitem>
<listitem><para>You have the SELECT privilege on the target table.</para>
</listitem>
</itemizedlist>
</section>
</section>
<section id="INVOKE-Example">
<title>Example of INVOKE</title>
<indexterm><primary>INVOKE statement</primary><secondary>example of</secondary>
</indexterm>
<para>This command generates a record description of the table T:</para>
<informalexample id="INVOKE-informal-example">
<programlisting>SQL>invoke trafodion.seabase.t;

 
-- Definition of Trafodion table TRAFODION.SEABASE.T
-- Definition current  Wed Mar  5 10:36:06 2014

  ( 
    A                                INT NO DEFAULT NOT NULL NOT DROPPABLE
  )
  PRIMARY KEY (A ASC)

--- SQL operation complete.
</programlisting>
</informalexample>
</section>
</section>
<section id="i1062270" pagebreak="yes">
<title>MERGE Statement</title>
<itemizedlist>
<listitem><para><xref linkend="i1062073" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1062083" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="MERGEexamples" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>MERGE statement</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Data Manipulation Language
(DML) statements</primary><secondary>MERGE</secondary></indexterm>
<para>The MERGE statement: </para>
<itemizedlist>
<listitem><para>Updates a table if the row exists or inserts into
a table if the row does not exist. This is upsert functionality.</para>
</listitem>
<listitem><para>Updates (merges) matching rows from one table to another.</para>
</listitem>
</itemizedlist>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>MERGE INTO <replaceable>table</replaceable
> [<replaceable>using-clause</replaceable>] 
   <replaceable>on-clause</replaceable> 
   {[<replaceable>when-matched-clause</replaceable>]|[<replaceable
>when-not-matched-clause</replaceable>]} ...

<replaceable>using-clause</replaceable> is:
   USING (<replaceable>select-query</replaceable>) AS <replaceable
>derived-table-name</replaceable> [<replaceable>derived-column-names</replaceable
>]

<replaceable>on-clause</replaceable> is:
   ON <replaceable>predicate</replaceable> 

<replaceable>when-matched-clause</replaceable> is:
   WHEN MATCHED THEN UPDATE SET <replaceable>set-clause</replaceable
> <computeroutput>[WHERE predicate]</computeroutput>
   WHEN MATCHED THEN DELETE

<replaceable>when-not-matched-clause</replaceable> is:
   WHEN NOT MATCHED THEN INSERT <replaceable>insert-values-list</replaceable
> 

<replaceable>insert-values-list</replaceable> is:
   [(<replaceable>column1</replaceable>, ..., <replaceable>columnN</replaceable
> )] VALUES (<replaceable>value1</replaceable>, ..., <replaceable
>valueN</replaceable>)</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="i1062073">
<title>Syntax Description of MERGE </title>
<indexterm><primary>MERGE statement</primary><secondary>description
of</secondary></indexterm>
<variablelist>
<varlistentry><term><replaceable>table</replaceable></term>
<listitem><para>is the ANSI logical name for the table. </para>
</listitem>
</varlistentry>
<varlistentry><term>ON <replaceable>predicate</replaceable></term>
<listitem><para>used to determine if a row is or is not present in
the table. The ON predicate must be a predicate on the clustering
key of the table if the MERGE has a <replaceable>when-not-matched-clause</replaceable
>. The clustering key can be a single or multi-column key. </para><para
>The ON predicate must select a unique row if the MERGE has a <replaceable
>when-not-matched-clause</replaceable>.</para>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="i1062083">
<title>Considerations for MERGE </title>
<indexterm><primary>MERGE statement</primary><secondary>considerations
for</secondary></indexterm>
<section id="i1062084">
<title>Upsert Using Single Row</title>
<indexterm><primary>MERGE statement</primary><secondary>upsert, single
row</secondary></indexterm><indexterm><primary>Upsert</primary>
<secondary>using single row</secondary></indexterm>
<para>A MERGE statement allows you to specify a set of column values
that should be updated if the row is found, and another row to be
inserted if the row is not found. The ON predicate must select exactly
one row that is to be updated if the MERGE statement has an INSERT
clause.</para>
<para>In a MERGE statement, at least one of the clauses <replaceable
>when-matched</replaceable> or <replaceable>when-not-matched</replaceable
> must be specified. Note the following:<itemizedlist>
<listitem><para>If a <replaceable>when-matched</replaceable> clause
is present and the WHERE predicate in the UPDATE is satisfied, the
columns in the SET clause are updated. </para></listitem>
<listitem><para>If a <replaceable>when-matched</replaceable> clause
is present and the WHERE predicate in the UPDATE is not satisfied,
the columns in the SET clause are not updated.</para></listitem>
<listitem><para>If a <replaceable>when-matched</replaceable> clause
is present and the UPDATE has no WHERE predicate, the columns in the
SET clause are updated.</para></listitem>
<listitem><para>If a <replaceable>when-not-matched</replaceable> clause
is present and columns are explicitly specified in the INSERT clause,
the specified values for those columns are inserted. Missing columns
are updated using the default values for those columns. </para>
</listitem>
</itemizedlist></para>
<para>This example updates column <literal>b</literal> to 20 if the
row with key column <literal>a</literal> with value 10 is found. A
new row (10, 30) is inserted if the row is not found in table <literal
>t</literal>.<programlisting>MERGE INTO t ON a = 10
 WHEN MATCHED THEN UPDATE SET b = 20
 WHEN NOT MATCHED THEN INSERT VALUES (10, 30)
</programlisting></para>
<para>This example updates column <literal>b</literal> to 20 if column <literal
>a</literal> with value 10 is found. If column <literal>a</literal
> with value 10 is not found, nothing is done.</para>
<programlisting id="CondlUpsert">MERGE INTO t ON a = 10
 WHEN MATCHED THEN UPDATE SET b = 20
</programlisting>
<para>This example inserts values (10, 30) if column <literal>a</literal
> with value 10 is not found. If column <literal>a</literal> with
value 10 is found, nothing is done.<programlisting>MERGE INTO t ON a = 10
 WHEN NOT MATCHED THEN INSERT VALUES (10, 30)
</programlisting></para>
</section>
<section id="CondUpsert">
<title>Conditional Upsert Using Single Row</title>
<para>In this example, the MERGE statement uses a single-row conditional
upsert that inserts one row (<literal>keycol, col, seqnum</literal
>) value if a row with that <literal>keycol</literal> (parameter-specified)
value is not yet in table <literal>d</literal>. Otherwise, the MERGE
statement updates that row's <literal>col</literal> and <literal>seqnum</literal
> columns if that row's <literal>seqnum</literal> is higher than the
current (parameter-specified) sequence number. If the matching row's <literal
>seqnum</literal> column value is not higher than the current sequence
number, then that matched row is not updated.<programlisting>MERGE INTO d ON keycol = ?
  WHEN MATCHED THEN UPDATE SET (col, seqnum) = (?, ?) WHERE seqnum &lt; ?
  WHEN NOT MATCHED THEN INSERT (keycol, col, seqnum) VALUES (?, ?, ?)</programlisting
></para>
<para>The optional WHERE predicate in the <replaceable>when-matched-then-update</replaceable
> clause is useful when the update is wanted only if the given condition
is satisfied. Consider this use case. Suppose object X is represented
as a row in table T. Also, suppose a stream of updates exists for
object X. The updates are marked by a sequence number at their source.
However, the updates flow through a network which does not guarantee
first-in, first-out delivery. In fact, the updates may arrive out-of-order
to the database. In this case, the last update (the one with the current
highest sequence number) should always win in the database. The MERGE
statement shown above can be used to satisfy this use case:<itemizedlist>
<listitem><para>A stream of updates for table <literal>d</literal
> exists that are sequenced by a sequence number <literal>seqnum</literal
> at their source</para></listitem>
<listitem><para>The updates race through the network and may arrive
in the database in any order, and</para></listitem>
<listitem><para>You want to guarantee that the last update (the one
with the highest <literal>seqnum</literal>) always wins in the database.</para>
</listitem>
</itemizedlist></para>
</section>
<section>
<title>Restrictions</title>
<indexterm><primary>MERGE statement</primary><secondary>restrictions</secondary>
</indexterm>
<itemizedlist>
<listitem><para>The MERGE statement does not use ESP parallelism. </para>
</listitem>
<listitem><para>A merged table cannot be a view.</para></listitem>
<listitem><para>Merge is not allowed if the table has constraints.</para>
</listitem>
<listitem condition="hidden"><para>Merge is not allowed with SET ON
ROLLBACK.</para></listitem>
<listitem condition="hidden"><para>The key value specified in the <replaceable
>on-clause</replaceable> and the <replaceable>insert-values-list</replaceable
> VALUE clause must be the same. This statement is not allowed:<programlisting
>CREATE TABLE t (a int not null, b int not null, primary key(a));
MERGE INTO t ON a = 10
WHEN NOT MATCHED THEN INSERT VALUES (20, 30)</programlisting></para>
</listitem>
<listitem><para>The <replaceable>on-clause</replaceable> cannot contain
a subquery. This statement is not allowed:<programlisting>MERGE INTO t ON a = (SELECT a FROM t1) WHEN ...</programlisting
></para></listitem>
<listitem><para>The optional WHERE predicate in the when-matched clause
cannot contain a subquery or an aggregate function. These statements
are not allowed:<programlisting>MERGE INTO t ON a = 10
WHEN MATCHED THEN UPDATE SET b=4 WHERE b=(SELECT b FROM t1)
WHEN NOT MATCHED THEN INSERT VALUES (10,30);

MERGE INTO t ON a=10
WHEN MATCHED THEN UPDATE SET b=4 WHERE b=MAX(b)
WHEN NOT MATCHED THEN INSERT VALUES (10,30);</programlisting></para>
</listitem>
<listitem><para>The UPDATE SET clause in a MERGE statement cannot
contain a subquery. This statement is not allowed:<programlisting
>MERGE INTO t ON a = 1 WHEN MATCHED THEN UPDATE SET b = (SELECT a FROM t1)</programlisting
></para></listitem>
<listitem><para>The <replaceable>insert-values-list</replaceable> clause
in a MERGE statement cannot contain a subquery. This statement is
not allowed:<programlisting>MERGE INTO t ON a = 1 WHEN NOT MATCHED THEN INSERT VALUES ((SELECT a FROM t1))</programlisting
></para></listitem>
<!--WRITER'S NOTE: Verify this removal with Anoop.-->
<listitem condition="hidden"><para>The column being updated cannot
be a clustering key.</para></listitem>
<listitem><para>Use of a non-unique <replaceable>on-clause</replaceable
> for a MERGE update is allowed only if no INSERT clause exists.<programlisting
>MERGE INTO t USING (SELECT a,b FROM t1) x ON t.a=x.a
   WHEN MATCHED THEN UPDATE SET b=x.b;</programlisting>In this example, <literal
>t.a=x.a</literal> is not a fully qualified unique primary key predicate.</para>
</listitem>
<listitem><para>Use of a non-unique <replaceable>on-clause</replaceable
> for a MERGE delete is allowed only if no INSERT clause exists.<programlisting
>MERGE INTO t USING (SELECT a,b FROM t1) x ON t.a=x.a
   WHEN MATCHED THEN DELETE; </programlisting></para></listitem>
</itemizedlist>
</section>
<section>
<title>MERGE From One Table Into Another</title>
<indexterm><primary>MERGE statement </primary><secondary>merge from
one table to another</secondary></indexterm>
<para>The MERGE statement can be used to upsert all matching rows
from the source table into the target table. Each row from the source
table is treated as the source of a single upsert statement. The <replaceable
>using-clause</replaceable> contains the <replaceable>select-query</replaceable
> whose output is used as the source to the MERGE statement.</para>
<para>The source <replaceable>select-query</replaceable> must be renamed
using the AS clause. <programlisting>MERGE INTO t ON 
    USING (<replaceable>select-query</replaceable>) AS Z(X) ON col = Z.X
    WHEN MATCHED THEN . . .
</programlisting></para>
<para>For each row selected out of the select-query, the MERGE statement
is evaluated. Values selected are used in the <replaceable>on-clause</replaceable
> to join with the column of the merged table. If the value is found,
it is updated. If it is not found, the insert is done. The restrictions
are the same as those for <xref linkend="i1062084"
role="select:quotedtitle page"/>.</para>
</section>
</section>
<section id="MERGEexamples">
<title>Example of MERGE </title>
<indexterm><primary>MERGE statement</primary><secondary>example of</secondary>
</indexterm>
<para>This query extracts derived columns <literal>a</literal> and <literal
>b</literal> from the USING query as derived table <literal>z</literal
> and use each row to join to the merged table <literal>t</literal
> based on the <replaceable>on-clause</replaceable>. For each matched
row, column <literal>b</literal> in table <literal>t</literal> is
updated using column <literal>b</literal> in derived table <literal
>z</literal>. For rows that are not matched, values <literal>z.a</literal
> and <literal>z.b</literal> are inserted. <programlisting>MERGE INTO t USING 
  (SELECT * FROM t1) z(a,b) on a = z.a
  WHEN MATCHED THEN UPDATE SET b = z.b
  WHEN NOT MATCHED THEN INSERT VALUES (z.a, z.b);</programlisting
></para>
</section>
</section>
<section id="i1062273" pagebreak="yes">
<title>PREPARE Statement</title>
<itemizedlist>
<listitem><para><xref linkend="i1062075" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1062085" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1062093" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>PREPARE statement</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Resource control statements</primary>
<secondary>PREPARE statement</secondary></indexterm>
<para>The PREPARE statement compiles an SQL statement for later use
with the EXECUTE statement in <phrase>the same </phrase><phrase>Trafodion
Command Interface (TrafCI) </phrase>session.</para>
<para>You can also use PREPARE to check the syntax of a statement
without executing the statement in <phrase>the same </phrase><phrase
>TrafCI </phrase>session.</para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>PREPARE <replaceable>statement-name</replaceable
> FROM <replaceable>statement</replaceable>
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="i1062075">
<title>Syntax Description of PREPARE</title>
<variablelist>
<varlistentry><term><replaceable>statement-name</replaceable> </term>
<listitem><para>is an SQL identifier that specifies a name to be used
for the prepared statement. See <xref linkend="i1032512"
role="select:quotedtitle page"/>. The statement name should be a character
string and not a numeric value. If you specify the name of an existing
prepared statement, the new statement overwrites the previous one. </para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>statement</replaceable> </term>
<listitem><para>specifies the SQL statement to prepare.</para>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="i1062085">
<title>Considerations for PREPARE</title>
<section>
<title>Availability of a Prepared Statement</title>
<indexterm><primary>PREPARE statement</primary><secondary>considerations
for</secondary></indexterm><indexterm><primary>PREPARE statement</primary>
<secondary>availability</secondary></indexterm>
<para>If a PREPARE statement fails, any subsequent attempt to run
EXECUTE on the named statement fails.</para>
<para>Only the <phrase>TrafCI </phrase>session that executes the PREPARE
can run EXECUTE on the prepared statement. The prepared statement
is available for running EXECUTE until you terminate the <phrase>TrafCI </phrase
>session.</para>
<para>A statement must be compiled by PREPARE before you can run EXECUTE
on it. However, after the statement is compiled, you can run EXECUTE
on the statement multiple times without recompiling the statement.</para>
</section>
</section>
<section id="i1062093">
<title>Examples of PREPARE</title>
<indexterm><primary>PREPARE statement</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>Prepare a SELECT statement, checking for syntax errors:</para>
<programlisting>SQL>prepare empsal from
+>select salary from employee
+>where jobcode = 100;

*** ERROR[4082] Table, view or stored procedure NEO.INVENT.EMPLOYEE does not exist or is inaccessible.
*** ERROR[8822] The statement was not prepared.

SQL>
</programlisting>
</listitem>
<listitem><para>Prepare a SELECT statement with an unnamed parameter
(<literal>?</literal>) and later run EXECUTE on it:</para>
<programlisting>SQL>prepare findsal from
+>select salary from persnl.employee
+>where jobcode = ?;

--- SQL command prepared.

SQL>execute findsal using 450;
</programlisting>
<programlisting>SALARY  
----------
  32000.00
  33000.50
  40000.00
  32000.00
  45000.00

--- 5 row(s) selected.

SQL>
</programlisting>
</listitem>
<listitem><para>Prepare a SELECT statement with a named parameter
(<literal>?</literal><replaceable>param‑name</replaceable>) and later
run EXECUTE on it:</para>
<programlisting>SQL>prepare findsal from
+>select salary from persnl.employee
+>where jobcode = ?job;

--- SQL command prepared.

SQL>set param ?job 450

SQL>execute findsal;
</programlisting>
<programlisting>SALARY  
----------
  32000.00
  33000.50
  40000.00
  32000.00
  45000.00

--- 5 row(s) selected.

SQL>
</programlisting>
<para>For more information, see the <xref linkend="i1064741"
role="select:quotedtitle page"/>.</para>
</listitem>
</itemizedlist>
</section>
</section>
<section id="RegisterUser" pagebreak="yes">
<title>REGISTER USER Statement</title>
<itemizedlist>
<listitem><para><xref linkend="RegUserSyntax" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="RegUserConsid" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="RegUserExample" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>REGISTER USER statement</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>Data Definition
Language (DDL) statements</primary><secondary>REGISTER USER</secondary>
</indexterm>
<para>The REGISTER USER statement registers a user in the SQL database,
associating the user's login name with a database username<phrase
condition="hidden">, and optionally creates a schema managed by that
user</phrase>.</para>
<para>REGISTER USER is a Trafodion SQL extension.</para>
<note>
<para>The user's login name is also the name by which the user is
defined in the directory service, so the syntax description below
refers to it as the <emphasis>directory-service username</emphasis
>. </para>
</note>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>REGISTER USER <replaceable>directory-service-username</replaceable
> [ AS <replaceable>database-username</replaceable> ] <literal
condition="hidden">[<replaceable>schema-clause</replaceable>]

</literal><literal condition="hidden"><replaceable>schema-clause</replaceable
> is:
     [ PRIVATE | SHARED ] SCHEMA [<replaceable>schema-name</replaceable
>]</literal>
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="RegUserSyntax">
<title>Syntax Description of REGISTER USER</title>
<variablelist>
<varlistentry><term><replaceable>directory-service-username</replaceable
></term>
<listitem><para>is the name that identifies the user in the directory
service. This is also the name the user specifies when logging in
to a Trafodion database. The <replaceable>directory-service-username</replaceable
> is a regular or delimited case-insensitive identifier. See <xref
linkend="csDelimitedIdentifier" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>database-username</replaceable></term>
<listitem><para>is a regular or delimited case-insensitive identifier
that denotes the username as defined in the database. The database
username cannot be identical to a registered database username or
an existing role name. However, it can be the same as the directory-service
username. If you omit the AS <replaceable>database-username</replaceable
> clause, the database username will be the same as the directory-service
username.</para></listitem>
</varlistentry>
<varlistentry condition="hidden"><term>[ PRIVATE | SHARED ] SCHEMA
[<replaceable>schema-name</replaceable>]</term>
<listitem><para>creates a schema with the database user as the owner
of the schema. If you omit the schema name, the name of the database
user is used as the schema name. If a schema with the username already
exists, the REGISTER USER statement fails. If you omit PRIVATE or
SHARED, a private schema is created. If you omit the optional SCHEMA
clause from the REGISTER USER statement, no schema is created, and
only a user is registered.</para></listitem>
</varlistentry>
</variablelist>
</section>
<section id="RegUserConsid">
<title>Considerations for REGISTER USER</title>
<indexterm><primary>REGISTER USER statement</primary><secondary>considerations
for</secondary></indexterm>
<section>
<title>Who Can Register a User</title>
<para>To register a user, you must have user administrative privileges.
You have user administrative privileges if you have been granted the
MANAGE_USERS component privilege. Initially, DB__ROOT is the only
database user who has been granted the MANAGE_USERS component privilege.</para>
</section>
<section>
<title>Add the User to the Directory Before Registering the User</title>
<para>Add the user to the appropriate directory service before you
register the user. Otherwise, REGISTER USER will fail.</para>
</section>
<section>
<title>AS <replaceable>database-username</replaceable> Clause</title>
<para>Use the AS <replaceable>database-username</replaceable> clause
to assign a database username that is different than the username
defined in the directory service. In particular, it is often convenient
to assign a database username that is shorter and easier to type than
the directory-service username. For example, if the user logs on as
John.Allen.Doe.the.Second@mycompany.com, you might want to assign
the user a database username of JDoe.</para>
<para>Database usernames are authorization IDs. If you specify a name
already assigned to another user or to an existing role, the command
will fail. For more information, see <xref linkend="AuthIDsElement"
role="select:quotedtitle page"/>.</para>
</section>
<section>
<title>Reserved Names</title>
<para>PUBLIC, _SYSTEM, NONE, and database usernames beginning with
DB__ are reserved. You cannot register users with any such name.</para>
</section>
<section>
<title>Username Length</title>
<para>Database usernames are limited to 128 characters.</para>
</section>
</section>
<section id="RegUserExample">
<title>Examples of REGISTER USER</title>
<indexterm><primary>REGISTER USER statement</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>To register a user and assign a database username
different than the user's login name:</para>
<programlisting>REGISTER USER "jsmith@hp.com" AS jsmith;
</programlisting>
</listitem>
<listitem><para>To register a user without specifying a database username,
so the database username will be the same as the user's login name:</para>
<programlisting>REGISTER USER "jsmith@hp.com"; 
</programlisting>
</listitem>
<listitem condition="hidden"><para>To register a user, John Smith,
with the database name, JSMITH, and create a shared schema named PROJECTS,
which is owned by JSMITH:</para>
<programlisting>REGISTER USER "jsmith@hp.com" AS jsmith SHARED SCHEMA PROJECTS;</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1059131" pagebreak="yes">
<title>REVOKE Statement</title>
<itemizedlist>
<listitem><para><xref linkend="RevokePrivSyntax"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="RevokePrivConsid"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="RevokePrivExample"
role="select:quotedtitle"/></para></listitem>
</itemizedlist>
<indexterm><primary>REVOKE statement</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Privileges</primary>
<secondary>REVOKE statement use of</secondary></indexterm><indexterm>
<primary>Data Definition Language (DDL) statements</primary><secondary
>REVOKE</secondary></indexterm>
<para>The REVOKE statement revokes access privileges on an SQL <phrase
>object</phrase> from specified users or roles.<phrase
condition="hidden"> The statement can specify either the object name
or a synonym.</phrase></para>
<important>
<para>This statement works only when authentication and authorization
are enabled in Trafodion. For more information, see <ulink
url="https://wiki.trafodion.org/wiki/index.php/Enabling_Security_Features_in_Trafodion"
>Enabling Security Features</ulink> in the Trafodion wiki.</para>
</important>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>REVOKE [GRANT OPTION FOR]
   {<replaceable>privilege</replaceable> [,<replaceable>privilege</replaceable
>]...| ALL [PRIVILEGES]} 
   ON [<replaceable>object-type</replaceable>] [<replaceable>schema</replaceable
>.]<replaceable>object</replaceable>
   FROM {<replaceable>grantee</replaceable> [,<replaceable>grantee</replaceable
>]...}
   [[GRANTED] BY <replaceable>grantor</replaceable>]
   [RESTRICT | CASCADE]
 
<replaceable>privilege</replaceable> is:
   SELECT <literal condition="hidden">[(<replaceable>column</replaceable
> [,<replaceable>column</replaceable>]...)]</literal>
 | DELETE  
 | INSERT <literal condition="hidden"> [(<replaceable>column</replaceable
> [,<replaceable>column</replaceable>]...)]</literal>
 | REFERENCES <literal condition="hidden">[(<replaceable>column</replaceable
> [,<replaceable>column</replaceable>]...)]</literal>
 | UPDATE <literal condition="hidden">[(<replaceable>column</replaceable
> [,<replaceable>column</replaceable>]...)]</literal>
<literal> | EXECUTE 
</literal><literal> | USAGE
</literal>
<literal><replaceable>object-type</replaceable> is:
   TABLE
 | PROCEDURE
 | LIBRARY
 | FUNCTION

</literal><replaceable>grantee</replaceable> is:
     <replaceable>auth-name</replaceable>

<replaceable>grantor</replaceable> is:
     <replaceable>role-name</replaceable></programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="RevokePrivSyntax">
<title>Syntax Description of REVOKE</title>
<variablelist>
<varlistentry><term>GRANT OPTION FOR</term>
<listitem><para>specifies that the grantee’s authority to grant the
specified privileges to other users or roles (that is, WITH GRANT
OPTION) be revoked. This is an optional clause. When this clause is
specified, only the ability to grant the privilege to another user
is revoked.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>privilege</replaceable> [, <replaceable
>privilege</replaceable> ] ... | ALL [ PRIVILEGES ]</term>
<listitem><para>specifies the privileges to revoke. You can specify
these privileges for <phrase>an object</phrase>:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL1  desc list">
<colspec colwidth="0.35*"/>
<colspec colwidth="1.65*"/>
<tbody>
<row><entry>SELECT</entry><entry>Revokes the ability to use the SELECT
statement.</entry></row>
<row><entry>DELETE</entry><entry>Revokes the ability to use the DELETE
statement.</entry></row>
<row><entry>INSERT</entry><entry>Revokes the ability to use the INSERT
statement.</entry></row>
<row><entry>REFERENCES</entry><entry>Revokes the ability to create
constraints that reference the object.</entry></row>
<row><entry>UPDATE</entry><entry>Revokes the ability to use the UPDATE
statement.</entry></row>
<row><entry>EXECUTE</entry><entry>Revokes the ability to execute a
stored procedure using a CALL statement or revokes the ability to
execute a user-defined function (UDF).</entry></row>
<row><entry>USAGE</entry><entry>Revokes the ability to access a library
using the CREATE PROCEDURE or CREATE FUNCTION statement. Revokes read
access to the library’s underlying library file.</entry></row>
<row><entry>ALL </entry><entry>Revokes the ability to use all privileges
that apply to the object type. When you specify ALL for a table or
view, this includes the SELECT, DELETE, INSERT, REFERENCES, and UPDATE
privileges. <phrase>When the object is a stored procedure or user-defined
function (UDF), this includes the EXECUTE privilege. When the object
is a library, this includes the UPDATE and USAGE privileges.</phrase
></entry></row>
</tbody>
</tgroup>
</informaltable>
<variablelist>
<varlistentry condition="hidden"><term>(<replaceable>column</replaceable
> [,<replaceable>column</replaceable>] ... )</term>
<listitem><para>names the columns of the object on which the SELECT,
INSERT, UPDATE, or REFERENCES privilege applies. If you specify these
privileges without column names, the revoke applies to all columns
of the table or view. </para></listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term>ON [<replaceable>object-type</replaceable>]  [<replaceable
>schema</replaceable>.]<replaceable>object</replaceable></term>
<listitem><para>specifies an object on which to grant privileges. <replaceable
>object-type</replaceable> can be:</para>
<itemizedlist>
<listitem><para>[TABLE] [<replaceable>schema</replaceable>.]<replaceable
>object</replaceable>, where <replaceable>object</replaceable> is
a table or view. See <xref linkend="i1013018"
role="select:quotedtitle page"/>.</para></listitem>
<listitem><para>[PROCEDURE] [<replaceable>schema</replaceable>.]<replaceable
>procedure-name</replaceable>, where <replaceable>procedure-name</replaceable
> is the name of a stored procedure in Java (SPJ) registered in the
database. See <xref linkend="i1013018" role="select:quotedtitle page"
/>.</para></listitem>
<listitem><para>[LIBRARY] [<replaceable>schema</replaceable>.]<replaceable
>library-name</replaceable>, where <replaceable>library-name</replaceable
> is the name of a library object in the database. See <xref
linkend="i1013018" role="select:quotedtitle page"/>.</para></listitem>
<listitem><para>[FUNCTION] [<replaceable>schema</replaceable>.]<replaceable
>function-name</replaceable>, where <replaceable>function-name</replaceable
> is the name of a user-defined function in the database. See <xref
linkend="i1013018" role="select:quotedtitle page"/>.</para></listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry><term>FROM {<replaceable>grantee</replaceable> [,<replaceable
>grantee</replaceable>] ... }</term>
<listitem><para>specifies an <replaceable>auth-name</replaceable> from
which you revoke privileges.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>auth-name</replaceable></term>
<listitem><para>specifies the name of an authorization ID from which
you revoke privileges. See <xref linkend="AuthIDsElement"
role="select:quotedtitle page"/>. The authorization ID must be a registered
database username, existing role name, or PUBLIC. The name is a regular
or delimited case-insensitive identifier. See <xref
linkend="csDelimitedIdentifier" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
<varlistentry><term>[GRANTED] BY <replaceable>grantor</replaceable
></term>
<listitem><para>allows you to revoke privileges on behalf of a role.
If not specified, the privileges will be revoked on your behalf as
the current user/grantor.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>role-name</replaceable></term>
<listitem><para>specifies a role on whose behalf the GRANT operation
was performed. To revoke the privileges on behalf of a role, you must
be a member of the role, and the role must have the authority to revoke
the privileges; that is, the role must have been granted the privileges
WITH GRANT OPTION.</para></listitem>
</varlistentry>
<varlistentry><term>[RESTRICT | CASCADE]</term>
<listitem><para>If you specify RESTRICT, the REVOKE operation fails
if any privileges were granted or any objects were created based upon
the specified privileges.</para><para>If you specify CASCADE, any
such dependent privileges and objects are removed as part of the REVOKE
operation.</para>
<para>The default value is RESTRICT.</para>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="RevokePrivConsid">
<title>Considerations for REVOKE</title>
<indexterm><primary>REVOKE statement</primary><secondary>considerations
for</secondary></indexterm>
<section>
<title>Authorization and Availability Requirements</title>
<indexterm><primary>REVOKE statement</primary><secondary>authorization
and availability requirements</secondary></indexterm>
<para>You can revoke privileges for which you are the grantor, either
through a direct grant or a grant done on your behalf. If you are
revoking privileges that were granted on behalf of a role, you must
be a member of the role, and you must specify the role in the [GRANTED]
BY clause.</para>
<para>If one or more privileges have not been granted, SQL returns
a warning.</para>
<para>When you specify the CASCADE option, all objects that were created
based upon the privileges being revoked are removed.</para>
</section>
</section>
<section id="RevokePrivExample">
<title>Examples of REVOKE</title>
<indexterm><primary>REVOKE statement</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>To revoke the privilege to grant SELECT and DELETE
privileges on a table from a user: </para>
<programlisting>REVOKE GRANT OPTION FOR SELECT, DELETE ON TABLE invent.partloc
  FROM jsmith;
</programlisting>
</listitem>
<listitem><para>To revoke the privilege to grant SELECT and DELETE
privileges on a table from a user and a role: </para>
<programlisting>REVOKE GRANT OPTION FOR SELECT, DELETE ON TABLE invent.partloc
  FROM jsmith, clerks;
</programlisting>
</listitem>
<listitem condition="hidden"><para>To revoke UPDATE privileges on
two columns of a table from a role:</para>
<programlisting>REVOKE UPDATE (partnum, loc_code) ON TABLE invent.partloc
  FROM clerks CASCADE;
</programlisting>
</listitem>
<listitem><para>To revoke a user’s SELECT privileges on a table: </para>
<programlisting>-- User administrator grants the SELECT privilege to JSMITH:
GRANT SELECT ON TABLE invent.partloc TO jsmith
  WITH GRANT OPTION;
-- JSMITH grants the SELECT privilege to AJONES:
GRANT SELECT ON TABLE invent.partloc TO ajones;
-- If the user administrator attempts to revoke the SELECT
--   privilege from JSMITH, this would fail because
--   of the privilege granted to AJONES based on the
--   privilege granted to JSMITH.
-- To successfully revoke the SELECT privilege from
--   JSMITH, the SELECT privilege granted to AJONES 
--   must be revoked first. For this example:
-- 1. JSMITH revokes the SELECT privilege granted to AJONES:
REVOKE SELECT ON TABLE invent.partloc FROM ajones;
-- 2. User administrator revokes the SELECT privilege on the
--   table from JSMITH:
REVOKE SELECT ON TABLE invent.partloc FROM jsmith RESTRICT;
-- The REVOKE operation succeeds.
-- An easier way to make the REVOKE operation successful is
--   to use the CASCADE option:
REVOKE SELECT ON TABLE invent.partloc FROM jsmith CASCADE;
-- The REVOKE operation succeeds because the CASCADE option
-- causes all specified privileges, and all privileges that
-- were granted based upon the specified privileges, to be
-- removed.</programlisting>
</listitem>
<listitem><para>Administration in the shipping department decides
that the CLERKS role should no longer be able to grant privileges
on the <literal>invent.partloc</literal> table. Fred has recently
moved to another department, so JSMITH revokes the SELECT privilege
on the <literal>invent.partloc</literal> table from Fred, who was
granted the privilege by CLERKS. Then, JSMITH revokes the grant option
from CLERKS:</para>
<programlisting>REVOKE SELECT on table invent.partloc FROM fred
GRANTED BY clerks;

REVOKE GRANT OPTION FOR SELECT ON TABLE invent.partloc FROM 
clerks;</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="RevokeCompPrivs_stmt" pagebreak="yes">
<title>REVOKE COMPONENT PRIVILEGE Statement</title>
<itemizedlist>
<listitem><para><xref linkend="RevokeCompPriv_syntax"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="RevokeCompPriv_consids"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="RevokeCompPriv_xmp"
role="select:quotedtitle"/></para></listitem>
</itemizedlist>
<indexterm><primary>Component privilege statements</primary><secondary
>REVOKE COMPONENT PRIVILEGE</secondary></indexterm><indexterm><primary
>REVOKE COMPONENT PRIVILEGE statement</primary></indexterm><indexterm>
<primary>Privileges</primary><secondary>REVOKE COMPONENT PRIVILEGE
statement use of</secondary></indexterm><indexterm><primary>Data Definition
Language (DDL) statements</primary><secondary>REVOKE COMPONENT PRIVILEGE</secondary>
</indexterm><indexterm><primary>REVOKE COMPONENT PRIVILEGE statement</primary>
<secondary>syntax diagram of</secondary></indexterm>
<para>The REVOKE COMPONENT PRIVILEGE statement removes one or more
component privileges from a user or role. See <xref linkend="i1040985"
role="select:quotedtitle page"/> and <xref linkend="RolesElement"
role="select:quotedtitle page"/>.</para>
<para>REVOKE COMPONENT PRIVILEGE is a Trafodion SQL extension.</para>
<important>
<para>This statement works only when authentication and authorization
are enabled in Trafodion. For more information, see <ulink
url="https://wiki.trafodion.org/wiki/index.php/Enabling_Security_Features_in_Trafodion"
>Enabling Security Features</ulink> in the Trafodion wiki.</para>
</important>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" colsep="1" rowsep="1">
<colspec colname="col4"/>
<tbody>
<row><entry><programlisting>REVOKE [GRANT OPTION FOR] 
  COMPONENT PRIVILEGE {<replaceable>privilege-name</replaceable>[, <replaceable
>privilege-name</replaceable>]...}
  ON <replaceable>component-name</replaceable>
  FROM <replaceable>grantee</replaceable>
  [[GRANTED] BY <replaceable>grantor</replaceable>]

<replaceable>grantee</replaceable> is:
     <replaceable>auth-name</replaceable>

<replaceable>grantor </replaceable>is:
     <replaceable>role-name</replaceable>
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="RevokeCompPriv_syntax">
<title>Syntax Description of REVOKE COMPONENT PRIVILEGE</title>
<variablelist>
<varlistentry><term>GRANT OPTION FOR</term>
<listitem><para>specifies that the grantee’s authority to grant the
specified component privileges to other users or roles (that is, WITH
GRANT OPTION) be revoked. This is an optional clause. When this clause
is specified, only the ability to grant the component privilege to
another user is revoked.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>privilege-name</replaceable></term>
<listitem><para>specifies one or more component privileges to revoke.
The comma-separated list can include only privileges within the same
component.</para></listitem>
</varlistentry>
<varlistentry><term>ON <replaceable>component-name</replaceable></term>
<listitem><para>specifies a valid component name on which to revoke
component privileges. Currently, the only valid component name is
SQL_OPERATIONS.</para></listitem>
</varlistentry>
<varlistentry><term>FROM <replaceable>grantee</replaceable></term>
<listitem><para>specifies an <replaceable>auth-name</replaceable> from
which you revoke the component privileges.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>auth-name</replaceable></term>
<listitem><para>specifies the name of an authorization ID from which
you revoke privileges. See <xref linkend="AuthIDsElement"
role="select:quotedtitle page"/>. The authorization ID must be a registered
database username, existing role name, or PUBLIC. The name is a regular
or delimited case-insensitive identifier. See <xref
linkend="csDelimitedIdentifier" role="select:quotedtitle page"/>. </para>
</listitem>
</varlistentry>
<varlistentry><term>[ GRANTED ] BY <replaceable>grantor</replaceable
></term>
<listitem><para>allows you to revoke component privileges on behalf
of a role. If not specified, the component privileges will be revoked
on your behalf as the current user/grantor.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>role-name</replaceable></term>
<listitem><para>specifies a role on whose behalf the GRANT COMPONENT
PRIVILEGE operation was performed. To revoke the privileges on behalf
of a role, you must be a member of the role, and the role must have
the authority to revoke the privileges; that is, the role must have
been granted the privileges WITH GRANT OPTION.</para></listitem>
</varlistentry>
</variablelist>
</section>
<section id="RevokeCompPriv_consids">
<title>Considerations for REVOKE COMPONENT PRIVILEGE</title>
<indexterm><primary>REVOKE COMPONENT PRIVILEGE statement</primary>
<secondary>considerations for</secondary></indexterm>
<itemizedlist>
<listitem><para>At revoke time, all privileges granted WITH GRANT
OPTION are removed. That is, the revoke behavior is CASCADE.</para>
</listitem>
<listitem><para>If none of the component privileges has been granted,
SQL returns an error.</para></listitem>
<listitem><para>If one or more component privileges have not been
granted, SQL silently ignores those privileges and proceeds with the
revoke operation.</para></listitem>
<listitem><para>Component privileges must be revoked before a role
can be dropped or a user unregistered. If any privileges have been
granted to a role or user, an error is returned when that role is
dropped or the user unregistered. For more information, see the <xref
linkend="DropRole" role="select:quotedtitle page"/> and the <xref
linkend="UnregisterUser" role="select:quotedtitle page"/>.</para>
</listitem>
</itemizedlist>
<section>
<title>Authorization and Availability Requirements</title>
<indexterm><primary>REVOKE COMPONENT PRIVILEGE statement</primary>
<secondary>authorization and availability requirements</secondary>
</indexterm>
<para>You can revoke component privileges for which you are the grantor,
either through a direct grant or a grant done on your behalf. If you
are revoking privileges that were granted on behalf of a role, you
must be a member of the role, and you must specify the role in the
[GRANTED] BY clause.</para>
</section>
</section>
<section id="RevokeCompPriv_xmp">
<title>Example of REVOKE COMPONENT PRIVILEGE</title>
<indexterm><primary>REVOKE COMPONENT PRIVILEGE statement</primary>
<secondary>example of</secondary></indexterm>
<para>Revoke a component privilege from SQLUSER1:</para>
<programlisting>REVOKE COMPONENT PRIVILEGE CREATE_TABLE ON 
SQL_OPERATIONS FROM sqluser1;</programlisting>
</section>
</section>
<section id="RevokeRole" pagebreak="yes">
<title>REVOKE ROLE Statement</title>
<itemizedlist>
<listitem><para><xref linkend="RevokeRoleSyntax"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="RevokeRoleConsid"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="RevokeRoleExample"
role="select:quotedtitle"/></para></listitem>
</itemizedlist>
<indexterm><primary>REVOKE ROLE statement</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>Roles</primary>
<secondary>REVOKE ROLE statement use of</secondary></indexterm>
<indexterm><primary>Privileges</primary><secondary>REVOKE ROLE statement
use of</secondary></indexterm><indexterm><primary>Data Definition
Language (DDL) statements</primary><secondary>REVOKE ROLE</secondary>
</indexterm>
<para>The REVOKE ROLE statement removes one or more roles from a user.
See <xref linkend="RolesElement" role="select:quotedtitle page"/>. </para>
<important>
<para>This statement works only when authentication and authorization
are enabled in Trafodion. For more information, see <ulink
url="https://wiki.trafodion.org/wiki/index.php/Enabling_Security_Features_in_Trafodion"
>Enabling Security Features</ulink> in the Trafodion wiki.</para>
</important>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>REVOKE ROLE {<replaceable>role-name</replaceable
> [,<replaceable>role-name</replaceable>]...}
  FROM <replaceable>grantee</replaceable>
    [RESTRICT <computeroutput>| CASCADE</computeroutput>]    
    
<replaceable>grantee</replaceable> is:
     <replaceable>database-username</replaceable>
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="RevokeRoleSyntax">
<title>Syntax Description of REVOKE ROLE</title>
<variablelist>
<varlistentry><term><replaceable>role-name</replaceable> [, <replaceable
>role-name</replaceable> ] ...</term>
<listitem><para>specifies the valid roles to revoke. </para></listitem>
</varlistentry>
<varlistentry><term>FROM <replaceable>grantee</replaceable></term>
<listitem><para>specifies the registered database username from whom
you revoke the roles.</para></listitem>
</varlistentry>
<varlistentry><term>[ RESTRICT | CASCADE ]</term>
<listitem><para>If you specify RESTRICT, the REVOKE ROLE operation
fails if any privileges were granted to the role or any objects were
created based upon those privileges.</para><para>If you specify CASCADE,
any dependent privileges are removed as part of the REVOKE ROLE operation.</para>
<para>The default value is RESTRICT.</para>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="RevokeRoleConsid">
<title>Considerations for REVOKE ROLE</title>
<indexterm><primary>REVOKE ROLE statement</primary><secondary>considerations
for</secondary></indexterm>
<itemizedlist>
<listitem><para>To revoke roles from users, you must own the roles
or have user administrative privileges for the roles. You have user
administrative privileges for roles if have been granted the MANAGE_ROLES
component privilege. Initially, DB__ROOT is the only database user
who has been granted the MANAGE_ROLES component privilege.</para>
</listitem>
<listitem><para>If RESTRICT (or nothing) is specified and if you want
to revoke a role from a user that has created objects based solely
on role privileges, you must drop the objects before revoking the
role. However, if you specify CASCADE, the dependent objects are automatically
dropped, and the role is revoked.</para></listitem>
<listitem><para>All of the specified roles must have been granted
to the specified user. If any role has not been granted to the user,
the operation returns an error, and no roles are revoked.</para>
</listitem>
<listitem><para><phrase>In Trafodion Release 0.9, </phrase>when you
revoke a role from a user that has active sessions, you will need
to disconnect the active sessions and reconnect for the reduction
in privileges to take full effect. <phrase>Starting in Trafodion Release
1.0, when you revoke a role from a user, the reduction in privileges
is automatically propagated to and detected by active sessions. There
is no need for users to disconnect from and reconnect to a session
to see the updated set of privileges. </phrase></para></listitem>
<listitem><para>If the REVOKE ROLE names multiple roles and any errors
occur in processing, no revokes are performed.</para></listitem>
</itemizedlist>
</section>
<section id="RevokeRoleExample">
<title>Examples of REVOKE ROLE</title>
<indexterm><primary>REVOKE ROLE statement</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>To revoke multiple roles from a user:</para>
<programlisting>REVOKE ROLE clerks, sales FROM jsmith;
</programlisting>
</listitem>
<listitem><para>To revoke a role with dependent objects from a user:</para>
<programlisting>-- CMILLER grants a role to AJONES:
GRANT ROLE sales TO ajones;
-- CMILLER grants a privilege to the role:
GRANT SELECT ON TABLE invent.partloc TO sales;
-- AJONES creates a view based upon the privilege granted
--   to the role granted to him:
CREATE VIEW invent.partlocview (partnum, loc_code)
    AS SELECT partnum, loc_code FROM invent.partloc;
-- If CMILLER attempts to revoke the role from AJONES,
--   this would fail because of the view created based
--   upon the privilege granted to the role granted to
--   AJONES.
-- CMILLER revokes the role from AJONES with the CASCADE 
   option:
REVOKE ROLE sales from AJONES CASCADE;
-- The REVOKE ROLE operation succeeds, and all dependent 
   object privileges are revoked.</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1008837" pagebreak="yes">
<title>ROLLBACK WORK Statement</title>
<itemizedlist>
<listitem><para><xref linkend="syndesRollback" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1008873" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1008877" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>ROLLBACK WORK statement</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>Transaction
control statements</primary><secondary>ROLLBACK WORK</secondary>
</indexterm><indexterm><primary>Transaction management</primary>
<secondary>ROLLBACK WORK</secondary></indexterm>
<para>The ROLLBACK WORK statement undoes all database modifications
to objects made during the current transaction<phrase condition="hidden"
>, releases all locks on objects held by the transaction,</phrase
> and ends the transaction. See <xref linkend="i1009606"
role="select:quotedtitle page"/>. </para>
<section id="syndesRollback">
<title>Syntax Description of ROLLBACK WORK</title>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>ROLLBACK [WORK] 
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<para>WORK is an optional keyword that has no effect.</para>
<para>ROLLBACK WORK issued outside of an active transaction generates
error 8609.</para>
</section>
<section id="i1008873">
<title>Considerations for ROLLBACK WORK</title>
<indexterm><primary>ROLLBACK WORK statement</primary><secondary>considerations
for</secondary></indexterm>
<section>
<title>Begin and End a Transaction</title>
<para>BEGIN WORK starts a transaction. COMMIT WORK or ROLLBACK WORK
ends a transaction. </para>
</section>
</section>
<section id="i1008877">
<title>Example of ROLLBACK WORK</title>
<indexterm><primary>ROLLBACK WORK statement</primary><secondary>example
of</secondary></indexterm>
<para>Suppose that you add an order for two parts numbered 4130 to
the ORDERS and ODETAIL tables. When you update the PARTLOC table to
decrement the quantity available, you discover no such part number
exists in the given location.</para>
<para>Use ROLLBACK WORK to terminate the transaction without committing
the database changes:</para>
<programlisting>BEGIN WORK;

INSERT INTO sales.orders 
  VALUES (124, DATE '2007-04-10',
          DATE '2007-06-10', 75, 7654);

INSERT INTO sales.odetail
  VALUES (124, 4130, 25000, 2);

UPDATE invent.partloc 
  SET qty_on_hand = qty_on_hand - 2 
  WHERE partnum = 4130 AND loc_code = 'K43';

ROLLBACK WORK; 
</programlisting>
<para>ROLLBACK WORK cancels the insert and update that occurred during
the transaction<phrase condition="hidden"> and releases the locks
held on ORDERS, ODETAIL, and PARTLOC</phrase>.</para>
</section>
</section>
<section id="i1008894" pagebreak="yes">
<title>SELECT Statement</title>
<itemizedlist>
<listitem><para><xref linkend="i1062697" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1009326" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1059247" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1009451" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1009460" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1009472" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1009541" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>Data Manipulation Language (DML) statements</primary>
<secondary>SELECT</secondary></indexterm><indexterm><primary>SELECT
statement</primary><secondary>syntax diagram of</secondary></indexterm>
<para>The SELECT statement is a DML statement that retrieves values
from tables, views, and derived tables determined by the evaluation
of query expressions, or joined tables. </para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="4" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" nameend="col4" namest="col1"><programlisting
><replaceable>sql-query</replaceable> is:
      <replaceable>query-specification</replaceable>
    | <replaceable>query-expr-and-order</replaceable>

<replaceable>query-specification is:</replaceable>
SELECT [ "[" ANY <replaceable>N</replaceable> "]" | "[" FIRST <replaceable
>N</replaceable> "]" ] [ALL | DISTINCT] <replaceable>select-list</replaceable
>
   FROM <replaceable>table-ref</replaceable> [,<replaceable>table-ref</replaceable
>]...
   [WHERE <replaceable>search-condition</replaceable>] 
   [SAMPLE <replaceable>sampling-method</replaceable>] 
   [TRANSPOSE <replaceable>transpose-set</replaceable> [<replaceable
>transpose-set</replaceable>]...
      [KEY BY <replaceable>key-colname</replaceable>]]...
   [SEQUENCE BY <replaceable>colname</replaceable> [ASC[ENDING] | DESC[ENDING]] 
      [,<replaceable>colname</replaceable> [ASC[ENDING] | DESC[ENDING]]]...] 
   [GROUP BY {<replaceable>colname</replaceable> | <replaceable>colnum</replaceable
>} [,{<replaceable>colname</replaceable> | <replaceable>colnum</replaceable
>}]...]
   [HAVING <replaceable>search-condition</replaceable>] 
   [<replaceable>access-clause</replaceable> ]
   [<replaceable>mode-clause</replaceable>]

<replaceable>query-expr-and-order</replaceable> is:
   <replaceable>query-expr</replaceable> [<replaceable>order-by-clause</replaceable
>] [<replaceable>access-clause</replaceable>] [<replaceable>mode-clause</replaceable
>]

<replaceable>query-expr</replaceable> is:
     <replaceable>query-primary</replaceable>   
   | <replaceable>query-expr</replaceable> UNION [ALL] <replaceable
>query-primary</replaceable>

<replaceable>query-primary</replaceable> is:
   <replaceable>simple-table</replaceable> | (<replaceable>query-expr</replaceable
>)

<replaceable>simple-table</replaceable> is:
     VALUES (<replaceable>row-value-const</replaceable>) [,(<replaceable
>row-value-const</replaceable>)]...
   | TABLE <replaceable>table</replaceable>
   | <replaceable>query-specification</replaceable>

<replaceable>row-value-const</replaceable> is:
     <replaceable>row-subquery</replaceable>
   | {<replaceable>expression</replaceable> | NULL} [,{<replaceable
>expression</replaceable> | NULL}]...
</programlisting><programlisting><replaceable>order-by-clause</replaceable
> is:
   [ORDER BY {<replaceable>colname</replaceable> | <replaceable>colnum</replaceable
>} [ASC[ENDING] | DESC[ENDING]] 
      [,{<replaceable>colname</replaceable> | <replaceable>colnum</replaceable
>} [ASC[ENDING] | DESC[ENDING]]]...]
   [<replaceable>access-clause</replaceable>]
<literal condition="hidden">   [<replaceable>mode-clause</replaceable
>]
</literal>
<replaceable>access clause</replaceable> is:
   [FOR] <replaceable>access-option</replaceable> ACCESS

</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<informaltable colsep="0" frame="all" pagebreak="yes" rowsep="0">
<tgroup cols="4" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" nameend="col4" namest="col1"><programlisting
><replaceable>access-option</replaceable> is:
     READ COMMITTED<literal condition="hidden">
   | READ UNCOMMITTED
   | SERIALIZABLE
   | REPEATABLE READ
   | SKIP CONFLICT
</literal>
<literal condition="hidden"><replaceable>mode-clause </replaceable
>is:
   IN {SHARE | EXCLUSIVE} MODE
</literal>
[LIMIT <replaceable>num</replaceable>]

<replaceable>select-list</replaceable> is:
   * | <replaceable>select-sublist</replaceable> [,<replaceable>select-sublist</replaceable
>]...
 
<replaceable>select-sublist</replaceable> is:
     <replaceable>corr.*</replaceable> | [<replaceable>corr</replaceable
>.]<replaceable>single-col</replaceable> [[AS]<replaceable>name</replaceable
>] | <replaceable>col-expr</replaceable> [[AS] <replaceable>name</replaceable
>]
         
<replaceable>table-ref</replaceable> is:
     <replaceable>table</replaceable> [[AS] <replaceable>corr</replaceable
> [(<replaceable>col-expr-list</replaceable>)]]
<literal condition="hidden">   | STREAM (<replaceable>table</replaceable
>) [[AS] <replaceable>corr</replaceable> [(<replaceable>col-expr-list</replaceable
>)]] [AFTER LAST ROW]
</literal>   | <replaceable>view</replaceable>  [[AS] <replaceable
>corr</replaceable> [(<replaceable>col-expr-list</replaceable>)]]
<literal condition="hidden">   | STREAM (<replaceable>view</replaceable
>) [[AS]] <replaceable>corr</replaceable> [(<replaceable>col-expr-list</replaceable
>)]] [AFTER LAST ROW]
</literal>   | (<replaceable>query-expr</replaceable>) [AS] <replaceable
>corr</replaceable> [(<replaceable>col-expr-list</replaceable>)]
   | (<replaceable>delete-statement</replaceable> [RETURN <replaceable
>select-list</replaceable>])
        [AS] <replaceable>corr</replaceable> [(<replaceable>col-expr-list</replaceable
>)]
   | (<replaceable>update-statement</replaceable> [RETURN <replaceable
>select-list</replaceable>])
        [AS] <replaceable>corr</replaceable> [(<replaceable>col-expr-list</replaceable
>)]
   | (<replaceable>insert-statement</replaceable>) [AS] <replaceable
>corr</replaceable> [(<replaceable>col-expr-list</replaceable>)]
   | <replaceable>joined-table</replaceable>  
        
<replaceable>joined-table</replaceable> is:
     <replaceable>table-ref</replaceable> [<replaceable>join-type</replaceable
>] JOIN <replaceable>table-ref</replaceable> <replaceable>join-spec</replaceable
>
   | <replaceable>table-ref</replaceable> NATURAL [<replaceable>join-type</replaceable
>] JOIN <replaceable>table-ref</replaceable> 
   | <replaceable>table-ref</replaceable> CROSS JOIN <replaceable
>table-ref</replaceable>
   | (<replaceable>joined-table</replaceable>)

<replaceable>join-type</replaceable> is:
   INNER | LEFT [OUTER] | RIGHT [OUTER] | FULL [OUTER]

<replaceable>join-spec</replaceable> is:
   ON <replaceable>search-condition</replaceable>

<replaceable>sampling-method</replaceable> is:
     RANDOM <replaceable>percent-size</replaceable>
   | FIRST <replaceable>rows-size</replaceable> 
           [SORT BY <replaceable>colname</replaceable> [ASC[ENDING] | DESC[ENDING]]
             [,<replaceable>colname</replaceable> [ASC[ENDING] | DESC[ENDING]]...] 
   | PERIODIC <replaceable>rows-size</replaceable> EVERY <replaceable
>number-rows</replaceable> ROWS
           [SORT BY <replaceable>colname</replaceable> [ASC[ENDING] | DESC[ENDING]]
             [,<replaceable>colname</replaceable> [ASC[ENDING] | DESC[ENDING]]...]  
</programlisting><programlisting><replaceable>percent-size</replaceable
> is:
     <replaceable>percent-result</replaceable> PERCENT [ROWS<literal
condition="hidden">
    | {CLUSTERS OF <replaceable>number-blocks</replaceable> BLOCKS}</literal
>]
    | BALANCE WHEN <replaceable>condition</replaceable>
              THEN <replaceable>percent-result</replaceable> PERCENT [ROWS]
             [WHEN <replaceable>condition</replaceable> THEN <replaceable
>percent-result</replaceable> PERCENT [ROWS]]...
             [ELSE <replaceable>percent-result</replaceable> PERCENT [ROWS]] END 

<replaceable>rows-size</replaceable> is:
     <replaceable>number-rows</replaceable> ROWS
   | BALANCE WHEN <replaceable>condition</replaceable> THEN <replaceable
>number-rows</replaceable> ROWS
             [WHEN <replaceable>condition</replaceable> THEN <replaceable
>number-rows</replaceable> ROWS]...
             [ELSE <replaceable>number-rows</replaceable> ROWS] END

<replaceable>transpose-set</replaceable> is:
   <replaceable>transpose-item-list</replaceable> AS <replaceable
>transpose-col-list</replaceable>

<replaceable>transpose-item-list</replaceable> is:
   <replaceable>expression-list</replaceable> | (<replaceable>expression-list</replaceable
>) [,(<replaceable>expression-list</replaceable>)]...
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<informaltable colsep="0" frame="all" pagebreak="yes" rowsep="0">
<tgroup cols="4" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" nameend="col4" namest="col1"><programlisting
><replaceable>expression-list</replaceable> is:
   <replaceable>expression</replaceable> [,<replaceable>expression</replaceable
>]...

<replaceable>transpose-col-list</replaceable> is:
   <replaceable>colname</replaceable> | (<replaceable>colname-list</replaceable
>)

<replaceable>colname-list</replaceable> is:
   <replaceable>colname</replaceable> [,<replaceable>colname</replaceable
>]...
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="i1062697">
<title>Syntax Description of SELECT</title>
<variablelist>
<varlistentry><term>"[" ANY <replaceable>N</replaceable> "]" | "["
FIRST <replaceable>N</replaceable> "]"</term>
<listitem><para>specifies that <replaceable>N</replaceable> rows are
to be returned (assuming the table has at least <replaceable>N</replaceable
> rows and that the qualification criteria specified in the WHERE
clause, if any, would select at least <replaceable>N</replaceable
> rows) and you do not care which <replaceable>N</replaceable> rows
are chosen (out of the qualified rows) to actually be returned.</para>
<para><emphasis>You must enclose <literal>ANY <replaceable>N</replaceable
></literal> or <literal>FIRST <replaceable>N</replaceable></literal
> in square brackets (<literal>[]</literal>).</emphasis> The quotation
marks (<literal>""</literal>) around each square bracket in the syntax
diagram indicate that the bracket is a required character that you
must type as shown (for example, <literal>[ANY 10]</literal> or <literal
>[FIRST 5]</literal>). Do not include quotation marks in ANY or FIRST
clauses.</para>
<para><literal>[FIRST </literal><replaceable>N</replaceable><literal
>]</literal> is different from <literal>[ANY </literal><replaceable
>N</replaceable><literal>]</literal> only if you use ORDER BY on any
of the columns in the select list to sort the result table of the
SELECT statement. <replaceable>N</replaceable> is an unsigned numeric
literal with no scale. If <replaceable>N</replaceable> is greater
than the number of rows in the table, all rows are returned. <literal
>[ANY </literal><replaceable>N</replaceable><literal>]</literal> and <literal
>[FIRST </literal><replaceable>N</replaceable><literal>]</literal
> are disallowed in nested SELECT statements and on either side of
a UNION operation.</para>
</listitem>
</varlistentry>
<varlistentry><term>ALL | DISTINCT</term>
<listitem><indexterm><primary>SELECT statement</primary><secondary
>DISTINCT clause </secondary></indexterm><para>specifies whether to
retrieve all rows whose columns are specified by the <replaceable
>select‑list</replaceable> (ALL) or only rows that are not duplicates
(DISTINCT). Nulls are considered equal for the purpose of removing
duplicates. The default is ALL.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>select-list</replaceable> </term>
<listitem><indexterm><primary>SELECT statement</primary><secondary
>select list elements</secondary></indexterm><para>specifies the columns
or column expressions to select from the table references in the FROM
clause.</para>
<variablelist>
<varlistentry><term>*</term>
<listitem><para>specifies all columns in a table, view, joined table,
or derived table determined by the evaluation of a query expression,
as specified in the FROM clause. </para></listitem>
</varlistentry>
<varlistentry><term><replaceable>corr</replaceable>.*</term>
<listitem><para>specifies all columns of specific table references
by using the correlation name <replaceable>corr</replaceable> of the
table references, as specified in the FROM clause. See <xref
linkend="i1042502" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>corr</replaceable>.<replaceable>single-col</replaceable
> [[AS] <replaceable>name</replaceable>]</term>
<listitem><para>specifies one column of specific table references
by using the correlation name of the table reference, as specified
in the FROM clause. See <xref linkend="i1042502"
role="select:quotedtitle page"/>. By using the AS clause, you can
associate the column with a <replaceable>name</replaceable>. <replaceable
>name</replaceable> is an SQL identifier. See <xref linkend="i1032512"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>single-col</replaceable> [[AS] <replaceable
>name</replaceable>]</term>
<listitem><para>specifies a column. By using the AS clause, you can
associate the column with a <replaceable>name</replaceable>. <replaceable
>name</replaceable> is an SQL identifier. See <xref linkend="i1032512"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>col-expr</replaceable> [[AS] <replaceable
>name</replaceable>]</term>
<listitem><para>specifies a derived column determined by the evaluation
of an SQL value expression in the list. By using the AS clause, you
can associate a derived column, <replaceable>col‑expr</replaceable
>, with a <replaceable>name</replaceable>. <replaceable>name</replaceable
> is an SQL identifier. See <xref linkend="i1032512"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<para>See the discussion of limitations in <xref linkend="i1059247"
role="select:quotedtitle page"/>. </para>
</listitem>
</varlistentry>
<varlistentry><term>FROM <replaceable>table-ref</replaceable> [,<replaceable
>table-ref</replaceable>]...</term>
<listitem><indexterm><primary>SELECT statement</primary><secondary
>FROM clause </secondary></indexterm><indexterm><primary>Table reference</primary>
<secondary>SELECT statement use of</secondary></indexterm><para>specifies
a list of tables, views, derived tables, or joined tables that determine
the contents of an intermediate result table from which Trafodion
SQL returns the columns you specify in <replaceable>select-list</replaceable
>. </para><para>If you specify only one <replaceable>table-ref</replaceable
>, the intermediate result table consists of rows derived from that
table reference. If you specify more than one <replaceable>table-ref</replaceable
>, the intermediate result table is the cross-product of result tables
derived from the individual table references.</para>
<variablelist>
<varlistentry><term> <replaceable>table</replaceable> [[AS] <replaceable
>corr</replaceable> [(<replaceable>col-expr-list</replaceable>)]]
| <phrase condition="hidden">STREAM (<replaceable> table</replaceable
>) [[AS] <replaceable>corr</replaceable> [(<replaceable>col-expr-list</replaceable
>)]]   [AFTER LAST ROW] | </phrase><replaceable>view</replaceable
>  [[AS] <replaceable>corr</replaceable> [(<replaceable>col-expr-list</replaceable
>)]] | <phrase condition="hidden">STREAM (<replaceable>view</replaceable
>) [[AS] <replaceable>corr</replaceable> [(<replaceable>col-expr-list</replaceable
>)]]  [AFTER LAST ROW] | </phrase>(<replaceable>query-expr</replaceable
>) [AS] <replaceable>corr</replaceable> [(<replaceable>col-expr-list</replaceable
>)] | (<replaceable>delete-statement</replaceable> [RETURN <replaceable
>select-list</replaceable>]) [AS] <replaceable>corr</replaceable> [(<replaceable
>col-expr-list</replaceable>)] | (<replaceable>update-statement</replaceable
> [RETURN <replaceable>select-list</replaceable>])  [AS] <replaceable
>corr</replaceable> [(<replaceable>col-expr-list</replaceable>)] |
(<replaceable>insert-statement</replaceable>) [AS] <replaceable>corr</replaceable
> [(<replaceable>col-expr-list</replaceable>)] | <replaceable>joined-table</replaceable
></term>
<listitem><indexterm><primary>Table reference</primary><secondary
>description of</secondary></indexterm><para>specifies a <replaceable
>table-ref</replaceable> as a single table, view, derived table determined
by the evaluation of a query expression, or a joined table<phrase
condition="hidden">, or a streaming table</phrase>.</para><para>You
can specify this optional clause for a table or view. This clause
is required for a derived table:</para>
<variablelist>
<varlistentry><term>[AS] <replaceable>corr</replaceable> [(<replaceable
>col-expr-list)</replaceable>] </term>
<listitem><para>specifies a correlation name, <replaceable>corr</replaceable
>, for the preceding table reference <replaceable>table-ref</replaceable
> in the FROM clause. See <xref linkend="i1042502"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>col-expr</replaceable> [[AS] <replaceable
>name</replaceable>] [,<replaceable>col-expr</replaceable> [[AS] <replaceable
>name</replaceable>]]...</term>
<listitem><para>specifies the items in<replaceable> col-expr-list</replaceable
>, a list of derived columns. By using the AS clause, you can associate
a derived column, <replaceable>col‑expr</replaceable>,  with a <replaceable
>name</replaceable>. <replaceable>name</replaceable> is an SQL identifier.
See <xref linkend="i1032512" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
</variablelist>
<para><indexterm><primary>Query expression</primary><secondary>SELECT
statement use of</secondary></indexterm>For the specification of a
query expression, see the syntax diagram for <replaceable>query‑expr</replaceable
> above.</para>
</listitem>
</varlistentry>
<varlistentry condition="hidden"><term>STREAM (<replaceable>table</replaceable
>) [[AS] <replaceable>corr</replaceable> [(<replaceable> col-expr-list</replaceable
>)]]</term>
<listitem><indexterm><primary>SELECT statement</primary><secondary
>STREAM clause</secondary></indexterm><para>returns a continuous data
stream from a table. A cursor opened on a continuous data stream never
returns an end-of-data condition but blocks (waits) and resumes execution
when new rows become available.</para>
<variablelist>
<varlistentry><term>[[AS] <replaceable>corr</replaceable> [(<replaceable
> col-expr-list</replaceable>)]]</term>
<listitem><para>specifies an optional correlation name and an optional
column list for the preceding table reference in the FROM clause.</para>
</listitem>
</varlistentry>
<varlistentry><term>[AFTER LAST ROW]</term>
<listitem><indexterm><primary>AFTER LAST ROW clause</primary>
</indexterm><para>causes the stream to skip all existing rows in the
table and return only rows that are published after the stream’s cursor
is opened. </para></listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry condition="hidden"><term>STREAM (<replaceable>view</replaceable
>) [[AS] <replaceable>corr</replaceable> [(<replaceable> col-expr-list</replaceable
>)]]</term>
<listitem><para>returns a continuous data stream from a view.</para>
<variablelist>
<varlistentry><term>[AFTER LAST ROW]</term>
<listitem><para>causes the stream to skip all existing rows in the
view and return only rows that are published after the stream’s cursor
is opened. </para></listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term>(<replaceable>delete-statement</replaceable> [RETURN <replaceable
>select-list</replaceable>]) [AS] <replaceable>corr</replaceable> [(<replaceable
> col-expr-list</replaceable>)] </term>
<listitem><indexterm><primary>SELECT statement</primary><secondary
>embedded delete</secondary></indexterm><para>enables an application
to read and delete rows with a single operation. For the syntax of <replaceable
>delete-statement</replaceable>, see the <xref linkend="i1007032"
role="select:quotedtitle page"/>.</para>
<variablelist>
<varlistentry><term>RETURN <replaceable>select-list</replaceable> </term>
<listitem><indexterm><primary>SELECT statement</primary><secondary
>RETURN list</secondary></indexterm><para>specifies the columns or
column expressions returned from the deleted row. The items in the <replaceable
>select-list</replaceable> can be of these forms:</para>
<variablelist>
<varlistentry><term>[OLD.]* </term>
<listitem><para>specifies the row from the old table exposed by the
embedded delete. The old table refers to column values before the
delete operation. NEW is not allowed.</para><para>An implicit <literal
>OLD.*</literal> return list is assumed for a delete operation that
does not specify a return list.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>col-expr</replaceable> [[AS] <replaceable
>name</replaceable>]</term>
<listitem><para>specifies a derived column determined by the evaluation
of an SQL value expression in the list. Any column referred to in
a value expression is from the row in the old table exposed by the
delete. The old table refers to column values before the delete operation. </para>
<para>By using the AS clause, you can associate a derived column, <replaceable
>col‑expr</replaceable>, with a <replaceable>name</replaceable>. <replaceable
>name</replaceable> is an SQL identifier. See <xref linkend="i1032512"
role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term>[AS] <replaceable>corr</replaceable> [(<replaceable
>col-expr-list</replaceable>)]</term>
<listitem><para>specifies a correlation name, <replaceable>corr</replaceable
>, and an optional column list for the preceding items in the select
list <literal>RETURN <replaceable>select-list</replaceable></literal
>. See <xref linkend="i1042502" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term>(<replaceable>update-statement</replaceable> [RETURN <replaceable
>select-list</replaceable>]) [AS] <replaceable>corr</replaceable> [(<replaceable
>col-expr-list</replaceable>)] </term>
<listitem><indexterm><primary>SELECT statement</primary><secondary
>embedded update</secondary></indexterm><para>enables an application
to read and update rows with a single operation. For the syntax of <replaceable
>update-statement</replaceable>, see the <xref linkend="i1073628"
role="select:quotedtitle page"/>.</para>
<variablelist>
<varlistentry><term>RETURN <replaceable>select-list</replaceable> </term>
<listitem><para>specifies the columns or column expressions returned
from the updated row. The items in the <replaceable>select-list</replaceable
> can be of these forms: </para>
<variablelist>
<varlistentry><term>[OLD.| NEW.]* </term>
<listitem><para>specifies the row from the old or new table exposed
by the update. The old table refers to column values before the update
operation; the new table refers to column values after the update
operation. If a column has not been updated, the new value is equivalent
to the old value.</para><para>An implicit <literal>NEW.*</literal
> return list is assumed for an update operation that does not specify
a return list.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>col-expr</replaceable> [[AS] <replaceable
>name</replaceable>] </term>
<listitem><para>specifies a derived column determined by the evaluation
of an SQL value expression in the list. Any column referred to in
a value expression can be specified as being from the row in the old
table exposed by the update or can be specified as being from the
row in the new table exposed by the update. </para><para>For example: <literal
>RETURN old.empno,old.salary,new.salary, (new.salary - old.salary)</literal
>.</para>
<para>By using the AS clause, you can associate a derived column, <replaceable
>col‑expr</replaceable>, with a <replaceable>name</replaceable>. <replaceable
>name</replaceable> is an SQL identifier. See <xref linkend="i1032512"
role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term>[AS] <replaceable>corr</replaceable> [(<replaceable
>col-expr-list</replaceable>)]</term>
<listitem><para>specifies a correlation name, <replaceable>corr</replaceable
>, and an optional column list for the preceding items in the select
list <literal>RETURN <replaceable>select-list</replaceable></literal
>. See <xref linkend="i1042502" role="select:quotedtitle page"/>.</para>
<para>For example: </para>
<programlisting>RETURN old.empno,old.salary,new.salary, 
   (new.salary - old.salary) 
AS emp (empno, oldsalary, newsalary, increase). 
</programlisting>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term>(<replaceable>insert-statement</replaceable>)
[AS] <replaceable>corr</replaceable> [(<replaceable>col-expr-list</replaceable
>)]  </term>
<listitem><indexterm><primary>SELECT statement</primary><secondary
>embedded insert</secondary></indexterm><para>For the syntax of <replaceable
>insert-statement</replaceable>, see the <xref linkend="i1008135"
role="select:quotedtitle page"/>.</para>
<variablelist>
<varlistentry><term>[AS] <replaceable>corr</replaceable> [(<replaceable
>col-expr-list</replaceable>)]</term>
<listitem><indexterm><primary>SELECT statement</primary><secondary
>embedded update</secondary></indexterm><para>specifies a correlation
name, <replaceable>corr</replaceable>, and an optional column list.
See <xref linkend="i1042502" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>joined-table</replaceable> </term>
<listitem><para>A <replaceable>joined-table</replaceable> can be specified
as:<simplelist>
<member><literal><replaceable>table-ref</replaceable> [<replaceable
>join-type</replaceable>] JOIN <replaceable>table-ref</replaceable
> <replaceable>join-spec</replaceable>  </literal> </member>
<member>| <literal><replaceable>table-ref</replaceable> NATURAL [<replaceable
>join-type</replaceable>] JOIN <replaceable>table-ref</replaceable
></literal></member>
<member>| <literal><replaceable>table-ref</replaceable> CROSS JOIN <replaceable
>table-ref</replaceable></literal>   </member>
<member>| (<literal><replaceable>joined-table</replaceable></literal
>)</member>
</simplelist></para><para><literal><replaceable>join-type</replaceable
> is:    INNER | LEFT [OUTER] | RIGHT [OUTER] | FULL [OUTER] </literal
></para>
<simplelist>
<member><indexterm><primary>Join</primary><secondary>optional specifications</secondary>
</indexterm><indexterm><primary>Join</primary><secondary>types</secondary>
</indexterm><indexterm><primary>SELECT statement</primary><secondary
>joined table within</secondary></indexterm>is a joined table. You
specify the <replaceable>join-type</replaceable> by using the CROSS,
INNER, OUTER, LEFT, RIGHT, and FULL keywords. If you omit the optional
OUTER keyword and use LEFT, RIGHT, or FULL in a join, Trafodion SQL
assumes the join is an outer join.</member>
<member>If you specify a CROSS join as the <replaceable>join-type</replaceable
>, you cannot specify a NATURAL join or a <replaceable>join-spec</replaceable
>.</member>
<member>If you specify an INNER, LEFT, RIGHT, or FULL join as the <replaceable
>join-type</replaceable> and you do not specify a NATURAL join, you
must use an ON clause as the <replaceable>join-spec</replaceable>,
as follows:</member>
<member>Subqueries are not allowed in the join predicate of FULL OUTER
JOIN.</member>
</simplelist>
<variablelist>
<varlistentry><term>ON <replaceable>search-condition</replaceable
> </term>
<listitem><para>specifies a <replaceable>search-condition</replaceable
> for the join. Each column reference in <replaceable>search-condition</replaceable
> must be a column that exists in either of the two result tables
derived from the table references to the left and right of the JOIN
keyword. A join of two rows in the result tables occurs if the condition
is satisfied for those rows.</para></listitem>
</varlistentry>
</variablelist>
<para>The type of join and the join specification if used determine
which rows are joined from the two table references, as follows:</para>
<variablelist>
<varlistentry><term><replaceable>table‑ref</replaceable> CROSS JOIN <replaceable
>table‑ref</replaceable> </term>
<listitem><indexterm><primary>CROSS JOIN, description of</primary>
</indexterm><indexterm><primary>Join</primary><secondary>CROSS</secondary>
</indexterm><para>joins each row of the left <replaceable>table-ref </replaceable
>with each row of the right <replaceable>table‑ref</replaceable>.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>table‑ref</replaceable> <indexterm>
<primary>NATURAL join, description of</primary></indexterm><indexterm>
<primary>Join</primary><secondary>NATURAL</secondary></indexterm>NATURAL
JOIN <replaceable>table‑ref</replaceable> </term>
<listitem><para>joins rows only where the values of all columns that
have the same name in both tables match. This option is equivalent
to NATURAL INNER.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>table‑ref</replaceable> <indexterm>
<primary>NATURAL LEFT join, description of</primary></indexterm><indexterm>
<primary>Join</primary><secondary>NATURAL LEFT</secondary></indexterm
>NATURAL LEFT JOIN <replaceable>table‑ref</replaceable> </term>
<listitem><para>joins rows where the values of all columns that have
the same name in both tables match, plus rows from the left <replaceable
>table-ref</replaceable> that do not meet this condition.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>table‑ref</replaceable> <indexterm>
<primary>NATURAL RIGHT join, description of</primary></indexterm><indexterm>
<primary>Join</primary><secondary>NATURAL RIGHT</secondary></indexterm
>NATURAL RIGHT JOIN <replaceable>table‑ref</replaceable> </term>
<listitem><para>joins rows where the values of all columns that have
the same name in both tables match, plus rows from the right <replaceable
>table-ref</replaceable> that do not meet this condition.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>table‑ref</replaceable> <indexterm>
<primary>NATURAL FULL join, description of</primary></indexterm><indexterm>
<primary>Join</primary><secondary>NATURAL FULL</secondary></indexterm
>NATURAL FULL JOIN <replaceable>table‑ref</replaceable></term>
<listitem><para>joins rows where the values of all columns that have
the same name in both tables match, plus rows from either side that
do not meet this condition, filling in NULLs for missing values.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>table‑ref</replaceable> <indexterm>
<primary>JOIN ON join, description of</primary></indexterm><indexterm>
<primary>Join</primary><secondary>JOIN ON</secondary></indexterm>JOIN <replaceable
>table‑ref</replaceable> <replaceable>join-spec</replaceable> </term>
<listitem><para>joins only rows that satisfy the condition in the <replaceable
>join-spec</replaceable> clause. This option is equivalent to INNER
JOIN ... ON.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>table‑ref</replaceable> <indexterm>
<primary>LEFT join, description of</primary></indexterm><indexterm>
<primary>Join</primary><secondary>LEFT</secondary></indexterm>LEFT
JOIN <replaceable>table‑ref</replaceable> <replaceable>join-spec </replaceable
></term>
<listitem><para>joins rows that satisfy the condition in the <replaceable
>join-spec</replaceable> clause, plus rows from the left <replaceable
>table-ref</replaceable> that do not satisfy the condition.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>table‑ref</replaceable> <indexterm>
<primary>RIGHT join, description of</primary></indexterm><indexterm>
<primary>Join</primary><secondary>RIGHT</secondary></indexterm>RIGHT
JOIN <replaceable>table‑ref</replaceable> <replaceable>join-spec</replaceable
></term>
<listitem><para>joins rows that satisfy the condition in the <replaceable
>join-spec</replaceable> clause, plus rows from the right <replaceable
>table-ref</replaceable> that do not satisfy the condition.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>table‑ref</replaceable> <indexterm>
<primary>FULL join, description of</primary></indexterm><indexterm>
<primary>Join</primary><secondary>FULL</secondary></indexterm>FULL
OUTER JOIN <replaceable>table‑ref</replaceable> <replaceable>join-spec</replaceable
></term>
<listitem><para>combines the results of both left and right outer
joins. These joins show records from both tables and fill in NULLs
for missing matches on either side</para></listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>simple-table</replaceable></term>
<listitem><para><indexterm><primary>SELECT statement</primary>
<secondary>simple table within</secondary></indexterm><indexterm>
<primary>Simple table, in SELECT statement</primary></indexterm>A <replaceable
>simple-table</replaceable> can be specified as:</para>
<programlisting>  VALUES (<replaceable>row-value-const</replaceable
>) [,(<replaceable>row-value-const</replaceable>)]...
| TABLE <replaceable>table</replaceable>  
| <replaceable>query-specification </replaceable>
</programlisting>
<para><indexterm><primary>Table value constructor</primary><secondary
>description of</secondary></indexterm><indexterm><primary>Table value
constructor</primary><secondary>simple table, form of</secondary>
</indexterm>A <replaceable>simple-table</replaceable> can be a table
value constructor. It starts with the VALUES keyword followed by a
sequence of row value constructors, each of which is enclosed in parentheses.
A <replaceable>row-value-const</replaceable> is a list of expressions
(or NULL) or a row subquery (a subquery that returns a single row
of column values). An operand of an expression cannot reference a
column (except when the operand is a scalar subquery returning a single
column value in its result table). </para>
<para>The use of NULL as a <replaceable>row-value-const</replaceable
> element is a Trafodion SQL extension.</para>
<para>A <replaceable>simple-table</replaceable> can be specified by
using the TABLE keyword followed by a table name, which is equivalent
to the query specification <literal>SELECT * FROM </literal><replaceable
>table</replaceable>.</para>
<para><indexterm><primary>Query specification</primary><secondary
>SELECT statement use of</secondary></indexterm><indexterm><primary
>Query specification</primary><secondary>simple table, form of </secondary>
</indexterm>A <replaceable>simple-table</replaceable> can be a <replaceable
>query-specification</replaceable>—that is, a SELECT statement consisting
of SELECT ... FROM ... with optionally the WHERE, SAMPLE, TRANSPOSE,
SEQUENCE BY, GROUP BY, and HAVING clauses. </para>
</listitem>
</varlistentry>
<varlistentry><term><indexterm><primary>SELECT statement</primary>
<secondary>WHERE clause</secondary></indexterm>WHERE <replaceable
>search-condition</replaceable> </term>
<listitem><para>specifies a <replaceable>search-condition</replaceable
> for selecting rows. See <xref linkend="i1012266"
role="select:quotedtitle page"/>. The WHERE clause cannot contain
an aggregate (set) function.</para><para>The <replaceable>search-condition</replaceable
> is applied to each row of the result table derived from the table
reference in the FROM clause or, in the case of multiple table references,
the cross-product of result tables derived from the individual table
references. </para>
<para>Each column you specify in <replaceable>search-condition</replaceable
> is typically a column in this intermediate result table. In the
case of nested subqueries used to provide comparison values, the column
can also be an outer reference. See<xref linkend="i1032551"
role="select:quotedtitle page"/>. </para>
<para>To comply with ANSI standards, Trafodion SQL does not move aggregate
predicates from the WHERE clause to a HAVING clause and does not move
non‑aggregate predicates from the HAVING clause to the WHERE clause. </para>
</listitem>
</varlistentry>
<varlistentry><term>SAMPLE <replaceable>sampling-method</replaceable
> </term>
<listitem><para>specifies the sampling method used to select a subset
of the intermediate result table of a SELECT statement. Each of the
methods uses a sampling size. The three sampling methods—random, first,
and periodic—are specified as:</para>
<variablelist>
<varlistentry><term>RANDOM <replaceable>percent-size</replaceable
> </term>
<listitem><para>directs Trafodion SQL to choose rows randomly (each
row having an unbiased probability of being chosen) without replacement
from the result table. The sampling size is determined by using a
percent of the result table. </para></listitem>
</varlistentry>
<varlistentry><term>FIRST <replaceable>rows-size</replaceable> [SORT
BY <replaceable>colname</replaceable> [,<replaceable>colname</replaceable
>]...]</term>
<listitem><para>directs Trafodion SQL to choose the first <replaceable
>rows-size</replaceable> rows from the sorted result table. The sampling
size is determined by using the specified number of rows.</para>
</listitem>
</varlistentry>
<varlistentry><term>PERIODIC <replaceable>rows-size</replaceable> EVERY <replaceable
>number-rows</replaceable> ROWS [SORT BY <replaceable>colname</replaceable
> [,<replaceable>colname</replaceable>]...] </term>
<listitem><para>directs Trafodion SQL to choose the first rows from
each block (period) of contiguous sorted rows. The sampling size is
determined by using the specified number of rows chosen from each
block.</para></listitem>
</varlistentry>
</variablelist>
<para>SAMPLE is a Trafodion SQL extension. See <xref linkend="i1005599"
role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
<varlistentry><term>TRANSPOSE <replaceable>transpose-set</replaceable
>[<replaceable>transpose-set</replaceable>]...    [KEY BY <replaceable
>key-colname</replaceable>] </term>
<listitem><para><indexterm><primary>SELECT statement</primary>
<secondary>TRANSPOSE clause</secondary></indexterm>specifies the <replaceable
>transpose-sets</replaceable> and an optional key clause within a
TRANSPOSE clause. You can use multiple TRANSPOSE clauses in a SELECT
statement. </para>
<variablelist>
<varlistentry><term><replaceable>transpose-item-list </replaceable
> AS <replaceable>transpose-col-list</replaceable> </term>
<listitem><para>specifies a <replaceable>transpose-set.</replaceable
> You can use multiple transpose sets within a TRANSPOSE clause. The
TRANSPOSE clause generates, for each row of the source table derived
from the table reference or references in the FROM clause, a row for
each item in each <replaceable>transpose-item-list</replaceable> of
all the transpose sets.</para><para>The result table of a TRANSPOSE
clause has all the columns of the source table plus a value column
or columns, as specified in each <replaceable>transpose‑col‑list </replaceable
>of all the transpose sets, and an optional key column <replaceable
>key-colname</replaceable>. </para>
</listitem>
</varlistentry>
<varlistentry><term>KEY BY <replaceable>key-colname</replaceable></term>
<listitem><para>optionally specifies an optional key column <replaceable
>key-colname</replaceable>. It identifies which expression the value
in the transpose column list corresponds to by its position in the <replaceable
>transpose-item-list</replaceable>. <replaceable>key-colname</replaceable
> is an SQL identifier. The data type is exact numeric, and the value
is NOT NULL.</para></listitem>
</varlistentry>
</variablelist>
<para>TRANSPOSE is a Trafodion SQL extension. See <xref
linkend="i1004421" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
<varlistentry><term>SEQUENCE BY <replaceable>colname</replaceable
> [ASC[ENDING] | DESC[ENDING]]    [,<replaceable>colname</replaceable
> [ASC[ENDING] | DESC[ENDING]]]...</term>
<listitem><indexterm><primary>SELECT statement</primary><secondary
>SEQUENCE BY clause</secondary></indexterm><para>specifies the order
in which to sort the rows of the intermediate result table for calculating
sequence functions. You must include a SEQUENCE BY clause if you include
a sequence function in <replaceable>select-list</replaceable>. Otherwise,
Trafodion SQL returns an error. Further, you cannot include a SEQUENCE
BY clause if no sequence function is in <replaceable>select-list</replaceable
>.</para>
<variablelist>
<varlistentry><term><replaceable>colname</replaceable> </term>
<listitem><para>names a column in <replaceable>select-list </replaceable
>or a column in a table reference in the FROM clause of the SELECT
statement. <replaceable>colname</replaceable> is optionally qualified
by a table, view, or correlation name; for example, CUSTOMER.CITY.</para>
</listitem>
</varlistentry>
<varlistentry><term>ASC | DESC</term>
<listitem><para>specifies the sort order. The default is ASC. When
Trafodion SQL orders an intermediate result table on a column that
can contain null, nulls are considered equal to one another but greater
than all other nonnull values.</para></listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term>GROUP BY [<replaceable>col-expr</replaceable>]
{<replaceable>colname</replaceable> | <replaceable>colnum</replaceable
>} [,{<replaceable>colname</replaceable> | <replaceable>colnum</replaceable
>}]...]</term>
<listitem><indexterm><primary>SELECT statement</primary><secondary
>GROUP BY clause </secondary></indexterm><para>specifies grouping
columns that define a set of groups for the result table of the SELECT
statement. The expression in the GROUP BY clause must be exactly the
same as the expression in the select list. These columns must appear
in the list of columns in the table references in the FROM clause
of the SELECT statement. </para><para>If you include a GROUP BY clause,
the columns you refer to in the <replaceable>select-list</replaceable
> must be grouping columns or arguments of an aggregate (or set) function. </para>
<para>The grouping columns define a set of groups in which each group
consists of rows with identical values in the specified columns. The
column names can be qualified by a table or view name or a correlation
name; for example, CUSTOMER.CITY.</para>
<para>For example, if you specify AGE, the result table contains one
group of rows with AGE equal to 40 and one group of rows with AGE
equal to 50. If you specify AGE and then JOB, the result table contains
one group for each age and, within each age group, subgroups for each
job code. </para>
<simplelist>
<member>You can specify GROUP BY using ordinals to refer to the relative
position within the SELECT list. For example, <literal>GROUP BY 3,
2, 1</literal>.</member>
</simplelist>
<para>For grouping purposes, all nulls are considered equal to one
another. The result table of a GROUP BY clause can have only one null
group.</para>
<para>See <xref linkend="i1009451" role="select:quotedtitle page"
/>.</para>
</listitem>
</varlistentry>
<varlistentry><term>HAVING <replaceable>search-condition</replaceable
> </term>
<listitem><indexterm><primary>SELECT statement</primary><secondary
>HAVING clause</secondary></indexterm><para>specifies a <replaceable
>search-condition</replaceable> to apply to each group of the grouped
table resulting from the preceding GROUP BY clause in the SELECT statement. </para>
<para>To comply with ANSI standards, Trafodion SQL does not move aggregate
predicates from the WHERE clause to a HAVING clause and does not move
non‑aggregate predicates from the HAVING clause to the WHERE clause. </para>
<para>If no GROUP BY clause exists, the <replaceable>search-condition</replaceable
> is applied to the entire table (which consists of one group) resulting
from the WHERE clause (or the FROM clause if no WHERE clause exists). </para>
<para>In <replaceable>search-condition</replaceable>, you can specify
any column as the argument of an aggregate (or set) function; for
example, AVG (SALARY). An aggregate function is applied to each group
in the grouped table.</para>
<para>A column that is not an argument of an aggregate function must
be a grouping column. When you refer to a grouping column, you are
referring to a single value because each row in the group contains
the same value in the grouping column.</para>
<para>See <xref linkend="i1012266" role="select:quotedtitle page"
/>.</para>
</listitem>
</varlistentry>
<varlistentry><term>[FOR] <replaceable>access-option</replaceable
> ACCESS </term>
<listitem><indexterm><primary>SELECT statement</primary><secondary
>access options</secondary></indexterm><indexterm><primary>Access
options</primary><secondary>SELECT statement use of</secondary>
</indexterm><para>specifies the <replaceable>access-option</replaceable
> when accessing data specified by the SELECT statement or by a table
reference in the FROM clause derived from the evaluation of a query
expression that is a SELECT statement. See <xref linkend="i1009133"
role="select:quotedtitle page"/>.</para>
<variablelist>
<varlistentry condition="hidden"><term>READ UNCOMMITTED</term>
<listitem><para>specifies that any data accessed need not be from
committed rows. </para></listitem>
</varlistentry>
<varlistentry><term>READ COMMITTED</term>
<listitem><para>specifies that any data accessed must be from committed
rows. </para></listitem>
</varlistentry>
<varlistentry condition="hidden"><term>SERIALIZABLE | REPEATABLE READ</term>
<listitem><indexterm><primary>Concurrency</primary><secondary>SELECT
statement</secondary></indexterm><para>specifies that the SELECT statement
and any concurrent process (accessing the same data) execute as if
the statement and the other process had run serially rather than concurrently. </para>
</listitem>
</varlistentry>
<varlistentry condition="hidden"><term>SKIP CONFLICT</term>
<listitem><indexterm><primary>SELECT statement</primary><secondary
>SKIP CONFLICT access</secondary></indexterm><indexterm><primary>SKIP
CONFLICT</primary><secondary>SELECT statement</secondary></indexterm>
<para>enables transactions to skip rows locked in a conflicting mode
by another transaction. You cannot use SKIP CONFLICT in a SET TRANSACTION
statement. </para></listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry condition="hidden"><term>IN {SHARE | EXCLUSIVE} MODE</term>
<listitem><indexterm><primary>SELECT statement</primary><secondary
>lock modes</secondary></indexterm><indexterm><primary>Lock modes</primary>
<secondary>types of</secondary></indexterm><indexterm><primary>Lock
modes</primary><secondary>SELECT statement use of</secondary>
</indexterm><para>specifies that SHARE or EXCLUSIVE locks be used
when accessing data specified by a SELECT statement or by a table
reference in the FROM clause derived from the evaluation of a query
expression that is a SELECT statement. The specified locks are also
used when accessing the index, if any, through which the table accesses
occur. </para></listitem>
</varlistentry>
<varlistentry><term>UNION [ALL] <replaceable>select-stmt</replaceable
> </term>
<listitem><indexterm><primary>SELECT statement</primary><secondary
>union operation within</secondary></indexterm><indexterm><primary
>Union operation</primary><secondary>SELECT statement use of</secondary>
</indexterm><para>specifies a set union operation between the result
table of a SELECT statement and the result table of another SELECT
statement. </para><para>The result of the union operation is a table
that consists of rows belonging to either of the two contributing
tables. If you specify UNION ALL, the table contains all the rows
retrieved by each SELECT statement. Otherwise, duplicate rows are
removed. </para>
<para>The select lists in the two SELECT statements of a union operation
must have the same number of columns, and columns in corresponding
positions within the lists must have compatible data types. The select
lists must not be preceded by <literal>[ANY </literal><replaceable
>N</replaceable><literal>]</literal> or <literal>[FIRST N]</literal
>.</para>
<para>The number of columns in the result table of the union operation
is the same as the number of columns in each select list. The column
names in the result table of the union are the same as the corresponding
names in the select list of the left SELECT statement. A column resulting
from the union of expressions or constants has the name (EXPR).</para>
<para>See <xref linkend="i1009472" role="select:quotedtitle page"
/>.</para>
</listitem>
</varlistentry>
<varlistentry><term>ORDER BY {<replaceable>colname</replaceable> | <replaceable
>colnum</replaceable>} [ASC[ENDING] | DESC[ENDING]]    [,{<replaceable
>colname</replaceable> | <replaceable>colnum</replaceable>} [ASC[ENDING]
| DESC[ENDING]]]...</term>
<listitem><indexterm><primary>SELECT statement</primary><secondary
>ORDER BY clause </secondary></indexterm><para>specifies the order
in which to sort the rows of the final result table. </para>
<variablelist>
<varlistentry><term><replaceable>colname</replaceable></term>
<listitem><para>names a column in <replaceable>select-list </replaceable
>or a column in a table reference in the FROM clause of the SELECT
statement. <replaceable>colname</replaceable> is optionally qualified
by a table, view, or correlation name; for example, CUSTOMER.CITY.
If a column has been aliased to another name you must use the alias
name.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>colnum</replaceable> </term>
<listitem><para>specifies a column by its position in <replaceable
>select-list</replaceable>. Use <replaceable>colnum</replaceable> to
refer to unnamed columns, such as derived columns.</para></listitem>
</varlistentry>
<varlistentry><term>ASC | DESC</term>
<listitem><para>specifies the sort order. The default is ASC. For
ordering a result table on a column that can contain null, nulls are
considered equal to one another but greater than all other nonnull
values.</para></listitem>
</varlistentry>
</variablelist>
<para>See <xref linkend="i1009460" role="select:quotedtitle page"
/>.</para>
</listitem>
</varlistentry>
<varlistentry><term>LIMIT <replaceable>num</replaceable></term>
<listitem><indexterm><primary>SELECT statement</primary><secondary
>LIMIT clause</secondary></indexterm><para>limits the number of rows
returned by the query with no limit applied if <replaceable>num</replaceable
> is null or less than zero. The LIMIT clause is executed after the
ORDER BY clause to support TopN queries.</para></listitem>
</varlistentry>
</variablelist>
</section>
<section id="i1009326">
<title>Considerations for SELECT</title>
<indexterm><primary>SELECT statement</primary><secondary>considerations
for</secondary></indexterm>
<section>
<title>Authorization Requirements</title>
<indexterm><primary>SELECT statement</primary><secondary>authorization
requirements</secondary></indexterm>
<para>SELECT requires authority to read all views and tables referred
to in the statement, including the underlying tables of views referred
to in the statement. </para>
</section>
<section condition="hidden">
<title>Updating Rows</title>
<indexterm><primary>SELECT statement</primary><secondary>updating
rows</secondary></indexterm>
<para>A SELECT with READ UNCOMMITTED ACCESS on a table whose primary
key or unique index key columns are being updated could catch the
update operation in an intermediate stage, where some or all of the
affected rows have been deleted from the table but the altered rows
have not yet been inserted back into the table.</para>
</section>
<section condition="hidden">
<title>Locking Modes</title>
<indexterm><primary>Lock modes</primary><secondary>using</secondary>
</indexterm>
<para>When specifying the locking mode for a SELECT statement:</para>
<itemizedlist>
<listitem><indexterm><primary>Concurrency</primary><secondary>SELECT
statement</secondary></indexterm><para>Use SHARE mode when the process
reads data but does not modify it. Specifying READ COMMITTED access
and SHARE mode ensures a higher level of concurrency. </para></listitem>
<listitem><para>Use EXCLUSIVE mode when the process reads data and
then modifies it with a delete or update operation. Requesting exclusive
locks on the SELECT prevents other processes from acquiring share
locks on the accessed rows between the time of the select and the
time of the subsequent delete or update. Such locks by other processes
would prevent the process from escalating its own share locks to the
exclusive locks required for a delete or update operation, causing
the process to wait or timeout. </para></listitem>
<listitem><para>Do not specify the IN clause for READ UNCOMMITTED
access. If you omit the IN clause for other access options, SQL uses
SHARE until an attempt is made to modify the data, and then escalates
the lock to EXCLUSIVE. </para></listitem>
</itemizedlist>
<para>Locking modes are relevant only to select operations that use
a cursor. In a standalone SELECT statement, locks are maintained only
for the duration of the select.</para>
</section>
<section>
<title>Use of Views With SELECT</title>
<indexterm><primary>SELECT statement</primary><secondary>views and</secondary>
</indexterm>
<para>When a view is referenced in a SELECT statement, the specification
that defines the view is combined with the statement. The combination
can cause the SELECT statement to be invalid. If you receive an error
message that indicates a problem but the SELECT statement seems to
be valid, check the view definition. </para>
<para>For example, suppose that the view named AVESAL includes column
A defined as AVG (X). The SELECT statement that contains MAX (A) in
its select list is invalid because the select list actually contains
MAX (AVG (X)), and an aggregate function cannot have an argument that
includes another aggregate function.</para>
</section>
<section>
<title>Join Limits</title>
<indexterm><primary>Join</primary><secondary>limits</secondary>
</indexterm><indexterm><primary>Limits</primary><secondary>number
of tables joined</secondary></indexterm><indexterm><primary>SELECT
statement</primary><secondary>limit on join tables</secondary>
</indexterm>
<note>
<para>We recommend that you limit the number of tables in a join to
a maximum of 64, which includes base tables of views referenced in
joins. Queries with joins that involve a larger number of tables are
not guaranteed to compile.</para>
</note>
</section>
<section>
<title>Object Names in SELECT</title>
<para>You can use fully qualified names only in the FROM clause of
a SELECT statement.</para>
</section>
<section>
<title>AS and ORDER BY Conflicts</title>
<indexterm><primary>ORDER BY clause</primary><secondary>AS and ORDER
BY conflicts</secondary></indexterm>
<para>When you use the AS verb to rename a column in a SELECT statement,
and the ORDER BY clause uses the original column name, the query fails.
If a column has been aliased to another name, you must use the alias
name. The ANSI standard does not support this type of query. </para>
</section>
<section condition="hidden" id="i1024855">
<title>Stream Access Restrictions</title>
<indexterm><primary>SELECT statement</primary><secondary>stream access
limitations</secondary></indexterm>
<itemizedlist>
<listitem><para>SELECT statements can access only one table with stream
access, except for unions that allow both SELECT statements to use
stream access. However, you must use UNION ALL when using stream access
with unions.</para></listitem>
<listitem><para>You cannot join two streams. </para></listitem>
<listitem><para>Aggregate functions are not supported on streams and,
therefore, no GROUP BY or HAVING clauses are valid on streams.</para>
</listitem>
<listitem><para>Sort operations are not supported on streams. Therefore,
you cannot use DISTINCT, UNION DISTINCT, or ORDER BY unless supported
by an index. You can use a secondary index for accessing an ordered
stream only if the columns in the index definition include all the
columns of the base table accessed as a stream that are referenced
in its WHERE clause. </para></listitem>
<listitem><para>A query expression that serves as a data source for
an INSERT statement cannot specify stream access.</para></listitem>
<listitem><para>A DELETE or UPDATE statement that is not embedded
as a table reference cannot specify stream access. For example, the
statement <literal>DELETE FROM STREAM(tab1)</literal> is not valid.</para>
</listitem>
<listitem><para>If your application must handle a fast rate of publishing
into the stream, or publishes rows in very large transactions, it
must be able to handle stream overflows. </para></listitem>
</itemizedlist>
</section>
<section>
<title>Restrictions on Embedded Inserts</title>
<itemizedlist>
<listitem><para>An embedded INSERT cannot be used in a join.</para>
</listitem>
<listitem><para>An embedded INSERT cannot appear in a subquery.</para>
</listitem>
<listitem><para>An embedded INSERT statement cannot have a subquery
in the WHERE clause.</para></listitem>
<listitem><para>An INSERT statement cannot contain an embedded INSERT
statement.</para></listitem>
<listitem><para>A union between embedded INSERT expressions is not
supported.</para></listitem>
<listitem><para>Declaring a cursor on an embedded INSERT statement
is not supported.</para></listitem>
</itemizedlist>
</section>
<section id="i1009420">
<title>DISTINCT Aggregate Functions</title>
<indexterm><primary>Aggregate functions</primary><secondary>DISTINCT
clause</secondary></indexterm><indexterm><primary>DISTINCT clause</primary>
<secondary>aggregate functions</secondary></indexterm>
<para>An aggregate function can accept an argument specified as DISTINCT,
which eliminates duplicate values before the aggregate function is
applied. For a given grouping, multiple DISTINCT aggregates are allowed
and can be used with non distinct aggregates. A restriction exists
that DISTINCT STDDEV and VARIANCE cannot be used with multiple DISTINCT
aggregates.</para>
</section>
<section>
<title>Limitations of DISTINCT Aggregates</title>
<itemizedlist>
<listitem><para>No limit exists to the number of distinct aggregates.</para>
</listitem>
<listitem><para>Distinct STDDEV and distinct VARIANCE are not supported
with multiple distinct aggregates. For example, this statement will
result in an error.</para>
<programlisting>SELECT sum(distinct a), stddev(distinct b) from T group by d;
</programlisting>
</listitem>
</itemizedlist>
</section>
<section>
<title>Examples of Multiple Distinct Aggregates</title>
<itemizedlist>
<listitem><para>This statement contains distinct aggregates:</para>
<programlisting>SELECT sum(distinct a), count(distinct b), avg(distinct c)
  from T group by d;
</programlisting>
</listitem>
<listitem><para>This statement does not contain multiple distincts.
Because each distinct aggregate is on the same column (a), this is
treated as one distinct value.</para>
<programlisting>SELECT sum(distinct a), count(distinct a), avg(distinct a)
  from T group by d;
</programlisting>
</listitem>
<listitem><para>This statement shows that multiple distinct aggregates
can be used with non distinct aggregates:</para>
<programlisting>SELECT sum(distinct a), avg(distinct b), sum(c) 
  from T group by d;
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1059247">
<title>Considerations for Select List</title>
<itemizedlist>
<listitem><para>The <literal>*</literal> and <replaceable>corr</replaceable
><literal>.*</literal> forms of a <replaceable>select-list</replaceable
> specification are convenient. However, such specifications make
the order of columns in the SELECT result table dependent on the order
of columns in the current definition of the referenced tables or views. </para>
</listitem>
<listitem><para>A <replaceable>col-expr</replaceable> is a single
column name or a derived column. A derived column is an SQL value
expression; its operands can be numeric, string, datetime, or interval
literals, columns, functions (including aggregate functions) defined
on columns, scalar subqueries, CASE expressions, or CAST expressions.
Any single columns named in<replaceable> col-expr</replaceable> must
be from tables or views specified in the FROM clause. For a list of
aggregate functions, see <xref linkend="i1016243"
role="select:quotedtitle page"/>.</para></listitem>
<listitem><para>If <replaceable>col-expr</replaceable> is a single
column name, that column of the SELECT result table is a named column.
All other columns are unnamed columns in the result table (and have
the (EXPR) heading) unless you use the AS clause to specify a name
for a derived column.</para></listitem>
</itemizedlist>
</section>
<section id="i1009451">
<title>Considerations for GROUP BY</title>
<indexterm><primary>SELECT statement</primary><secondary>GROUP BY
clause</secondary></indexterm>
<itemizedlist>
<listitem><para>If you include a GROUP BY clause, the columns you
refer to in the <replaceable>select-list</replaceable> must be either
grouping columns or arguments of an aggregate (or set) function. For
example, if AGE is not a grouping column, you can refer to AGE only
as the argument of a function, such as AVG (AGE). </para></listitem>
<listitem><para>The expression in the GROUP BY clause must be exactly
the same as the expression in the select list. An error will be returned
if it is not. It cannot contain aggregate functions or subqueries.</para>
</listitem>
<listitem><para>If the value of <replaceable>col-expr</replaceable
> is a numeric constant, it refers to the position of the select list
item and is treated as the current GROUP BY using the ordinal feature.</para>
</listitem>
<listitem><para>You can specify GROUP BY using ordinals to refer to
the relative position within the SELECT list. For example, <literal
>GROUP BY 3, 2, 1</literal>.</para></listitem>
<listitem><para>If you do not include a GROUP BY clause but you specify
an aggregate function in the <replaceable>select-list</replaceable
>, all rows of the result table form the one and only group. The result
of AVG, for example, is a single value for the entire table. </para>
</listitem>
</itemizedlist>
</section>
<section id="i1009460">
<title>Considerations for ORDER BY</title>
<indexterm><primary>SELECT statement</primary><secondary>ORDER BY
clause</secondary></indexterm><indexterm><primary>Performance</primary>
<secondary>ORDER BY clause</secondary></indexterm>
<para>When you specify an ORDER BY clause and its ordering columns,
consider: </para>
<itemizedlist>
<listitem><para>ORDER BY is allowed only in the outer level of a query
or in the SELECT part of an INSERT/SELECT statement. It is not allowed
inside nested SELECT expressions, such as subqueries.</para></listitem>
<listitem><para>If you specify DISTINCT, the ordering column must
be in <replaceable>select-list</replaceable>. </para></listitem>
<listitem><para>If you specify a GROUP BY clause, the ordering column
must also be a grouping column.</para></listitem>
<listitem><para>If an ORDER BY clause applies to a union of SELECT
statements, the ordering column must be explicitly referenced, and
not within an aggregate function or an expression, in the <replaceable
>select-list</replaceable> of the leftmost SELECT statement. </para>
</listitem>
<listitem><para>SQL does not guarantee a specific or consistent order
of rows unless you specify an ORDER BY clause. ORDER BY can reduce
performance, however, so use it only if you require a specific order.</para>
</listitem>
</itemizedlist>
</section>
<section id="i1009472">
<title>Considerations for UNION</title>
<indexterm><primary>SELECT statement</primary><secondary>union operation
within</secondary></indexterm>
<para>Suppose that the contributing SELECT statements are named SELECT1
and SELECT2, the contributing tables resulting from the SELECT statements
are named TABLE1 and TABLE2, and the table resulting from the UNION
operation is named RESULT.</para>
<section>
<title>Characteristics of the UNION Columns</title>
<indexterm><primary>Union operation</primary><secondary>columns, characteristics
of</secondary></indexterm>
<para>For columns in TABLE1 and TABLE2 that contribute to the RESULT
table: </para>
<itemizedlist>
<listitem><para>If both columns contain character strings, the corresponding
column in RESULT contains a character string whose length is equal
to the greater of the two contributing columns.</para></listitem>
<listitem><para>If both columns contain variable-length character
strings, RESULT contains a variable-length character string whose
length is equal to the greater of the two contributing columns.</para>
</listitem>
<listitem><para>If both columns are of exact numeric data types, RESULT
contains an exact numeric value whose precision and scale are equal
to the greater of the two contributing columns.</para></listitem>
<listitem><para>If both columns are of approximate numeric data types,
RESULT contains an approximate numeric value whose precision is equal
to the greater of the two contributing columns.</para></listitem>
<listitem><para>If both columns are of datetime data type (DATE, TIME,
or TIMESTAMP), the corresponding column in RESULT has the same data
type.</para></listitem>
<listitem><para>If both columns are INTERVAL data type and both columns
are year‑month or day-time, RESULT contains an INTERVAL value whose
range of fields is the most significant start field to the least significant
end field of the INTERVAL fields in the contributing columns. (The
year-month fields are YEAR and MONTH. The day‑time fields are DAY,
HOUR, MINUTE, and SECOND.)</para><para>For example, suppose that the
column in TABLE1 has the data type INTERVAL HOUR TO MINUTE, and the
column in TABLE2 has the data type INTERVAL DAY TO HOUR. The data
type of the column resulting from the union operation is INTERVAL
DAY TO MINUTE.</para>
</listitem>
<listitem><para>If both columns are described with NOT NULL, the corresponding
column of RESULT cannot be null. Otherwise, the column can be null. </para>
</listitem>
</itemizedlist>
</section>
<section>
<title>ORDER BY Clause and the UNION Operator</title>
<indexterm><primary>Union operation</primary><secondary>ORDER BY clause
restriction</secondary></indexterm>
<para>In a query containing a UNION operator, the ORDER BY clause
defines an ordering on the result of the union. In this case, the
SELECT statement cannot have an individual ORDER BY clause.</para>
<para>You can specify an ORDER BY clause only as the last clause following
the final SELECT statement (SELECT2 in this example). The ORDER BY
clause in RESULT specifies the ordinal position of the sort column
either by using an integer or by using the column name from the select
list of SELECT1.</para>
<para>This SELECT statement shows correct use of the ORDER BY clause: </para>
<programlisting>SELECT A FROM T1 UNION SELECT B FROM T2 ORDER BY A 
</programlisting>
<para>This SELECT statement is incorrect because the ORDER BY clause
does not follow the final SELECT statement:</para>
<programlisting>SELECT A FROM T1 ORDER BY A UNION SELECT B FROM T2 
</programlisting>
<para>This SELECT statement is also incorrect:</para>
<programlisting>SELECT A FROM T1 UNION (SELECT B FROM T2 ORDER BY A) 
</programlisting>
<para>Because the subquery (SELECT B FROM T2...) is processed first,
the ORDER BY clause does not follow the final SELECT.</para>
</section>
<section>
<title>GROUP BY Clause, HAVING Clause, and the UNION Operator </title>
<para>In a query containing a UNION operator, the GROUP BY or HAVING
clause is associated with the SELECT statement it is a part of (unlike
the ORDER BY clause, which can be associated with the result of a
union operation). The groups are visible in the result table of the
particular SELECT statement. The GROUP BY and HAVING clauses cannot
be used to form groups in the result of a union operation. </para>
</section>
<section>
<title>UNION ALL and Associativity</title>
<indexterm><primary>Union operation</primary><secondary>associative,
UNION ALL</secondary></indexterm><indexterm><primary>SELECT statement</primary>
<secondary>UNION ALL operation</secondary></indexterm>
<para>The UNION ALL operation is left associative, meaning that these
two queries return the same result:</para>
<programlisting>(SELECT * FROM TABLE1 UNION ALL 
  SELECT * FROM TABLE2) UNION ALL SELECT * FROM TABLE3;
</programlisting>
<programlisting>SELECT * FROM TABLE1 UNION ALL
   (SELECT * FROM TABLE2 UNION ALL SELECT * FROM TABLE3);
</programlisting>
<para>If both the UNION ALL and UNION operators are present in the
query, the order of evaluation is always from left to right. A parenthesized
union of SELECT statements is evaluated first, from left to right,
followed by the remaining union of SELECT statements.</para>
</section>
<section condition="hidden">
<title>Access Modes and the UNION Operator</title>
<para>In a query containing the UNION operator, if you specify an
access option for the second operand before the ORDER BY clause (or
if the UNION has no ORDER BY clause) and you do not specify an option
for the first operand, the first operand inherits the session’s transaction
isolation level setting. If this setting is different from the one
you specified for the second operand, Trafodion SQL issues a warning.
For example:</para>
<programlisting>SELECT common.isma_no FROM sdcommon common 
 WHERE common.sec_status='L' 
UNION 
SELECT main.isma_no FROM sdmain main
 WHERE main.iss_eligible='Y' 
 FOR READ UNCOMMITTED ACCESS
ORDER BY 1 ASCENDING;
</programlisting>
<para>This statement will receive a warning:</para>
<programlisting>*** WARNING[3192] Union operands sdcommon common and sdmain main have different
transaction access/lock modes.</programlisting>
<para>To apply access you specified for the second operand to both
SELECT items in this type of query, use one of these strategies:</para>
<itemizedlist>
<listitem><para>Specify the desired access mode for each SELECT:</para>
<programlisting>SELECT common.isma_no FROM sdcommon common 
 WHERE common.sec_status='L' 
 FOR READ UNCOMMITTED ACCESS 
UNION 
SELECT main.isma_no FROM sdmain main 
 WHERE main.iss_eligible='Y' 
 FOR READ UNCOMMITTED ACCESS 
ORDER BY 1 ASCENDING;
</programlisting>
</listitem>
<listitem><para>Use a table subquery to enclose the union, and apply
the access mode to the main query. This statement receives a warning
because Trafodion SQL treats the access mode on the second SELECT
as applicable only to that second SELECT:</para>
<programlisting>SELECT a 
  from t046a where b=1 
  UNION
  SELECT b from t046b where a=2 
  for browse access;
</programlisting>
<para>This statement uses a table subquery to apply the access mode
to both queries:</para>
<programlisting>SELECT c from
(SELECT a from t046a where b=1
  UNION
  SELECT b from t046b where a=2) as t(c)
  for browse access;
</programlisting>
</listitem>
<listitem><para>Specify the access mode after the ORDER BY clause:</para>
<programlisting>SELECT common.isma_no
  from sdcommon common
  where common.sec_status='L' 
UNION
SELECT main.isma_no
  from sdmain main 
  where main.iss_eligible='Y'
ORDER BY 1 ascending for browse access;
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1009541">
<title>Examples of SELECT</title>
<indexterm><primary>SELECT statement</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>Retrieve information from the EMPLOYEE table for employees
with a job code greater than 500 and who are in departments with numbers
less than or equal to 3000, displaying the results in ascending order
by job code: </para>
<programlisting>SELECT jobcode, deptnum, first_name, last_name, salary
FROM persnl.employee
WHERE jobcode > 500 AND deptnum &lt;= 3000
ORDER BY jobcode<literal condition="hidden">
READ UNCOMMITTED ACCESS</literal>;

JOBCODE  DEPTNUM  FIRST_NAME       LAST_NAME        SALARY
-------  -------  ---------------  -----------  ----------
    600  1500     JONATHAN         MITCHELL       32000.00
    600  1500     JIMMY            SCHNEIDER      26000.00
    900  2500     MIRIAM           KING           18000.00 
    900  1000     SUE              CRAMER         19000.00 
  . . .
</programlisting>
<para condition="hidden">In this example, because of READ UNCOMMITTED
access, the query does not wait for other concurrent processes to
commit rows.</para>
</listitem>
<listitem><para>Display selected rows grouped by job code in ascending
order:</para>
<programlisting>SELECT jobcode, AVG(salary)
FROM persnl.employee
WHERE jobcode > 500 AND deptnum &lt;= 3000
GROUP BY jobcode
ORDER BY jobcode;

JOBCODE  EXPR
-------  ----------------------
    600                29000.00
    900                25100.00

--- 2 row(s) selected.
</programlisting>
<para>This select list contains only grouping columns and aggregate
functions. Each row of the output summarizes the selected data within
one group. </para>
</listitem>
<listitem><para>Select data from more than one table by specifying
the table names in the FROM clause and specifying the condition for
selecting rows of the result in the WHERE clause:</para>
<programlisting>
SELECT jobdesc, first_name, last_name, salary
FROM persnl.employee E, persnl.job J
WHERE E.jobcode = J.jobcode AND
  E.jobcode IN (900, 300, 420);

JOBDESC       FIRST_NAME    LAST_NAME        SALARY
------------  ------------  ---------------  -----------
SALESREP      TIM           WALKER              32000.00
SALESREP      HERBERT       KARAJAN             29000.00
...
ENGINEER      MARK          FOLEY               33000.00
ENGINEER      MARIA         JOSEF               18000.10
...
SECRETARY     BILL          WINN                32000.00
SECRETARY     DINAH         CLARK               37000.00
...

--- 27 row(s) selected.
</programlisting>
<para><indexterm><primary>Join</primary><secondary>join predicate</secondary>
</indexterm>This type of condition is sometimes called a join predicate.
The query first joins the EMPLOYEE and JOB tables by combining each
row of the EMPLOYEE table with each row of the JOB table; the intermediate
result is the Cartesian product of the two tables. </para>
<para>This join predicate specifies that any row (in the intermediate
result) with equal job codes is included in the result table. The
WHERE condition further specifies that the job code must be 900, 300,
or 420. All other rows are eliminated. </para>
<para>The four logical steps that determine the intermediate and final
results of the previous query are:</para>
<orderedlist>
<listitem><para>Join the tables.</para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="5" tgroupstyle="TI2  inline table">
<colspec colname="COLSPEC0"/>
<colspec colname="COLSPEC1"/>
<colspec colname="COLSPEC2"/>
<colspec colname="COLSPEC4"/>
<colspec colname="COLSPEC3"/>
<thead>
<row><entry colsep="1" nameend="COLSPEC2" namest="COLSPEC0">EMPLOYEE
Table</entry><entry colsep="1" nameend="COLSPEC3" namest="COLSPEC4"
>JOB Table</entry></row>
</thead>
<tbody>
<row><entry>EMPNUM  ...</entry><entry>JOBCODE  ...</entry><entry>SALARY</entry>
<entry>JOBCODE</entry><entry>JOBDESC</entry></row>
</tbody>
</tgroup>
</informaltable>
</listitem>
<listitem><para>Drop rows with unequal job codes.</para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="5" tgroupstyle="TI2  inline table">
<colspec colname="COLSPEC5"/>
<colspec/>
<colspec colname="COLSPEC6"/>
<colspec colname="COLSPEC7"/>
<colspec colname="COLSPEC8"/>
<thead>
<row><entry colsep="1" nameend="COLSPEC6" namest="COLSPEC5">EMPLOYEE
Table</entry><entry colsep="1" nameend="COLSPEC8" namest="COLSPEC7"
>JOB Table</entry></row>
</thead>
<tbody>
<row><entry>EMPNUM  ... </entry><entry>JOBCODE  ...</entry><entry
>SALARY</entry><entry>JOBCODE</entry><entry>JOBDESC</entry></row>
<row><entry>1</entry><entry>100</entry><entry>175500</entry><entry
>100</entry><entry>MANAGER</entry></row>
<row><entry>. . .</entry><entry>. . .</entry><entry>. . .</entry><entry
>. . .</entry><entry>. . .</entry></row>
<row><entry>75</entry><entry>300</entry><entry>32000</entry><entry
>300</entry><entry>SALESREP</entry></row>
<row><entry>. . .</entry><entry>. . .</entry><entry>. . .</entry><entry
>. . .</entry><entry>. . .</entry></row>
<row><entry>178</entry><entry>900</entry><entry>28000</entry><entry
>900</entry><entry>SECRETARY</entry></row>
<row><entry>. . .</entry><entry>. . .</entry><entry>. . .</entry><entry
>. . .</entry><entry>. . .</entry></row>
<row><entry>207</entry><entry>420</entry><entry>33000</entry><entry
>420</entry><entry>ENGINEER</entry></row>
<row><entry>. . .</entry><entry>. . .</entry><entry>. . .</entry><entry
>. . .</entry><entry>. . .</entry></row>
<row><entry>568</entry><entry>300</entry><entry>39500</entry><entry
>300</entry><entry>SALESREP</entry></row>
</tbody>
</tgroup>
</informaltable>
</listitem>
<listitem><para>Drop rows with job codes not equal to 900, 300, or
420.</para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="5" tgroupstyle="TI2  inline table">
<colspec colname="COLSPEC9"/>
<colspec/>
<colspec colname="COLSPEC10"/>
<colspec colname="COLSPEC11"/>
<colspec colname="COLSPEC12"/>
<thead>
<row><entry colsep="1" nameend="COLSPEC10" namest="COLSPEC9">EMPLOYEE
Table</entry><entry colsep="1" nameend="COLSPEC12" namest="COLSPEC11"
>JOB Table</entry></row>
</thead>
<tbody>
<row><entry>EMPNUM  ...</entry><entry>JOBCODE  ...</entry><entry>SALARY</entry>
<entry>JOBCODE</entry><entry>JOBDESC</entry></row>
<row><entry>75</entry><entry>300</entry><entry>32000</entry><entry
>300</entry><entry>SALESREP</entry></row>
<row><entry>. . .</entry><entry>. . .</entry><entry>. . .</entry><entry
>. . .</entry><entry>. . .</entry></row>
<row><entry>178</entry><entry>900</entry><entry>28000</entry><entry
>900</entry><entry>SECRETARY</entry></row>
<row><entry>. . .</entry><entry>. . .</entry><entry>. . .</entry><entry
>. . .</entry><entry>. . .</entry></row>
<row><entry>207</entry><entry>420</entry><entry>33000</entry><entry
>420</entry><entry>ENGINEER</entry></row>
<row><entry>. . .</entry><entry>. . .</entry><entry>. . .</entry><entry
>. . .</entry><entry>. . .</entry></row>
<row><entry>568</entry><entry>300</entry><entry>39500</entry><entry
>300</entry><entry>SALESREP</entry></row>
</tbody>
</tgroup>
</informaltable>
</listitem>
<listitem><para>Process the select list, leaving only four columns.</para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="4" tgroupstyle="TI2  inline table">
<tbody>
<row><entry>JOBDESC</entry><entry>FIRST_NAME</entry><entry>LAST_NAME</entry>
<entry>SALARY</entry></row>
<row><entry>SALESREP</entry><entry>TIM</entry><entry>WALKER</entry>
<entry>32000</entry></row>
<row><entry>. . .</entry><entry>. . .</entry><entry>. . .</entry><entry
>. . .</entry></row>
<row><entry>SECRETARY</entry><entry>JOHN</entry><entry>CHOU</entry>
<entry>28000</entry></row>
<row><entry>. . . </entry><entry>. . .</entry><entry>. . .</entry>
<entry>. . .</entry></row>
<row><entry>ENGINEER</entry><entry>MARK</entry><entry>FOLEY</entry>
<entry>33000</entry></row>
<row><entry>. . .</entry><entry>. . .</entry><entry>. . .</entry><entry
>. . .</entry></row>
<row><entry>SALESREP</entry><entry>JESSICA</entry><entry>CRINER</entry>
<entry>39500</entry></row>
</tbody>
</tgroup>
</informaltable>
<para>The final result is shown in the output:</para>
<programlisting>
JOBDESC       FIRST_NAME    LAST_NAME        SALARY
------------  ------------  ---------------  -----------
SALESREP      TIM           WALKER           32000.00
...
SECRETARY     JOHN          CHOU             28000.00
...
</programlisting>
</listitem>
</orderedlist>
</listitem>
<listitem><para>Select from three tables, group the rows by job code
and (within job code) by department number, and order the groups by
the maximum salary of each group:</para>
<programlisting>
SELECT E.jobcode, E.deptnum, MIN (salary), MAX (salary)
FROM persnl.employee E,
  persnl.dept D, persnl.job J
WHERE E.deptnum = D.deptnum AND E.jobcode = J.jobcode
  AND E.jobcode IN (900, 300, 420)
GROUP BY E.jobcode, E.deptnum
ORDER BY 4;

JOBCODE  DEPTNUM  (EXPR)       (EXPR)
-------  -------  -----------  -----------
    900     1500     17000.00     17000.00
    900     2500     18000.00     18000.00
    ...
    300     3000     19000.00     32000.00
    900     2000     32000.00     32000.00
    ...
    300     3200     22000.00     33000.10
    420     4000     18000.10     36000.00
    ...

--- 16 row(s) selected.
</programlisting>
<para>Only job codes 300, 420, and 900 are selected. The minimum and
maximum salary for the same job in each department are computed, and
the rows are ordered by maximum salary.</para>
</listitem>
<listitem><para>Select from two tables that have been joined by using
an INNER JOIN on matching part numbers:</para>
<programlisting>
SELECT OD.*, P.* 
FROM sales.odetail OD INNER JOIN sales.parts P 
ON OD.partnum = P.partnum;

Order/Num  Part/Num  Unit/Price  Qty/Ord  Part/Num  Part Description  PRICE  Qty/Avail    
----------  --------  ------------  ----------  --------  
------------------  ------------  -----------  
    400410       212       2450.00          12       212  
PCSILVER, 20 MB          2500.00         3525  

    500450       212       2500.00           8       212  
PCSILVER, 20 MB          2500.00         3525  

    100210       244       3500.00           3       244  
PCGOLD, 30 MB            3000.00         4426  

    800660       244       3000.00           6       244  
PCGOLD, 30 MB            3000.00         4426  
       ...       ...           ...         ...       ...
...                          ...          ...       

--- 72 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Select from three tables and display them in employee
number order. Two tables are joined by using a LEFT JOIN on matching
department numbers, then an additional table is joined on matching
jobcodes:</para>
<programlisting>
SELECT empnum, first_name, last_name, deptname, location, jobdesc
  FROM employee e LEFT JOIN dept d ON e.deptnum = d.deptnum
    LEFT JOIN job j ON e.jobcode = j.jobcode
  ORDER BY empnum;
</programlisting>
</listitem>
<listitem><para>Suppose that the JOB_CORPORATE table has been created
from the JOB table by using the CREATE LIKE statement. Form the union
of these two tables:</para>
<programlisting>
SELECT * FROM job UNION SELECT * FROM job_corporate;

JOBCODE  JOBDESC             
-------  ------------------  
    100  MANAGER             
    200  PRODUCTION SUPV     
    250  ASSEMBLER           
    300  SALESREP            
    400  SYSTEM ANALYST      
    420  ENGINEER            
    450  PROGRAMMER          
    500  ACCOUNTANT          
    600  ADMINISTRATOR       
    900  SECRETARY           
    100  CORP MANAGER        
    300  CORP SALESREP       
    400  CORP SYSTEM ANALYS  
    500  CORP ACCOUNTANT     
    600  CORP ADMINISTRATOR  
    900  CORP SECRETARY      

--- 16 row(s) selected.
</programlisting>
</listitem>
<listitem><para>A FULL OUTER JOIN combines the results of both left
and right outer joins. These joins show records from both tables and
fill in NULLs for missing matches on either side:</para>
<programlisting>
SELECT * 
FROM employee 
     FULL OUTER JOIN 
     department
       ON employee.DepartmentID = department.DepartmentID;  

LastName DepartmentID  DepartmentName  DepartmentID
-------  ------------  --------------  ------------
Smith              34  Clerical                  34
Jones              33  Engineering               33
Robinson           34  Clerical                  34
Jasper             36  NULL                    NULL
Steinberg          33  Engineering               33
Rafferty           31  Sales                     31
NULL             NULL  Marketing                 35</programlisting>
</listitem>
<listitem><para>Present two ways to select the same data submitted
by customers from California.</para><para>The first way:</para>
<programlisting>
SELECT OD.ordernum, SUM (qty_ordered * price)
FROM sales.parts P, sales.odetail OD
WHERE OD.partnum = P.partnum AND OD.ordernum IN
  (SELECT O.ordernum
   FROM sales.orders O, sales.customer C
   WHERE O.custnum = C.custnum AND state = 'CALIFORNIA')
GROUP BY OD.ordernum;

ORDERNUM    (EXPR)                 
----------  ---------------------  
    200490                1030.00  
    300350               71025.00  
    300380               28560.00  
--- 3 row(s) selected.
</programlisting>
<para>The second way:</para>
<programlisting>
SELECT OD.ordernum, SUM (qty_ordered * price)
FROM sales.parts P, sales.odetail OD
WHERE OD.partnum = P.partnum AND OD.ordernum IN
  (SELECT O.ordernum
   FROM sales.orders O
   WHERE custnum IN
    (SELECT custnum
     FROM sales.customer 
     WHERE state = 'CALIFORNIA'))
GROUP BY OD.ordernum;

ORDERNUM    (EXPR)                 
----------  ---------------------  
    200490                1030.00  
    300350               71025.00  
    300380               28560.00  
--- 3 row(s) selected.
</programlisting>
<para>The price for the total quantity ordered is computed for each
order number.</para>
</listitem>
<listitem><para>Show employees, their salaries, and the percentage
of the total payroll that their salaries represent. Note the subquery
as part of the expression in the select list:</para>
<programlisting>SELECT empnum, first_name, last_name, salary,
CAST(salary * 100 / (SELECT SUM(salary) FROM persnl.employee)
  AS NUMERIC(4,2))
FROM persnl.employee
ORDER BY salary, empnum;

Employee/Number  First Name       Last Name             salary       (EXPR)   
---------------  ---------------  --------------------  -----------  -------  
            209  SUSAN            CHAPMAN                  17000.00      .61  
            235  MIRIAM           KING                     18000.00      .65  
            224  MARIA            JOSEF                    18000.10      .65  
...
             23  JERRY            HOWARD                  137000.10     4.94  
             32  THOMAS           RUDLOFF                 138000.40     4.98  
              1  ROGER            GREEN                   175500.00     6.33  
...

--- 62 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Examples of using expressions in the GROUP BY clause:</para>
<programlisting>SELECT a+1 FROM t GROUP BY a+1;
</programlisting>
<programlisting>SELECT cast(a AS int) FROM t GROUP BY cast(a AS int);
</programlisting>
<programlisting>SELECT a+1 FROM t GROUP BY 1;
</programlisting>
</listitem>
<listitem><para>Examples of unsupported expressions in the GROUP BY
clause:</para>
<programlisting>SELECT sum(a) FROM t GROUP BY sum(a);
</programlisting>
<programlisting>SELECT (SELECT a FROM t1) FROM t GROUP BY (SELECT a FROM t1);
</programlisting>
<programlisting>SELECT a+1 FROM t GROUP BY 1+a;
</programlisting>
</listitem>
</itemizedlist>
<section condition="hidden">
<title>Examples for Embedded INSERT</title>
<indexterm><primary>Embedded INSERT</primary><secondary>examples of</secondary>
</indexterm><indexterm><primary>INSERT statement</primary><secondary
>embedded, examples of</secondary></indexterm>
<itemizedlist>
<listitem><para>Table <literal>identity_table</literal> is created
with an identity column. As rows are inserted into <literal>identity_table</literal
>, the customer obtains the values of the identity column.</para>
<programlisting>
CREATE TABLE identity_table
  (a LARGEINT GENERATED BY DEFAULT AS IDENTITY 
     NOT NULL,
   b INT UNSIGNED NOT NULL,
   c INT UNSIGNED,
   primary key(a));
</programlisting>
</listitem>
<listitem><para>Inserts new rows into the <literal>identity_table</literal
> table and retrieves IDENTITY column values using the SELECT statement
syntax.</para>
<programlisting>
select a
  from (
  insert into identity_table values
  (DEFAULT,100,100),
   (DEFAULT,200,200)
     )X;
</programlisting>
<programlisting>
  A                B      C
  ---------------  ------ ------
</programlisting>
<programlisting>
  216944652091640     100    100
  216944652091641     200    200
</programlisting>
</listitem>
<listitem><para>INSERT...SELECT statements are supported with embedded
INSERT statements:</para>
<programlisting>
insert into another_table values (300,300,300),
                                 (400,400,400),
                                 (500,500,500);
</programlisting>
<programlisting>
select P.a, P.b, P.c
  from (
        insert into identity_table
          select * from another_table where y &lt; 500
        ) as P where P.a = 300;
</programlisting>
<programlisting>
  A                B      C
  ---------------  ------ -------
              300     300     300
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
</section>
<section id="i1010143" pagebreak="yes">
<title>SET SCHEMA Statement</title>
<itemizedlist>
<listitem><para><xref linkend="i1062867" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1010198" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1059978" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>SET SCHEMA statement</primary><secondary>syntax
diagram of</secondary></indexterm>
<para>The SET SCHEMA statement sets the default logical schema for
unqualified object names for the current SQL session.</para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>SET SCHEMA <replaceable>default-schema-name</replaceable
> 
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="i1062867">
<title>Syntax Description of SET SCHEMA</title>
<variablelist>
<varlistentry><term><replaceable>default-schema-name</replaceable
></term>
<listitem><para>specifies the name of a schema. See <xref
linkend="i1032499" role="select:quotedtitle page"/>.</para><para><replaceable
>default-schema-name</replaceable> is an SQL identifier. For example,
you can use <literal>MYSCHEMA</literal> or <literal>myschema</literal
> or a delimited identifier <literal>"My_Schema"</literal>. See <xref
linkend="i1032512" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="i1010198">
<title>Considerations for SET SCHEMA</title>
<indexterm><primary>SET SCHEMA statement</primary><secondary>considerations
for</secondary></indexterm>
<para>The default schema you specify with SET SCHEMA remains in effect
until the end of the session or until you execute another SET SCHEMA
statement. If you do not set a schema name for the session using SET
SCHEMA, the default schema is SEABASE, which exists in the TRAFODION
catalog.</para>
<para>For information on how to create a schema, see <xref
linkend="Creating-and-Dropping-Schema" role="select:quotedtitle page"
/>.</para>
</section>
<section id="i1059978">
<title>Example of SET SCHEMA</title>
<indexterm><primary>SET SCHEMA statement</primary><secondary>example
of</secondary></indexterm>
<para>Set the default schema name:</para>
<informalexample id="i1010231">
<programlisting>SET SCHEMA myschema;
</programlisting>
</informalexample>
</section>
</section>
<section id="i1010391" pagebreak="yes">
<title>SET TRANSACTION Statement</title>
<itemizedlist>
<listitem><para><xref linkend="i1062891" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1010464" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1010499" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>Transaction control statements</primary><secondary
>SET TRANSACTION statement</secondary></indexterm><indexterm><primary
>SET TRANSACTION statement</primary><secondary>syntax diagram of</secondary>
</indexterm><indexterm><primary>Transaction management</primary>
<secondary>SET TRANSACTION </secondary></indexterm>
<para>The SET TRANSACTION statement sets the <phrase>autocommit attribute</phrase
> for transactions. It stays in effect until the end of the session
or until the next SET TRANSACTION statement, whichever comes first.
Therefore, the SET TRANSACTION statement can set the <phrase>autocommit
attribute</phrase> of all subsequent transactions in the session. <phrase
condition="hidden">SET TRANSACTION statements are not cumulative;
each SET TRANSACTION statement erases all the settings specified by
previous SET TRANSACTION statements. If you want to set multiple transactions
attributes, they must all be specified in a single SET TRANSACTION
statement. To reset all transaction attributes to their default values,
simply use a SET TRANSACTION attribute to set a single attribute to
its default value.</phrase></para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>SET TRANSACTION <replaceable>autocommit-option</replaceable
>

<replaceable>autocommit-option</replaceable> is:
   AUTOCOMMIT [ON] | AUTOCOMMIT OFF</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<informaltable colsep="0" condition="hidden" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>SET TRANSACTION <replaceable>transaction-mode</replaceable
><literal condition="hidden"> [,<replaceable>transaction-mode</replaceable
>]...</literal>

<replaceable>transaction-mode</replaceable> is:
<literal condition="hidden">     <replaceable>isolation-level</replaceable
>  
</literal><literal condition="hidden">   | <replaceable>access-mode</replaceable
>  
</literal><literal condition="hidden">   | <replaceable>diagnostics-size</replaceable
>  
</literal>   <literal condition="hidden">| </literal><replaceable
>autocommit-option</replaceable>
<literal condition="hidden">   | <replaceable>norollback-option</replaceable
>   
</literal><literal condition="hidden">   | <replaceable>autoabort-interval</replaceable
>
</literal><literal condition="hidden">   | <replaceable>autobegin-option</replaceable
> 
</literal><literal condition="hidden">   | <replaceable>multicommit-option</replaceable
> 
</literal>
<literal condition="hidden"><replaceable>isolation-level</replaceable
> is:
   ISOLATION LEVEL <replaceable>access-option</replaceable> 

</literal><literal condition="hidden"><replaceable>access-option</replaceable
> is:
     READ UNCOMMITTED
     READ COMMITTED
   | SERIALIZABLE
   | REPEATABLE READ

</literal><literal condition="hidden"><replaceable>access-mode</replaceable
> is:
   READ ONLY | READ WRITE 
 
</literal><replaceable>autocommit-option</replaceable> is:
   AUTOCOMMIT [ON] | AUTOCOMMIT OFF
<literal condition="hidden">
<replaceable>norollback-option</replaceable> is:
   NO ROLLBACK [ON] | NO ROLLBACK OFF

</literal><literal condition="hidden"><replaceable>autoabort-interval</replaceable
>  is:
   AUTOABORT [ <replaceable>timeout</replaceable> | 0 | RESET]

</literal><literal condition="hidden"><replaceable>timeout</replaceable
> is:
    <replaceable>integer</replaceable> {HOURS[S] | MINUTE[S] | SECOND[S]}

</literal><literal condition="hidden"><replaceable>autobegin-option</replaceable
> is:
   AUTOBEGIN [ON] | AUTOBEGIN OFF

</literal><literal condition="hidden"><replaceable>multicommit-option</replaceable
> is:
   MULTI COMMIT [ON] | MULTI COMMIT OFF
</literal></programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="i1062891">
<title>Syntax Description of SET TRANSACTION</title>
<variablelist>
<varlistentry><term><indexterm><primary>SET TRANSACTION statement</primary>
<secondary>autocommit option</secondary></indexterm><replaceable>autocommit-option</replaceable
></term>
<listitem><para>specifies whether Trafodion SQL commits or rolls back
automatically at the end of statement execution. This option applies
to any statement for which the system initiates a transaction. </para>
<para>If this option is set to ON, Trafodion SQL automatically commits
any changes or rolls back any changes made to the database at the
end of statement execution. AUTOCOMMIT is on by default at the start
of a session.</para>
<para>If this option is set to OFF, the current transaction remains
active until the end of the session unless you explicitly commit or
rollback the transaction. AUTOCOMMIT is a Trafodion SQL extension;
you cannot use in it with any other option.</para>
<para>Using the AUTOCOMMIT option in a SET TRANSACTION statement does
not reset other transaction attributes that may have been specified
in a previous SET TRANSACTION statement. Similarly, a SET TRANSACTION
statement that does not specify the AUTOCOMMIT attribute does not
reset this attribute.</para>
</listitem>
</varlistentry>
<!--WRITER'S NOTE: Hidden for now until other options are supported.-->
<varlistentry condition="hidden"><term><indexterm><primary>SET TRANSACTION
statement</primary><secondary>transaction modes set by</secondary>
</indexterm><replaceable>transaction-mode</replaceable> </term>
<listitem><para>specifies the attribute that you can set. You cannot
specify any of the options more than once within one SET TRANSACTION
statement. <phrase condition="hidden">You cannot use the AUTOCOMMIT
or AUTOBEGIN options with any other option.</phrase></para>
<variablelist>
<varlistentry condition="hidden"><term><replaceable>isolation-level</replaceable
>  </term>
<listitem><para>specifies the level of data consistency defined for
the transaction and the degree of concurrency the transaction has
with other transactions that use the same data. The default isolation
level is READ COMMITTED.</para></listitem>
</varlistentry>
<varlistentry condition="hidden"><term><replaceable>access-mode</replaceable
> </term>
<listitem><para>specifies the type of data access that the transaction
requires, depending on whether the transaction changes the database.</para>
<para>If the <replaceable>isolation-level</replaceable> is READ UNCOMMITTED,
you cannot specify READ WRITE. The default <replaceable>access-mode</replaceable
> is READ WRITE.</para>
<para>See <xref linkend="i1026505" role="select:quotedtitle page"
/>.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>autocommit-option</replaceable> </term>
<listitem><para>specifies whether Trafodion SQL commits or rolls back
automatically at the end of statement execution. This option applies
to any statement for which the system initiates a transaction. </para>
<para>If this option is set to ON, Trafodion SQL automatically commits
any changes or rolls back any changes made to the database at the
end of statement execution. AUTOCOMMIT is on by default at the start
of a session.</para>
<para>If this option is set to OFF, the current transaction remains
active until the end of the session unless you explicitly commit or
rollback the transaction. AUTOCOMMIT is a Trafodion SQL extension;
you cannot use in it with any other option.</para>
<para>Using the AUTOCOMMIT option in a SET TRANSACTION statement does
not reset other transaction attributes that may have been specified
in a previous SET TRANSACTION statement. Similarly, a SET TRANSACTION
statement that does not specify the AUTOCOMMIT attribute does not
reset this attribute.</para>
</listitem>
</varlistentry>
<varlistentry condition="hidden"><term><replaceable>norollback-option</replaceable
></term>
<listitem><para>specifies that a transaction does not rollback if
it aborts. All changes made to the database as part of the failed
transaction, up to the point of failure, are persistent. <indexterm>
<primary>Rollback mode</primary><secondary>norollback-option</secondary>
</indexterm></para><para>This option can be set to ON only for INSERT,
UPDATE, or DELETE operations on a table that has no dependent objects
such as an index. If this option is set to ON and an INSERT statement
is issued on a table with an index, the INSERT statement will raise
an error and will not insert any rows. Setting this option to ON can
provide a significant benefit in error situations for long running
INSERT, UPDATE, or DELETE statements. For such statements, an error
midway through execution will cause the entire transaction to be backed
out, if this option is not enabled. Backing out data as part of the
rollback process can be time and resource consuming. This option has
been provided to avoid expensive backout processes.</para>
</listitem>
</varlistentry>
<varlistentry condition="hidden"><term><replaceable>autoabort-interval</replaceable
> </term>
<listitem><para>controls the autoabort feature. </para>
<variablelist>
<varlistentry><term><replaceable>timeout</replaceable></term>
<listitem><para>specifies the transaction is aborted automatically
when it reaches the duration indicated. Timeout can be specified in
hours, minutes, and seconds.</para><para>The minimum value is 20 seconds.
The maximum values are 21474836 seconds, 357913 minutes, or 5965 hours.
If the timeout value does not satisfy the conditions, an error message
is generated.</para>
</listitem>
</varlistentry>
<varlistentry><term>0</term>
<listitem><para>Turns off the autoabort function for this transaction,
eliminating any time limit.</para></listitem>
</varlistentry>
<varlistentry><term>RESET</term>
<listitem><para>Reverts to the cluster-wide autoabort interval configured.</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry condition="hidden"><term><replaceable>autobegin-option</replaceable
> </term>
<listitem><para>specifies whether transactions should be initiated
automatically. </para><para>The default setting is ON.</para>
<para>If this option is set to OFF and Trafodion SQL needs a transaction
and one is not already running, an error is returned.</para>
<para>The AUTOBEGIN option in a SET TRANSACTION can only be specified
on one SET TRANSACTION command. You can only issue the SET TRANSACTION
AUTOBEGIN OFF statement by itself. It cannot be combined with other
functions of SET TRANSACTION. For example, you cannot issue <command
>SET TRANSACTION AUTOBEGIN OFF, NO ROLLBACK OFF</command>.</para>
<para>SET TRANSACTION AUTOBEGIN and SET TRANSACTION AUTOCOMMIT are
independent of each other; one does not affect the other.</para>
</listitem>
</varlistentry>
<varlistentry condition="hidden"><term><replaceable>multicommit-option</replaceable
> </term>
<listitem><para>The default value is OFF.</para><para>All subsequent
delete queries use multiple transactions to complete the operation
until MULTI COMMIT is set to OFF by another SET TRANSACTION statement.
These multiple transactions are managed by the system. These multiple
transactions are independent transactions from TMF. Therefore, any
point-in-time recovery by TMF is done individually for these multiple
transactions. MULTI COMMIT can be specified in the SET TRANSACTION
statement along with other <replaceable>transaction-mode</replaceable
> options. This option is not compatible with the READ UNCOMMITTED
access option or with READ ONLY access mode or with the NO ROLLBACK
option set to ON. The SET TRANSACTION options, except MULTI COMMIT,
are valid for each of the transactions the system starts to complete
the statement. This option cannot be used under a user-defined transaction.
This feature is also known as Long Running Delete.</para>
<note>
<para>The <literal>multicommit-option</literal> must only be used
for large tables. Using the <literal>multicommit-option</literal> on
small tables incurs unnecessary overhead from starting and committing
multiple transactions.</para>
</note>
<para>When MULTI COMMIT is set to ON, all subsequent delete queries
use multiple transactions to complete the operation until MULTI COMMIT
is set to OFF by another SET TRANSACTION statement.</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="i1010464">
<title>Considerations for SET TRANSACTION</title>
<indexterm><primary>SET TRANSACTION statement</primary><secondary
>considerations for</secondary></indexterm>
<section condition="hidden">
<title>MULTI COMMIT</title>
<indexterm><primary>SET TRANSACTION statement</primary><secondary
>MULTI COMMIT</secondary></indexterm>
<para>Delete operations on a very large data set (the number of rows
affected in a single table in a single transaction) can be long running.
This causes the row locks to escalate to table locks resulting in
loss of concurrency. The Long Running Delete (LRD) feature executes
these delete statements in multiple statements. Each of these multiple
statements is executed in a separate transaction, thus avoiding lock
escalation.</para>
<para>LRD is turned on by setting the MULTI COMMIT option ON. For
example:<programlisting>SET TRANSACTION MULTI COMMIT ON;

DELETE FROM persnl.employee
WHERE empnum = 23;
--- 1 row(s) deleted.

SET TRANSACTION MULTI COMMIT OFF;
</programlisting></para>
<para>Restrictions for the MULTI COMMIT option:</para>
<itemizedlist>
<listitem><para>Not compatible with the READ UNCOMMITTED isolation
level.</para></listitem>
<listitem><para>Not compatible with READ ONLY access mode.</para>
</listitem>
<listitem><para>Except for MULTI COMMIT, all of the SET TRANSACTION
options are valid for the child transactions and not the logical parent
transaction.</para></listitem>
<listitem><para>Not compatible with the NO ROLLBACK option set to
ON.</para></listitem>
</itemizedlist>
<para>This table shows the compatibility of MULTI COMMIT (ON and OFF)
with other SET TRANSACTION modes:</para>
<informaltable frame="topbot">
<tgroup cols="4" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="1.63*"/>
<colspec colname="col2" colwidth="1.29*"/>
<colspec colname="col3" colwidth="0.52*"/>
<colspec colname="col4" colwidth="0.54*"/>
<thead>
<row rowsep="1" valign="bottom"><entry align="left" colsep="1"
nameend="col2" namest="col1" valign="bottom">MULTI COMMIT</entry><entry
align="left" valign="bottom">ON</entry><entry align="left"
valign="bottom">OFF</entry></row>
</thead>
<tbody>
<row><entry>ISOLATION LEVEL ACCESS OPTION </entry><entry><simplelist>
<member>READ UNCOMMITTED</member>
<member>READ COMMITTED</member>
<member>SERIALIZABLE</member>
<member>REPEATED READ</member>
</simplelist></entry><entry><simplelist>
<member>No</member>
<member>Yes</member>
<member>Yes</member>
<member>Yes</member>
</simplelist></entry><entry><simplelist>
<member>Yes</member>
<member>Yes</member>
<member>Yes</member>
<member>Yes</member>
</simplelist></entry></row>
<row><entry>ACCESS MODE</entry><entry><simplelist>
<member>READ ONLY</member>
<member>READ WRITE</member>
</simplelist></entry><entry><simplelist>
<member>No</member>
<member>Yes</member>
</simplelist></entry><entry><simplelist>
<member>Yes</member>
<member>Yes</member>
</simplelist></entry></row>
<row><entry>AUTOCOMMIT</entry><entry><simplelist>
<member>ON</member>
<member>OFF</member>
</simplelist></entry><entry><simplelist>
<member>Yes</member>
<member>Yes</member>
</simplelist></entry><entry><simplelist>
<member>Yes</member>
<member>Yes</member>
</simplelist></entry></row>
<row><entry>NO ROLLBACK</entry><entry><simplelist>
<member>ON</member>
<member>OFF</member>
</simplelist></entry><entry><simplelist>
<member>No</member>
<member>Yes</member>
</simplelist></entry><entry><simplelist>
<member>Yes</member>
<member>Yes</member>
</simplelist></entry></row>
<row><entry>AUTOABORT</entry><entry><simplelist>
<member>TIMEOUT</member>
<member>0</member>
<member>RESET</member>
</simplelist></entry><entry><simplelist>
<member>Yes</member>
<member>Yes</member>
<member>Yes</member>
</simplelist></entry><entry><simplelist>
<member>Yes</member>
<member>Yes</member>
<member>Yes</member>
</simplelist></entry></row>
<row><entry colsep="1" nameend="col4" namest="col1">Yes denotes compatible<para
>No denotes not compatible</para></entry></row>
</tbody>
</tgroup>
</informaltable>
</section>
<section id="i1010466">
<title>Implicit Transactions</title>
<indexterm><primary>SET TRANSACTION statement</primary><secondary
>implicit transactions</secondary></indexterm>
<para>Most DML statements are transaction initiating—the system automatically
initiates a transaction when the statement begins executing.</para>
<para>The exceptions (statements that are not transaction initiating)
are: </para>
<itemizedlist>
<listitem><para>COMMIT, FETCH, ROLLBACK, and SET TRANSACTION</para>
</listitem>
<listitem condition="hidden"><para>DML statements executing under
READ UNCOMMITTED access </para></listitem>
<listitem><para>EXECUTE<phrase condition="hidden"> or EXECUTE IMMEDIATE</phrase
>, which is transaction initiating only if the associated statement
is transaction-initiating</para></listitem>
</itemizedlist>
</section>
<section>
<title>Explicit Transactions</title>
<indexterm><primary>SET TRANSACTION statement</primary><secondary
>explicit transactions</secondary></indexterm>
<para>You can issue an explicit BEGIN WORK even if the autocommit
option is on. The autocommit option is temporarily disabled until
you explicitly issue COMMIT or ROLLBACK.</para>
</section>
<section condition="hidden">
<title>Degree of Concurrency</title>
<indexterm><primary>Concurrency</primary><secondary>SET TRANSACTION
statement</secondary></indexterm><indexterm><primary>SET TRANSACTION
statement</primary><secondary>concurrency</secondary></indexterm>
<para>The SET TRANSACTION statement affects the degree of concurrency
available to the transaction. Concurrent processes take place within
the same interval of time and share resources. The degree of concurrency
available—that is, whether a process that requests access to data
already being accessed is given access or placed in a wait queue—is
affected by:</para>
<itemizedlist>
<listitem><para>The transaction access mode (READ ONLY or READ WRITE)</para>
</listitem>
<listitem><para>The transaction isolation level (READ UNCOMMITTED,
READ COMMITTED, SERIALIZABLE, or REPEATABLE READ)</para></listitem>
<listitem><para>The transaction MULTI COMMIT mode</para></listitem>
</itemizedlist>
</section>
<section condition="hidden">
<title>Effect on Utilities</title>
<para>The SET TRANSACTION statement has no effect on the utility statements.
The SET TRANSACTION statement does set attributes for transactions
for UPDATE STATISTICS. </para>
</section>
</section>
<section id="i1010499">
<title>Examples of SET TRANSACTION</title>
<indexterm><primary>SET TRANSACTION statement</primary><secondary
>examples of</secondary></indexterm>
<para>The following SET TRANSACTION statement turns off autocommit
so that the current transaction remains active until the end of the
session unless you explicitly commit or rollback the transaction.
Trafodion SQL does not automatically commit or roll back any changes
made to the database at the end of statement execution. Instead, Trafodion
SQL commits all the changes when you issue the COMMIT WORK statement.</para>
<programlisting>SET TRANSACTION AUTOCOMMIT OFF;
--- SQL operation complete.

BEGIN WORK;
--- SQL operation complete.

DELETE FROM persnl.employee
  WHERE empnum = 23;
--- 1 row(s) deleted.

INSERT INTO persnl.employee 
  (empnum, first_name, last_name, deptnum, salary) 
  VALUES (50, 'JERRY','HOWARD', 1000, 137000.00);
--- 1 row(s) inserted.

UPDATE persnl.dept 
  SET manager = 50 
  WHERE deptnum = 1000; 
--- 1 row(s) updated.

COMMIT WORK;
--- SQL operation complete.</programlisting>
<itemizedlist condition="hidden">
<listitem condition="hidden"><para>Set the isolation level of a transaction
that performs deletes, inserts, and updates:</para>
<programlisting>SET TRANSACTION 
  ISOLATION LEVEL SERIALIZABLE;
--- SQL operation complete.

BEGIN WORK;
--- SQL operation complete.

DELETE FROM persnl.employee
  WHERE empnum = 23;
--- 1 row(s) deleted.

INSERT INTO persnl.employee 
  (empnum, first_name, last_name, deptnum, salary) 
  VALUES (50, 'JERRY','HOWARD', 1000, 137000.00);
--- 1 row(s) inserted.

UPDATE persnl.dept 
  SET manager = 50 
  WHERE deptnum = 1000; 
--- 1 row(s) updated.

COMMIT WORK;
--- SQL operation complete.
</programlisting>
<para>This transaction uses SERIALIZABLE access (which provides maximum
consistency but reduces concurrency). Therefore, you should execute
it at a time when few users need concurrent access to the database.
Locks acquired for SERIALIZABLE access are held until the changes
made by transaction is committed.</para>
</listitem>
<listitem condition="hidden"><para>Using MULTI COMMIT with other <replaceable
>transaction-mode</replaceable> options:</para>
<programlisting>SET TRANSACTION ISOLATION READ COMMITTED,
        MULTI COMMIT ON,
        READ WRITE;</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="SHOWCONTROLstmt" pagebreak="yes">
<title>SHOWCONTROL Statement</title>
<indexterm><primary>SHOWCONTROL statement</primary><secondary>syntax
diagram of</secondary></indexterm>
<para>The SHOWCONTROL statement displays the default attributes in
effect.</para>
<para>SHOWCONTROL is a Trafodion SQL extension.</para>
<informaltable frame="all">
<tgroup cols="1" colsep="0" rowsep="0">
<colspec colname="col4"/>
<tbody>
<row><entry><programlisting>SHOWCONTROL {ALL | [QUERY] DEFAULT [<replaceable
>attribute-name</replaceable>[, MATCH {FULL | PARTIAL }]]}</programlisting
></entry></row>
</tbody>
</tgroup>
</informaltable>
<section>
<title>Syntax Description of SHOWCONTROL</title>
<variablelist>
<varlistentry><term>ALL</term>
<listitem><para>displays all the hard-coded default attributes that
have been set for the Trafodion instance.</para></listitem>
</varlistentry>
<varlistentry><term>[QUERY] DEFAULT</term>
<listitem><para>displays the CONTROL QUERY DEFAULT statements in effect
for the session. For more information, see the<xref
linkend="controlquerydefault" role="select:quotedtitle page"/></para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>attribute-name</replaceable>[, MATCH
{FULL | PARTIAL }]</term>
<listitem><para>displays only the defaults that match, either fully
or partially, the <replaceable>attribute</replaceable> used in CONTROL
QUERY DEFAULT statements. The match is not case-sensitive. For descriptions
of these attributes, see <xref linkend="CQD_Attributes"
role="select:quotedtitle page"/>.</para><para>MATCH FULL specifies
that <replaceable>attribute-name</replaceable> must be the same as
the attribute name used in a CONTROL QUERY DEFAULT statement. MATCH
PARTIAL specifies that <replaceable>attribute-name</replaceable> must
be included in the attribute name used in a CONTROL QUERY DEFAULT
statement. The default is MATCH PARTIAL.</para>
<para>If <replaceable>attribute-name</replaceable> is a reserved word,
such as MIN, MAX, or TIME, you must capitalize <replaceable>attribute-name</replaceable
> and delimit it within double quotes (“). The only exceptions to
this rule are the reserved words CATALOG and SCHEMA, which you can
either capitalize and delimit within double quotes or specify without
quotation marks.</para>
</listitem>
</varlistentry>
</variablelist>
</section>
<section>
<title>Example of SHOWCONTROL</title>
<indexterm><primary>SHOWCONTROL statement</primary><secondary>example
of</secondary></indexterm>
<para>Issue multiple CONTROL QUERY DEFAULT statements followed by
a SHOWCONTROL DEFAULT command:</para>
<programlisting>CONTROL QUERY DEFAULT CACHE_HISTOGRAMS_REFRESH_INTERVAL '7200';

--- SQL operation complete.

CONTROL QUERY DEFAULT HIST_NO_STATS_REFRESH_INTERVAL '7200';

--- SQL operation complete.

SHOWCONTROL DEFAULT;

CONTROL QUERY DEFAULT
  CACHE_HISTOGRAMS_REFRESH_INTERVAL	7200
  HIST_NO_STATS_REFRESH_INTERVAL	7200

--- SQL operation complete.
</programlisting>
</section>
</section>
<section id="showddl" pagebreak="yes">
<title>SHOWDDL Statement</title>
<itemizedlist>
<listitem><para><xref linkend="showddlsyntax" role="select:quotedtitle"
/></para></listitem>
<listitem><para> <xref linkend="showddlconsid" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="showddlexmpl" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>SHOWDDL statement</primary><secondary>syntax diagram
of</secondary></indexterm>
<para>The SHOWDDL statement describes the DDL syntax used to create
an object as it exists in the metadata, or it returns a description
of a user, role, or component in the form of a GRANT statement. </para>
<para>SHOWDDL is a Trafodion SQL extension.</para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>SHOWDDL <replaceable>showddl-spec</replaceable
>

<replaceable>showddl-spec</replaceable>
    [TABLE <literal>| LIBRARY </literal>| PROCEDURE] [<replaceable
>schema-name</replaceable>.]<replaceable>object-name</replaceable
>[, PRIVILEGES ]
   | COMPONENT <replaceable>component-name</replaceable>
   | USER <replaceable>database-username</replaceable>
   | ROLE <replaceable>role-name</replaceable>[, GRANTEES ]
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="showddlsyntax">
<title>Syntax Description of SHOWDDL</title>
<variablelist>
<!--WRITER'S NOTE: Expose "library" when it is supported, probably in R1.1.-->
<varlistentry><term>[<replaceable>schema-name</replaceable>.]<replaceable
>object-name</replaceable></term>
<listitem><para>specifies the ANSI name of an existing table, <phrase
condition="hidden">materialized view, </phrase>view<phrase>, library</phrase
><phrase>, or procedure</phrase>. See <xref linkend="i1013018"
role="select:quotedtitle page"/>. <phrase condition="hidden">A synonym
for an existing table, <phrase condition="hidden">materialized view, </phrase
>view<phrase>, or procedure</phrase> can also be specified. </phrase
>If <replaceable>object-name</replaceable> is not fully qualified,
SHOWDDL uses the default schema for the session.</para></listitem>
</varlistentry>
<varlistentry><term>PRIVILEGES </term>
<listitem><para>describes the PRIVILEGES associated with the object.
If specified, privileges are displayed for an object in the form of
GRANT statements.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>component-name</replaceable></term>
<listitem><para>specifies an existing component. Currently, the only
valid component name is SQL_OPERATIONS.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>database-username</replaceable></term>
<listitem><para>specifies a registered database username.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>role-name</replaceable></term>
<listitem><para>specifies an existing role.</para></listitem>
</varlistentry>
<varlistentry><term>GRANTEES </term>
<listitem><para>displays all users who have been granted the role
in the form of GRANT ROLE statements. This is an optional clause.</para>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="showddlconsid">
<title>Considerations for SHOWDDL</title>
<indexterm><primary>SHOWDDL statement</primary><secondary>considerations
for</secondary></indexterm><indexterm><primary>SHOWDDL statement</primary>
<secondary>for a user or a role</secondary></indexterm>
<itemizedlist>
<listitem><para>SHOWDDL can differ from the original DDL used to create
an object.</para></listitem>
<listitem><para>SHOWDDL can be used within <phrase>TrafCI</phrase
>.</para></listitem>
<listitem><para>SHOWDDL [TABLE <phrase>| LIBRARY </phrase>| PROCEDURE]
displays the following information:</para>
<itemizedlist>
<listitem><para>A constraint may be disabled.</para></listitem>
<listitem><para>A table may be offline.</para></listitem>
<listitem><para>An active DDL lock may exist on an object.</para>
</listitem>
</itemizedlist>
</listitem>
<listitem><para>SHOWDDL USER displays user information as a REGISTER
USER statement. </para></listitem>
<listitem><para>SHOWDDL ROLE displays the role information as a CREATE
ROLE statement.</para></listitem>
</itemizedlist>
<section>
<title>Required Privileges</title>
<para>To issue a SHOWDDL statement, one of the following must be true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT.</para></listitem>
<listitem><para>You are the owner of the database object.</para>
</listitem>
<listitem><para>You have the SHOW component privilege for the SQL_OPERATIONS
component. The SHOW component privilege is granted to PUBLIC by default.</para>
</listitem>
<listitem><para>You have the SELECT privilege on the target object.</para>
</listitem>
</itemizedlist>
</section>
<section id="showddlobjectdiffs">
<title>Differences Between SHOWDDL Output and Original DDL</title>
<indexterm><primary>SHOWDDL statement</primary><secondary>differences
between output and original DDL</secondary></indexterm>
<itemizedlist>
<listitem><para>All column constraints (NOT NULL, PRIMARY KEY, and
CHECK) are transformed into table constraints. All NOT NULL constraints
are consolidated into a single check constraint. </para></listitem>
<listitem><para>Check constraints are moved out of the CREATE TABLE
statement and encapsulated in a separate ALTER TABLE ADD CONSTRAINT
statement.</para></listitem>
<listitem><para>SHOWDDL generates ALTER TABLE ADD COLUMN statements
for each column that was added to the table.</para></listitem>
<listitem><para>All ANSI names in the output are qualified with the
schema name.</para></listitem>
<listitem><para>SHOWDDL displays constraint names even though they
might not have been specified during the creation of the constraint.</para>
</listitem>
<listitem><para>SHOWDDL always generates a Java signature for the
SPJ.</para></listitem>
<!--WRITER'S NOTE: Expose when schema-level privileges are supported.-->
<listitem condition="hidden"><para>Privileges acquired by the object
or procedure from the schema are displayed and preceded by the comment
“<literal>— Schema level privileges</literal>”. The corresponding
GRANT statements are also commented out. Schema-level privileges only
need to be applied at the schema level.</para></listitem>
</itemizedlist>
</section>
<section id="showddlobjectpriv">
<title>PRIVILEGES Option</title>
<para>The PRIVILEGES option includes the GRANT statements as they
apply to the option. Each privilege is specified in separate GRANT
statements even if they were granted in a single statement.</para>
</section>
</section>
<section id="showddlexmpl">
<title>Examples of SHOWDDL</title>
<indexterm><primary>SHOWDDL statement</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>This SHOWDDL statement displays the statement that
created the specified table in the database and the privileges granted
on that table:</para>
<programlisting>SQL>showddl tab41;

 
CREATE TABLE TRAFODION.SCH41.TAB41
  ( 
    A                                INT DEFAULT NULL
  , B                                INT DEFAULT NULL
  )
;
 
-- GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TRAFODION."SCH41"."TAB41" TO PAULLOW41 WITH GRANT OPTION;

--- SQL operation complete.</programlisting>
</listitem>
<!--WRITER'S NOTE: Modify and expose for Trafodion.-->
<listitem condition="hidden"><para>This SHOWDDL statement displays
the statement that created the specified procedure in the database:</para>
<programlisting></programlisting>
</listitem>
<listitem><para>This SHOWDDL statement displays the statement that
registered the specified user in the database:</para>
<programlisting>SQL>showddl user sqluser_admin;

 
REGISTER USER "SQLUSER_ADMIN";

--- SQL operation complete.</programlisting>
</listitem>
<listitem><para>This SHOWDDL statement displays the statement that
created the specified role in the database and the users who have
been granted this role:</para>
<programlisting>SQL>showddl role db__rootrole;

 
CREATE ROLE "DB__ROOTROLE";
  -- GRANT ROLE "DB__ROOTROLE" TO "DB__ROOT" WITH ADMIN OPTION;

--- SQL operation complete.</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="SHOWDDL_SCHEMA" pagebreak="yes">
<title>SHOWDDL SCHEMA Statement</title>
<itemizedlist>
<listitem><para><xref linkend="SynSHOWSCHEMA" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="ConsidsSHOWSCHEMA"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="ExSHOWSCHEMA" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>SHOWDDL SCHEMA statement</primary><secondary>syntax
diagram of</secondary></indexterm>
<para>The SHOWDDL SCHEMA statement displays the DDL syntax used to
create a schema as it exists in the metadata and shows the authorization
ID that owns the schema.</para>
<para>SHOWDDL SCHEMA is a Trafodion SQL extension.</para>
<informaltable frame="all">
<tgroup cols="1" colsep="0" rowsep="0">
<colspec colname="col4"/>
<tbody>
<row><entry><programlisting>SHOWDDL SCHEMA	 [<replaceable>catalog-name</replaceable
>.]<replaceable>schema-name</replaceable> <literal condition="hidden"
>[, {DETAIL | PRIVILEGES}]</literal></programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="SynSHOWSCHEMA">
<title>Syntax Description for SHOWDDL SCHEMA</title>
<variablelist>
<varlistentry><term>[<replaceable>catalog-name</replaceable>.]<replaceable
>schema-name</replaceable></term>
<listitem><para>specifies the ANSI name of an existing catalog and
schema. If <replaceable>schema-name</replaceable> is not fully qualified,
SHOWDDL uses the default catalog for the session<phrase>, TRAFODION</phrase
>. For more information, see <xref linkend="i1013018"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry condition="hidden"><term>DETAIL</term>
<listitem><para>displays objects that have been defined within the
schema in abbreviated format. Abbreviated objects only display the
first part of the statement.</para></listitem>
</varlistentry>
<varlistentry condition="hidden"><term>PRIVILEGES </term>
<listitem><para>describes the PRIVILEGES associated with the schema.
If specified, privileges are displayed for a schema in the form of
GRANT statements. </para></listitem>
</varlistentry>
</variablelist>
</section>
<section id="ConsidsSHOWSCHEMA">
<title>Considerations for SHOWDDL SCHEMA</title>
<indexterm><primary>SHOWDDL SCHEMA statement</primary><secondary>considerations
for</secondary></indexterm>
<para>If not specified, the catalog is the current default catalog<phrase
>, TRAFODION</phrase>.</para>
<itemizedlist condition="hidden">
<listitem><para>If not specified, the catalog is the current default
catalog<phrase>, TRAFODION</phrase>.</para></listitem>
<listitem condition="hidden"><para>The PRIVILEGES option displays
objects that have been granted against the schema.</para></listitem>
<listitem condition="hidden"><para>For the DETAIL option, objects
within the schema are displayed alphabetically by <replaceable>object_name</replaceable
> in the following order:</para>
<itemizedlist>
<listitem><para>Tables</para></listitem>
<listitem><para>Indexes</para></listitem>
<listitem><para>Views</para></listitem>
<listitem condition="hidden"><para>Materialized views</para></listitem>
<listitem condition="hidden"><para>Triggers</para></listitem>
<listitem condition="hidden"><para>Synonyms</para></listitem>
<listitem><para>Procedures</para></listitem>
</itemizedlist>
</listitem>
<listitem condition="hidden"><para>Privileges are displayed after
the abbreviated list of objects and the list is not guaranteed to
be in any particular order.</para></listitem>
</itemizedlist>
<section>
<title>Required Privileges</title>
<para>To issue a SHOWDDL SCHEMA statement, one of the following must
be true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT.</para></listitem>
<listitem><para>You are the owner of the schema.</para></listitem>
<listitem><para>You have the SHOW component privilege for the SQL_OPERATIONS
component. The SHOW component privilege is granted to PUBLIC by default.</para>
</listitem>
</itemizedlist>
</section>
</section>
<section id="ExSHOWSCHEMA">
<title>Example of SHOWDDL SCHEMA</title>
<indexterm><primary>SHOWDDL SCHEMA statement</primary><secondary>example
of</secondary></indexterm>
<itemizedlist>
<para>This SHOWDDL SCHEMA statement displays the DDL syntax used to
create the schema, MYSCHEMA, as it exists in the metadata and shows
the authorization ID that owns the schema:</para>
<programlisting>SHOWDDL SCHEMA MYSCHEMA;

CREATE PRIVATE SCHEMA "TRAFODION"."MYSCHEMA" AUTHORIZATION "DB__ROOT";

--- SQL operation complete.</programlisting>
</itemizedlist>
</section>
</section>
<section id="SHOWSTATS" pagebreak="yes">
<title>SHOWSTATS Statement</title>
<itemizedlist>
<listitem><para><xref linkend="SHOWSTATS-syntax-description"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="Considerations-SHOWSTATS"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="SHOWSTATS-examples"
role="select:quotedtitle"/></para></listitem>
</itemizedlist>
<indexterm><primary>SHOWSTATS statement</primary><secondary>syntax
diagram of</secondary></indexterm>
<para>The SHOWSTATS statement displays the histogram statistics for
one or more groups of columns within a table. These statistics are
used to devise optimized access plans.</para>
<para>SHOWSTATS is a Trafodion SQL extension.</para>
<informaltable frame="all">
<tgroup cols="1" colsep="0" rowsep="0">
<colspec colname="col4"/>
<tbody>
<row><entry><programlisting>SHOWSTATS FOR TABLE <replaceable>table-name</replaceable
> ON <replaceable>group-list</replaceable> [DETAIL]

<replaceable>group-list</replaceable> is:

     <replaceable>column-list</replaceable>[, <replaceable>column-list</replaceable
>]...
   | EVERY COLUMN[, <replaceable>column-list</replaceable>]...
   | EVERY KEY[, <replaceable>column-list</replaceable>]...
   | EXISTING COLUMN[S][, <replaceable>column-list</replaceable>]...

 <replaceable>column-list</replaceable> for a single-column group is:

     <replaceable>column-name</replaceable>
   | (<replaceable>column-name</replaceable>)
   | <replaceable>column-name</replaceable> TO <replaceable>column-name</replaceable
>
   | (<replaceable>column-name</replaceable>) TO (<replaceable>column-name</replaceable
>)
   | <replaceable>column-name</replaceable> TO (<replaceable>column-name</replaceable
>)
   | (<replaceable>column-name</replaceable>) TO <replaceable>column-name</replaceable
>

 <replaceable>column-list</replaceable> for a multicolumn group is:

    (<replaceable>column-name</replaceable>, <replaceable>column-name</replaceable
>[, <replaceable>column-name</replaceable>]...)
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="SHOWSTATS-syntax-description">
<title>Syntax Description of SHOWSTATS</title>
<variablelist>
<varlistentry><term><replaceable>table-name</replaceable> </term>
<listitem><para>is the ANSI name of the table for which statistics
are to be displayed. </para></listitem>
</varlistentry>
<varlistentry><term>ON <replaceable>group-list</replaceable> </term>
<listitem><para>specifies one or more groups of columns, <replaceable
>group-list</replaceable>, for which to display histogram statistics.</para>
<variablelist>
<varlistentry><term><replaceable>group-list</replaceable> is: <literal
><replaceable>column-list</replaceable> [, <replaceable>column-list</replaceable
>]... | EVERY COLUMN [, <replaceable>column-list</replaceable>]...
| EVERY KEY [, <replaceable>column-list</replaceable>]... | EXISTING
COLUMN[S] [, <replaceable>column-list</replaceable>]...</literal></term>
<listitem><para>specifies the ways in which <replaceable>group-list</replaceable
> can be defined. The column list represents both a single-column
group and a multicolumn group.</para></listitem>
</varlistentry>
<varlistentry><term><literal>EVERY COLUMN</literal></term>
<listitem><para>indicates that histogram statistics are to be displayed
for each individual column of <replaceable>table</replaceable> and
any multicolumns that make up the primary key and indexes. For columns
that do not have histograms, this option returns <literal>No histogram
data for column(s)---></literal>.</para></listitem>
</varlistentry>
<varlistentry><term><literal>EVERY KEY</literal></term>
<listitem><para>indicates that histogram statistics are to be displayed
for columns that make up the primary key and indexes. </para></listitem>
</varlistentry>
<varlistentry><term><literal>EXISTING COLUMN[S]</literal></term>
<listitem><para>indicates that histogram statistics are to be displayed
only for columns of <replaceable>table</replaceable> that actually
have histograms. This option yields a more concise report because
columns with no histogram data are omitted. This option includes any
existing multicolumn histograms.</para></listitem>
</varlistentry>
<varlistentry><term><literal>DETAIL</literal></term>
<listitem><para>displays statistics for corresponding histogram intervals
and other details.</para><para>If you do not select the DETAIL keyword,
the default display lists the basic histogram information, including
the histogram ID, number of intervals, total rows, total UEC, and
the column names. The detailed display additionally includes the low
value and high value as well as interval data.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>column-list</replaceable> for a single-column
group is: <literal><replaceable>column-name</replaceable> | (<replaceable
>column-name</replaceable>) | <replaceable>column-name</replaceable
> TO <replaceable>column-name</replaceable> | (<replaceable>column-name</replaceable
>) TO (<replaceable>column-name</replaceable>) | <replaceable>column-name</replaceable
> TO (<replaceable>column-name</replaceable>) | (<replaceable>column-name</replaceable
>) TO <replaceable>column-name</replaceable></literal></term>
<listitem><para>specifies the ways in which the <replaceable>column-name</replaceable
> can be defined for single-column groups. A range of columns specified
using the TO keyword causes all columns in that range to be included,
defined by their order of declaration in the table.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>column-list</replaceable> for a multicolumn
group is: <literal>(<replaceable>column-name, column-name</replaceable
> [, <replaceable>column-name</replaceable>]...)</literal></term>
<listitem><para>specifies the ways in which the <replaceable>column-name</replaceable
> can be defined for multicolumn groups. For example, <literal>(abc,
def)</literal> indicates the multicolumn histogram consisting of columns <literal
>abc</literal> and <literal>def</literal>, not two single-column histograms.</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
<para>For more information about the column list syntax and specifying
columns, see the <xref linkend="i1059819" role="select:quotedtitle page"
/>.</para>
</section>
<section id="Considerations-SHOWSTATS">
<title>Considerations for SHOWSTATS</title>
<section>
<title>Required Privileges</title>
<para>To issue a SHOWSTATS statement, one of the following must be
true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT.</para></listitem>
<listitem><para>You are the owner of the database object.</para>
</listitem>
<listitem><para>You have the SHOW component privilege for the SQL_OPERATIONS
component. The SHOW component privilege is granted to PUBLIC by default.</para>
</listitem>
<listitem><para>You have the SELECT privilege on the target object.</para>
</listitem>
<listitem><para>You have the MANAGE_STATISTICS component privilege
for the SQL_OPERATIONS component.</para></listitem>
</itemizedlist>
</section>
</section>
<section id="SHOWSTATS-examples">
<title>Examples of SHOWSTATS</title>
<indexterm><primary>SHOWSTATS statement</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>This example displays histogram statistics for table
A using the EVERY KEY keyword. In addition, the DETAIL keyword is
selected:</para>
<programlisting>SHOWSTATS FOR TABLE A ON EVERY KEY DETAIL;
</programlisting>
</listitem>
<listitem><para>This example displays statistics for table CAT.SCH.A
and selects all columns from abc through def:</para>
<programlisting>SHOWSTATS FOR TABLE CAT.SCH.A ON ABC TO DEF;
</programlisting>
</listitem>
<listitem><para>This example displays statistics for table A. The
list of column names contained within parenthesis refers to a multicolumn
group:</para>
<programlisting>SHOWSTATS FOR TABLE A ON (ABC,DEF);
</programlisting>
</listitem>
<listitem><para>This example displays statistics for table A using
the EXISTING COLUMNS keyword. In addition, the DETAIL keyword is selected: </para>
<programlisting>SHOWSTATS FOR TABLE A ON EXISTING COLUMNS DETAIL;
</programlisting>
<para>Default output example:</para>
<programlisting>>>SHOWSTATS FOR TABLE A ON EXISTING COLUMNS;

Histogram data for Table CAT.SCH.A
Table ID: 341261536378386

  Hist ID # Ints Rowcount   UEC Colname(s)
========== ====== =========== ==============================
 623327638      1          11          10 ABC, DEF, GHI
 623327633     10          11          10 ABC
 623327628      9          11           9 DEF
 623327623     10          11          10 GHI

--- SQL operation complete.
>>SHOWSTATS FOR TABLE A ON ABC;

Histogram data for Table CAT.SCH.A
Table ID: 341261536378386

  Hist ID # Ints  Rowcount  UEC Colname(s)
========= ====== =========== =============================
 623327633     10          11          10 ABC

--- SQL operation complete.


>>SHOWSTATS FOR TABLE A ON DEF DETAIL;

Detailed Histogram data for Table CAT.SCH.A
Table ID: 341261536378386

Hist ID:    623327628
Column(s):  DEF
Total Rows: 11
Total UEC:  9
Low Value:  (1)
High Value: (199)
Intervals:  9

Number  Rowcount    UEC Boundary
====== =========== ==============================

     0           0           0 (1)
     1           1           1 (1)
     2           3           1 (2)
     3           1           1 (4)
     4           1           1 (11)
     5           1           1 (12)
     6           1           1 (14)
     7           1           1 (99)
     8           1           1 (123)
     9           1           1 (199)

--- SQL operation complete.
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="TABLEstmt" pagebreak="yes">
<title>TABLE Statement</title>
<itemizedlist>
<listitem><para><xref linkend="considsTable" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="exampsTABLE" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>Data Manipulation Language (DML) statements</primary>
<secondary>TABLE</secondary></indexterm><indexterm><primary>TABLE
statement</primary><secondary>syntax diagram for</secondary></indexterm>
<para>The TABLE statement is equivalent to the query specification <computeroutput
>SELECT * FROM <replaceable>table</replaceable></computeroutput>.</para>
<informaltable frame="all">
<tgroup cols="1" colsep="0" rowsep="0">
<colspec colname="col4"/>
<tbody>
<row><entry><programlisting>TABLE <replaceable>table</replaceable
></programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<variablelist>
<varlistentry><term><replaceable>table</replaceable></term>
<listitem><para>names the user table or view.</para></listitem>
</varlistentry>
</variablelist>
<section id="considsTable">
<title>Considerations for TABLE</title>
<section>
<title>Relationship to SELECT Statement</title>
<indexterm><primary>TABLE statement</primary><secondary>considerations
for</secondary></indexterm>
<para>The result of the TABLE statement is one form of a simple-table,
which refers to the definition of a table reference within a SELECT
statement. See the <xref linkend="i1008894"
role="select:quotedtitle page"/>.</para>
</section>
</section>
<section id="exampsTABLE">
<title>Example of TABLE</title>
<indexterm><primary>TABLE statement</primary><secondary>examples</secondary>
</indexterm>
<para>This TABLE statement returns the same result as <literal>SELECT
* FROM job</literal>:<programlisting>TABLE job;

Job/Code	Job Description
--------	--------------------
     100	MANAGER
     200	PRODUCTION SUPV
     250	ASSEMBLER
	    300	SALESREP
	    400 SYSTEM ANALYST
     420	ENGINEER
     450	PROGRAMMER
     500	ACCOUNTANT
     600	ADMINISTRATOR
     900	SECRETARY

--- 10 row(s) selected.</programlisting></para>
</section>
</section>
<section id="UnregisterUser" pagebreak="yes">
<title>UNREGISTER USER Statement</title>
<itemizedlist>
<listitem><para><xref linkend="UnRegUserSyntax"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="UnRegUserConsid"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="UnRegUserExample"
role="select:quotedtitle"/></para></listitem>
</itemizedlist>
<indexterm><primary>UNREGISTER USER statement</primary><secondary
>syntax diagram of</secondary></indexterm><indexterm><primary>Data
Definition Language (DDL) statements</primary><secondary>UNREGISTER
USER</secondary></indexterm>
<para>The UNREGISTER USER statement removes a database username from
the SQL database. The user can no longer log on to the database.</para>
<para>UNREGISTER USER is a Trafodion SQL extension.</para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>UNREGISTER USER <replaceable>database-username</replaceable
> [RESTRICT | CASCADE]
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="UnRegUserSyntax">
<title>Syntax Description of UNREGISTER USER</title>
<variablelist>
<varlistentry><term><replaceable>database-username</replaceable></term>
<listitem><para>is the name of a currently registered database user. <replaceable
>database-username</replaceable> is a regular or delimited case-insensitive
identifier. See <xref linkend="csDelimitedIdentifier"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term>[ RESTRICT | CASCADE ]</term>
<listitem><para>If you specify RESTRICT, the UNREGISTER USER operation
fails if there are any objects <phrase>or schemas </phrase>in the
database owned by the user or any privileges or roles granted to the
user.</para><para>If you specify CASCADE, all objects <phrase>and
schemas </phrase>owned by the user are dropped, and all privileges
and roles granted to the user are revoked as part of the UNREGISTER
USER operation.</para>
<para>The default value is RESTRICT.</para>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="UnRegUserConsid">
<title>Considerations for UNREGISTER USER</title>
<indexterm><primary>UNREGISTER USER statement</primary><secondary
>considerations for</secondary></indexterm>
<itemizedlist>
<listitem><para>To unregister a user, you must have user administrative
privileges. You have user administrative privileges if you have been
granted the MANAGE_USERS component privilege. Initially, DB__ROOT
is the only database user who has been granted the MANAGE_USERS component
privilege.</para></listitem>
<listitem><para>You cannot unregister any username beginning with
DB__. Role names beginning with DB__ are reserved by Trafodion.</para>
</listitem>
<listitem><para>UNREGISTER USER fails if you specify RESTRICT (or
nothing) and if the user owns any objects <phrase>or schemas </phrase
>or if the user has been granted any privileges or roles. </para>
</listitem>
</itemizedlist>
</section>
<section id="UnRegUserExample">
<title>Example of UNREGISTER USER</title>
<indexterm><primary>UNREGISTER USER statement</primary><secondary
>examples of</secondary></indexterm>
<para>To unregister a user:</para>
<programlisting>UNREGISTER USER "jsmith@hp.com";
</programlisting>
</section>
</section>
<section id="i1073628" pagebreak="yes">
<title>UPDATE Statement</title>
<itemizedlist>
<listitem><para><xref linkend="i1062950" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1010849" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1059917" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>Data Manipulation Language (DML) statements</primary>
<secondary>UPDATE</secondary></indexterm><indexterm><primary>UPDATE
statement</primary><secondary>syntax diagram of</secondary></indexterm>
<para>The UPDATE statement is a DML statement that updates data in
a row or rows in a table or updatable view. Updating rows in a view
updates the rows in the table on which the view is based. </para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting><emphasis role="bold">Searched UPDATE is:</emphasis
>

UPDATE <replaceable>table</replaceable><literal condition="hidden"
> 

 | STREAM (<replaceable>table</replaceable>) [AFTER LAST ROW] </literal
>

 { <replaceable>set-clause-type1</replaceable> | <replaceable>set-clause-type2</replaceable
> }

<replaceable>   set-clause-type1</replaceable> is:
      SET <replaceable>set-clause</replaceable>[, <replaceable>set-clause</replaceable
> ]..
<replaceable>      set-clause</replaceable> is:
   <replaceable>      column-name</replaceable> = {<replaceable>expression</replaceable
> | NULL}

<replaceable>   set-clause-type2</replaceable> is:
      SET (<replaceable>column1</replaceable>, ..., <replaceable>columnN</replaceable
>) = {(<replaceable>value1</replaceable>, ..., <replaceable>valueN</replaceable
>) | (<replaceable>query-expr</replaceable>)}

   [WHERE <replaceable>search-condition</replaceable>]
   [[FOR] <replaceable>access-option</replaceable> ACCESS]

<replaceable>access-option</replaceable> <literal>is</literal>: 
   READ COMMITTED 
<literal condition="hidden"> | SERIALIZABLE 
 | REPEATABLE READ
 | SKIP CONFLICT 
</literal></programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="i1062950">
<title>Syntax Description of UPDATE</title>
<indexterm><primary>UPDATE statement</primary><secondary>description
of</secondary></indexterm>
<variablelist>
<varlistentry><term><replaceable>table</replaceable> </term>
<listitem><para>names the user table or view to update. <replaceable
>table</replaceable> must be a base table or an updatable view. To
refer to a table or view, use the ANSI logical name.</para><para>See <xref
linkend="i1013018" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
<varlistentry condition="hidden"><term>STREAM (<replaceable>table</replaceable
>)</term>
<listitem><indexterm><primary>DELETE statement</primary><secondary
>STREAM clause</secondary></indexterm><para>updates a continuous data
stream from the specified table. You cannot specify STREAM access
for the UPDATE statement if it is not embedded as a table reference
in a SELECT statement. See <xref linkend="i1008894"
role="select:quotedtitle page"/>.</para>
<variablelist>
<varlistentry><term>[AFTER LAST ROW]</term>
<listitem><para>causes the stream to skip all existing rows in the
table and update only rows that are published after the stream’s cursor
is opened. </para></listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>set-clause-type1</replaceable> </term>
<listitem><indexterm><primary>UPDATE statement</primary><secondary
>SET clause</secondary></indexterm><para>This type of SET clause associates
a value with a specific column in the table being updated. For each <replaceable
>set-clause</replaceable>, the value of the specified target <replaceable
>column-name</replaceable> is replaced by the value of the update
source <replaceable>expression</replaceable> (or NULL). The data type
of each target column must be compatible with the data type of its
source value.</para>
<variablelist>
<varlistentry><term><replaceable>column-name</replaceable></term>
<listitem><para>names a column in <replaceable>table</replaceable
> to update. You cannot qualify or repeat a column name. You cannot
update the value of a column that is part of the primary key.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>expression</replaceable></term>
<listitem><para>is an SQL value expression that specifies a value
for the column. The <replaceable>expression</replaceable> cannot contain
an aggregate function defined on a column. The data type of <replaceable
>expression</replaceable> must be compatible with the data type of <replaceable
>column‑name</replaceable>.</para><para>If <replaceable>expression</replaceable
> refers to columns being updated, Trafodion SQL uses the original
values to evaluate the expression and determine the new value.</para>
<para>See <xref linkend="i1013683" role="select:quotedtitle page"
/>.</para>
</listitem>
</varlistentry>
<varlistentry><term>NULL</term>
<listitem><indexterm><primary>NULL, using</primary></indexterm><para
>can also specify the value of the update source.</para></listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>set-clause-type2</replaceable></term>
<listitem><indexterm><primary>UPDATE statement</primary><secondary
>SET clause</secondary></indexterm><para>This type of SET clause allows
multiple columns to be specified on the left side of the assignment
operator. These columns are updated using multiple values specified
on the right side of the assignment operator. The right side of the
assignment operator could be simple values or a subquery. </para>
<variablelist>
<varlistentry><term><replaceable>column1</replaceable>, ..., <replaceable
>columnN</replaceable></term>
<listitem><para>names columns in <replaceable>table</replaceable> to
update. You cannot qualify or repeat a column name. You cannot update
the value of a column that is part of the primary key.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>value1</replaceable>, ..., <replaceable
>valueN</replaceable></term>
<listitem><para>are values specified on the right side of the assignment
operator for the columns specified on the left side of the assignment
operator. The data type of each value must be compatible with the
data type of the corresponding column on the left side of the assignment
operator.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>query-expr</replaceable></term>
<listitem><indexterm><primary>Subquery</primary><secondary>row</secondary>
<tertiary>UPDATE statement</tertiary></indexterm><para>is a SELECT
subquery. Only one subquery can be specified on the right side of
a SET clause. The subquery cannot refer to the table being updated.
For the syntax and description of <replaceable>query-expr</replaceable
>, see the <xref linkend="i1008894" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term>WHERE <replaceable>search-condition</replaceable
> </term>
<listitem><indexterm><primary>UPDATE statement</primary><secondary
>WHERE clause</secondary></indexterm><indexterm><primary>Search condition</primary>
<secondary>UPDATE statement use of</secondary></indexterm><para>specifies
a <replaceable>search-condition</replaceable> that selects rows to
update. Within the <replaceable>search‑condition</replaceable>, columns
being compared are also being updated in the table or view. See <xref
linkend="i1012266" role="select:quotedtitle page"/>.</para><para>If
you do not specify a <replaceable>search-condition</replaceable>,
all rows in the table or view are updated.</para>
<para>Do not use an UPDATE statement with a WHERE clause that contains
a SELECT for the same table. Reading from and inserting into, updating
in, or deleting from the same table generates an error. Use a positioned
(WHERE CURRENT OF) UPDATE instead. See <xref linkend="i1062270"
role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
<varlistentry><term>[FOR] <replaceable>access-option</replaceable
> ACCESS </term>
<listitem><indexterm><primary>Access options</primary><secondary>UPDATE
statement use of</secondary></indexterm><para>specifies the <replaceable
>access-option</replaceable> required for data used in the evaluation
of a search condition. See <xref linkend="i1009133"
role="select:quotedtitle page"/>.</para>
<variablelist>
<varlistentry><term>READ COMMITTED</term>
<listitem><para>specifies that any data used in the evaluation of
the search condition must be from committed rows. </para></listitem>
</varlistentry>
<varlistentry condition="hidden"><term>SERIALIZABLE | REPEATABLE READ</term>
<listitem><indexterm><primary>Concurrency</primary><secondary>UPDATE
statement</secondary></indexterm><para>specifies that the UPDATE statement
and any concurrent process (accessing the same data) execute as if
the statement and the other process had run serially rather than concurrently.</para>
</listitem>
</varlistentry>
<varlistentry condition="hidden"><term>SKIP CONFLICT</term>
<listitem><indexterm><primary>UPDATE statement</primary><secondary
>SKIP CONFLICT access</secondary></indexterm><para>enables transactions
to skip rows locked in a conflicting mode by another transaction.
The rows under consideration are the result of evaluating the search
condition for the UPDATE statement. SKIP CONFLICT cannot be used in
a SET TRANSACTION statement. </para></listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="i1010849">
<title>Considerations for UPDATE</title>
<section>
<title>Performance</title>
<indexterm><primary>Performance</primary><secondary>updating rows</secondary>
</indexterm><indexterm><primary>UPDATE statement</primary><secondary
>performance</secondary></indexterm>
<para>An UPDATE of primary key columns <phrase condition="hidden"
>or columns that are contained in a unique index that affects multiple
rows </phrase>could perform poorly when compared to an UPDATE of non-key
columns. This is because the UPDATE operation involves moving records
in disk by deleting all the records in the before-image and then inserting
the records in the after-image back into the table.</para>
<para condition="hidden">A SELECT with READ UNCOMMITTED ACCESS on
a table whose primary key or unique index key columns are being updated
could catch the update operation in an intermediate stage, where some
or all of the affected rows have been deleted from the table but the
altered rows have not yet been inserted back into the table.</para>
</section>
<section>
<title>Authorization Requirements</title>
<indexterm><primary>UPDATE statement</primary><secondary>authorization
requirements</secondary></indexterm>
<para>UPDATE requires authority to read and write to the table or
view being updated and authority to read any table or view specified
in subqueries used in the search condition. A column of a view can
be updated if its underlying column in the base table can be updated.</para>
</section>
<section>
<title>Transaction Initiation and Termination</title>
<para>The UPDATE statement automatically initiates a transaction if
no active transaction exists. Otherwise, you can explicitly initiate
a transaction with the BEGIN WORK statement. When a transaction is
started, the SQL statements execute within that transaction until
a COMMIT or ROLLBACK is encountered or an error occurs. </para>
</section>
<section>
<title>Isolation Levels of Transactions and Access Options of Statements</title>
<indexterm><primary>Concurrency</primary><secondary>UPDATE statement</secondary>
</indexterm><indexterm><primary>UPDATE statement</primary><secondary
>isolation levels</secondary></indexterm>
<para>The isolation level of a Trafodion SQL transaction defines the
degree to which the operations on data within that transaction are
affected by operations of concurrent transactions. When you specify
access options for the DML statements within a transaction, you override
the isolation level of the containing transaction. Each statement
then executes with its individual access option. </para>
<para condition="hidden">You can explicitly set the isolation level
of a transaction with the SET TRANSACTION statement. See <xref
linkend="i1010391" role="select:quotedtitle page"/>. </para>
</section>
<section>
<title>Conflicting Updates in Concurrent Applications</title>
<indexterm><primary>UPDATE statement</primary><secondary>conflicting
updates</secondary></indexterm>
<para>If you are using the READ COMMITTED isolation level within a
transaction, your application can read different committed values
for the same data at different times. Further, two concurrent applications
can update (possibly in error) the same column in the same row. </para>
<para condition="hidden">In general, to avoid conflicting updates
on a row, use the SERIALIZABLE isolation level. However, when you
use SERIALIZABLE, you are limiting concurrent data access.</para>
</section>
<section>
<title>Requirements for Data in Row</title>
<para>Each row to be updated must satisfy the constraints of the table
or underlying base table of the view. No column updates can occur
unless all of these constraints are satisfied. (A table constraint
is satisfied if the check condition is not false—that is, it is either
true or has an unknown value.)</para>
<para>In addition, a candidate row from a view created with the WITH
CHECK OPTION must satisfy the view selection criteria. The selection
criteria are specified in the WHERE clause of the AS <replaceable
>query-expr</replaceable> clause in the CREATE VIEW statement.</para>
</section>
<section>
<title>Reporting of Updates</title>
<para>When an UPDATE completes successfully, Trafodion SQL reports
the number of times rows were updated during the operation.</para>
<para>Under certain conditions, updating a table with indexes can
cause Trafodion SQL to update the same row more than once, causing
the number of reported updates to be higher than the actual number
of changed rows. However, both the data in the table and the number
of reported updates are correct. This behavior occurs when all of
these conditions are true:</para>
<itemizedlist>
<listitem><para>The optimizer chooses an alternate index as the access
path.</para></listitem>
<listitem><para>The index columns specified in WHERE <replaceable
>search-condition</replaceable> are not changed by the update.</para>
</listitem>
<listitem><para>Another column within the same index is updated to
a higher value (if that column is stored in ascending order), or a
lower value (if that column is stored in descending order). </para>
</listitem>
</itemizedlist>
<para>When these conditions occur, the order of the index entries
ensures that  Trafodion SQL will encounter the same row (satisfying
the same <replaceable>search-condition)</replaceable> at a later time
during the processing of the table. The row is then updated again
by using the same value or values.</para>
<para>For example, suppose that the index of MYTABLE consists of columns
A and B, and the UPDATE statement is specified:</para>
<programlisting>UPDATE MYTABLE
SET B = 20
WHERE A > 10;
</programlisting>
<para>If the contents of columns A and B are 11 and 12 respectively
before the UPDATE, after the UPDATE Trafodion SQL will encounter the
same row indexed by the values 11 and 20. </para>
</section>
<section>
<title>Updating Character Values</title>
<para>For a fixed-length character column, an update value shorter
than the column length is padded with single-byte ASCII blanks (HEX20)
to fill the column. If the update value is longer than the column
length, string truncation of non blank trailing characters returns
an error, and the column is not updated. </para>
<para>For a variable-length character column, an update value is not
padded; its length is the length of the value specified. As is the
case for fixed length, if the update value is longer than the column
length, string truncation of non blank trailing characters returns
an error, and the column is not updated. </para>
</section>
<section>
<title>SET Clause Restrictions and Error Cases</title>
<para>The SET clause has the following restrictions:</para>
<itemizedlist>
<listitem><para>The number of columns on the left side of each assignment
operator should match the number of values or SELECT list elements
on the right side. The following examples are <emphasis role="bold"
>not</emphasis> allowed:</para>
<programlisting>UPDATE t SET (a,b)=(10,20,30)
UPDATE t set (b,c)=(SELECT r,t,s FROM x)</programlisting>
</listitem>
<listitem><para>If multi-column update syntax is specified and the
right side contains a subquery, only one element, the subquery, is
not allowed. </para>
<programlisting>UPDATE t SET (a,b)=(10, (SELECT a FROM t1))</programlisting>
</listitem>
<listitem><para>More than one subquery is not allowed if multiple-column
syntax is used. </para>
<programlisting>UPDATE t SET (a,b)=(SELECT x,y FROM z), (c,d)=(SELECT x,y FROM a))</programlisting>
</listitem>
<listitem><para>If a subquery is used, it must return at most one
row.</para></listitem>
</itemizedlist>
</section>
</section>
<section id="i1059917">
<title>Examples of UPDATE</title>
<indexterm><primary>UPDATE statement</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>Update a single row of the ORDERS table that contains
information about order number 200300 and change the delivery date: </para>
<programlisting>UPDATE sales.orders 
SET deliv_date = DATE '2008-05-02'
WHERE ordernum = 200300;
</programlisting>
</listitem>
<listitem><para>Update several rows of the CUSTOMER table:</para>
<programlisting>UPDATE sales.customer 
SET credit = 'A1'
WHERE custnum IN (21, 3333, 324);
</programlisting>
</listitem>
<listitem><para>Update all rows of the CUSTOMER table to the default
credit 'C1':</para>
<programlisting>UPDATE sales.customer 
SET credit = 'C1';
</programlisting>
</listitem>
<listitem pagebreak="yes"><para>Update the salary of each employee
working for all departments located in Chicago:</para>
<programlisting>UPDATE persnl.employee 
SET salary = salary * 1.1
WHERE deptnum IN 
  (SELECT deptnum FROM persnl.dept
   WHERE location = 'CHICAGO');
</programlisting>
<para>The subquery is evaluated for each row of the DEPT table and
returns department numbers for departments located in Chicago.</para>
</listitem>
<!--WRITER'S NOTE: This example is hidden until I can fix it.-->
<listitem condition="hidden"><para>Suppose that you want to change
the employee number of a manager of a department. Because EMPNUM is
a primary key of the EMPLOYEE table, you must delete the employee's
record and insert a record with the new number.</para><para>You must
also update the DEPT table to change the MANAGER column to the employee's
new number. To ensure all your changes take place (or that none of
them do), perform the operation as a transaction:</para>
<programlisting><literal condition="hidden">SET TRANSACTION 
  ISOLATION LEVEL SERIALIZABLE;
--- SQL operation complete.

</literal>BEGIN WORK;
--- SQL operation complete.

DELETE FROM persnl.employee
  WHERE empnum = 23;
--- 1 row(s) deleted.

INSERT INTO persnl.employee 
  (empnum, first_name, last_name, deptnum, salary) 
</programlisting>
</listitem>
<listitem><para>This is an example of a self-referencing UPDATE statement,
where the table being updated is scanned in a subquery:<programlisting
>UPDATE table3 SET b = b + 2000 WHERE a, b =
(SELECT a, b FROM table3 WHERE b > 200);</programlisting></para>
</listitem>
</itemizedlist>
</section>
</section>
<section id="UPSERT-Statement" pagebreak="yes">
<title>UPSERT Statement</title>
<itemizedlist>
<listitem><para><xref linkend="UPSERTSyntax" role="select:quotedtitle"
/></para></listitem>
<listitem condition="hidden"><para><xref linkend="UPSERTConsiderations"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="UPSERTExample" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>UPSERT statement</primary><secondary>syntax diagram
of</secondary></indexterm>
<para>The UPSERT statement either updates a table if the row exists
or inserts into a table if the row does not exist.</para>
<para>UPSERT is a Trafodion SQL extension.</para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>UPSERT <literal>[USING LOAD] </literal
>INTO <replaceable>table</replaceable> [(<replaceable>target-col-list</replaceable
>)] {<replaceable>query-expr</replaceable> | <replaceable>values-clause</replaceable
>}

<replaceable>target-col-list</replaceable> is:
     <replaceable>column-name</replaceable>[, <replaceable>column-name</replaceable
>]...

<literal condition="hidden"><replaceable>target-col-list</replaceable
> is:
     <replaceable>colref</replaceable>[, <replaceable>colref</replaceable
>]...

<replaceable>colref</replaceable> is:
     <replaceable>column-name</replaceable>
   | <replaceable>column-def</replaceable>

<replaceable>column-def</replaceable> is:
     <replaceable>column-name</replaceable> <replaceable>data-type</replaceable
> [[NOT] NULL] [PRIMARY KEY [ASC|DESC]]

</literal><replaceable>values-clause</replaceable> is:
     VALUES ( <replaceable>expression</replaceable>[, <replaceable
>expression</replaceable>]... )</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="UPSERTSyntax">
<title>Syntax Description of UPSERT</title>
<variablelist>
<varlistentry><term>USING LOAD</term>
<listitem><para>allows the UPSERT to occur without a transaction.
Use this clause when inserting data into an empty table. If you do
not specify this clause, the UPSERT occurs within a transaction.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>table</replaceable></term>
<listitem><para>names the user table in which to insert or update
rows. <replaceable>table</replaceable> must be a base table.</para>
</listitem>
</varlistentry>
<varlistentry><term>(<replaceable>target-col-list</replaceable>)</term>
<listitem><para>names the columns in the table in which to insert
or update values. The data type of each target column must be compatible
with the data type of its corresponding source value. Within the list,
each target column must have the same position as its associated source
value, whose position is determined by the columns in the table derived
from the evaluation of the query expression (<emphasis role="italic"
>query-expr</emphasis>).</para><para>If you do not specify all of
the columns in the target <replaceable>table</replaceable> in the <replaceable
>target-col-list</replaceable>, column default values are inserted
into or updated in the columns that do not appear in the list. See <xref
linkend="i1013833" role="select:quotedtitle page"/>.</para>
<para>If you do not specify <replaceable>target-col-list</replaceable
>, row values from the source table are inserted into or updated in
all columns in table. The order of the column values in the source
table must be the same order as that of the columns specified in the
CREATE TABLE for <replaceable>table</replaceable>. (This order is
the same as that of the columns listed in the result table of SHOWDDL <replaceable
>table</replaceable>.)</para>
<variablelist>
<varlistentry><term><replaceable>column-name</replaceable></term>
<listitem><para>names a column in the target <replaceable>table</replaceable
> in which to either insert or update data. You cannot qualify or
repeat a column name.</para></listitem>
</varlistentry>
<varlistentry condition="hidden"><term><replaceable>column-name</replaceable
> <replaceable>data-type</replaceable> [[NOT] NULL] [PRIMARY KEY [ASC|DESC]]</term>
<listitem><para>specifies the name and data type of a column in the
target <replaceable>table</replaceable> in which to either insert
or update data. <replaceable>data-type</replaceable> is the data type
of the values that can be stored in the column and must be compatible
with the data type of its corresponding source value. See <xref
linkend="i1010093" role="select:quotedtitle page"/>.</para>
<variablelist>
<varlistentry><term>NOT NULL</term>
<listitem><para>specifies that the column cannot contain nulls. See <xref
linkend="i1018603" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term>NULL</term>
<listitem><para>specifies that the column can contain nulls. See <xref
linkend="i1018603" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term>PRIMARY KEY [ASC|DESC]</term>
<listitem><para>specifies that the column is part of the primary key
of the table. ASC and DESC specify the direction for entries in the
PRIMARY KEY column. The default is ASC. The PRIMARY KEY value in each
row of the table must be unique within the table. A PRIMARY KEY defined
for a set of columns implies that the column values are unique and
not null.</para></listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>query-expr</replaceable></term>
<listitem><indexterm><primary>Subquery</primary><secondary>row</secondary>
<tertiary>UPSERT SELECT statement</tertiary></indexterm><para>is a
SELECT subquery that returns data to be inserted into or updated in
the target <replaceable>table</replaceable>. The subquery cannot refer
to the table being operated on. For the syntax and description of <replaceable
>query-expr</replaceable>, see the <xref linkend="i1008894"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term>VALUES ( <replaceable>expression</replaceable
>[, <replaceable>expression</replaceable>]... )</term>
<listitem><para>specifies an SQL value expression or a set of expressions
that specify values to be inserted into or updated in the target <replaceable
>table</replaceable>. The data type of <replaceable>expression</replaceable
> must be compatible with the data type of the corresponding column
in the target <replaceable>table</replaceable>. See <xref
linkend="i1013683" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
</section>
<section condition="hidden" id="UPSERTConsiderations">
<title>Considerations for UPSERT</title>
<para><indexterm><primary>UPSERT statement</primary><secondary>considerations
for</secondary></indexterm></para>
<para></para>
</section>
<section id="UPSERTExample">
<title>Examples of UPSERT</title>
<indexterm><primary>UPSERT statement</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>This UPSERT statement either inserts or updates the
part number and price in the PARTS table using the part number and
unit price from the ODETAIL table where the part number is 244:</para>
<programlisting>UPSERT INTO sales.parts (partnum, price) SELECT partnum, unit_price 
   FROM sales.odetail WHERE partnum = 244;
</programlisting>
</listitem>
<listitem><para>This UPSERT statement either inserts or updates rows
in the EMPLOYEE table using the results of querying the EMPLOYEE_EUROPE
table:</para>
<programlisting>UPSERT INTO persnl.employee SELECT * FROM persnl.employee_europe;</programlisting>
</listitem>
<listitem><para>This UPSERT statement either inserts or updates a
row in the DEPT table using the specified values:</para>
<programlisting>UPSERT INTO persnl.dept VALUES (3500,'CHINA SALES',111,3000,'HONG KONG');</programlisting>
</listitem>
<listitem><para>This UPSERT statement either inserts or updates a
row in the DEPT table using the specified values:</para>
<programlisting>UPSERT INTO persnl.dept (deptnum, deptname, manager) 
   VALUES (3600,‘JAPAN SALES’, 996);</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="VALUESstmt" pagebreak="yes">
<title>VALUES Statement</title>
<itemizedlist>
<listitem><para><xref linkend="considsVALUES" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="exampsVALUES" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>Data Manipulation Language (DML) statements</primary>
<secondary>VALUES</secondary></indexterm><indexterm><primary>VALUES
statement</primary><secondary>syntax diagram for</secondary></indexterm>
<para>The VALUES statements starts with the VALUES keyword followed
by a sequence of row value constructors, each of which is enclosed
in parenthesis. It displays the results of the evaluation of the expressions
and the results of row subqueries within the row value constructors. </para>
<informaltable frame="all">
<tgroup cols="1" colsep="0" rowsep="0">
<colspec colname="col4"/>
<tbody>
<row><entry><programlisting>VALUES (<replaceable>row-value-const</replaceable
>) [, (<replaceable>row-value-const</replaceable>)]...

<replaceable>row-value-const</replaceable> is:  
     <replaceable>row-subquery</replaceable>
     | {<replaceable>expression</replaceable> | NULL} [,{<replaceable
>expression</replaceable> | NULL}...</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<para><variablelist>
<varlistentry><term><replaceable>row-value-const</replaceable></term>
<listitem><para>specifies a list of expressions (or NULL) or a row
subquery (a subquery that returns a single row of column values).
An operand of an expression cannot reference a column (except when
the operand is a scalar subquery returning a single column value in
its result table).</para><para>The results of the evaluation of the
expressions and the results of the row subqueries in the row value
constructors must have compatible data types.</para>
</listitem>
</varlistentry>
</variablelist></para>
<section id="considsVALUES">
<title>Considerations for VALUES</title>
<section>
<title>Relationship to SELECT Statement</title>
<indexterm><primary>VALUES statement</primary><secondary>considerations
for</secondary></indexterm>
<para>The result of the VALUES statement is one form of a <replaceable
>simple-table</replaceable>, which is part of the definition of a
table reference within a SELECT statement. See the <xref
linkend="i1008894" role="select:quotedtitle page"/>.</para>
</section>
<section>
<title>Relationship to INSERT Statement</title>
<para>For a VALUES clause that is the direct source of an INSERT statement,
Trafodion SQL also allows the keyword DEFAULT in a VALUES clause,
just like NULL is allowed. For more information, see the <xref
linkend="i1008135" role="select:quotedtitle page"/>.</para>
</section>
</section>
<section id="exampsVALUES">
<title>Examples of VALUES</title>
<indexterm><primary>VALUES statement</primary><secondary>examples</secondary>
</indexterm>
<itemizedlist>
<listitem><para>This VALUES statement displays two rows with simple
constants:<programlisting>VALUES (1,2,3), (4,5,6);

(EXPR)	(EXPR)	 (EXPR)
------  ------  -----
     1       2      3
     4       5      6

--- 2 row(s) selected.
</programlisting></para></listitem>
<listitem><para>This VALUES statement displays the results of the
expressions and the row subquery in the lists:<programlisting>VALUES (1+2, 3+4), (5, (select count (*) from t));

(EXPR)  (EXPR)		
------  -----------------	------
     3                        7	
     5                        2

--- 2 row(s) selected.</programlisting></para></listitem>
</itemizedlist>
</section>
</section>
</chapter>
<chapter id="i1077886">
<title>SQL Utilities</title>
<para>A utility is a tool that runs within Trafodion SQL and performs
tasks. This section describes the Trafodion SQL utilities:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<tbody>
<row><entry><para><xref linkend="LOAD-Statement"
role="select:quotedtitle page"/></para></entry><entry>Uses the Trafodion
Bulk Loader to load data from a source table, either a Trafodion table
or a Hive table, into a target Trafodion table.</entry></row>
<row><entry><para><xref linkend="i1118209"
role="select:quotedtitle page"/></para></entry><entry>Loads indexes.</entry>
</row>
<row><entry><para><xref linkend="i1120292"
role="select:quotedtitle page"/></para></entry><entry>Purges data
from tables and indexes.</entry></row>
<row><entry><para><xref linkend="UNLOAD-Statement"
role="select:quotedtitle page"/></para></entry><entry>Unloads data
from Trafodion tables into an HDFS location that you specify.</entry>
</row>
<row><entry><para><xref linkend="i1059819"
role="select:quotedtitle page"/></para></entry><entry>Updates the
histogram statistics for one or more groups of columns within a table.
These statistics are used to devise optimized access plans.</entry>
</row>
<row condition="hidden"><entry><para><xref linkend="USAS"
role="select:quotedtitle page"/></para></entry><entry>Simplifies the
operations of updating statistics without user intervention.</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<note>
<para>Trafodion SQL utilities are entered interactively or from script
files using a client-based tool, such as the Trafodion Command Interface
(TrafCI). To install and configure a client application that enables
you to connect to and issue SQL utilities, see the <citetitle>Trafodion
Client Installation Guide</citetitle>.</para>
</note>
<section id="LOAD-Statement" pagebreak="yes">
<title>LOAD Statement</title>
<itemizedlist>
<listitem><para><xref linkend="LOAD-Syntax-Description"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="LOAD-Considerations"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="LOAD-Examples" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>Indexes</primary><secondary>LOAD statement</secondary>
</indexterm><indexterm><primary>Bulk Loader</primary></indexterm>
<indexterm condition="hidden"><primary>Data Definition Language (DDL)
statements</primary><secondary>LOAD</secondary></indexterm>
<para>The LOAD statement uses the Trafodion Bulk Loader to load data
from a source table, either a Trafodion table or a Hive table, into
a target Trafodion table. The Trafodion Bulk Loader prepares and loads
HFiles directly in the region servers and bypasses the write path
and the cost associated with it. The write path begins at a client,
moves to a region server, and ends when data eventually is written
to an HBase data file called an HFile.</para>
<para>The Trafodion bulk load process takes place in two phases:</para>
<itemizedlist>
<listitem><para><emphasis>Preparation phase</emphasis>: In this phase,
Trafodion reads the data from the source files in Hive or HDFS, partitions
the data based on the target table's partitioning scheme, sorts the
data, and then generates KeyValue pairs that will populate the HFiles.
Trafodion also encodes the data for faster storage and retrieval.</para>
</listitem>
<listitem><para><emphasis>Loading-the-files-into-HBase phase</emphasis
>: This phase uses the LoadIncrementalHFiles (also known as the computebulkload
tool) and load the generated HFiles into the region servers.</para>
</listitem>
</itemizedlist>
<para>LOAD is a Trafodion SQL extension.</para>
<indexterm><primary>LOAD statement</primary><secondary>syntax diagram
of</secondary></indexterm>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>LOAD [WITH <replaceable>option</replaceable
>[[,] <replaceable>option</replaceable>]...] INTO <replaceable>target-table</replaceable
> SELECT ... FROM <replaceable>source-table</replaceable>

<replaceable>option</replaceable> is:
     TRUNCATE TABLE
   | NO RECOVERY
   | NO POPULATE INDEXES
   | NO DUPLICATE CHECK
   | NO OUTPUT<literal>
   | INDEX TABLE ONLY
   | UPSERT USING LOAD</literal><literal condition="hidden">
   | UPDATE STATISTICS</literal>
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="LOAD-Syntax-Description">
<title>Syntax Description of LOAD</title>
<variablelist>
<varlistentry><term><replaceable>target-table</replaceable></term>
<listitem><para>is the name of the target Trafodion table where the
data will be loaded. See <xref linkend="i1013018"
role="select:quotedtitle page"/>. </para></listitem>
</varlistentry>
<varlistentry><term><replaceable>source-table</replaceable></term>
<listitem><para>is the name of either a Trafodion table or a Hive
table that has the source data. Hive tables can be accessed in Trafodion
using the HIVE.HIVE schema (for example, hive.hive.orders). The Hive
table needs to already exist in Hive before Trafodion can access it.
If you want to load data that is already in an HDFS folder, then you
need to create an external Hive table with the right fields and pointing
to the HDFS folder containing the data. You can also specify a WHERE
clause on the source data as a filter.</para></listitem>
</varlistentry>
<varlistentry><term>[WITH <replaceable>option</replaceable>[[,] <replaceable
>option</replaceable>]...]</term>
<listitem><para>is a set of options that you can specify for the load
operation. You can specify one or more of these options:</para>
<variablelist>
<varlistentry><term>TRUNCATE TABLE</term>
<listitem><para>causes the Bulk Loader to truncate the target table
before starting the load operation. By default, the Bulk Loader does
not truncate the target table before loading data.</para></listitem>
</varlistentry>
<varlistentry><term>NO RECOVERY</term>
<listitem><para>specifies that the Bulk Loader not use HBase snapshots
for recovery. By default, the Bulk Loader handles recovery using the
HBase snapshots mechanism.</para></listitem>
</varlistentry>
<varlistentry><term>NO POPULATE INDEXES</term>
<listitem><para>specifies that the Bulk Loader not handle index maintenance
or populate the indexes. By default, the Bulk Loader handles index
maintenance, disabling indexes before starting the load operation
and populating them after the load operation is complete.</para>
</listitem>
</varlistentry>
<varlistentry><term>NO DUPLICATE CHECK</term>
<listitem><para>causes the Bulk Loader to ignore duplicates in the
source data. By default, the Bulk Loader checks if there are duplicates
in the source data and generates an error when it detects duplicates.</para>
</listitem>
</varlistentry>
<varlistentry><term>NO OUTPUT</term>
<listitem><para>prevents the LOAD statement from displaying status
messages. By default, the LOAD statement prints status messages listing
the steps that the Bulk Loader is executing.</para></listitem>
</varlistentry>
<varlistentry><term>INDEX TABLE ONLY</term>
<listitem><para>specifies that the target table, which is an index,
be populated with data from the parent table.</para></listitem>
</varlistentry>
<varlistentry><term>UPSERT USING LOAD</term>
<listitem><para>specifies that the data be inserted into the target
table using rowset inserts without a transaction.</para></listitem>
</varlistentry>
<!--WRITER'S NOTE: The UPDATE STATISTICS feature has been deferred to Release 2.0.-->
<varlistentry condition="hidden"><term>UPDATE STATISTICS</term>
<listitem><para>causes Update Statistics to be executed on all the
individual columns of the target table following the load operation,
as well as any multi-column keys, using a sample of the loaded data.
This option is only allowed if you do not specify the UPSERT USING
LOAD option and if the target table is either empty before the load
operation or will be emptied during the operation due to the use of
the TRUNCATE TABLE option.</para></listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="LOAD-Considerations">
<title>Considerations for LOAD</title>
<indexterm><primary>LOAD statement</primary><secondary>considerations
for</secondary></indexterm>
<section>
<title>Required Privileges</title>
<para>To issue a LOAD statement, one of the following must be true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT.</para></listitem>
<listitem><para>You are the owner of the target table.</para></listitem>
<listitem><para>You have these privileges:</para>
<itemizedlist>
<listitem><para>SELECT and INSERT privileges on the target table</para>
</listitem>
<listitem><para>DELETE privilege on the target table if TRUNCATE TABLE
is specified</para></listitem>
</itemizedlist>
</listitem>
<listitem><para>You have the MANAGE_LOAD component privilege for the
SQL_OPERATIONS component.</para></listitem>
</itemizedlist>
</section>
<section>
<title>Configuration Before Running LOAD</title>
<para>Before running the LOAD statement, make sure that you have configured
the staging folder, source table, and HBase according to these guidelines.</para>
<section>
<title>Staging Folder for HFiles</title>
<para>The Bulk Loader uses an HDFS folder as a staging area for the
HFiles before calling HBase APIs to merge them into the Trafodion
table. By default, Trafodion uses <filename>/bulkload/</filename> as
the staging folder. This folder must be owned by the same user as
the one under which Trafodion runs. Trafodion also must have full
permissions on this folder. The HBase user (that is, the user under
which HBase runs) must have read/write access to this folder.</para>
<para>Example:</para>
<programlisting>drwxr-xr-x - trafodion trafodion 0 2014-07-07 09:49 /bulkload.</programlisting>
</section>
<section>
<title>Hive Source Table</title>
<para>To load data stored in HDFS, you will need to create a Hive
table with the right fields and types pointing to the HDFS folder
containing the data before you start the load.</para>
</section>
<section>
<title>HBase Snapshots</title>
<para>If you do not specify the NO RECOVERY OPTION in the LOAD statement,
the Bulk Loader uses HBase snapshots as a mechanism for recovery.
Snapshots are a lightweight operation where some metadata is copied.
(Data is not copied.) A snapshot is taken before the load starts and
is removed after the load completes successfully. If something goes
wrong and it is possible to recover, the snapshot is used to restore
the table to its initial state before the load started. To use this
recovery mechanism, HBase needs to be configured to allow snapshots.</para>
</section>
</section>
</section>
<section id="LOAD-Examples">
<title>Example of LOAD</title>
<indexterm><primary>LOAD statement</primary><secondary>example of</secondary>
</indexterm>
<itemizedlist>
<listitem><para>For customer demographics data residing in <filename
>/hive/tpcds/customer_demographics</filename>, create an external
Hive table using the following Hive SQL:</para>
<programlisting>create external table customer_demographics
(
    cd_demo_sk int,
    cd_gender string,
    cd_marital_status string,
    cd_education_status string,
    cd_purchase_estimate int,
    cd_credit_rating string,
    cd_dep_count int,
    cd_dep_employed_count int,
    cd_dep_college_count int
)
row format delimited fields terminated by '|'
location '/hive/tpcds/customer_demographics';</programlisting>
</listitem>
<listitem><para>The Trafodion table where you want to load the data
is defined using this DDL:</para>
<programlisting>create table customer_demographics_salt
(
  cd_demo_sk int not null,
  cd_gender char(1),
  cd_marital_status char(1),
  cd_education_status char(20),
  cd_purchase_estimate int,
  cd_credit_rating char(10),
  cd_dep_count int,
  cd_dep_employed_count int,
  cd_dep_college_count int,
  primary key (cd_demo_sk)
)
salt using 4 partitions on (cd_demo_sk);</programlisting>
</listitem>
<listitem><para>This example shows how the LOAD statement loads the
customer_demographics_salt table from the Hive table, hive.hive.customer_demographics:</para>
<programlisting>>>load into customer_demographics_salt
+>select * from hive.hive.customer_demographics where cd_demo_sk &lt;= 5000;
Task: LOAD Status: Started Object: TRAFODION.HBASE.CUSTOMER_DEMOGRAPHICS_SALT
Task: DISABLE INDEX Status: Started Object: TRAFODION.HBASE.CUSTOMER_DEMOGRAPHICS_SALT
Task: DISABLE INDEX Status: Ended Object: TRAFODION.HBASE.CUSTOMER_DEMOGRAPHICS_SALT
Task: PREPARATION Status: Started Object: TRAFODION.HBASE.CUSTOMER_DEMOGRAPHICS_SALT
       Rows Processed: 5000
Task: PREPARATION Status: Ended ET: 00:00:03.199
Task: COMPLETION Status: Started Object: TRAFODION.HBASE.CUSTOMER_DEMOGRAPHICS_SALT
Task: COMPLETION Status: Ended ET: 00:00:00.331
Task: POPULATE INDEX Status: Started Object: TRAFODION.HBASE.CUSTOMER_DEMOGRAPHICS_SALT
Task: POPULATE INDEX Status: Ended ET: 00:00:05.262</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1118209" pagebreak="yes">
<title>POPULATE INDEX Utility</title>
<itemizedlist>
<listitem><para><xref linkend="i1118997" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1120069" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1049897" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>SQL Utilities</primary><secondary>POPULATE INDEX
utility</secondary></indexterm><indexterm><primary>Utilities</primary>
<secondary>POPULATE INDEX utility</secondary></indexterm>
<para>The POPULATE INDEX utility performs a fast INSERT of data into
an index from the parent table. You can execute this utility in a
client-based tool like TrafCI.</para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>POPULATE INDEX <replaceable>index</replaceable
> ON <replaceable>table </replaceable>[<replaceable>index-option</replaceable
>]

<replaceable>index-option</replaceable> is:
   ONLINE | OFFLINE
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="i1118997">
<title>Syntax Description of POPULATE INDEX</title>
<indexterm><primary>POPULATE INDEX utility</primary><secondary>syntax
diagram of</secondary></indexterm>
<variablelist>
<varlistentry><term><replaceable>index</replaceable></term>
<listitem><para>is an SQL identifier that specifies the simple name
for the index. You cannot qualify <replaceable>index</replaceable
> with its schema name. Indexes have their own namespace within a
schema, so an index name might be the same as a table or constraint
name. However, no two indexes in a schema can have the same name.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>table</replaceable></term>
<listitem><para>is the name of the table for which to populate the
index. See <xref linkend="i1013018" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
<varlistentry><term>ONLINE</term>
<listitem><para>specifies that the populate operation should be done
online. That is, ONLINE allows read and write DML access on the base
table while the populate operation occurs. Additionally, ONLINE reads
the audit trail to replay updates to the base table during the populate
phase. If a lot of audit is generated and you perform many CREATE
INDEX operations, we recommend that you avoid ONLINE operations because
they can add more contention to the audit trail. The default is ONLINE.</para>
</listitem>
</varlistentry>
<varlistentry><term>OFFLINE </term>
<listitem><para>specifies that the populate should be done offline.
OFFLINE allows only read DML access to the base table. The base table
is unavailable for write operations at this time. OFFLINE must be
specified explicitly. SELECT is allowed.</para></listitem>
</varlistentry>
</variablelist>
</section>
<section id="i1120069">
<title>Considerations for POPULATE INDEX</title>
<indexterm><primary>POPULATE INDEX utility</primary><secondary>considerations
for</secondary></indexterm>
<para>When POPULATE INDEX is executed, the following steps occur:</para>
<itemizedlist>
<listitem><para>The POPULATE INDEX operation runs in many transactions.</para>
</listitem>
<listitem><para>The actual data load operation is run outside of a
transaction.</para></listitem>
</itemizedlist>
<para>If a failure occurs, the rollback is faster because it does
not have to process a lot of audit. Also, if a failure occurs, the
index remains empty, unaudited, and not attached to the base table
(offline).</para>
<itemizedlist>
<listitem><para>When an offline POPULATE INDEX is being executed,
the base table is accessible for read DML operations. When an online
POPULATE INDEX is being executed, the base table is accessible for
read and write DML operations during that time period, except during
the commit phase at the very end. </para></listitem>
<listitem><para>If the POPULATE INDEX operation fails unexpectedly,
you may need to drop the index again and re-create and repopulate.</para>
</listitem>
<listitem><para>Online POPULATE INDEX reads the audit trail to replay
updates by allowing read/write access. If you plan to create many
indexes in parallel or if you have a high level of activity on the
audit trail, you should consider using the OFFLINE option.</para>
</listitem>
</itemizedlist>
<para>Errors can occur if the source base table or target index cannot
be accessed, or if the load fails due to some resource problem or
problem in the file system.</para>
<section>
<title>Required Privileges</title>
<para>To perform a POPULATE INDEX operation, one of the following
must be true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT.</para></listitem>
<listitem><para>You are the owner of the table.</para></listitem>
<listitem><para>You have the SELECT and INSERT (or ALL) privileges
on the associated table.</para></listitem>
</itemizedlist>
</section>
</section>
<section id="i1049897">
<title>Examples of POPULATE INDEX</title>
<indexterm><primary>POPULATE INDEX utility</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>This example loads the specified index from the specified
table:</para>
<programlisting>POPULATE INDEX myindex ON myschema.mytable;
</programlisting>
</listitem>
<listitem><para>This example loads the specified index from the specified
table, which uses the default schema:</para>
<programlisting>POPULATE INDEX index2 ON table2;
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1120292" pagebreak="yes">
<title>PURGEDATA Utility</title>
<itemizedlist>
<listitem><para><xref linkend="i1118941" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1049907" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1090908" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>Utilities</primary><secondary>PURGEDATA utility</secondary>
</indexterm><indexterm><primary>SQL Utilities</primary><secondary
>PURGEDATA utility</secondary></indexterm><indexterm><primary>PURGEDATA
utility</primary><secondary>syntax diagram of</secondary></indexterm>
<para>The PURGEDATA utility performs a fast DELETE of data from a
table and its related indexes. You can execute this utility in a client-based
tool like TrafCI.</para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>PURGEDATA <replaceable>object</replaceable
> <literal condition="hidden">[IGNORE_TRIGGER] [NOLOG]</literal>
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="i1118941">
<title>Syntax Description of PURGEDATA</title>
<variablelist>
<varlistentry><term><replaceable>object</replaceable></term>
<listitem><para>is the name of the table from which to purge the data.
See <xref linkend="i1013018" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
<!--WRITER'S NOTE: Triggers are currently not supported in Trafodion.-->
<varlistentry condition="hidden"><term>IGNORE_TRIGGER</term>
<listitem><para>specifies that PURGEDATA should ignore DELETE triggers
on the table. If they are not ignored and a DELETE trigger exists,
PURGEDATA fails.</para></listitem>
</varlistentry>
<!--WRITER'S NOTE: Materialized views are currently not supported in Trafodion.-->
<varlistentry condition="hidden"><term>NOLOG</term>
<listitem><para>specifies, for a table with active materialized views,
that you want to perform PURGEDATA.</para><para>When materialized
views exist on a table, every update on the table is stored in the
IUD log.  Later, when a refresh is performed on the materialized view.,
the IUD log is read and the updates applied.  PURGEDATA is basically
a delete, so given the rules of materialized views, all rows deleted
through the PURGEDATA operation should be stored in the IUD log for
later replay. However, for PURGEDATA this is not possible. The NOLOG
option was devised to indicate that the deletes occurring during a
PURGEDATA operation are not logged.  If you have an active materialized
view and you do not specify the NOLOG option, the PURGEDATA fails.
   For a table with active materialized views, you must specify NOLOG
to perform PURGEDATA.  If you want the deletes to be stored in the
IUD log and replayed during a REFRESH, then you must use DELETE instead
of PURGEDATA. </para>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="i1049907">
<title>Considerations for PURGEDATA</title>
<indexterm><primary>PURGEDATA utility</primary><secondary>considerations
for</secondary></indexterm>
<itemizedlist>
<listitem><para>The <replaceable>object</replaceable> can be a table
name<phrase condition="hidden"> or a materialized view name</phrase
>.</para></listitem>
<listitem condition="hidden"><para>If <replaceable>object</replaceable
> is a materialized view name, IGNORE_TRIGGER is not supported and
will be ignored if specified.</para></listitem>
<listitem condition="hidden"><para>If the NOLOG option is not specified,
an error is returned if PURGEDATA tries to purge a table that has
a materialized view defined on it.</para></listitem>
<listitem condition="hidden"><para>If the NOLOG option is not specified,
an error is returned if PURGEDATA tries to purge a materialized view
that has a materialized view defined on it.</para></listitem>
<listitem><para>Errors are returned if <replaceable>table</replaceable
> cannot be accessed or if a resource or file-system problem causes
the delete to fail.</para></listitem>
<listitem><para>PURGEDATA is not supported for volatile tables.</para>
</listitem>
</itemizedlist>
<section>
<title>Required Privileges</title>
<para>To perform a PURGEDATA operation, one of the following must
be true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT.</para></listitem>
<listitem><para>You are the owner of the table.</para></listitem>
<listitem><para>You have the SELECT and DELETE (or ALL) privileges
on the associated table.</para></listitem>
</itemizedlist>
</section>
<section>
<title>Availability</title>
<para>PURGEDATA marks the table <phrase condition="hidden">or materialized
view </phrase>OFFLINE and sets the corrupt bit while processing. If
PURGEDATA fails before it completes, the table and its dependent indexes
will be unavailable, and you must run PURGEDATA again to complete
the operation and remove the data. Error 8551 with an accompanying
file system error 59 or error 1071 is returned in this case.</para>
</section>
</section>
<section id="i1090908">
<title>Example of PURGEDATA</title>
<indexterm><primary>PURGEDATA utility</primary><secondary>example
of</secondary></indexterm>
<para>This example purges the data in the specified table. If the
table has indexes, their data is also purged.</para>
<programlisting>PURGEDATA myschema.mytable;
</programlisting>
</section>
</section>
<section id="UNLOAD-Statement" pagebreak="yes">
<title>UNLOAD Statement</title>
<itemizedlist>
<listitem><para><xref linkend="UNLOAD-Syntax-Description"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="UNLOAD-Considerations"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="UNLOAD-Examples"
role="select:quotedtitle"/></para></listitem>
</itemizedlist>
<indexterm><primary>Indexes</primary><secondary>UNLOAD statement</secondary>
</indexterm><indexterm><primary>Bulk Unloader</primary></indexterm>
<indexterm condition="hidden"><primary>Data Definition Language (DDL)
statements</primary><secondary>UNLOAD</secondary></indexterm>
<para>The UNLOAD statement unloads data from Trafodion tables into
an HDFS location that you specify. Extracted data can be either compressed
or uncompressed based on what you choose.</para>
<para>UNLOAD is a Trafodion SQL extension.</para>
<indexterm><primary>UNLOAD statement</primary><secondary>syntax diagram
of</secondary></indexterm>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>UNLOAD [WITH <replaceable>option</replaceable
>[ <replaceable>option</replaceable>]...] INTO '<replaceable>target-location</replaceable
>' SELECT ... FROM <replaceable>source-table</replaceable> ...

<replaceable>option</replaceable> is:
     DELIMITER { '<replaceable>delimiter-string</replaceable>' | <replaceable
>delimiter-ascii-value</replaceable> }
   | RECORD_SEPARATOR { '<replaceable>separator-literal</replaceable
>' | <replaceable>separator-ascii-value</replaceable> }
   | NULL_STRING '<replaceable>string-literal</replaceable>'
   | PURGEDATA FROM TARGET
   | COMPRESSION GZIP
   | MERGE FILE <replaceable>merged_file-path</replaceable> [OVERWRITE]
   | NO OUTPUT
<literal>   | { NEW | EXISTING } SNAPSHOT HAVING SUFFIX '<replaceable
>string</replaceable>'</literal>
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="UNLOAD-Syntax-Description">
<title>Syntax Description of UNLOAD</title>
<variablelist>
<varlistentry><term>'<replaceable>target-location</replaceable>'</term>
<listitem><para>is the full pathname of the target HDFS folder where
the extracted data will be written. Enclose the name of folder in
single quotes. Specify the folder name as a full pathname and not
as a relative path. You must have write permissions on the target
HDFS folder. If you run UNLOAD in parallel, multiple files will be
produced under the <replaceable>target-location</replaceable>. The
number of files created will equal the number of ESPs.</para></listitem>
</varlistentry>
<varlistentry><term>SELECT ... FROM <replaceable>source-table</replaceable
> ...</term>
<listitem><para>is either a simple query or a complex one that contains
GROUP BY, JOIN, or UNION clauses. <replaceable>source-table</replaceable
> is the name of a Trafodion table that has the source data. See <xref
linkend="i1013018" role="select:quotedtitle page"/>.</para><para></para>
</listitem>
</varlistentry>
<varlistentry><term>[WITH <replaceable>option</replaceable>[ <replaceable
>option</replaceable>]...]</term>
<listitem><para>is a set of options that you can specify for the unload
operation. If you specify an option more than once, Trafodion returns
an error with SQLCODE -4489. You can specify one or more of these
options:</para>
<variablelist>
<varlistentry><term>DELIMITER { '<replaceable>delimiter-string</replaceable
>' | <replaceable>delimiter-ascii-value</replaceable> }</term>
<listitem><para>specifies the delimiter as either a delimiter string
or an ASCII value. If you do not specify this option, Trafodion uses
the character “|” as the delimiter.</para><para><replaceable>delimiter-string</replaceable
> can be any ASCII or Unicode string. You can also specify the delimiter
as an ASCII value. Valid values range from 1 to 255. Specify the value
in decimal notation; hexadecimal or octal notation are currently not
supported. If you are using an ASCII value, the delimiter can be only
one character wide. Do not use quotes when specifying an ASCII value
for the delimiter.</para>
</listitem>
</varlistentry>
<varlistentry><term>RECORD_SEPARATOR { '<replaceable>separator-literal</replaceable
>' | <replaceable>separator-ascii-value</replaceable> }</term>
<listitem><para>specifies the character that will be used to separate
consecutive records or rows in the output file. You can specify either
a literal or an ASCII value for the separator. The default value is
a newline character.</para><para><replaceable>separator-literal</replaceable
> can be any ASCII or Unicode character. You can also specify the
separator as an ASCII value. Valid values range from 1 to 255. Specify
the value in decimal notation; hexadecimal or octal notation are currently
not supported. If you are using an ASCII value, the separator can
be only one character wide. Do not use quotes when specifying an ASCII
value for the separator.</para>
</listitem>
</varlistentry>
<varlistentry><term>NULL_STRING '<replaceable>string-literal</replaceable
>'</term>
<listitem><para>specifies the string that will be used to indicate
a NULL value. The default value is the empty string ''.</para>
</listitem>
</varlistentry>
<varlistentry><term>PURGEDATA FROM TARGET</term>
<listitem><para>causes files in the target HDFS folder to be deleted
before the unload operation.</para></listitem>
</varlistentry>
<varlistentry><term>COMPRESSION GZIP</term>
<listitem><para>uses gzip compression in the extract node, writing
the data to disk in this compressed format. GZIP is currently the
only supported type of compression. If you do not specify this option,
the extracted data will be uncompressed.</para></listitem>
</varlistentry>
<varlistentry><term>MERGE FILE <replaceable>merged_file-path</replaceable
> [OVERWRITE]</term>
<listitem><para>merges the unloaded files into one single file in
the specified <replaceable>merged-file-path</replaceable>. If you
specify compression, the unloaded data will be in compressed format,
and the merged file will also be in compressed format. If you specify
the optional OVERWRITE keyword, the file is overwritten if it already
exists; otherwise, Trafodion raises an error if the file already exists.</para>
</listitem>
</varlistentry>
<varlistentry><term>NO OUTPUT</term>
<listitem><para>prevents the UNLOAD statement from displaying status
messages. By default, the UNLOAD statement prints status messages
listing the steps that the Bulk Unloader is executing.</para></listitem>
</varlistentry>
<varlistentry><term>{ NEW | EXISTING } SNAPSHOT HAVING SUFFIX '<replaceable
>string</replaceable>'</term>
<listitem><para>initiates an HBase snapshot scan during the unload
operation. During a snapshot scan, the Bulk Unloader will get a list
of the Trafodion tables from the query explain plan and will create
and verify snapshots for the tables. Specify a suffix string, <literal
>'<replaceable>string</replaceable>'</literal>, which will be appended
to each table name.</para></listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="UNLOAD-Considerations">
<title>Considerations for UNLOAD</title>
<indexterm><primary>UNLOAD statement</primary><secondary>considerations
for</secondary></indexterm>
<itemizedlist>
<listitem><para>You must have write permissions on the target HDFS
folder.</para></listitem>
<listitem><para>If a WITH option is specified more than once, Trafodion
returns an error with SQLCODE -4489.</para></listitem>
</itemizedlist>
<section>
<title>Required Privileges</title>
<para>To issue an UNLOAD statement, one of the following must be true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT.</para></listitem>
<listitem><para>You are the owner of the target table.</para></listitem>
<listitem><para>You have the SELECT privilege on the target table.</para>
</listitem>
<listitem><para>You have the MANAGE_LOAD component privilege for the
SQL_OPERATIONS component.</para></listitem>
</itemizedlist>
</section>
</section>
<section id="UNLOAD-Examples">
<title>Example of UNLOAD</title>
<indexterm><primary>UNLOAD statement</primary><secondary>example of</secondary>
</indexterm>
<para>This example shows how the UNLOAD statement extracts data from
a Trafodion table, TRAFODION.HBASE.CUSTOMER_DEMOGRAPHICS, into an
HDFS folder, <filename>/bulkload/customer_demographics</filename>:</para>
<programlisting>>>UNLOAD
+>WITH PURGEDATA FROM TARGET
+>MERGE FILE 'merged_customer_demogs.gz' OVERWRITE
+>COMPRESSION GZIP
+>INTO '/bulkload/customer_demographics'
+>select * from trafodion.hbase.customer_demographics
+>&lt;&lt;+ cardinality 10e10 >>;
Task: UNLOAD Status: Started
Task: EMPTY TARGET Status: Started
Task: EMPTY TARGET Status: Ended ET: 00:00:00.014
Task: EXTRACT Status: Started
       Rows Processed: 200000
Task: EXTRACT Status: Ended ET: 00:00:04.743
Task: MERGE FILES Status: Started
Task: MERGE FILES Status: Ended ET: 00:00:00.063

--- 200000 row(s) unloaded.</programlisting>
</section>
</section>
<section id="i1059819" pagebreak="yes">
<title>UPDATE STATISTICS Statement</title>
<itemizedlist>
<listitem><para><xref linkend="i1064246" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1059804" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1059677" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>UPDATE STATISTICS statement</primary><secondary
>syntax diagram of</secondary></indexterm><indexterm><primary>Resource
control statements</primary><secondary>UPDATE STATISTICS statement</secondary>
</indexterm>
<para>The UPDATE STATISTICS statement updates the histogram statistics
for one or more groups of columns within a table. These statistics
are used to devise optimized access plans.</para>
<para>UPDATE STATISTICS is a Trafodion SQL extension.</para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>UPDATE STATISTICS FOR TABLE <replaceable
>table</replaceable> [CLEAR | <replaceable>on-clause</replaceable
><literal condition="hidden">
   | [CREATE SAMPLE <replaceable>persistent-sample-option</replaceable
>]
   | [REMOVE SAMPLE <replaceable>persistent-sample-option</replaceable
>]</literal>]

<replaceable>on-clause</replaceable> is:
     ON <replaceable>column-group-list</replaceable> CLEAR 
   | ON <replaceable>column-group-list</replaceable> [<replaceable
>histogram-option</replaceable>]...  

<replaceable>column-group-list</replaceable> is:
     <replaceable>column-list</replaceable> [,<replaceable>column-list</replaceable
>]...
   | EVERY COLUMN [,<replaceable>column-list</replaceable>]...
   | EVERY KEY [,<replaceable>column-list</replaceable>]...
   | EXISTING COLUMN[S] [<replaceable>,column-list</replaceable>]...
<phrase>   | NECESSARY COLUMN[S] [<replaceable>,column-list</replaceable
>]...
</phrase>
<replaceable>column-list</replaceable> for a single-column group is:
     <replaceable>column-name</replaceable> 
   | (<replaceable>column-name</replaceable>) 
   | <replaceable>column-name</replaceable> TO <replaceable>column-name</replaceable
>
   | (<replaceable>column-name</replaceable>) TO (<replaceable>column-name</replaceable
>)
   | <replaceable>column-name</replaceable> TO (<replaceable>column-name</replaceable
>)
   | (<replaceable>column-name</replaceable>) TO <replaceable>column-name</replaceable
>

<replaceable>column-list</replaceable> for a multicolumn group is:
     (<replaceable>column-name</replaceable>, <replaceable>column-name</replaceable
> [,<replaceable>column-name</replaceable>]...)

<replaceable>histogram-option</replaceable> is:
     GENERATE <replaceable>n</replaceable> INTERVALS 
   | SAMPLE [<replaceable>sample-option</replaceable>] 

<replaceable>sample-option</replaceable> is:
     [<replaceable>r</replaceable> ROWS]
   | RANDOM <replaceable>percent</replaceable> PERCENT 
   | PERIODIC <replaceable>size</replaceable> ROWS EVERY <replaceable
>period</replaceable> ROWS
</programlisting><programlisting condition="hidden"><replaceable>persistent-sample-option</replaceable
> is:   
   [<replaceable>r</replaceable> ROWS]
   | <computeroutput>ALL</computeroutput>
   | RANDOM <replaceable>percent</replaceable> PERCENT </programlisting
></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="i1064246">
<title>Syntax Description of UPDATE STATISTICS</title>
<variablelist>
<varlistentry><term><replaceable>table</replaceable> </term>
<listitem><para>names the table for which statistics are to be updated.
To refer to a table, use the ANSI logical name.</para><para>See <xref
linkend="i1013018" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
<varlistentry><term>CLEAR </term>
<listitem><indexterm><primary>Histograms</primary><secondary>clearing</secondary>
</indexterm><indexterm><primary>Statistics</primary><secondary>clearing</secondary>
</indexterm><para>deletes some or all histograms for the table <replaceable
>table</replaceable>. Use this option when new applications no longer
use certain histogram statistics.</para><para>If you do not specify <replaceable
>column-group-list</replaceable>, all histograms for <replaceable
>table</replaceable> are deleted.</para>
<para>If you specify <replaceable>column-group-list</replaceable>,
only columns in the group list are deleted. </para>
</listitem>
</varlistentry>
<varlistentry><term>ON <replaceable>column-group-list</replaceable
> </term>
<listitem><para>specifies one or more groups of columns for which
to generate histogram statistics with the option of clearing the histogram
statistics. You must use the ON clause to generate statistics stored
in histogram tables.</para>
<variablelist>
<varlistentry><term> <replaceable>column-list</replaceable>  </term>
<listitem><indexterm><primary>UPDATE STATISTICS statement</primary>
<secondary>column groups</secondary></indexterm><para>specifies how <replaceable
>column-group-list</replaceable> can be defined. The column list represents
both a single-column group and a multi-column group.</para><para>Single-column
group: </para>
<variablelist>
<varlistentry><term>    <replaceable>column-name</replaceable> | (<replaceable
>column-name</replaceable>)    | <replaceable>column-name</replaceable
> TO <replaceable>column-name </replaceable>   | (<replaceable>column-name</replaceable
>) TO (<replaceable>column-name</replaceable>)</term>
<listitem><indexterm><primary>UPDATE STATISTICS statement</primary>
<secondary>column lists</secondary></indexterm><para>specifies how
you can specify individual columns or a group of individual columns. </para>
<para>To generate statistics for individual columns, list each column.
You can list each single column name within or without parentheses.</para>
</listitem>
</varlistentry>
</variablelist>
<para>Multi-column group:</para>
<variablelist>
<varlistentry><term>(<replaceable>column-name</replaceable>, <replaceable
>column-name</replaceable> [,<replaceable>column-name</replaceable
>]...)</term>
<listitem><para>specifies a multi-column group.</para><para>To generate
multi-column statistics, group a set of columns within parentheses,
as shown. You cannot specify the name of a column more than once in
the same group of columns.</para>
</listitem>
</varlistentry>
</variablelist>
<indexterm><primary>UPDATE STATISTICS statement</primary><secondary
>histogram tables</secondary></indexterm><indexterm><primary>Histograms</primary>
<secondary>UPDATE STATISTICS use of</secondary></indexterm><para>One
histogram is generated for each unique column group. Duplicate groups,
meaning any permutation of the same group of columns, are ignored
and processing continues. When you run UPDATE STATISTICS again for
the same user table, the new data for that table replaces the data
previously generated and stored in the table’s histogram tables. Histograms
of column groups not specified in the ON clause remain unchanged in
histogram tables. </para>
<para>For more information about specifying columns, see <xref
linkend="i1059592" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
<varlistentry><term>EVERY COLUMN</term>
<listitem><para>The EVERY COLUMN keyword indicates that histogram
statistics are to be generated for each individual column of <replaceable
>table</replaceable> and any multicolumns that make up the primary
key and indexes. For example, <replaceable>table</replaceable> has
columns A, B, C, D defined, where A, B, C compose the primary key.
In this case, the ON EVERY COLUMN option generates a single column
histogram for columns A, B, C, D, and two multi-column histograms
of (A, B, C) and (A, B). </para><para>The EVERY COLUMN option does
what EVERY KEY does, with additional statistics on the individual
columns.</para>
</listitem>
</varlistentry>
<varlistentry><term>EVERY KEY</term>
<listitem><para>The EVERY KEY keyword indicates that histogram statistics
are to be generated for columns that make up the primary key and indexes.
For example, <replaceable>table</replaceable> has columns A, B, C,
D defined. If the primary key comprises columns A, B, statistics are
generated for (A, B), A and B. If the primary key comprises columns
A, B, C, statistics are generated for (A,B,C), (A,B), A, B, C. If
the primary key comprises columns A, B, C, D, statistics are generated
for (A, B, C, D), (A, B, C), (A, B), and A, B, C, D. </para></listitem>
</varlistentry>
<varlistentry><term>EXISTING COLUMN[S]</term>
<listitem><para>The EXISTING COLUMN keyword indicates that all existing
histograms of the table are to be updated. Statistics must be previously
captured to establish existing columns.</para></listitem>
</varlistentry>
<varlistentry><term>NECESSARY COLUMN[S]</term>
<listitem><para>The NECESSARY COLUMN[S] keyword generates statistics
for histograms that the optimizer has requested but do not exist.
Update statistics automation must be enabled for NECESSARY COLUMN[S]
to generate statistics. To enable automation, see <xref
linkend="Automating-Update-Statistics" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>histogram-option</replaceable> </term>
<listitem>
<variablelist>
<varlistentry><term>GENERATE <replaceable>n</replaceable> INTERVALS</term>
<listitem><para>The GENERATE <replaceable>n</replaceable> INTERVALS
option for UPDATE STATISTICS accepts values between 1 and 10,000.
Keep in mind that increasing the number of intervals per histograms
may have a negative impact on compile time. </para><para>Increasing
the number of intervals can be used for columns with small set of
possible values and large variance of the frequency of these values.
For example, consider a column ‘CITY’ in table SALES, which stores
the city code where the item was sold, where number of cities in the
sales data is 1538. Setting the number of intervals to a number greater
or equal to the number of cities (that is, setting the number of intervals
to 1600) guarantees that the generated histogram captures the number
of rows for each city. If the specified value n exceeds the number
of unique values in the column, the system generates only as many
intervals as the number of unique values.</para>
</listitem>
</varlistentry>
</variablelist>
<variablelist>
<varlistentry><term>SAMPLE [<replaceable>sample-option</replaceable
>] </term>
<listitem><para>is a clause that specifies that sampling is to be
used to gather a subset of the data from the table. UPDATE STATISTICS
stores the sample results and generates histograms. </para><para>If
you specify the SAMPLE clause without additional options, the result
depends on the number of rows in the table. If the table contains
no more than 10,000 rows, the entire table will be read (no sampling).
If the number of rows is greater than 10,000 but less than 1 million,
10,000 rows are randomly sampled from the table. If there are more
than 1 million rows in the table, a random row sample is used to read
1 percent of the rows in the table, with a maximum of 1 million rows
sampled.</para>
<tip>
<para>As a guideline, the default sample of 1 percent of the rows
in the table, with a maximum of 1 million rows, provides good statistics
for the optimizer to generate good plans.</para>
</tip>
<para>If you do not specify the SAMPLE clause, if the table has fewer
rows than specified, or if the sample size is greater than the system
limit, Trafodion SQL reads all rows from <replaceable>table</replaceable
>.</para>
<para>See <xref linkend="i1005599" role="select:quotedtitle page"
/>.</para>
<variablelist>
<varlistentry><term><replaceable>sample-option</replaceable></term>
<listitem><para><replaceable>r</replaceable> <literal>rows</literal
></para><para>A row sample is used to read <replaceable>r</replaceable
> rows from the table. The value <replaceable>r</replaceable> must
be an integer that is greater than zero (r > 0).</para>
<para>RANDOM <replaceable>percent</replaceable> PERCENT</para>
<para>directs Trafodion SQL to choose rows randomly from the table.
The value percent must be a value between zero and 100 (0 &lt; percent <phrase
>&lt;=</phrase> 100). In addition, only the first four digits to the
right of the decimal point are significant. For example, value 0.00001
is considered to be 0.0000, Value 1.23456 is considered to be 1.2345.</para>
<para>PERIODIC <replaceable>size</replaceable> ROWS EVERY <replaceable
>period</replaceable> ROW</para>
<para>directs Trafodion SQL to choose the first <replaceable>size</replaceable
> number of rows from each <replaceable>period</replaceable> of rows.
The value <replaceable>size</replaceable> must be an integer that
is greater than zero and less than or equal to the value <replaceable
>period</replaceable>. (0 &lt; <replaceable>size</replaceable> &lt;= <replaceable
>period</replaceable>). The size of the <replaceable>period</replaceable
> is defined by the number of rows specified for <replaceable>period</replaceable
>. The value <replaceable>period</replaceable> must be an integer
that is greater than zero (<replaceable>period</replaceable> > 0).</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<!--WRITER'S NOTE: Hide these options until I get clarification that they are supported in Trafodion.-->
<varlistentry condition="hidden"><term><replaceable>persistent-sample-option</replaceable
></term>
<listitem><para><replaceable>r</replaceable> <literal>rows</literal
></para><para>A row sample is used to read <replaceable>r</replaceable
> rows from the table. The value <replaceable>r</replaceable> must
be an integer that is greater than zero (r > 0).</para>
<para>RANDOM <replaceable>percent</replaceable> PERCENT</para>
<para>directs Trafodion SQL to choose rows randomly from the table.
The value <replaceable>percent</replaceable> must be a value between
zero and 100 (0 &lt; <replaceable>percent</replaceable> <phrase>&lt;=</phrase
> 100). In addition, only the first four digits to the right of the
decimal point are significant. For example, value 0.00001 is considered
to be 0.0000, Value 1.23456 is considered to be 1.2345.</para>
<para>ALL</para>
<para>removes all persistent sample tables from the table. Only valid
with the <literal>UPDATE STATISTICS <replaceable>table </replaceable
>REMOVE SAMPLE ALL</literal> command.</para>
</listitem>
</varlistentry>
<varlistentry condition="hidden"><term>CREATE SAMPLE <replaceable
>persistent-sample-option</replaceable></term>
<listitem><indexterm><primary>Persistent sample tables</primary>
</indexterm><indexterm><primary>UPDATE STATISTICS statement</primary>
<secondary>persistent sample tables</secondary></indexterm><indexterm>
<primary>UPDATE STATISTICS statement</primary><secondary>persistent
sample tables</secondary></indexterm><para>creates a persistent sample
table of size <replaceable>r</replaceable> rows or RANDOM <replaceable
>percent</replaceable> percent. <literal>CREATE SAMPLE ALL</literal
> is not valid and results in a syntax error. The compiler uses persistent
sample tables to improve cardinality estimates for cases when estimates
from histograms cannot be considered reliable. </para></listitem>
</varlistentry>
<varlistentry condition="hidden"><term>REMOVE SAMPLE <replaceable
>persistent-sample-option</replaceable></term>
<listitem><para>removes a persistent sample table as specified by <replaceable
>r</replaceable> rows, RANDOM <replaceable>percent</replaceable> percent,
or ALL for all persistent sample tables in the table. </para></listitem>
</varlistentry>
</variablelist>
</section>
<section id="i1059804">
<title>Considerations for UPDATE STATISTICS</title>
<indexterm><primary>UPDATE STATISTICS statement</primary><secondary
>considerations</secondary></indexterm><indexterm><primary>Statistics</primary>
<secondary>UPDATE STATISTICS statement</secondary></indexterm>
<section id="i1059577">
<title>Using Statistics</title>
<para>Use UPDATE STATISTICS to collect and save statistics on columns.
The SQL compiler uses histogram statistics to determine the selectivity
of predicates, indexes, and tables. Because selectivity directly influences
the cost of access plans, regular collection of statistics increases
the likelihood that Trafodion SQL chooses efficient access plans.</para>
<para>While UPDATE STATISTICS is running on a table, the table is
active and available for query access.</para>
<para>When a user table is changed, either by changing its data significantly
or its definition, re-execute the UPDATE STATISTICS statement for
the table.</para>
</section>
<section>
<title>Histogram Statistics</title>
<indexterm><primary>UPDATE STATISTICS</primary><secondary>histogram
statistics</secondary></indexterm>
<para>Histogram statistics are used by the compiler to produce the
best plan for a given SQL query. When histograms are not available,
default assumptions are made by the compiler and the resultant plan
might not perform well. Histograms that reflect the latest data in
a table are optimal. </para>
<para>The compiler does not need histogram statistics for every column
of a table. For example, if a column is only in the select list, its
histogram statistics will be irrelevant. A histogram statistic is
useful when a column appears in:</para>
<itemizedlist>
<listitem><para>A predicate</para></listitem>
<listitem><para>A GROUP BY column</para></listitem>
<listitem><para>An ORDER BY clause</para></listitem>
<listitem><para>A HAVING clause</para></listitem>
<listitem><para>Or similar clause</para></listitem>
</itemizedlist>
<para>In addition to single-column histogram statistics, the compiler
needs multi-column histogram statistics, such as when <literal>group
by column-5, column-3, column-19</literal> appears in a query. Then,
histogram statistics for the combination (<literal>column-5, column-3,
column-19</literal>) are needed.</para>
</section>
<section>
<title>Required Privileges</title>
<para>To perform an UPDATE STATISTICS operation, one of the following
must be true:</para>
<itemizedlist>
<listitem><para>You are DB__ROOT.</para></listitem>
<listitem><para>You are the owner of the target table.</para></listitem>
<listitem><para>You have the MANAGE_STATISTICS component privilege
for the SQL_OPERATIONS component.</para></listitem>
</itemizedlist>
<para condition="hidden">To run the UPDATE STATISTICS statement against
SQL tables, you must have the authority to read the user table for
which statistics are generated. Because the histogram tables are registered
in the schema of <replaceable>table</replaceable>, you must have the
authority to read and write to this schema.</para>
</section>
<section>
<title>Locking</title>
<para>UPDATE STATISTICS momentarily locks the definition of the user
table during the operation but not the user table itself. The UPDATE
STATISTICS statement uses READ UNCOMMITTED isolation level for the
user table.</para>
</section>
<section>
<title>Transactions</title>
<para>Do not start a transaction before executing UPDATE STATISTICS.
UPDATE STATISTICS runs multiple transactions of its own, as needed.
Starting your own transaction in which UPDATE STATISTICS runs could
cause the transaction auto abort time to be exceeded during processing.</para>
</section>
<section id="i1059592">
<title>Generating and Clearing Statistics for Columns</title>
<para>To generate statistics for particular columns, name each column,
or name the first and last columns of a sequence of columns in the
table. For example, suppose that a table has consecutive columns CITY,
STATE, ZIP. This list gives a few examples of possible options you
can specify: </para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="3" tgroupstyle="TI  inline table">
<tbody>
<row><entry>Single-Column Group</entry><entry>Single-Column Group
Within Parentheses</entry><entry>Multicolumn Group</entry></row>
<row><entry><literal>ON CITY, STATE, ZIP</literal></entry><entry><literal
>ON (CITY),(STATE),(ZIP)</literal></entry><entry>ON (CITY, STATE)
or  ON (CITY,STATE,ZIP)</entry></row>
<row><entry><literal>ON CITY TO ZIP</literal></entry><entry><literal
>ON (CITY) TO (ZIP)</literal></entry><entry></entry></row>
<row><entry><literal>ON ZIP TO CITY</literal></entry><entry><literal
>ON (ZIP) TO (CITY)</literal></entry><entry></entry></row>
<row><entry><literal>ON CITY, STATE TO ZIP</literal></entry><entry
><literal>ON (CITY), (STATE) TO (ZIP)</literal></entry><entry></entry>
</row>
<row><entry><literal>ON CITY TO STATE, ZIP</literal></entry><entry
><literal>ON (CITY) TO (STATE), (ZIP)</literal></entry><entry></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<para>The TO specification is useful when a table has many columns,
and you want histograms on a subset of columns. Do not confuse (CITY)
TO (ZIP) with (CITY, STATE, ZIP), which refers to a multi-column histogram.</para>
<para>You can clear statistics in any combination of columns you specify,
not necessarily with the <replaceable>column-group-list</replaceable
> you used to create statistics. However, those statistics will remain
until you clear them. </para>
</section>
<section>
<title>Column Lists and Access Plans</title>
<para>Generate statistics for columns most often used in data access
plans for a table—that is, the primary key, indexes defined on the
table, and any other columns frequently referenced in predicates in
WHERE or GROUP BY clauses of queries issued on the table. Use the
EVERY COLUMN option to generate histograms for every individual column
or multicolumns that make up the primary key and indexes.</para>
<para>The EVERY KEY option generates histograms that make up the primary
key and indexes.</para>
<para>If you often perform a GROUP BY over specific columns in a table,
use multi-column lists in the UPDATE STATISTICS statement (consisting
of the columns in the GROUP BY clause) to generate histogram statistics
that enable the optimizer to choose a better plan. Similarly, when
a query joins two tables by two or more columns, multi-column lists
(consisting of the columns being joined) help the optimizer choose
a better plan.</para>
</section>
<section id="Automating-Update-Statistics">
<title>Automating Update Statistics</title>
<indexterm><primary>UPDATE STATISTICS statement</primary><secondary
>automating</secondary></indexterm><indexterm><primary>Automated UPDATE
STATISTICS</primary></indexterm><indexterm><primary>SQL Utilities</primary>
<secondary>Automated UPDATE STATISTICS</secondary></indexterm>
<indexterm><primary>Utilities</primary><secondary>Automated UPDATE
STATISTICS</secondary></indexterm>
<para>To enable update statistics automation, set the Control Query
Default (CQD) attribute, USTAT_AUTOMATION_INTERVAL, in a session where
you will run update statistics operations. For example:</para>
<programlisting>control query default USTAT_AUTOMATION_INTERVAL '1440';</programlisting>
<para>The value of USTAT_AUTOMATION_INTERVAL is intended to be an
automation interval (in minutes), but, in Trafodion Release 1.0, this
value does not act as a timing interval. Instead, any value greater
than zero enables update statistics automation.</para>
<para>After enabling update statistics automation, prepare each of
the queries that you want to optimize. For example:</para>
<programlisting>prepare s from select...;</programlisting>
<para> The PREPARE statement causes the Trafodion SQL compiler to
compile and optimize a query without executing it. When preparing
queries with update statistic automation enabled, any histograms needed
by the optimizer that are not present will cause those columns to
be marked as needing histograms.</para>
<para>Next, run this UPDATE STATISTICS statement against each table,
using ON NECESSARY COLUMN[S] to generate the needed histograms:</para>
<programlisting>update statistics for table <replaceable>table-name</replaceable
> on necessary columns sample;</programlisting>
</section>
</section>
<section id="i1059677">
<title>Examples of UPDATE STATISTICS</title>
<indexterm><primary>UPDATE STATISTICS statement</primary><secondary
>examples of</secondary></indexterm><indexterm><primary>Statistics</primary>
<secondary>UPDATE STATISTICS statement</secondary></indexterm>
<itemizedlist>
<listitem><para>This example generates four histograms for the columns
jobcode, empnum, deptnum, and (empnum, deptnum) for the table EMPLOYEE.
Depending on the table’s size and data distribution, each histogram
should contain ten intervals.</para>
<programlisting>UPDATE STATISTICS FOR TABLE employee 
  ON (jobcode),(empnum, deptnum) 
  GENERATE 10 INTERVALS; 

--- SQL operation complete.
</programlisting>
</listitem>
<listitem><para>This example generates histogram statistics using
the ON EVERY COLUMN option for the table DEPT. This statement performs
a full scan, and Trafodion SQL determines the default number of intervals.</para>
<programlisting>UPDATE STATISTICS FOR TABLE dept 
  ON EVERY COLUMN;

--- SQL operation complete.
</programlisting>
</listitem>
<listitem><para>Suppose that a construction company has an ADDRESS
table of potential sites and a DEMOLITION_SITES table that contains
some of the columns of the ADDRESS table. The primary key is ZIP.
Join these two tables on two of the columns in common:</para>
<programlisting>SELECT COUNT(AD.number), AD.street, 
       AD.city, AD.zip, AD.state 
  FROM address AD, demolition_sites DS 
  WHERE AD.zip = DS.zip AND AD.type = DS.type 
  GROUP BY AD.street, AD.city, AD.zip, AD.state;
</programlisting>
<para>To generate statistics specific to this query, enter these statements: </para>
<programlisting>UPDATE STATISTICS FOR TABLE address 
  ON (street), (city), (state), (zip, type); 

UPDATE STATISTICS FOR TABLE demolition_sites 
  ON (zip, type); 
</programlisting>
</listitem>
<listitem><para>This example removes all histograms for table DEMOLITION_SITES:</para>
<programlisting>UPDATE STATISTICS FOR TABLE demolition_sites CLEAR;
</programlisting>
</listitem>
<listitem><para>This example selectively removes the histogram for
column STREET in table ADDRESS:</para>
<programlisting>UPDATE STATISTICS FOR TABLE address ON street CLEAR;
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section condition="hidden" id="USAS" pagebreak="yes">
<title>Automating Update Statistics Operations</title>
<itemizedlist>
<listitem><para><xref linkend="Setting-Auto-USTAT"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="spec_tables"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="Listing-Auto-Tables"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="Stopping-Auto-USTAT"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="Scheduling-Auto-USTAT-Reorg"
role="select:quotedtitle page"/></para></listitem>
</itemizedlist>
<indexterm><primary>Update statistics operation</primary><secondary
>automating</secondary><seealso>Automated UPDATE STATISTICS</seealso>
</indexterm><indexterm><primary>SQL Utilities</primary><secondary
>Automated UPDATE STATISTICS</secondary></indexterm><indexterm><primary
>Utilities</primary><secondary>Automated UPDATE STATISTICS</secondary>
</indexterm>
<para>Tables with current histogram statistics are important for database
performance. Automated update statistics are provided to simplify
the operations of updating histogram statistics without user intervention. <emphasis
>Automation</emphasis> refers to the entire cycle of the compiler's
recording of histogram statistics events and the maintenance activity
to keep them up-to-date. <emphasis>USAS </emphasis> (Update Statistics
Automation Server) refers to the job that runs as part of automation—USAS
initiates update statistics.</para>
<section>
<title>Table Maintenance Facilities</title>
<indexterm><primary>Automated UPDATE STATISTICS</primary><secondary
>table maintenance</secondary></indexterm>
<para>From <phrase>TrafCI</phrase>, individual tables can be acted
on at any time with the UPDATE STATISTICS command. While you can continue
to use this for one-off or exceptional cases, the automation facility
is intended as a preferred and simpler means of keeping the database
in peak condition.</para>
<section>
<title>Histogram Statistics</title>
<indexterm><primary>Automated UPDATE STATISTICS</primary><secondary
>histogram statistics</secondary></indexterm>
<para>Histogram statistics are used by the compiler to produce the
best plan for a given SQL query. When histograms are not available,
default assumptions are made by the compiler and the resultant plan
might not perform well. Histograms that reflect the latest data in
a table are optimal. </para>
<para>The compiler does not need histogram statistics for every column
of a table. For example, if a column is only in the select list, its
histogram statistics will be irrelevant. A histogram statistic is
useful when a column appears in:</para>
<itemizedlist>
<listitem><para>A predicate</para></listitem>
<listitem><para>A GROUP BY column</para></listitem>
<listitem><para>An ORDER BY clause</para></listitem>
<listitem><para>A HAVING clause</para></listitem>
<listitem><para>Or similar clause</para></listitem>
</itemizedlist>
<para>In addition to single-column histogram statistics, the compiler
needs multi-column histogram statistics, such as when <literal>group
by column-5, column-3, column-19</literal> appears in a query. Then,
histogram statistics for the combination (<literal>column-5, column-3,
column-19</literal>) are needed.</para>
</section>
</section>
<section>
<title>Update Statistics Automation</title>
<indexterm><primary>Automated UPDATE STATISTICS</primary><secondary
>description of</secondary></indexterm>
<para>Automation is automatically installed with the software and
is disabled by default. When automation is off, you are required to
manually generate histograms for tables <phrase condition="hidden"
>and materialized views (MVs) </phrase>to produce good query plans.<phrase
condition="hidden"> Consider that any reference to “table” is also
applicable to MV in this section.</phrase></para>
<para>When automation is disabled, the standard approach to maintaining
a table's histograms is by using the UPDATE STATISTICS command. </para>
<para>When the optimizer finds that histograms are missing, warnings
regarding missing histogram statistics 6007 and 6008 are issued. If
you see warnings 6007 and 6008 in your session or event logs, automation
is not enabled on your system. Typically, the missing histogram statistics
warnings are collected by the DBA and manually added to the UPDATE
STATISTICS command syntax so that these missing histograms will be
generated. With update statistics automation, this is not necessary.</para>
<para>When automation is enabled, you no longer need to run the UPDATE
STATISTICS command (although you can run the command without problems).
The automation feature is designed to be set up once and left to run
on its own. The automation feature is made up of several components:</para>
<itemizedlist>
<listitem><para><emphasis>The automation list</emphasis>: A list of
tables for which update statistics will be run automatically. This
list is maintained by using the CHG_AUTO_LIST ( ) stored procedure
and views on the list. You can also exclude certain tables for which
you do not want UPDATE STATISTICS to automatically operate. </para>
</listitem>
<listitem><para><emphasis>The automation server (Update Statistics
Automation Server or USAS)</emphasis>: This is a job (script) that
is designed to run once a day at a user-specified time (called the
maintenance window). USAS determines which tables in the automation
list require histograms generation. For those tables, the UPDATE STATISTICS
commands are run. </para></listitem>
<listitem><para><emphasis>The maintenance window</emphasis>: The time
during which the USAS job is run. During the 24-hour period before
the start of the maintenance window, automation records histogram
usage and missing histogram information. You define the maintenance
window. The beginning of the maintenance window is when you invoke
USAS. The duration is part of the argument provided to USAS. See <xref
linkend="Scheduling-Auto-USTAT-Reorg" role="select:quotedtitle page"
/>. When USAS runs, histograms are generated as needed. See <xref
linkend="Listing-Auto-Tables" role="select:quotedtitle page"/>.</para>
</listitem>
</itemizedlist>
<para>You add tables to the automation list and set the maintenance
window to the desired time. The USAS job will then run during the
specified time and check if any of the specified tables need updated
histogram statistics. For the tables that need updated histogram statistics,
UPDATE STATISTICS will be run, limited by the maintenance window time,
which you can specify. After this, the automation list will be updated
to reflect updated histogram statistics for those tables.</para>
<para>The automated UPDATE STATISTICS operation uses the UPDATE STATISTICS
statement with the NECESSARY keyword to determine which histogram
statistics need to be updated for a set of tables and then updates
them by using a sample size based on the skew, the default sample
size, and the sample size of the last run. Automated UPDATE STATISTICS
automatically generates histogram statistics for:</para>
<itemizedlist>
<listitem><para>Missing histograms needed by the SQL optimizer</para>
</listitem>
<listitem><para>Histograms that have been used recently by the optimizer
and are now obsolete. (Histograms that are no longer needed by the
optimizer are not generated.)</para>
<itemizedlist>
<listitem><para>A recently used histogram is one that was used in
the last 5760 minutes (or four days). <phrase condition="hidden">To
change the default limit of 5760 minutes, contact your HP support
provider.</phrase></para></listitem>
<listitem><para>An obsolete histogram is one where the percentage
of modified rows (that is, inserted, updated, or deleted rows) in
the table, since the histogram was last generated, is greater than
or equal to 15 percent. <phrase condition="hidden">To change the default
limit of 15 percent, contact your HP support provider.</phrase></para>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<para>To enable and change settings for automated UPDATE STATISTICS,
see:</para>
<itemizedlist>
<listitem><para><xref linkend="Setting-Auto-USTAT"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="newspec" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="Listing-Auto-Tables"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="Stopping-Auto-USTAT"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="Scheduling-Auto-USTAT-Reorg"
role="select:quotedtitle page"/></para></listitem>
</itemizedlist>
<section id="Setting-Auto-USTAT">
<title>Enabling Automated UPDATE STATISTICS</title>
<para>To enable automated update statistics, you must insert table
names into the automation list using the SPJ, CHG_AUTO_LIST( ).</para>
<para>After you insert into the automation list by using CHG_AUTO_LIST
( ), the overnight automation job USAS will enable automation on the
system. Histogram usage will be tracked after automation is enabled.
Additionally, you may need to restart the MXOSRVR for automation settings
to take effect. When automation is enabled, the missing statistics
warnings from query compilation will be numbered 6010 and 6011 (rather
than 6007 and 6008) with this text:</para>
<itemizedlist>
<listitem><para><screen>
<computeroutput>6010: Multi-column statistics for columns <replaceable
>column-list</replaceable> from table <replaceable>table-name</replaceable
> were not available. 
The columns were being used by <replaceable>op-name</replaceable> operator. As a result, the access path chosen might not be the 
best possible. These statistics will be automatically generated at the next opportunity; 
however, you can generate them now by using UPDATE STATISTICS FOR TABLE <replaceable
>table-name</replaceable> ON NECESSARY 
COLUMNS.</computeroutput></screen></para></listitem>
<listitem><para><screen>
<computeroutput>6011: Statistics for column <replaceable>column-name</replaceable
> from table <replaceable>table-name</replaceable> were not available. 
As a result, the access path chosen might not be the best possible. These statistics will be automatically generated 
at the next opportunity; however, you can generate them now by using UPDATE STATISTICS FOR TABLE <replaceable
>table-name</replaceable> 
ON NECESSARY COLUMNS.</computeroutput></screen></para></listitem>
</itemizedlist>
<para>This SPJ places table names on a list that is used by USAS.
You can specify a single table for <replaceable>schema</replaceable
> and <replaceable>table</replaceable> or '*','*' for all catalog
tables.</para>
<para>For information about adding tables to the automation list,
see <xref linkend="newspec" role="select:quotedtitle page"/>.</para>
<section id="newspec">
<title>Specifying Tables To Be Automated</title>
<indexterm><primary>Automated UPDATE STATISTICS</primary><secondary
>enabling</secondary></indexterm><indexterm><primary>Automated tables</primary>
<secondary>setting</secondary></indexterm><indexterm><primary>HP_USTAT.CHG_AUTO_LIST( )
stored procedure</primary></indexterm><indexterm><primary>CHG_AUTO_LIST( )
stored procedure</primary></indexterm>
<para>By default, no database tables are set for automated UPDATE
STATISTICS. You must add tables to the automation list for the histograms
of these tables to be automatically maintained. Use the CHG_AUTO_LIST(
) procedure to add, delete, or exclude table names from the automation
list.</para>
<section pagebreak="yes">
<title>Syntax</title>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>HP_USTAT.CHG_AUTO_LIST( IN '<replaceable
>operation</replaceable>' VARCHAR(300),
                        IN '<replaceable>schema</replaceable>' VARCHAR(300),
                        IN '<replaceable>table</replaceable>' VARCHAR(300),
                        OUT <replaceable>response</replaceable> CHAR(80))

'<replaceable>operation</replaceable>' is: { INSERT | DELETE | EXCLUDE }</programlisting
></entry></row>
</tbody>
</tgroup>
</informaltable>
<variablelist>
<varlistentry><term><literal>'INSERT'</literal> </term>
<listitem><para>adds the specified table to the list of tables on
which automated UPDATE STATISTICS runs. The option name is case-insensitive.</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>'DELETE'</literal> </term>
<listitem><para>deletes the specified table from the list of tables
on which automated UPDATE STATISTICS runs. The option name is case-insensitive.</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>'EXCLUDE'</literal> </term>
<listitem><para>adds the specified table to the list of tables on
which automated UPDATE STATISTICS is prevented from running. The option
name is case-insensitive.</para></listitem>
</varlistentry>
<varlistentry><term><literal>'<replaceable>schema</replaceable>'</literal
></term>
<listitem><para>is the name of the database schema in which the table
resides. To specify all existing schemas, use <literal>'*'</literal
>. If you specify <literal>'*'</literal> for the schema, you must
also specify <literal>'*'</literal> for the table parameter. To delimit
the schema name, see the <xref linkend="Considerations-CHG_AUTO_LIST"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term><literal>'<replaceable>table</replaceable>'</literal
> </term>
<listitem><para>is the name of the database table or materialized
view. To specify all existing tables or materialized views, use <literal
>'*'</literal>. If you specify <literal>'*'</literal> for the table,
you must also specify <literal>'*'</literal> for the schema parameter.
To delimit the table name, see the <xref
linkend="Considerations-CHG_AUTO_LIST" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
<varlistentry><term><literal><replaceable>response</replaceable></literal
> </term>
<listitem><para>is the return value, which is a message about the
results of the operation. The SPJ returns a CHAR(80) column as output.</para>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="Considerations-CHG_AUTO_LIST">
<title>Considerations</title>
<indexterm><primary>Automated UPDATE STATISTICS</primary><secondary
>considerations</secondary></indexterm>
<itemizedlist>
<listitem><para>When you insert names into the automation list, you
can cause the list to be dynamic or static. A <emphasis>dynamic</emphasis
> list is one in which all tables (except for those that are excluded
with the EXCLUDE option) are kept on the list. With every run of the
USAS job, the list is updated by adding any newly created tables,
or removing any that have been dropped. To cause the list to be dynamic,
specify:</para>
<programlisting>CHG_AUTO_LIST('INSERT', '*','*',?)</programlisting>
<para>Followed by any number of <literal>CHG_AUTO_LIST('EXCLUDE',
'<replaceable>schema</replaceable>', '<replaceable>table</replaceable
>',?)</literal> calls. </para>
<para>A <emphasis>static</emphasis> list is one in which only the
tables that you specify are automated. To cause the list to be static,
specify:</para>
<programlisting>CHG_AUTO_LIST('INSERT', '<replaceable>schema</replaceable
>','<replaceable>table</replaceable>',?)</programlisting>
<para>Using INSERT or DELETE without <literal>'*'</literal> causes
the list to become static and the current tables will be the only
ones that are automated.</para>
<note>
<para>The last call to CHG_AUTO_LIST determines whether the list is
dynamic or static.</para>
</note>
</listitem>
<listitem><para>Use the CALL statement to execute the stored procedure,
CHG_AUTO_LIST(). For more information about CALL, see the <xref
linkend="i1066433" role="select:quotedtitle page"/><phrase
condition="hidden"> and the <citetitle>Trafodion Guide to Stored Procedures
in Java</citetitle></phrase>.</para></listitem>
<listitem><para>By default, the automated UPDATE STATISTICS operations
occur within a maintenance window of six hours, starting at midnight.
To change the maintenance window, see <xref
linkend="Scheduling-Auto-USTAT-Reorg" role="select:quotedtitle page"
/>.</para></listitem>
<listitem><para>To add all existing tables to the list of automated
tables, call this stored procedure:</para>
<informalexample>
<programlisting>CHG_AUTO_LIST('insert', '*', '*', ?)</programlisting>
</informalexample>
<para>After calling the procedure, automated UPDATE STATISTICS adds
new nonvolatile user tables to the list of tables at the start of
every maintenance window.</para>
</listitem>
<listitem><para>After you insert or delete specific tables from the
list by calling CHG_AUTO_LIST( ), the list becomes static. To make
the list dynamic again, call this stored procedure:</para>
<informalexample>
<programlisting>CHG_AUTO_LIST('insert', '*', '*', ?)</programlisting>
</informalexample>
<para>After calling the procedure, automated UPDATE STATISTICS automatically
adds new nonvolatile tables to the list of tables.</para>
</listitem>
<listitem><para>If you call this stored procedure, automated UPDATE
STATISTICS deletes all table entries in the list, and automation is
disabled:</para>
<informalexample>
<programlisting>CHG_AUTO_LIST('delete', '*', '*', ?)</programlisting>
</informalexample>
<para>In this case, automated UPDATE STATISTICS does not automatically
generate histograms for any table or materialized view.</para>
</listitem>
<listitem><para>The exclude operation is intended for use when the
list of automated tables is dynamic — that is, using the procedure <literal
>CHG_AUTO_LIST('insert','*','*',?)</literal>. In this case, automated
update statistics is run on all existing tables and any new tables
that have not specifically been excluded.</para></listitem>
<listitem><para>You can exclude tables from the automated list one
at a time. </para></listitem>
<listitem condition="hidden"><para>For delimited schema and table
names, if the schema or table name passed to CHG_AUTO_LIST( ) contains
single quotes, SQL requires that the character be represented by two
single quotes. For example, you should specify the table name, <literal
>SCHEMA."'A brown ""fox""'"</literal> as shown below:</para>
<informalexample>
<programlisting>CHG_AUTO_LIST('insert', 'schema', '"''A brown ""fox""''"', ?)</programlisting>
</informalexample>
</listitem>
</itemizedlist>
</section>
<section>
<title>Restrictions</title>
<indexterm><primary>Automated UPDATE STATISTICS</primary></indexterm>
<para>You can enable automation only through <phrase>TrafCI</phrase
>.</para>
</section>
<section>
<title>Examples</title>
<indexterm><primary>Automated UPDATE STATISTICS</primary><secondary
>examples</secondary></indexterm>
<itemizedlist>
<listitem><para>This CALL statement sets up a dynamic automation list
by invoking the CHG_AUTO_LIST( ) procedure and adding all existing
tables to the list of automated tables, and enabling automation:</para>
<informalexample>
<screen><computeroutput>SQL></computeroutput><userinput>call hp_ustat.chg_auto_list('insert', '*', '*', ?);</userinput
>
<computeroutput>
RESPONSE
--------------------------------------------------------------------------------

INSERTed 3 table names (all) into list.                                         

--- SQL operation complete.</computeroutput></screen>
</informalexample>
</listitem>
<listitem><para>This CALL statement invokes the CHG_AUTO_LIST( ) procedure
and deletes all table entries in the automated list. Automation is
disabled. The list becomes static:</para>
<informalexample>
<screen><computeroutput>SQL></computeroutput><userinput>call hp_ustat.chg_auto_list('delete', '*', '*', ?);</userinput
>
<computeroutput>
RESPONSE
--------------------------------------------------------------------------------

All entries DELETEd. Automation disabled.                                       

--- SQL operation complete.</computeroutput></screen>
</informalexample>
</listitem>
<listitem><para>This CALL statement invokes the CHG_AUTO_LIST( ) procedure
and adds the <literal>sales.orders</literal> table to the list of
automated tables:</para>
<informalexample>
<screen><computeroutput>SQL></computeroutput><userinput>call hp_ustat.chg_auto_list('insert', 'sales', 'orders', ?);</userinput
>
<computeroutput>
RESPONSE                                                                        
--------------------------------------------------------------------------------
Table name "SALES.ORDERS" INSERTed.                                             

--- SQL operation complete.</computeroutput></screen>
</informalexample>
</listitem>
<listitem><para>This CALL statement invokes the CHG_AUTO_LIST( ) procedure
and adds the <literal>sales.parts</literal> table to the list of automated
tables:</para>
<informalexample>
<screen><computeroutput>SQL></computeroutput><userinput>call hp_ustat.chg_auto_list('insert', 'sales', 'parts', ?);</userinput
>
<computeroutput>
RESPONSE                                                                        
--------------------------------------------------------------------------------
Table name "SALES.PARTS" INSERTed.                                              

--- SQL operation complete.</computeroutput></screen>
</informalexample>
</listitem>
<listitem><para>This CALL statement invokes the CHG_AUTO_LIST( ) procedure
and deletes the <literal>sales.parts</literal> table from the automated
list:</para>
<informalexample>
<screen><computeroutput>SQL></computeroutput><userinput>call hp_ustat.chg_auto_list('delete', 'sales', 'parts', ?);</userinput
>
<computeroutput>
RESPONSE                                                                        
--------------------------------------------------------------------------------
Table name "SALES.PARTS" DELETEd.                                               

--- SQL operation complete.</computeroutput></screen>
</informalexample>
</listitem>
</itemizedlist>
</section>
</section>
</section>
<section id="spec_tables">
<title>USAS: The Update Statistics Automation Server</title>
<para>The Update Statistics Automation Server (USAS) performs update
statistics on tables in the automation list when these tasks are required.
In general, we recommend running the automation server, USAS, once
a day. The length of time that USAS runs is called the <emphasis>maintenance
window</emphasis>. Based on this, some factors that can influence
which tables are automated (that is, are included on the automation
list) are: </para>
<itemizedlist>
<listitem><para>If the number of tables is small, all of them can
be added to the automation list with the expectation that necessary
histogram generation can be completed during a single maintenance
window. </para></listitem>
<listitem><para>If you have few tables and control the tables that
can be created, consider using a dynamic automation list. See <emphasis
>dynamic</emphasis> in <xref linkend="Considerations-CHG_AUTO_LIST"
role="select:quotedtitle page"/>.</para></listitem>
<listitem><para>If you have a large set of tables, or your critical
tables take a long time for update statistics, consider using a static
list. See <emphasis>static</emphasis> in <xref
linkend="Considerations-CHG_AUTO_LIST" role="select:quotedtitle page"
/>.</para></listitem>
</itemizedlist>
<para>Tables that change a lot (greater than 15% of row changed per
day) or tables with many ad-hoc queries may cause update statistics
to run longer. When tables change a lot, recently read histograms
must be regenerated. Ad-hoc queries may cause many new histograms
to be requested for the table, which will be generated when USAS runs.
If you delete all rows and insert all new rows on tables, automation
will consider this a 100% change to the table and any recently used
histograms will be regenerated.</para>
<para>These factors can influence how often you run USAS:</para>
<itemizedlist>
<listitem><para>If all of your tables are updated once a day, run
USAS after the update.</para></listitem>
<listitem><para>If a subset of tables are updated once a day at noon
and another subset is updated at midnight, consider running USAS on
each of these subsets after they are updated by loading the automation
list with each subset.</para></listitem>
</itemizedlist>
</section>
<section>
<title>Automation Controls</title>
<para>Certain default settings affect automation. If you customize
any default settings, keep in mind that if you install a new release
of the software, the customized settings may be lost. The default
settings that affect automation include:</para>
<itemizedlist>
<listitem><para>USTAT_AUTO_CV_SAMPLE_SLOPE — Multiplier that affects
table sample size based on previous skew measurement when using update
statistics automation</para></listitem>
<listitem><para>USTAT_MAX_READ_AGE_IN_MIN — Maximum read age of a
histogram for it to be regenerated with update statistics automation</para>
</listitem>
<listitem><para>USTAT_NECESSARY_SAMPLE_MAX — Maximum rows of a table
sample with update statistics automation</para></listitem>
<listitem><para>USTAT_OBSOLETE_PERCENT_ROWCOUNT — Percentage of rowcount
change for a table, which causes update statistics automation to regenerate
histograms</para></listitem>
</itemizedlist>
<para condition="hidden">For information about these settings and
how they are used, contact your HP support representative and see
the <citetitle>Neoview Control Query Default (CQD) Reference Guide</citetitle
>.</para>
</section>
<section id="Listing-Auto-Tables">
<title>Viewing Maintenance Window Activity</title>
<indexterm><primary>Automated tables</primary><secondary>listing</secondary>
</indexterm><indexterm><primary>Automated UPDATE STATISTICS</primary>
<secondary>listing automated tables</secondary></indexterm>
<para>To view maintenance window activity, query the HP_USTAT.USTAT_AUTO_LIST
and HP_USTAT.USTAT_AUTO_LIST_DETAIL views. These automation list views
are created as a part of the system installation and show any errors
encountered and the time of the last UPDATE STATISTICS runs. </para>
<section id="USTAT-AUTO-LIST-View-Section">
<title>HP_USTAT.USTAT_AUTO_LIST View</title>
<indexterm><primary>HP_USTAT.USTAT_AUTO_LIST view</primary></indexterm>
<indexterm><primary>USTAT_AUTO_LIST view</primary></indexterm>
<para>The USTAT_AUTO_LIST view contains all the tables on the automated
list with their last run code, where the names are truncated for easier
reading. To get error detail if RC is non-zero, or to see all entry
information for the automation list, use the USTAT_AUTO_LIST_DETAIL
view instead. See <xref linkend="USTAT-AUTO-LIST-DETAIL-View"
role="select:label"/>.</para>
<table frame="topbot" id="USTAT-AUTO-LIST-View">
<title>USTAT_AUTO_LIST View</title>
<tgroup cols="3" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.65*"/>
<colspec colname="col2" colwidth="0.65*"/>
<colspec colname="col3" colwidth="1.71*"/>
<thead>
<row rowsep="1" valign="bottom"><entry align="left" valign="bottom"
>Column Name</entry><entry align="left" valign="bottom">Data Type</entry>
<entry align="left" valign="bottom">Description</entry></row>
</thead>
<tbody>
<row><entry>SCH_NAME</entry><entry>CHAR(25)</entry><entry>Schema name. <phrase
condition="hidden">For a delimited schema name, the name is stored
in internal format, which means that two successive double quotes
are stored as only one double quote.</phrase> </entry></row>
<row><entry>TBL_NAME</entry><entry>CHAR(25)</entry><entry>Table name. <phrase
condition="hidden">For a delimited table name, the name is stored
in internal format, which means that two successive double quotes
are stored as only one double quote.</phrase> </entry></row>
<row><entry>LAST_RUN</entry><entry>CHAR(11)</entry><entry>Time of
last UPDATE STATISTICS run. UPDATE STATISTICS will not be run on a
table <phrase condition="hidden">or materialized view </phrase>unless
the histograms have been used in the last 5760 minutes or unless missing
histograms need to be generated.</entry></row>
<row><entry>RC</entry><entry>CHAR(5)</entry><entry>Return value of
last UPDATE STATISTICS run. If there was no error, zero (0) is returned.</entry>
</row>
</tbody>
</tgroup>
</table>
<para>To list all the tables in the USTAT_AUTO_LIST view, execute
this SELECT statement: </para>
<informalexample>
<screen><computeroutput>SQL></computeroutput><userinput>SELECT * FROM HP_USTAT.USTAT_AUTO_LIST;</userinput
>
<computeroutput>
SCH_NAME                  TBL_NAME                  LAST_RUN    RC   
------------------------- ------------------------- ----------- -----
SALES                     ORDERS                    01-01 00:00 0    
SALES                     PARTS                     01-01 00:00 0    

--- 2 row(s) selected.</computeroutput></screen>
</informalexample>
<para>For the syntax of the SELECT statement, see the <xref
linkend="i1008894" role="select:quotedtitle page"/>.</para>
</section>
<section id="USTAT-AUTO-LIST-DETAIL-View-Section">
<title>HP_USTAT.USTAT_AUTO_LIST_DETAIL View</title>
<indexterm><primary>HP_USTAT.USTAT_AUTO_LIST_DETAIL view</primary>
</indexterm><indexterm><primary>USTAT_AUTO_LIST_DETAIL view</primary>
</indexterm>
<para>The USTAT_AUTO_LIST_DETAIL view displays the full schema and
table names, and error text, for each row. See <xref
linkend="USTAT-AUTO-LIST-DETAIL-View" role="select:label"/>.</para>
<table frame="topbot" id="USTAT-AUTO-LIST-DETAIL-View">
<title>USTAT_AUTO_LIST_DETAIL View</title>
<tgroup cols="3" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.65*"/>
<colspec colname="col2" colwidth="0.65*"/>
<colspec colname="col3" colwidth="1.71*"/>
<thead>
<row rowsep="1" valign="bottom"><entry align="left" valign="bottom"
>Column Name</entry><entry align="left" valign="bottom">Data Type</entry>
<entry align="left" valign="bottom">Description</entry></row>
</thead>
<tbody>
<row><entry>SCH_NAME</entry><entry>CHAR(128)</entry><entry>Schema
name. <phrase condition="hidden">For a delimited schema name, the
name is stored in internal format, which means that two successive
double quotes are stored as only one double quote.</phrase> </entry>
</row>
<row><entry>TBL_NAME</entry><entry>CHAR(128)</entry><entry>Table name. <phrase
condition="hidden">For a delimited table name, the name is stored
in internal format, which means that two successive double quotes
are stored as only one double quote.</phrase></entry></row>
<row><entry>LAST_RUN</entry><entry>TIMESTAMP(0)</entry><entry>Time
of last UPDATE STATISTICS run. UPDATE STATISTICS will not be run on
a table <phrase condition="hidden">or materialized view </phrase>unless
the histograms have been used in the last 5760 minutes or unless missing
histograms need to be generated.</entry></row>
<row><entry>RC</entry><entry>LARGEINT</entry><entry>Return value of
last UPDATE STATISTICS run. If there was no error, zero (0) is returned.</entry>
</row>
<row><entry>ERROR_TEXT</entry><entry>VARCHAR(250)</entry><entry>Error
text of the last UPDATE STATISTICS run. </entry></row>
</tbody>
</tgroup>
</table>
<para>To list all the tables in the USTAT_AUTO_LIST_DETAIL view, execute
this SELECT statement: </para>
<informalexample>
<screen><computeroutput>SQL></computeroutput><userinput>SELECT * FROM HP_USTAT.USTAT_AUTO_LIST_DETAIL;</userinput
>
<computeroutput>
SCH_NAME                  TBL_NAME                  LAST_RUN            RC          ERROR_TEXT   
------------------------- ------------------------- ------------------- ----------- -------------
SALES                     PARTS                     0001-01-01 00:00:00 0                        
SALES                     ORDERS                    0001-01-01 00:00:00 0                        

--- 2 row(s) selected.</computeroutput></screen>
</informalexample>
<para>For the syntax of the SELECT statement, see the <xref
linkend="i1008894" role="select:quotedtitle page"/>.</para>
</section>
</section>
<section id="Stopping-Auto-USTAT">
<title>Stopping Automated UPDATE STATISTICS</title>
<section>
<title>HP_USTAT.STOP_AUTOMATED_STATS() Stored Procedure</title>
<indexterm><primary>HP_USTAT.STOP_AUTOMATED_STATS() stored procedure</primary>
</indexterm><indexterm><primary>STOP_AUTOMATED_STATS() stored procedure</primary>
</indexterm><indexterm><primary>Automated UPDATE STATISTICS</primary>
<secondary>disabling</secondary></indexterm>
<para>The STOP_AUTOMATED_STATS( ) procedure immediately stops the
currently running automation job, so you can view and change the maintenance
list (that is, the list of tables for which histogram statistics is
automatically updated).</para>
<section>
<title>Syntax</title>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting>HP_USTAT.STOP_AUTOMATED_STATS( )</programlisting
></entry></row>
</tbody>
</tgroup>
</informaltable>
</section>
<section>
<title>Considerations</title>
<itemizedlist>
<listitem><para>Use the CALL statement to execute the stored procedure,
STOP_AUTOMATED_STATS( ). For more information about CALL, see the <xref
linkend="i1066433" role="select:quotedtitle page"/><phrase
condition="hidden"> and the <citetitle>Trafodion Guide to Stored Procedures
in Java</citetitle></phrase>.</para></listitem>
<listitem><para>If you do not stop the maintenance window, automated
UPDATE STATISTICS continues to execute during the maintenance window.</para>
</listitem>
</itemizedlist>
</section>
<section>
<title>Example</title>
<para>This CALL statement invokes the STOP_AUTOMATED_STATS( ) procedure,
which stops the currently running maintenance window:</para>
<informalexample>
<screen><computeroutput>SQL></computeroutput><userinput>call hp_ustat.stop_automated_stats();</userinput
>
<computeroutput>
--- SQL operation complete.</computeroutput></screen>
</informalexample>
</section>
</section>
</section>
<section id="Scheduling-Auto-USTAT-Reorg">
<title>Scheduling Automated UPDATE STATISTICS</title>
<!--WRITER'S NOTE: Should the following information appear in the Trafodion manual? Check with Dave Birdsall. Are there open-source schedulers that could be used instead?-->
<para>You may choose to use an enterprise scheduler such as Atomic
(UC4) or Cisco Tidal Enterprise Scheduler to invoke USAS and therefore
create the USAS schedule. If you prefer not to choose your own scheduler,
HP offers HP Operations Orchestration (HP-OO) software, which uses
a workflow approach in combination with a scheduler. As with any other
enterprise-class scheduler, HP-OO workflows support job dependencies,
error handling, external-application interactions, and so on. For
information about HP Operations Orchestration, see <ulink
url="www.hp.com">www.hp.com</ulink>.</para>
<para>Use the following shell script to invoke USAS:</para>
<informaltable frame="topbot">
<tgroup cols="1" colsep="0" rowsep="0">
<colspec colname="col4"/>
<tbody>
<row><entry><programlisting>$MY_SQROOT/export/lib/mx_usas/USAS.sh (<replaceable
>total run time</replaceable> * 1000)  

<replaceable>total run time</replaceable> is:
Total number of minutes
</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<para>Example:<programlisting>USAS(300000) => 300 minutes total time</programlisting
></para>
</section>
</section>
<section>
<title>A Practical Usage Case for USAS</title>
<para>Suppose you perform updates to your tables at midnight in the
form of delete all rows and insert all new rows. In addition, suppose
that you have many large tables for which this occurs, all of which
are used in daily and weekly reporting. The maintenance window you
have available for update statistics is only 2 hours. On some days,
when many histograms are read and new histograms are generated, there
may not be enough time for USAS to complete update statistics on all
the tables in the automation list. USAS will prioritize tables by
first updating those tables for which the most time has passed because
USAS has performed update statistics. If you prefer that the priority
be given to a set of tables, you may want to have two lists of tables
for automation, loading each into the automation list as you see fit.</para>
</section>
</section>
</chapter>
<chapter id="i1008163">
<title>SQL Language Elements</title>
<para>Trafodion SQL language elements, which include data types, expressions,
functions, identifiers, literals, and predicates, occur within the
syntax of SQL statements. The statement and command topics support
the syntactical and semantic descriptions of the language elements
in this section.</para>
<para>This section describes:</para>
<itemizedlist>
<listitem><para><xref linkend="AuthIDsElement" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1042944" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1018713" role="select:quotedtitle "
/></para></listitem>
<listitem><para><xref linkend="i1018780" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1042502" role="select:quotedtitle"
/></para></listitem>
<listitem condition="hidden"><para><xref linkend="CursorsLanEle"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="i1016778" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1013018" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1010093" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1013683" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1032512" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1017920" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1017925" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1018360" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1018603" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1018855" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="RolesElement" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1040985" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1032499" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1012266" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1032551" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1019224" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1040744" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<section id="AuthIDsElement" pagebreak="yes">
<title>Authorization IDs</title>
<indexterm><primary>Authorization ID</primary><secondary>description
of</secondary></indexterm>
<para>An authorization ID is used for an authorization operation.
Authorization is the process of validating that a database user has
permission to perform a specified SQL operation. Externally, the authorization
ID is a regular or delimited case-insensitive identifier that can
have a maximum of 128 characters. See <xref
linkend="csDelimitedIdentifier" role="select:quotedtitle page"/>.
Internally, the authorization ID is associated with a 32-bit number
that the database generates and uses for efficient access and storage.</para>
<para>All authorization IDs share the same namespace. An authorization
ID can be a database username or a role name. Therefore, a database
user and a role cannot share the same name. </para>
<para>An authorization ID can be the PUBLIC authorization ID, which
represents all present and future authorization IDs. An authorization
ID cannot be _SYSTEM, which is the implicit grantor of privileges
to the creator of objects.</para>
</section>
<section id="i1042944">
<title>Character Sets</title>
<indexterm><primary>Character sets</primary><secondary>supported in
Trafodion SQL</secondary></indexterm>
<para id="i1041788">You can specify ISO88591 or UTF8 for a character
column definition. The use of UTF8 permits you to store characters
from many different languages. </para>
</section>
<section id="i1018713">
<title>Columns</title>
<indexterm><primary>Columns</primary><secondary>description of</secondary>
</indexterm>
<para>A column is a vertical component of a table and is the relational
representation of a field in a record. A column contains one data
value for each row of the table. </para>
<para>A column value is the smallest unit of data that can be selected
from or updated in a table. Each column has a name that is an SQL
identifier and is unique within the table or view that contains the
column. </para>
<section id="i1013899">
<title>Column References</title>
<indexterm><primary>Columns</primary><secondary>column reference</secondary>
</indexterm><indexterm><primary>Columns</primary><secondary>qualified
name</secondary></indexterm>
<para>A qualified column name, or column reference, is a column name
qualified by the name of the table or view to which the column belongs,
or by a correlation name. </para>
<para>If a query refers to columns that have the same name but belong
to different tables, you must use a qualified column name to refer
to the columns within the query. You must also refer to a column by
a qualified column name if you join a table with itself within a query
to compare one row of the table with other rows in the same table.</para>
<para>The syntax of a column reference or qualified column name is:</para>
<programlisting>{<replaceable>table-name</replaceable> | <replaceable
>view-name</replaceable> | <replaceable>correlation-name</replaceable
>}.<replaceable>column-name</replaceable> 
</programlisting>
<para>If you define a correlation name for a table in the FROM clause
of a statement, you must use that correlation name if you need to
qualify the column name within the statement. </para>
<para>If you do not define an explicit correlation name in the FROM
clause, you can qualify the column name with the name of the table
or view that contains the column. See <xref linkend="i1042502"
role="select:quotedtitle page"/>.</para>
</section>
<section id="i1013903">
<title>Derived Column Names</title>
<indexterm><primary>Derived column names</primary><secondary>syntax
of</secondary></indexterm>
<para>A derived column is an SQL value expression that appears as
an item in the select list of a SELECT statement. An explicit name
for a derived column is an SQL identifier associated with the derived
column. The syntax of a derived column name is:</para>
<programlisting><replaceable>column-expression</replaceable> [[AS] <replaceable
>column-name</replaceable>]
</programlisting>
<para>The column expression can simply be a column reference. The
expression is optionally followed by the AS keyword and the name of
the derived column.</para>
<para>If you do not assign a name to derived columns, the headings
for unnamed columns in query result tables appear as (EXPR). Use the
AS clause to assign names that are meaningful to you, which is important
if you have more than one derived column in your select list.</para>
<section id="i1014138">
<title>Examples of Derived Column Names</title>
<indexterm><primary>Derived column names</primary><secondary>examples
of</secondary></indexterm>
<para>These two examples show how to use names for derived columns. </para>
<para>The first example shows (EXPR) as the column heading of the
SELECT result table:</para>
<programlisting>SELECT AVG (salary)
FROM persnl.employee;
(EXPR)
----------------
        49441.52

--- 1 row(s) selected.
</programlisting>
<para>The second example shows AVERAGE SALARY as the column heading:</para>
<programlisting>SELECT AVG (salary) AS "AVERAGE SALARY"
FROM persnl.employee;
"AVERAGE SALARY"
----------------
        49441.52

--- 1 row(s) selected.
</programlisting>
</section>
</section>
<section id="i1013833">
<title>Column Default Settings</title>
<indexterm><primary>Columns</primary><secondary>default values</secondary>
</indexterm>
<para>You can define specific default settings for columns when the
table is created. The CREATE TABLE statement defines the default settings
for columns within tables. The default setting for a column is the
value inserted in a row when an INSERT statement omits a value for
a particular column.</para>
</section>
</section>
<section id="i1018780" pagebreak="yes">
<title>Constraints</title>
<indexterm><primary>Constraints</primary><secondary>description of</secondary>
</indexterm>
<para>An SQL constraint is an object that protects the integrity of
data in a table by specifying a condition that all the values in a
particular column or set of columns of the table must satisfy. </para>
<para>Trafodion SQL enforces these constraints on SQL tables: </para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<tbody>
<row><entry><indexterm><primary>Constraints</primary><secondary>CHECK</secondary>
</indexterm><indexterm><primary>CHECK constraint</primary></indexterm
>CHECK</entry><entry>Column or table constraint specifying a condition
must be satisfied for each row in the table.</entry></row>
<row><entry><indexterm><primary>Constraints</primary><secondary>FOREIGN
KEY</secondary></indexterm><indexterm><primary>FOREIGN KEY constraint</primary>
</indexterm>FOREIGN KEY</entry><entry>Column or table constraint that
specifies a referential constraint for the table, declaring that a
column or 	set of columns (called a foreign key) in a table can contain
only values that match those in a column or set of columns in the
table specified in the REFERENCES clause.</entry></row>
<row><entry><indexterm><primary>Constraints</primary><secondary>NOT
NULL</secondary></indexterm><indexterm><primary>NOT NULL constraint</primary>
</indexterm>NOT NULL</entry><entry>Column constraint specifying the
column cannot contain nulls.</entry></row>
<row><entry><indexterm><primary>Constraints</primary><secondary>PRIMARY
KEY</secondary></indexterm><indexterm><primary>PRIMARY KEY constraint</primary>
</indexterm>PRIMARY KEY</entry><entry>Column or table constraint specifying
the column or set of columns as the primary key for the table.</entry>
</row>
<row><entry><indexterm><primary>Constraints</primary><secondary>UNIQUE</secondary>
</indexterm><indexterm><primary>UNIQUE constraint</primary></indexterm
>UNIQUE</entry><entry>Column or table constraint that specifies that
the column or set of columns cannot contain more than one occurrence
of the same value or set of values.</entry></row>
</tbody>
</tgroup>
</informaltable>
<section>
<title>Creating or Adding Constraints on SQL Tables</title>
<para>To create constraints on an SQL table when you create the table,
use the NOT NULL, UNIQUE, CHECK, FOREIGN KEY, or PRIMARY KEY clause
of the CREATE TABLE statement.</para>
<para>For more information on Trafodion SQL commands, see <xref
linkend="i1063425" role="select:quotedtitle page"/> and <xref
linkend="i1004893" role="select:quotedtitle page"/>. </para>
</section>
<section id="Constraint-Namese">
<title>Constraint Names</title>
<para>When you create a constraint, you can specify a name for it
or allow a name to be generated by Trafodion SQL. You can optionally
specify both column and table constraint names. Constraint names are
ANSI logical names. See <xref linkend="i1013018"
role="select:quotedtitle page"/>. <phrase>Constraint names are in
the same namespace as tables and views, so a constraint name cannot
have the same name as a table or view.</phrase></para>
<para>The name you specify can be fully qualified or not. If you specify
the schema parts of the name, they must match those parts of the affected
table and must be unique among <phrase>table, view, and constraint</phrase
> names in that schema. If you omit the schema portion of the name
you specify, Trafodion SQL expands the name by using the schema for
the table.</para>
<para>If you do not specify a constraint name, Trafodion SQL constructs
an SQL identifier as the name for the constraint and qualifies it
with the schema of the table. The identifier consists of the table
name concatenated with a system-generated unique identifier.</para>
</section>
</section>
<section id="i1042502" pagebreak="yes">
<title>Correlation Names</title>
<indexterm><primary>Correlation names</primary><secondary>purpose
of</secondary></indexterm><indexterm><primary>Correlation names</primary>
<secondary>table reference use of</secondary></indexterm>
<para>A correlation name is a name you can associate with a table
reference that is a table, view, or subquery in a SELECT statement
to:</para>
<itemizedlist>
<listitem><para>Distinguish a table or view from another table or
view referred to in a statement</para></listitem>
<listitem><para>Distinguish different uses of the same table</para>
</listitem>
<listitem><para>Make the query shorter</para></listitem>
</itemizedlist>
<para>A correlation name can be explicit or implicit.</para>
<section>
<title>Explicit Correlation Names</title>
<para>An explicit correlation name for a table reference is an SQL
identifier associated with the table reference in the FROM clause
of a SELECT statement. See <xref linkend="i1032512"
role="select:quotedtitle page"/>. The correlation name must be unique
within the FROM clause. For more information about the FROM clause,
table references, and correlation names, see <xref linkend="i1008894"
role="select:quotedtitle page"/>.</para>
<para>The syntax of a correlation name for the different forms of
a table reference within a FROM clause is the same:</para>
<programlisting>{<replaceable>table</replaceable> | <replaceable>view</replaceable
> | (<replaceable>query-expression</replaceable>)} [AS]<replaceable
>correlation-name</replaceable>
</programlisting>
<para>A table or view is optionally followed by the AS keyword and
the correlation name. A derived table, resulting from the evaluation
of a query expression, must be followed by the AS keyword and the
correlation name. An explicit correlation name is known only to the
statement in which you define it. You can use the same identifier
as a correlation name in another statement.</para>
</section>
<section>
<title>Implicit Correlation Names</title>
<para>A table or view reference that has no explicit correlation name
has an implicit correlation name. The implicit correlation name is
the table or view name qualified with the schema names. </para>
<para>You cannot use an implicit correlation name for a reference
that has an explicit correlation name within the statement. </para>
</section>
<section>
<title>Examples of Correlation Names</title>
<indexterm><primary>Correlation names</primary><secondary>examples
of</secondary></indexterm>
<para>This query refers to two tables, ORDERS and CUSTOMER, that contain
columns named CUSTNUM. In the WHERE clause, one column reference is
qualified by an implicit correlation name (ORDERS) and the other by
an explicit correlation name (C): </para>
<programlisting>SELECT ordernum, custname
FROM orders, customer c
WHERE orders.custnum = c.custnum 
  AND orders.custnum = 543; 
</programlisting>
</section>
</section>
<section condition="hidden" id="CursorsLanEle" pagebreak="yes">
<title>Cursors</title>
<indexterm><primary>Cursors</primary><secondary>ANSI holdable</secondary>
</indexterm><indexterm><primary>Cursors</primary><secondary>holdable,
defined</secondary></indexterm>
<!--WRITER'S NOTE: AHC Content copied from Release README R2.4 SP1, April 14, 2010. Content revised per review comments from Selva and Mike Hanlon, 4/30/10.-->
<para>The ANSI SQL standard defines a “cursor”. Trafodion SQL uses
an SQL cursor to manage an ODBC or JDBC result set, which is created
by executing an SQL statement. A cursor can be open or closed. A cursor
is opened after the SQL statement is executed. The ODBC SQLFetch()
or JDBC next() methods implicitly use the open cursor to retrieve
rows from the result set. When the cursor is closed before ODBC or
JDBC has retrieved all rows from the result set, the result set is
discarded. After errors, Trafodion SQL closes the cursor. Trafodion
SQL also closes the cursor if the transaction in which it is operating
is rolled back.</para>
<para>A transaction commit may also close the cursor, depending on
whether the cursor is holdable or non-holdable, as defined in the
ANSI SQL standard. A non-holdable cursor is closed when the transaction
in which it is operating is committed.</para>
<para>A holdable cursor has these characteristics that differentiate
it from a non-holdable cursor:<itemizedlist>
<listitem><para>The cursor remains open when the transaction is committed
with a COMMIT statement.</para></listitem>
<listitem><para>A new transaction is started automatically when a
fetch follows a COMMIT statement.</para></listitem>
<listitem><para>Error [8013] is returned when an attempt is made to
update or delete a row (using a positioned update or delete) without
a fetch after the transaction is committed.</para></listitem>
<listitem><para>Error [4382] is returned when an attempt is made to
use the holdable cursor with a CALL statement.</para></listitem>
</itemizedlist></para>
<para>A publish/subscribe holdable cursor is a holdable cursor used
with an SQL statement that uses any of these publish/subscribe features
in a SELECT statement:<itemizedlist>
<listitem><para>Return a continuous data stream, by using STREAM as
a <replaceable>table_ref</replaceable></para></listitem>
<listitem><para>Create an embedded delete, by using a <replaceable
>delete_statement</replaceable> as a <replaceable>table-ref</replaceable
></para></listitem>
<listitem><para>Create an embedded update, by using an <replaceable
>update_statement</replaceable> as a <replaceable>table_ref</replaceable
></para></listitem>
</itemizedlist>An ANSI holdable cursor is a holdable cursor that does
not use the publish/subscribe features listed here. ANSI holdable
cursors are not allowed with the SERIALIZABLE or REPEATABLE READ transaction
isolation level.</para>
<para>ANSI holdable cursors are INSENSITIVE in Trafodion SQL, which
means that it is impossible to predict whether insert, update, or
delete operations made to rows in committed transactions in which
the cursor is held open will be visible through the cursor in subsequent
transactions before the cursor is closed. It is also impossible to
predict whether the effects of such operations will be visible through
the cursor in the same trsnaction in which the changes are made.</para>
<para>A publish/subscribe holdable cursor differs from an ANSI holdable
cursor in the following ways. A publish/subscribe holdable cursor:<itemizedlist>
<listitem><para>Remains open when a transaction is rolled back.</para>
</listitem>
<listitem><para>Is ASENSITIVE, unless the SQL SELECT statement contains
an embedded update or embedded delete, in which case, the cursor is
SENSITIVE. A SENSITIVE cursor will be sensitive to changes made to
rows in its result set by any transaction committed while the cursor
is open.</para></listitem>
<listitem><para>Can be used with the SERIALIZABLE or REPEATABLE READ
transaction isolation level. We recommend that the SERIALIZABLE or
REPEATABLE READ transaction isolation level should not be used with
an ASENSITIVE holdable cursor.</para></listitem>
<listitem><para>Can be declared holdable after it is prepared, when
ODBC is used.</para></listitem>
</itemizedlist></para>
<section condition="hidden">
<title>ANSI Holdable Cursors in JDBC Client Applications</title>
<para>To specify a holdable <indexterm><primary>Cursors</primary>
<secondary>JDBC example</secondary></indexterm>cursor in a client
application that uses the JDBC Type 4 driver, specify HOLD_CURSORS_OVER_COMMIT
as a <literal>resultSetHoldability</literal> parameter to one of these <literal
>Connection</literal> methods: <literal>createStatement</literal> or <literal
>prepareStatement</literal>. For example, this code creates a <literal
>PreparedStatement</literal> object that specifies a holdable cursor:</para>
<programlisting>PreparedStatement setSalary = 
    conn.prepareStatement("SELECT empnum " + 
                          "WHERE salary > ? AND jobcode= ?"
                          <emphasis role="bold">ResultSet.TYPE_FORWARD_ONLY,
                          ResultSet.CONCUR_READ_ONLY,
                          ResultSet.HOLD_CURSORS_OVER_COMMIT</emphasis
>);</programlisting>
<para>To specify a non-holdable cursor in a JDBC client application,
specify CLOSE_CURSORS_AT_COMMIT as a <literal>resultSetHoldability</literal
> parameter to the <literal>createStatement</literal> or <literal
>prepareStatement</literal> method. In Trafodion SQL, the default
is a non-holdable cursor.</para>
</section>
</section>
<section id="i1016778" pagebreak="yes">
<title>Database Objects</title>
<indexterm><primary>Database objects</primary></indexterm>
<para>A database object is an SQL entity that exists in a namespace.
SQL statements can access Trafodion SQL database objects. The subsections
listed below describe these Trafodion SQL database objects.</para>
<para><xref linkend="i1018780" role="select:quotedtitle"/></para>
<para><xref linkend="i1017920" role="select:quotedtitle"/></para>
<para><xref linkend="i1019224" role="select:quotedtitle"/></para>
<para><xref linkend="i1040744" role="select:quotedtitle"/></para>
<section id="i1020822">
<title>Ownership</title>
<para>In Trafodion SQL, the creator of an object owns the object defined
in the schema and has all privileges on the object. In addition, you
can use the GRANT and REVOKE statements to grant access privileges
for a table or view to specified users.</para>
<para>For more information, see the <xref linkend="i1068219"
role="select:quotedtitle page"/> and <xref linkend="i1059131"
role="select:quotedtitle page"/>. For information on privileges on
tables and views, see <xref linkend="i1063425"
role="select:quotedtitle page"/> and <xref linkend="i1076221"
role="select:quotedtitle page"/>.</para>
</section>
</section>
<section id="i1013018" pagebreak="yes">
<title>Database Object Names</title>
<itemizedlist>
<listitem><para><xref linkend="i1026059" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1018499" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>Database object name</primary></indexterm>
<indexterm><primary>Objects</primary><secondary>description of</secondary>
</indexterm><indexterm><primary>Object names</primary></indexterm>
<para>DML statements can refer to Trafodion SQL database objects.
To refer to a database object in a statement, use an appropriate database
object name. For information on the types of database objects see <xref
linkend="i1016778" role="select:quotedtitle page"/>.</para>
<section id="i1026059">
<title>Logical Names for SQL Objects</title>
<indexterm><primary>Objects</primary><secondary>logical names</secondary>
</indexterm><indexterm><primary>Logical name</primary><secondary>Trafodion
SQL objects</secondary></indexterm><indexterm><primary>Trafodion SQL
objects, logical names</primary></indexterm>
<para>You may refer to an SQL table, view, constraint, library, function,
or procedure by using a one-part, two-part, or three-part logical
name, also called an ANSI name:</para>
<programlisting><replaceable>catalog-name</replaceable>.<replaceable
>schema-name</replaceable>.<replaceable>object-name</replaceable></programlisting>
<para>In this three-part name, <replaceable>catalog-name</replaceable
> is the name of the catalog, which is TRAFODION for Trafodion SQL
objects that map to HBase tables. <replaceable>schema-name</replaceable
> is the name of the schema, and <replaceable>object-name</replaceable
> is the simple name of the table, view, constraint, library, function,
or procedure. Each of the parts is an SQL identifier. See <xref
linkend="i1032512" role="select:quotedtitle page"/>. </para>
<para>Trafodion SQL automatically qualifies an object name with a
schema name unless you explicitly specify schema names with the object
name. If you do not set a schema name for the session using a SET
SCHEMA statement, the default schema is SEABASE, which exists in the
TRAFODION catalog. See <xref linkend="i1010143"
role="select:quotedtitle page"/>. A one-part name <replaceable>object-name</replaceable
> is qualified implicitly with the default schema.</para>
<para>You can qualify a column name in a Trafodion SQL statement by
using a three-part, two-part, or one-part object name, or a correlation
name.</para>
</section>
<section id="i1018499">
<title>SQL Object Namespaces</title>
<indexterm><primary>Database object name</primary></indexterm>
<indexterm><primary>Object namespace</primary></indexterm>
<para>Trafodion SQL objects are organized in a hierarchical manner.
Database objects exist in schemas, which are themselves contained
in a catalog called TRAFODION. A catalog is a collection of schemas.
Schema names must be unique within the catalog.</para>
<para>Multiple objects with the same name can exist provided that
each belongs to a different namespace. Trafodion SQL supports these
namespaces:</para>
<itemizedlist>
<listitem><para>Index</para></listitem>
<listitem><para>Functions and procedures</para></listitem>
<listitem><para>Library</para></listitem>
<listitem condition="hidden"><para>Lock</para></listitem>
<listitem><para>Schema label</para></listitem>
<listitem condition="hidden"><para>Sequence generator</para></listitem>
<listitem><para>Table value object (table, view, constraint)</para>
</listitem>
<listitem condition="hidden"><para>Trigger</para></listitem>
<listitem condition="hidden"><para>Trigger temporary table</para>
</listitem>
</itemizedlist>
<para>Objects in one schema can refer to objects in a different schema.
Objects of a given namespace are required to have unique names within
a given schema.</para>
</section>
</section>
<section id="i1010093" pagebreak="yes">
<title>Data Types</title>
<para>Trafodion SQL data types are character, datetime, interval,
or numeric (exact or approximate): </para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<tbody>
<row><entry><xref linkend="i1010251" role="select:quotedtitle page"
/></entry><entry>Fixed-length and variable-length character data types.</entry>
</row>
<row><entry><xref linkend="i1010360" role="select:quotedtitle page"
/></entry><entry>DATE, TIME, and TIMESTAMP data types.</entry></row>
<row><entry><xref linkend="i1041657" role="select:quotedtitle page"
/></entry><entry>Year-month intervals (years and months) and day-time
intervals (days, hours, minutes, seconds, and fractions of a second).</entry>
</row>
<row><entry><xref linkend="i1010568" role="select:quotedtitle page"
/></entry><entry>Exact and approximate numeric data types.</entry></row>
</tbody>
</tgroup>
</informaltable>
<para>Each column in a table is associated with a data type. You can
use the CAST expression to convert data to the data type that you
specify. For more information, see <xref linkend="i1006592"
role="select:quotedtitle page"/>. </para>
<para>The following table summarizes the Trafodion SQL data types:</para>
<informaltable frame="topbot">
<tgroup cols="4" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.65*"/>
<colspec colname="col2" colwidth="1.06*"/>
<colspec colname="col3" colwidth="1.07*"/>
<colspec colname="col4" colwidth="1.23*"/>
<thead>
<row rowsep="1" valign="bottom"><entry align="left" valign="bottom"
>Type</entry><entry align="left" valign="bottom">SQL Designation</entry>
<entry align="left" valign="bottom">Description</entry><entry
align="left" valign="bottom">Size or Range (1)</entry></row>
</thead>
<tbody>
<row><entry>Fixed-length character</entry><entry>CHAR[ACTER]</entry>
<entry>Fixed-length character data</entry><entry>1 to 32707 characters
(2) </entry></row>
<row><entry></entry><entry>NCHAR</entry><entry>Fixed-length character
data in predefined national character set</entry><entry>1 to 32707
bytes (3) (7)</entry></row>
<row><entry></entry><entry>NATIONAL CHAR[ACTER]</entry><entry>Fixed-length
character data in predefined national character set</entry><entry
>1 to 32707 characters (3) (7)</entry></row>
<row><entry>Variable-length character</entry><entry>VARCHAR</entry>
<entry>Variable-length ASCII character string</entry><entry>1 to 32703
characters (4)</entry></row>
<row><entry></entry><entry>CHAR[ACTER] VARYING</entry><entry>Variable-length
ASCII character string</entry><entry>1 to 32703 characters (4) </entry>
</row>
<row><entry></entry><entry>NCHAR VARYING</entry><entry>Variable-length
ASCII character string</entry><entry>1 to 32703 bytes (4) (8)</entry>
</row>
<row><entry></entry><entry>NATIONAL CHAR[ACTER] VARYING</entry><entry
>Variable-length ASCII character string</entry><entry>1 to 32703 characters
(4) (8)</entry></row>
<row><entry>Numeric</entry><entry><para>NUMERIC (1,<emphasis>scale</emphasis
>) to</para>NUMERIC (128,<emphasis>scale</emphasis>)</entry><entry
>Binary number with optional scale; signed or unsigned for 1 to 9
digits</entry><entry>1 to 128 digits; stored:<para>1 to 4 digits in
2 bytes</para><para>5 to 9 digits in 4 bytes</para><para>10 to 128
digits in 8-64 bytes, depending on precision</para></entry></row>
<row><entry></entry><entry>SMALLINT</entry><entry>Binary integer;
signed or unsigned</entry><entry><para>0 to 65535 unsigned, -32768
to +32767 signed; stored in 2 bytes</para></entry></row>
<row><entry></entry><entry>INTEGER</entry><entry>Binary integer; signed
or unsigned</entry><entry>0 to 4294967295 unsigned, -2147483648 to
+2147483647 signed; stored in 4 bytes</entry></row>
<row><entry></entry><entry>LARGEINT</entry><entry>Binary integer;
signed only</entry><entry>-2**63 to +(2**63)-1; stored in 8 bytes</entry>
</row>
<row><entry>Numeric (extended numeric precision)</entry><entry>NUMERIC
(precision 19 to 128)</entry><entry>Binary integer; signed or unsigned</entry>
<entry>Stored as multiple chunks of 16-bit integers, with a minimum
storage length of 8 bytes.</entry></row>
<row><entry>Floating point number</entry><entry>FLOAT[(<emphasis>precision</emphasis
>)]</entry><entry>Floating point number; precision designates from
1 through 52 bits of precision</entry><entry>+/- 2.2250738585072014e-308
through +/-1.7976931348623157e+308; stored in 8 bytes</entry></row>
<row><entry></entry><entry>REAL</entry><entry>Floating point number
(32 bits)</entry><entry>+/- 1.17549435e-38 through +/ 3.40282347e+38;
stored in 4 bytes</entry></row>
<row><entry></entry><entry>DOUBLE PRECISION</entry><entry>Floating-point
numbers (64 bits) with 1 through 52 bits of precision (52 bits of
binary precision and 11 bits of exponent)</entry><entry>+/- 2.2250738585072014e-308
through +/-1.7976931348623157e+308; stored in 8 byte</entry></row>
<row><entry>Decimal number</entry><entry><para>DECIMAL (1,<emphasis
>scale</emphasis>) to</para>DECIMAL (18,<emphasis>scale</emphasis
>)</entry><entry>Decimal number with optional scale; stored as ASCII
characters; signed or unsigned for 1 to 9 digits; signed required
for 10 or more digits</entry><entry>1 to 18 digits. Byte length equals
the number of digits. Sign is stored as the first bit of the leftmost
byte.</entry></row>
<row><entry>Date-Time</entry><entry></entry><entry>Point in time,
using the Gregorian calendar and a 24 hour clock system. The five
supported  designations are listed below.</entry><entry><para>YEAR
         0001-9999</para><para>MONTH       1-12</para><para>DAY  
          1-31</para><para>DAY constrained by    MONTH and YEAR</para
><para>HOUR           0-23</para><para>MINUTE       0-59</para><para
>SECOND       0-59</para><para>FRACTION(n)             0-999999</para
><para>in which n is the number of significant digits, from 1 to 6
(default is 6; minimum is 1; maximum is 6). Actual database storage
is incremental, as follows:</para><para>YEAR in 2 bytes</para><para
>MONTH in 1 byte</para><para>DAY in 1 byte</para><para>HOUR in 1 byte</para
><para>MINUTE in 1 byte</para><para>SECOND in 1 byte</para><para>FRACTION
in 4 bytes</para></entry></row>
<row><entry></entry><entry>DATE</entry><entry>Date</entry><entry>Format
as YYYY-MM-DD; actual database storage size is 4 bytes</entry></row>
<row><entry></entry><entry>TIME</entry><entry>Time of day, 24 hour
clock, no time precision</entry><entry>Format as HH:MM:SS; actual
database storage size is 3 bytes</entry></row>
<row><entry></entry><entry>TIME (with time precision)</entry><entry
>Time of day, 24 hour clock, with time precision</entry><entry>Format
as HH:MM:SS.FFFFFF; actual database storage size is 7 bytes</entry>
</row>
<row><entry></entry><entry>TIMESTAMP</entry><entry>Point in time,
no time precision</entry><entry>Format as YYYY-MM-DD HH:MM:SS; actual
database storage size is 7 bytes</entry></row>
<row><entry></entry><entry>TIMESTAMP (with time precision)</entry>
<entry>Point in time, with time precision</entry><entry>Format as
YYYY-MM-DD HH:MM:SS.FFFFFF; actual database storage size is 11 bytes</entry>
</row>
<row><entry>Interval</entry><entry>INTERVAL</entry><entry>Duration
of time; value is in the YEAR/MONTH range or the DAY/HOUR/MINUTE/
SECOND/FRACTION range</entry><entry><para>YEAR   no constraint(6)</para
><para>MONTH       0-11</para><para>DAY      no constraint</para><para
>HOUR           0-23 </para><para>MINUTE       0-59</para><para>SECOND
      0-59 </para><para>FRACTION(n)              0-999999</para><para
>in which n is the number of significant digits (default is 6; minimum
is 1; maximum is 6); stored in 2, 4, or 8 bytes depending on number
of digits</para></entry></row>
<row><entry colsep="1" nameend="col4" namest="col1"><para><emphasis
>scale</emphasis> is the number of digits to the right of the decimal.</para
><para><emphasis>precision</emphasis> specifies the allowed number
of decimal digits.</para><para>(1)  The size of a column that allows
null values is 2 bytes larger than the size for the defined data type.</para
><para>(2)  The maximum row size is 32708 bytes, but the actual row
size is less than that because of bytes used by null indicators, varchar
column length indicators, and actual data encoding.</para><para>(3)
 Storage size is the same as that required by CHAR data type but store
only half as many characters depending on character set selection.</para
><para>(4)  Storage size is reduced by 4 bytes for storage of the
varying character length. </para><para>(5)  The maximum number of
digits in an INTERVAL value is 18, including the digits in all INTERVAL
fields of the value.  Any INTERVAL field that is a starting field
can have up to 18 digits minus the number of other digits in the INTERVAL
value.</para><!--WRITER'S NOTE: Need to check if this is true concerning UTF8.--><para
>(6) The maximum is 32707 if the national character set was specified
at installation time to be ISO88591. The maximum is 16353 if the national
character set was specified at installation time as <phrase>UTF8</phrase
>.</para><!--WRITER'S NOTE: Need to check if this is true concerning UTF8.--><para
>(7) The maximum is 32703 if the national character set was specified
at installation time to be ISO88591. The maximum is 16351 if the national
character set was specified at installation time as <phrase>UTF8</phrase
>.</para></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="i1013224">
<title>Comparable and Compatible Data Types</title>
<indexterm><primary>Data types</primary><secondary>comparable and
compatible</secondary></indexterm><indexterm><primary>Comparable data
types</primary></indexterm>
<para>Two data types are comparable if a value of one data type can
be compared to a value of the other data type.</para>
<indexterm><primary>Compatible data types</primary></indexterm>
<para>Two data types are compatible if a value of one data type can
be assigned to a column of the other data type, and if columns of
the two data types can be combined using arithmetic operations. Compatible
data types are also comparable.</para>
<para>Assignment and comparison are the basic operations of Trafodion
SQL. Assignment operations are performed during the execution of INSERT
and UPDATE statements. Comparison operations are performed during
the execution of statements that include predicates, aggregate (or
set) functions, and GROUP BY, HAVING, and ORDER BY clauses. </para>
<para>The basic rule for both assignment and comparison is that the
operands have compatible data types. Data types with different character
sets cannot be compared without converting one character set to the
other. However, the SQL compiler will usually generate the necessary
code to do this conversion automatically.</para>
<section>
<title>Character Data Types</title>
<para>Values of fixed and variable length character data types of
the same character set are all character strings and are all mutually
comparable and mutually assignable.</para>
<para>When two strings are compared, the comparison is made with a
temporary copy of the shorter string that has been padded on the right
with blanks to have the same length as the longer string.</para>
</section>
<section>
<title>Datetime Data Types</title>
<para>Values of type datetime are mutually comparable and mutually
assignable only if the types have the same datetime fields. A DATE,
TIME, or TIMESTAMP value can be compared with another value only if
the other value has the same data type. </para>
<para>All comparisons are chronological. For example, this predicate
is true:</para>
<programlisting>TIMESTAMP '2008-09-28 00:00:00' >
  TIMESTAMP '2008-06-26 00:00:00'
</programlisting>
</section>
<section>
<title>Interval Data Types</title>
<para>Values of type INTERVAL are mutually comparable and mutually
assignable only if the types are either both year-month intervals
or both day-time intervals.</para>
<para>For example, this predicate is true:</para>
<programlisting>INTERVAL '02-01' YEAR TO MONTH > INTERVAL '00-01' YEAR TO MONTH
</programlisting>
<para>The field components of the INTERVAL do not have to be the same.
For example, this predicate is also true:</para>
<programlisting>INTERVAL '02-01' YEAR TO MONTH > INTERVAL '01' YEAR
</programlisting>
</section>
<section id="i1037469">
<title>Numeric Data Types</title>
<para>Values of the approximate data types FLOAT, REAL, and DOUBLE
PRECISION, and values of the exact data types NUMERIC, DECIMAL, INTEGER,
SMALLINT, and LARGEINT, are all numbers and are all mutually comparable
and mutually assignable. </para>
<para>When an approximate data type value is assigned to a column
with exact data type, rounding might occur, and the fractional part
might be truncated. When an exact data type value is assigned to a
column with approximate data type, the result might not be identical
to the original number.</para>
<para>When two numbers are compared, the comparison is made with a
temporary copy of one of the numbers, according to defined rules of
conversion. For example, if one number is INTEGER and the other is
DECIMAL, the comparison is made with a temporary copy of the integer
converted to a decimal.</para>
<section id="BIGNUM">
<title>Extended Numeric Precision</title>
<indexterm><primary>Numeric data types</primary><secondary>extended
numeric </secondary></indexterm><indexterm><primary>Extended numeric
precision</primary></indexterm><indexterm><primary>Data types</primary>
<secondary>extended numeric precision</secondary></indexterm>
<para>Trafodion SQL provides support for extended numeric precision
data type. Extended numeric precision is an extension to the NUMERIC(x,y)
data type where no theoretical limit exists on precision. It is a
software data type, which means that the underlying hardware does
not support it and all computations are performed by software. Computations
using this data type may not match the performance of other hardware
supported data types. </para>
<section>
<title>Considerations for Extended NUMERIC Precision Data Type</title>
<para>Consider these points and limitations for extended NUMERIC precision
data type:<itemizedlist>
<listitem><para>May cost more than other data type options.</para>
</listitem>
<listitem><para>Is a software data type.</para></listitem>
<listitem><para>Cannot be compared to data types that are supported
by hardware.</para></listitem>
<listitem condition="hidden"><para>Not supported for host variable
declarations in embedded programs.</para></listitem>
<listitem><para>If your application requires extended NUMERIC precision
arithmetic expressions, specify the required precision in the table
DDL or as explicit extended precision type casts of your select list
items. The default system behavior is to treat user-specified extended
precision expressions as extended precision values. Conversely, non-user-specified
(that is, temporary, intermediate) extended precision expressions
may lose precision. In the following example, the precision appears
to lose one digit because the system treats the sum of two NUMERIC(18,4)
type columns as NUMERIC(18,4). NUMERIC(18) is the longest non-extended
precision numeric type. NUMERIC(19) is the shortest extended precision
numeric type. The system actually computes the sum of 2 NUMERIC(18,4)
columns as an extended precision NUMERIC(19,4) sum. But because no
user-specified extended precision columns exist, the system casts
the sum back to the user-specified type of NUMERIC(18,4).</para>
<programlisting>CREATE TABLE T(a NUMERIC(18,4), B NUMERIC(18,4));

INSERT INTO T VALUES (1.1234, 2.1234);

>> SELECT A+B FROM T;

(EXPR)
--------------
	        3.246</programlisting>
<para>If this behavior is not acceptable, you can use one of these
options:</para>
<itemizedlist>
<listitem><para>Specify the column type as NUMERIC(19,4). For example, <literal
>CREATE TABLE T(A NUMERIC(19,4), B NUMERIC(19,4));</literal> or</para>
</listitem>
<listitem><para>Cast the sum as NUMERIC(19,4). For example, <literal
>SELECT CAST(A+B AS NUMERIC(19,4)) FROM T;</literal> or</para>
</listitem>
<listitem><para>Use an extended precision literal in the expression.
For example, <literal>SELECT A+B*1.00000000000000000000 FROM T;</literal
>.</para></listitem>
</itemizedlist>
<para>Note the result for the previous example when changing to NUMERIC(19,4):</para>
<programlisting>SELECT CAST(A+B AS NUMERIC(19,4)) FROM T;

(EXPR)
------------
      3.2468</programlisting>
<!--WRITER'S NOTE: Check if this is true.-->
<para>When displaying output results <phrase>in the command interface
of a client-based tool</phrase><phrase condition="hidden"> in TrafCI</phrase
>, casting a select list item to an extended precision numeric type
is acceptable. However, when retrieving an extended precision select
list item into an application program's host variable, you must first
convert the extended precision numeric type into a string data type.
For example:</para>
<programlisting>SELECT CAST(CAST(A+B AS NUMERIC(19,4)) AS CHAR(24)) FROM T;

(EXPR)
------------
      3.2468</programlisting>
<note>
<para>An application program can convert an externalized extended
precision value in string form into a numeric value it can handle.
But, an application program cannot correctly interpret an extended
precision value in internal form.</para>
</note>
</listitem>
</itemizedlist></para>
</section>
<section>
<title>Rules for Extended NUMERIC Precision Data Type</title>
<para>These rules apply:<itemizedlist>
<listitem><para>No limit on maximum precision.</para></listitem>
<listitem><para>Supported in all DDL and DML statements where regular
NUMERIC data type is supported.</para></listitem>
<listitem><para>Allowed as part of key columns for hash partitioned
tables only.</para></listitem>
<listitem><para>NUMERIC type with precision 10 through 18.<itemizedlist>
<listitem><para>UNSIGNED is supported as extended NUMERIC precision
data type</para></listitem>
<listitem><para>SIGNED is supported as 64-bit integer</para></listitem>
</itemizedlist></para></listitem>
<listitem><para>CAST function allows conversion between regular NUMERIC
and extended NUMERIC precision data type.</para></listitem>
<listitem><para>Parameters in SQL queries support extended NUMERIC
precision data type.</para></listitem>
</itemizedlist></para>
</section>
<section>
<title>Example of Extended NUMERIC Precision Data Type</title>
<!--WRITER'S NOTE: No op. NO PARTITION syntax is there; can just leave as is. Was asked to remove NO PARTITION syntax from the manual on 8/26/2014.-->
<programlisting>>>CREATE TABLE t( n NUMERIC(128,30));
 
--- SQL operation complete.

>>SHOWDDL TABLE t;
 
CREATE TABLE SCH.T
  (
    N          NUMERIC(128, 30) DEFAULT NULL
  )
  ;
 
--- SQL operation complete.
>>
</programlisting>
</section>
</section>
</section>
</section>
<section id="i1010251">
<title>Character String Data Types</title>
<indexterm><primary>Data types</primary><secondary>character</secondary>
</indexterm>
<para>Trafodion SQL includes both fixed-length character data and
variable-length character data. You cannot compare character data
to numeric, datetime, or interval data. </para>
<programlisting><replaceable>character-type</replaceable> is: 
     CHAR[ACTER] [(<replaceable>length</replaceable> [CHARACTERS])] [<replaceable
>char-set</replaceable>] [UPSHIFT] [[NOT]CASESPECIFIC]
   | CHAR[ACTER] VARYING(<replaceable>length</replaceable>) [CHARACTERS][<replaceable
>char-set</replaceable>] [UPSHIFT] [[NOT]CASESPECIFIC]
   | VARCHAR(<replaceable>length</replaceable>) [CHARACTERS] [<replaceable
>char-set</replaceable>] [UPSHIFT] [[NOT]CASESPECIFIC]
   | NCHAR [(<replaceable>length</replaceable>)] [CHARACTERS] [UPSHIFT] [[NOT]CASESPECIFIC]
   | NCHAR VARYING (<replaceable>length</replaceable>) [CHARACTERS] [UPSHIFT] [[NOT]CASESPECIFIC]
   | NATIONAL CHAR[ACTER] [(<replaceable>length</replaceable>)] [CHARACTERS] [UPSHIFT] [[NOT]CASESPECIFIC]
   | NATIONAL CHAR[ACTER] VARYING (<replaceable>length</replaceable
>) [CHARACTERS] [UPSHIFT] [[NOT]CASESPECIFIC]

<replaceable>char-set</replaceable> is
  CHARACTER SET <replaceable>char-set-name</replaceable>
 </programlisting>
<para>CHAR, NCHAR, and NATIONAL CHAR are fixed-length character types.
CHAR VARYING, VARCHAR, NCHAR VARYING and NATIONAL CHAR VARYING are
varying-length character types.</para>
<variablelist>
<varlistentry><term><replaceable>length</replaceable>  </term>
<listitem><para>is a positive integer that specifies the number of
characters allowed in the column. You must specify a value for <replaceable
>length</replaceable>. </para></listitem>
</varlistentry>
<varlistentry><term><replaceable>char-set-name</replaceable></term>
<listitem><para>is the character set name, which can be ISO88591 or
UTF8.</para></listitem>
</varlistentry>
<varlistentry><term><indexterm><primary>Data types</primary><secondary
>fixed length character</secondary><tertiary>CHAR</tertiary></indexterm
>CHAR[ACTER] [(<replaceable>length</replaceable> [CHARACTERS])] [<replaceable
>char-set</replaceable>] [UPSHIFT] [[NOT]CASESPECIFIC]</term>
<listitem><para>specifies a column with fixed-length character data<indexterm>
<primary>CHAR data type</primary></indexterm>. </para></listitem>
</varlistentry>
<varlistentry><term><indexterm><primary>CHAR VARYING data type</primary>
</indexterm>CHAR[ACTER] VARYING (<replaceable>length</replaceable
>) [CHARACTERS] [<replaceable>char-set</replaceable>] [UPSHIFT] [[NOT]CASESPECIFIC]</term>
<listitem><para><indexterm><primary>Data types</primary><secondary
>varying-length character</secondary><tertiary>CHAR VARYING</tertiary>
</indexterm>specifies a column with varying-length character data.
VARYING specifies that the number of characters stored in the column
can be fewer than the <replaceable>length</replaceable>.</para><para
>Values in a column declared as VARYING can be logically and physically
shorter than the maximum length, but the maximum internal size of
a VARYING column is actually four bytes larger than the size required
for an equivalent column that is not VARYING.</para>
</listitem>
</varlistentry>
<varlistentry><term><indexterm><primary>VARCHAR data type</primary>
</indexterm>VARCHAR (<replaceable>length</replaceable>) [<replaceable
>char-set</replaceable>] [UPSHIFT] [[NOT]CASESPECIFIC]</term>
<listitem><para>specifies a column with varying-length character data<indexterm>
<primary>Data types</primary><secondary>varying-length character</secondary>
<tertiary>VARCHAR</tertiary></indexterm>. </para><para>VARCHAR is
equivalent to data type CHAR[ACTER] VARYING.</para>
</listitem>
</varlistentry>
<varlistentry><term>NCHAR [(<replaceable>length</replaceable>)] [UPSHIFT]
[[NOT]CASESPECIFIC]<indexterm><primary>NCHAR data type</primary>
</indexterm><indexterm><primary>NATIONAL CHAR data type</primary>
</indexterm></term><term>NATIONAL CHAR[ACTER] [(<replaceable>length</replaceable
>)] [UPSHIFT] [[NOT]CASESPECIFIC]</term>
<listitem><para>specifies<indexterm><primary>Data types</primary>
<secondary>fixed length character</secondary><tertiary>NATIONAL CHAR</tertiary>
</indexterm> a column with data in the predefined national character
set<indexterm><primary>Data types</primary><secondary>fixed length
character</secondary><tertiary>NCHAR</tertiary></indexterm>. </para>
</listitem>
</varlistentry>
<varlistentry><term><indexterm><primary>NCHAR VARYING data type</primary>
</indexterm>NCHAR VARYING [(<replaceable>length</replaceable>)] [UPSHIFT]
[[NOT]CASESPECIFIC]<indexterm><primary>NATIONAL CHAR VARYING data
type</primary></indexterm></term><term>NATIONAL CHAR[ACTER] VARYING
(<replaceable>length</replaceable>) [UPSHIFT] [[NOT]CASESPECIFIC]</term>
<listitem><para><indexterm><primary>Data types</primary><secondary
>varying-length character</secondary><tertiary>NATIONAL CHAR VARYING</tertiary>
</indexterm>specifies a column with varying-length data in the predefined
national character set<indexterm><primary>Data types</primary>
<secondary>varying-length character</secondary><tertiary>NCHAR VARYING</tertiary>
</indexterm>. </para></listitem>
</varlistentry>
</variablelist>
<section id="i1010271" pagebreak="yes">
<title>Considerations for Character String Data Types</title>
<para><emphasis role="bold">Difference Between CHAR and VARCHAR</emphasis
></para>
<para>You can specify a <indexterm><primary>Fixed-length character
column</primary></indexterm>fixed-length character column as CHAR(<replaceable
>n</replaceable>), where <replaceable>n</replaceable> is the number
of characters you want to store<indexterm><primary>Character string
data types</primary><secondary>CHAR and VARCHAR, differences</secondary>
</indexterm>. However, if you store five characters into a column
specified as CHAR(10), ten characters are stored where the rightmost
five characters are blank<indexterm><primary>CHAR data type</primary>
</indexterm>.</para>
<para>If you do not want to have blanks added to your character string,
you can specify a <indexterm><primary>Variable-length character column</primary>
</indexterm>variable-length character column as VARCHAR(<replaceable
>n</replaceable>), where <replaceable>n</replaceable> is the maximum
number of characters you want to store<indexterm><primary>VARCHAR
data type</primary></indexterm>. If you store five characters in a
column specified as VARCHAR(10), only the five characters are stored
logically—without blank padding. </para>
<!--WRITER'S NOTE: Verify this removal with Anoop.-->
<para condition="hidden" id="i1010283"><emphasis role="bold">Maximum
Byte Length of a Character Column</emphasis> </para>
<informaltable colsep="0" condition="hidden" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="TI  inline table">
<thead>
<row><entry>Data Type</entry><entry>Maximum Length in Table</entry>
</row>
</thead>
<tbody>
<row><entry>Fixed-length<indexterm><primary>Character string data
types</primary><secondary>maximum storage lengths</secondary>
</indexterm></entry><entry>32708</entry></row>
<row><entry>Variable-length</entry><entry>32708</entry></row>
</tbody>
</tgroup>
</informaltable>
<para condition="hidden">The maximum row size is 32708 bytes, but
the actual maximum character column size is less than that because
of bytes used by the header, null indicator, column length indicator,
and other columns in the table.</para>
<bridgehead>NCHAR Columns in SQL Tables</bridgehead>
<para>In Trafodion SQL, the NCHAR type specification is equivalent
to:</para>
<itemizedlist>
<listitem><para>NATIONAL CHARACTER</para></listitem>
<listitem><para>NATIONAL CHAR</para></listitem>
<listitem><para>CHAR ... CHARACTER SET ..., where the character set
is the character set for NCHAR</para></listitem>
</itemizedlist>
<para>Similarly, you can use NCHAR VARYING, NATIONAL CHARACTER VARYING,
NATIONAL CHAR VARYING, and VARCHAR ... CHARACTER SET ... , where the
character set is the character set for NCHAR. The character set for
NCHAR is determined when Trafodion SQL is installed. </para>
<bridgehead condition="hidden">Collations</bridgehead>
<para condition="hidden">A collation contains rules for a collating
sequence (the sequence in which characters are ordered for sorting),
case, and character class and character string equivalence. To be
compared, character strings must be from the same character set. When
two strings are compared, the comparison is made with a temporary
copy of the shorter string that has been padded on the right with
blanks to have the same length as the longer string.</para>
<para condition="hidden">In Trafodion SQL, a character data type can
be associated only with the DEFAULT collation, which compares the
binary code values of characters in a character string. When comparing
two equal length strings, <replaceable>s1</replaceable> and <replaceable
>s2</replaceable>, Trafodion SQL compares the binary code values of
the corresponding characters of <replaceable>s1</replaceable> and <replaceable
>s2</replaceable> until it finds a difference. If Trafodion SQL finds
a difference and the differing character value of <replaceable>s1</replaceable
> is less than that of <replaceable>s2</replaceable>, <replaceable
>s1</replaceable> is considered to come before <replaceable>s2</replaceable
>. If the differing character value of <replaceable>s2</replaceable
> is less than that of <replaceable>s1</replaceable>, <replaceable
>s2</replaceable> is considered to come before <replaceable>s1</replaceable
>. If no difference exists, <replaceable>s2</replaceable> is considered
equal to <replaceable>s2</replaceable>.</para>
</section>
</section>
<section id="i1010360">
<title>Datetime Data Types</title>
<para>A value of <indexterm><primary>Datetime data types</primary>
<secondary>description of</secondary></indexterm>datetime data type
represents a point in time according to the Gregorian calendar and
a 24-hour clock in local civil time (LCT). A datetime item can represent
a date, a time, or a date and time. </para>
<para>When a numeric value is added to or subtracted from a date type,
the numeric value is automatically CASTed to an INTERVAL DAY value.
When a numeric value is added to or subtracted from a time type or
a timestamp type, the numeric value is automatically CASTed to an
INTERVAL SECOND value. For information on CAST, see <xref
linkend="i1006592" role="select:quotedtitle page"/>.</para>
<para>Trafodion SQL accepts dates, such as October 5 to 14, 1582,
that were omitted from the Gregorian calendar. This functionality
is a Trafodion SQL extension.</para>
<para>The range of times that a datetime value can represent is: </para>
<para>January 1, 1 A.D., 00:00:00.000000 (low value)  December 31,
9999, 23:59:59.999999 (high value)</para>
<para>Trafodion SQL has three datetime data types: </para>
<programlisting><replaceable>datetime-type</replaceable> is: 
     DATE 
   | TIME [(<replaceable>time-precision</replaceable>)] 
   | TIMESTAMP [(<replaceable>timestamp-precision</replaceable>)]
</programlisting>
<variablelist>
<varlistentry><term><indexterm><primary>Data types</primary><secondary
>datetime</secondary><tertiary>DATE</tertiary></indexterm>DATE</term>
<listitem><para>specifies a datetime column that contains a date in
the external form yyyy-mm-dd and stored in four bytes<indexterm>
<primary>Datetime data types</primary><secondary>DATE</secondary>
</indexterm>. </para></listitem>
</varlistentry>
<varlistentry><term><indexterm><primary>Datetime data types</primary>
<secondary>TIME</secondary></indexterm>TIME [(<replaceable>time-precision</replaceable
>)]</term>
<listitem><para>specifies a datetime column that, without the optional
time-precision, contains a time in the external form hh:mm:ss and
is stored in three bytes. <replaceable>time-precision</replaceable
> is an unsigned integer that specifies the number of digits in the
fractional seconds and is stored in four bytes. The default for <replaceable
>time-precision</replaceable> is 0, and the maximum is 6<indexterm>
<primary>Data types</primary><secondary>datetime</secondary><tertiary
>TIME</tertiary></indexterm>.</para></listitem>
</varlistentry>
<varlistentry><term><indexterm><primary>Datetime data types</primary>
<secondary>TIMESTAMP</secondary></indexterm>TIMESTAMP [(<replaceable
>timestamp-precision</replaceable>)]</term>
<listitem><para>specifies a datetime column that, without the optional <replaceable
>timestamp-precision</replaceable>, contains a timestamp in the external
form yyyy-mm-dd hh:mm:ss and is stored in seven bytes<indexterm>
<primary>Data types</primary><secondary>datetime</secondary><tertiary
>TIMESTAMP</tertiary></indexterm>. <replaceable>timestamp-precision</replaceable
> is an unsigned integer that specifies the number of digits in the
fractional seconds and is stored in four bytes. The default for <replaceable
>timestamp-precision</replaceable> is 6, and the maximum is 6.</para>
</listitem>
</varlistentry>
</variablelist>
<section id="i1013599">
<title>Considerations for Datetime Data Types</title>
<bridgehead>Datetime Ranges </bridgehead>
<para>The range of values for the individual fields in a DATE, TIME,
or TIMESTAMP column is specified as:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL1  desc list">
<tbody>
<row><entry><replaceable>yyyy</replaceable></entry><entry>Year, from
0001 to 9999</entry></row>
<row><entry><replaceable>mm</replaceable></entry><entry>Month, from
01 to 12</entry></row>
<row><entry><replaceable>dd</replaceable></entry><entry>Day, from
01 to 31</entry></row>
<row><entry><replaceable>hh</replaceable></entry><entry>Hour, from
00 to 23</entry></row>
<row><entry><replaceable>mm</replaceable></entry><entry>Minute, from
00 to 59</entry></row>
<row><entry><replaceable>ss</replaceable></entry><entry>Second, from
00 to 59</entry></row>
<row><entry><replaceable>msssss</replaceable></entry><entry>Microsecond,
from 000000 to 999999</entry></row>
</tbody>
</tgroup>
</informaltable>
<para>When you specify <replaceable>datetime_value</replaceable><literal
> (FORMAT ‘string’)</literal> in the DML statement and the specified
format is ‘mm/dd/yyyy’,’MM/DD/YYYY’, or ‘yyyy/mm/dd’ or ‘yyyy-mm-dd’,
the datetime type is automatically cast. </para>
</section>
</section>
<section id="i1041657" pagebreak="yes">
<title>Interval Data Types</title>
<para>Values<indexterm><primary>Interval data types</primary><secondary
>description of</secondary></indexterm> of interval data type represent
durations of time in year-month units (years and months) or in day-time
units (days, hours, minutes, seconds, and fractions of a second)<indexterm>
<primary>Data types</primary><secondary>interval</secondary></indexterm
>. </para>
<programlisting><replaceable>interval-type</replaceable> is: 
INTERVAL[-] { <replaceable>start-field</replaceable> TO <replaceable
>end-field</replaceable> | <replaceable>single-field</replaceable
> } 

<replaceable>start-field</replaceable> is: 
   {YEAR | MONTH | DAY | HOUR | MINUTE} [(<replaceable>leading-precision</replaceable
>)] 

<replaceable>end-field</replaceable> is:
   YEAR | MONTH | DAY | HOUR | MINUTE | SECOND 
        [(<replaceable>fractional-precision</replaceable>)] 

<replaceable>single-field</replaceable> is: 
   <replaceable>start-field</replaceable> | SECOND [(<replaceable
>leading-precision</replaceable>, 
                          <replaceable>fractional-precision</replaceable
>)] 
</programlisting>
<variablelist>
<varlistentry><term><indexterm><primary>Data types</primary><secondary
>interval</secondary></indexterm>INTERVAL[-] { <replaceable>start-field</replaceable
> TO <replaceable>end-field</replaceable> | <replaceable>single-field</replaceable
> }</term>
<listitem><para>specifies a column that represents a duration of time
as a year-month or day-time range or a single-field. The optional
sign indicates if this is a positive or negative integer. If you omit
the sign, it defaults to positive.</para><para>If the interval is
specified as a range, the <replaceable>start-field</replaceable> and <replaceable
>end-field</replaceable> must be in one of these categories: </para>
<variablelist>
<varlistentry><term>{YEAR | MONTH | DAY | HOUR | MINUTE} [(<replaceable
>leading-precision</replaceable>)] </term>
<listitem><para>specifies the <replaceable>start-field</replaceable
>. A <replaceable>start-field</replaceable> can have a <replaceable
>leading-precision</replaceable> up to 18 digits (the maximum depends
on the number of fields in the interval). The <replaceable>leading-precision</replaceable
> is the number of digits allowed in the <replaceable>start-field</replaceable
>. The default for <replaceable>leading-precision</replaceable> is
2.</para></listitem>
</varlistentry>
<varlistentry><term>YEAR | MONTH | DAY | HOUR | MINUTE | SECOND [(<replaceable
>fractional-precision</replaceable>)] </term>
<listitem><para>specifies the <replaceable>end-field</replaceable
>. If the <replaceable>end-field</replaceable> is SECOND, it can have
a <replaceable>fractional-precision</replaceable> up to 6 digits.
The <replaceable>fractional-precision</replaceable> is the number
of digits of precision after the decimal point. The default for <replaceable
>fractional‑precision</replaceable> is 6.</para></listitem>
</varlistentry>
<varlistentry><term>start-field | SECOND [(<replaceable>leading-precision</replaceable
>, <replaceable>fractional-precision</replaceable>)] </term>
<listitem><para>specifies the <replaceable>single-field</replaceable
>. If the <replaceable>single-field</replaceable> is SECOND, the <replaceable
>leading‑precision</replaceable> is the number of digits of precision
before the decimal point, and the <replaceable>fractional-precision</replaceable
> is the number of digits of precision after the decimal point.</para>
<para>The default for <replaceable>leading-precision</replaceable
> is 2, and the default for <replaceable>fractional‑precision</replaceable
> is 6. The maximum for <replaceable>leading-precision</replaceable
> is 18, and the maximum for <replaceable>fractional-precision</replaceable
> is 6.</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
<section id="i1013618" pagebreak="yes">
<title>Considerations for Interval Data Types</title>
<para><emphasis role="bold">Adding or Subtracting Imprecise Interval
Values</emphasis></para>
<para>Adding or subtracting an interval that is any multiple of a
MONTH, a YEAR, or a combination of these may result in a runtime error.
For example, adding 1 MONTH to January 31, 2009 will result in an
error because February 31 does not exist and it is not clear whether
the user would want rounding back to February 28, 2009, rounding up
to March 1, 2009 or perhaps treating the interval 1 MONTH as if it
were 30 days resulting in an answer of March 2, 2009. Similarly, subtracting
1 YEAR from February 29, 2008 will result in an error. See the descriptions
for the <xref linkend="i1050522" role="select:quotedtitle page"/>, <xref
linkend="i1051539" role="select:quotedtitle page"/>, <xref
linkend="i1051556" role="select:quotedtitle page"/>, and <xref
linkend="i1051531" role="select:quotedtitle page"/> for ways to add
or subtract such intervals without getting errors at runtime.</para>
<para><emphasis role="bold">Interval Leading Precision</emphasis></para>
<para>The maximum for the <replaceable>leading-precision</replaceable
> depends on the number of fields in the interval and on the <replaceable
>fractional-precision</replaceable>. The maximum is computed as:</para>
<programlisting><replaceable>max-leading-precision</replaceable> = 18 - <replaceable
>fractional-precision</replaceable> - 2 * (<replaceable>N</replaceable
> - 1)
</programlisting>
<para>where <replaceable>N</replaceable> is the number of fields in
the interval.</para>
<para>For example, the maximum number of digits for the <replaceable
>leading-precision</replaceable> in a column with data type INTERVAL
YEAR TO MONTH is computed as: 18 – 0 – 2 * (2 – 1) = 16</para>
<para><emphasis role="bold">Interval Ranges</emphasis></para>
<para>Within the definition of an interval range (other than a single
field), the <replaceable>start-field </replaceable>and <replaceable
>end-field</replaceable> can be any of the specified fields with these
restrictions:</para>
<itemizedlist>
<listitem><para>An interval range is either year-month or day-time—that
is, if the <replaceable>start-field</replaceable> is YEAR, the <replaceable
>end-field</replaceable> is MONTH; if the <replaceable>start-field</replaceable
> is DAY, HOUR, or MINUTE, the <replaceable>end-field</replaceable
> is also a time field. </para></listitem>
<listitem><para>The <replaceable>start-field</replaceable> must precede
the <replaceable>end-field</replaceable> within the hierarchy: YEAR,
MONTH, DAY, HOUR, MINUTE, and SECOND.</para></listitem>
</itemizedlist>
<para><emphasis role="bold">Signed Intervals</emphasis></para>
<para>To include a quoted string in a signed interval data type, the
sign must be outside the quoted string. It can be before the entire
literal or immediately before the duration enclosed in quotes. </para>
<para>For example, for the interval “minus (5 years 5 months) these
formats are valid:</para>
<programlisting>INTERVAL - <literal>'</literal>05-05<literal>'</literal
>YEAR TO MONTH
- INTERVAL <literal>'</literal>05-05<literal>'</literal> YEAR TO MONTH
</programlisting>
<para><emphasis role="bold">Overflow Conditions</emphasis></para>
<para>When you insert a fractional value into an INTERVAL data type
field, if the fractional value is 0 (zero) it does not cause an overflow.
Inserting value INTERVAL '1.000000' SECOND(6) into a field SECOND(0)
does not cause a loss of value. Provided that the value fits in the
target column without a loss of precision, Trafodion SQL does not
return an overflow error.</para>
<para>However, if the fractional value is > 0, an overflow occurs.
Inserting value INTERVAL '1.000001' SECOND(6) causes a loss of value.</para>
</section>
</section>
<section id="i1010568" pagebreak="yes">
<title>Numeric Data Types </title>
<para>Numeric data types are either exact or approximate. A numeric
data type is compatible with any other numeric data type, but not
with character, datetime, or interval data types. </para>
<programlisting><replaceable>exact-numeric-type</replaceable> is:
     NUMERIC [(<replaceable>precision</replaceable> [,<replaceable
>scale</replaceable>])] [SIGNED|UNSIGNED]
   | SMALLINT [SIGNED|UNSIGNED]  
   | INT[EGER] [SIGNED|UNSIGNED]  
   | LARGEINT   
   | DEC[IMAL] [(<replaceable>precision</replaceable> [,<replaceable
>scale</replaceable>])] [SIGNED|UNSIGNED] 
<replaceable>approximate-numeric-type</replaceable> is:
     FLOAT [(<replaceable>precision</replaceable>)] 
   | REAL   
   | DOUBLE PRECISION 
</programlisting>
<para><indexterm><primary>Numeric data types</primary><secondary>exact
numeric</secondary></indexterm>Exact numeric data types are types
that can represent a value exactly: NUMERIC, SMALLINT, INTEGER, LARGEINT,
and DECIMAL.<indexterm><primary>Data types</primary><secondary>exact
numeric</secondary><tertiary>descriptions of</tertiary></indexterm
></para>
<para><indexterm><primary>Numeric data types</primary><secondary>approximate
numeric</secondary></indexterm>Approximate numeric data types are
types that do not necessarily represent a value exactly: FLOAT, REAL,
and DOUBLE PRECISION<indexterm><primary>Data types</primary><secondary
>approximate numeric</secondary><tertiary>descriptions of</tertiary>
</indexterm>. </para>
<para>A column in a Trafodion SQL table declared with a floating-point
data type is stored in IEEE floating-point format and all computations
on it are done assuming that. Trafodion SQL tables can contain only
IEEE floating-point data. </para>
<variablelist>
<varlistentry><term><literal>NUMERIC [(<replaceable>precision</replaceable
> [,<replaceable>scale</replaceable>])] [SIGNED|UNSIGNED]</literal
> </term>
<listitem><para>specifies an exact numeric column—a two-byte binary
number, <literal>SIGNED</literal> or <literal>UNSIGNED</literal>. <replaceable
>precision</replaceable> specifies the total number of digits and
cannot exceed 128<indexterm><primary>Data types</primary><secondary
>exact numeric</secondary><tertiary>NUMERIC</tertiary></indexterm
>. If <replaceable>precision</replaceable> is between 10 and 18, you
must use a signed value to obtain the supported hardware data type.
If precision is over 18, you will receive the supported software data
type. You will also receive the supported software data type if the
precision type is between 10 and 18, and you specify UNSIGNED. <replaceable
>scale</replaceable> specifies the number of digits to the right of
the decimal point. </para><para>The default is <literal>NUMERIC (9,0)
SIGNED</literal>.</para>
</listitem>
</varlistentry>
<varlistentry><term><indexterm><primary>Data types</primary><secondary
>exact numeric</secondary><tertiary>SMALLINT</tertiary></indexterm
><indexterm><primary>SMALLINT data type</primary></indexterm><literal
>SMALLINT [SIGNED|UNSIGNED]</literal> </term>
<listitem><para>specifies an exact numeric column—a two-byte binary
integer, <literal>SIGNED</literal> or <literal>UNSIGNED</literal>.
The column stores integers in the range unsigned 0 to 65535 or signed
‑32768 to +32767. </para><para>The default is <literal>SIGNED</literal
>.</para>
</listitem>
</varlistentry>
<varlistentry><term><indexterm><primary>Data types</primary><secondary
>exact numeric</secondary><tertiary>INTEGER</tertiary></indexterm
><indexterm><primary>INTEGER data type</primary></indexterm><literal
>INT[EGER] [SIGNED|UNSIGNED]</literal> </term>
<listitem><para>specifies an exact numeric column—a 4-byte binary
integer, <literal>SIGNED</literal> or <literal>UNSIGNED</literal>.
The column stores integers in the range unsigned 0 to 4294967295 or
signed -2147483648 to +2147483647. </para><para>The default is <literal
>SIGNED</literal>.</para>
</listitem>
</varlistentry>
<varlistentry><term><indexterm><primary>Data types</primary><secondary
>exact numeric</secondary><tertiary>LARGEINT</tertiary></indexterm
><indexterm><primary>LARGEINT data type</primary></indexterm><literal
>LARGEINT</literal> </term>
<listitem><para>specifies an exact numeric column—an 8-byte signed
binary integer. The column stores integers in the range -2**63 to
+2**63 -1 (approximately 9.223 times 10 to the eighteenth power).</para>
</listitem>
</varlistentry>
<varlistentry><term><indexterm><primary>Data types</primary><secondary
>exact numeric</secondary><tertiary>DECIMAL</tertiary></indexterm
><literal>DEC[IMAL] [(<replaceable>precision</replaceable> [,<replaceable
>scale</replaceable>])] [SIGNED|UNSIGNED]</literal> </term>
<listitem><para>specifies an exact numeric column—a decimal number, <literal
>SIGNED</literal> or <literal>UNSIGNED</literal>,stored as ASCII characters. <replaceable
>precision</replaceable> specifies the total number of digits and
cannot exceed 18<indexterm><primary>DECIMAL data type</primary>
</indexterm>. If <replaceable>precision</replaceable> is 10 or more,
the value must be <literal>SIGNED</literal>. The sign is stored as
the first bit of the leftmost byte. <replaceable>scale</replaceable
> specifies the number of digits to the right of the decimal point.</para>
<para>The default is <literal>DECIMAL (9,0) SIGNED</literal>.</para>
</listitem>
</varlistentry>
<varlistentry><term><indexterm><primary>Data types</primary><secondary
>approximate numeric</secondary><tertiary>FLOAT</tertiary></indexterm
><indexterm><primary>FLOAT data type</primary></indexterm><literal
>FLOAT [( precision )]</literal> </term>
<listitem><para>specifies an approximate numeric column. The column
stores floating-point numbers and designates from 1 through 54 bits
of <replaceable>precision</replaceable>. The range is from +/- 2.2250738585072014e-308
through +/-1.7976931348623157e+308 stored in 8 bytes.</para><para
>An IEEE FLOAT <replaceable>precision</replaceable> data type is stored
as an IEEE DOUBLE, that is, in 8 bytes, with the specified precision. </para>
<para>The default <replaceable>precision</replaceable> is 54.</para>
</listitem>
</varlistentry>
<varlistentry><term><indexterm><primary>Data types</primary><secondary
>approximate numeric</secondary><tertiary>REAL</tertiary></indexterm
><indexterm><primary>REAL data type</primary></indexterm>REAL</term>
<listitem><para>specifies a 4-byte approximate numeric column. The
column stores 32-bit floating‑point numbers with 23 bits of binary
precision and 8 bits of exponent. </para><para>The minimum and maximum
range is from +/- 1.17549435e-38 through +/ 3.40282347e+38. </para>
</listitem>
</varlistentry>
<varlistentry><term><indexterm><primary>Data types</primary><secondary
>approximate numeric</secondary><tertiary>DOUBLE PRECISION</tertiary>
</indexterm><indexterm><primary>DOUBLE PRECISION data type</primary>
</indexterm>DOUBLE PRECISION</term>
<listitem><para>specifies an 8-byte approximate numeric column. </para>
<para>The column stores 64-bit floating-point numbers and designates
from 1 through 52 bits of <replaceable>precision</replaceable>.</para>
<para>An IEEE DOUBLE PRECISION data type is stored in 8 bytes with
52 bits of binary precision and 11 bits of exponent. The minimum and
maximum range is from +/- 2.2250738585072014e-308 through +/-1.7976931348623157e+308. </para>
</listitem>
</varlistentry>
</variablelist>
</section>
</section>
<section id="i1013683" pagebreak="yes">
<title>Expressions</title>
<indexterm><primary>SQL value expression</primary></indexterm>
<indexterm><primary>Expression</primary><secondary>description of</secondary>
</indexterm>
<para>An SQL value expression, called an expression, evaluates to
a value. Trafodion SQL supports these types of expressions:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<tbody>
<row><entry><xref linkend="i1010765" role="select:quotedtitle page"
/></entry><entry>Operands can be combined with the concatenation operator
(||). Example: <literal>'HOUSTON,' ||' TEXAS'</literal></entry></row>
<row><entry><xref linkend="Datetime_Value_Expressions"
role="select:quotedtitle page"/></entry><entry>Operands can be combined
in specific ways with arithmetic operators.  Example: <literal>CURRENT_DATE
+ INTERVAL '1' DAY</literal></entry></row>
<row><entry><xref linkend="i1010948" role="select:quotedtitle page"
/></entry><entry>Operands can be combined in specific ways with addition
and subtraction operators.  Example: <literal>INTERVAL '2' YEAR</literal
>          <literal> - INTERVAL '3' MONTH</literal></entry></row>
<row><entry><xref linkend="i1011132" role="select:quotedtitle page"
/></entry><entry>Operands can be combined in specific ways with arithmetic
operators. Example: <literal>SALARY * 1.10</literal></entry></row>
</tbody>
</tgroup>
</informaltable>
<para>The data type of an expression is the data type of the value
of the expression<indexterm><primary>Value expressions</primary>
</indexterm>. </para>
<para>A value expression can be a character string literal, a numeric
literal, a dynamic parameter, or a column name that specifies the
value of the column in a row of a table. A value expression can also
include functions and scalar subqueries. </para>
<section id="i1010765">
<title>Character Value Expressions</title>
<para><indexterm><primary>Character value expression</primary>
<secondary>syntax diagram of</secondary></indexterm>The operands of
a character value expression—called character primaries—can be combined
with the concatenation operator (||)<indexterm><primary>Expression</primary>
<secondary>character (or string) value</secondary></indexterm>. The
data type of a character primary is character string<indexterm><primary
>String value expression</primary><secondary>syntax diagram of</secondary>
</indexterm>.</para>
<programlisting>
<replaceable>character-expression</replaceable> is:
     <replaceable>character-primary</replaceable>                        
   | <replaceable>character-expression</replaceable> || <replaceable
>character-primary</replaceable> 

<replaceable>character-primary</replaceable> is:
     <replaceable>character-string-literal</replaceable> 
   | <replaceable>column-reference</replaceable> 
   | <replaceable>character-type-host-variable
</replaceable>   | <replaceable>dynamic parameter
</replaceable>   | <replaceable>character-value-function</replaceable
> 
   | <replaceable>aggregate-function</replaceable> 
   | <replaceable>sequence-function 
</replaceable>   | <replaceable>scalar-subquery </replaceable>
   | <replaceable>CASE-expression</replaceable>  
   | <replaceable>CAST-expression</replaceable> 
   | (<replaceable>character-expression</replaceable>) 
 <literal condition="hidden">  | <replaceable>OLAP-window-function</replaceable
>
</literal></programlisting>
<para>Character (or string) value expressions are built from operands
that can be:</para>
<itemizedlist>
<listitem><para>Character string literals</para></listitem>
<listitem><para>Character string functions</para></listitem>
<listitem><para>Column references with character values</para>
</listitem>
<listitem><para>Dynamic parameters</para></listitem>
<listitem><para>Aggregate functions, sequence functions, scalar subqueries,
CASE expressions, or CAST expressions that return character values </para>
</listitem>
<listitem condition="hidden"><para>OLAP window functions</para>
</listitem>
</itemizedlist>
<section>
<title>Examples of Character Value Expressions</title>
<para><indexterm><primary>Character value expression</primary>
<secondary>examples of</secondary></indexterm>These are examples of
character value expressions<indexterm><primary>String value expression</primary>
<secondary>examples of</secondary></indexterm>:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<tbody>
<row><entry>Expression</entry><entry>Description</entry></row>
<row><entry><literal>'ABILENE'</literal></entry><entry>Character string
literal.</entry></row>
<row><entry><literal>'ABILENE ' ||' TEXAS'</literal></entry><entry
>The concatenation of two string literals.</entry></row>
<row><entry><literal>'ABILENE ' ||' TEXAS ' || x’55 53 41'</literal
></entry><entry>The concatenation of three string literals to form
the literal: 'ABILENE TEXAS USA'</entry></row>
<row><entry><literal>'Customer ' || custname</literal></entry><entry
>The concatenation of a string literal with the value in column CUSTNAME.</entry>
</row>
<row><entry><literal>CAST (order_date AS CHAR(10))</literal></entry>
<entry>CAST function applied to a DATE value. </entry></row>
</tbody>
</tgroup>
</informaltable>
</section>
</section>
<section id="Datetime_Value_Expressions">
<title>Datetime Value Expressions</title>
<itemizedlist>
<listitem><para><xref linkend="i1010833" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1042435" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<para>The operands of a datetime value expression can be combined
in specific ways with arithmetic operators<indexterm><primary>Expression</primary>
<secondary>datetime value</secondary></indexterm>. </para>
<para>In this syntax diagram, the data type of a datetime primary
is DATE, TIME, or TIMESTAMP. The data type of an interval term is <indexterm>
<primary>Datetime value expression</primary><secondary>syntax diagram
of</secondary></indexterm>INTERVAL.</para>
<programlisting><replaceable>datetime-expression</replaceable> is:
     <replaceable>datetime-primary</replaceable>        
   | <replaceable>interval-expression</replaceable> + <replaceable
>datetime-primary</replaceable> 
   | <replaceable>datetime-expression</replaceable> + <replaceable
>interval-term</replaceable>    
   | <replaceable>datetime-expression</replaceable> - <replaceable
>interval-term</replaceable>  

<replaceable>datetime-primary</replaceable> is:
     <replaceable>datetime-literal</replaceable>  
   | <replaceable>column-reference</replaceable> 
   | <replaceable>datetime-type-host-variable
</replaceable>   | <replaceable>dynamic parameter</replaceable> 
   | <replaceable>datetime-value-function</replaceable> 
   | <replaceable>aggregate-function</replaceable> 
   | <replaceable>sequence-function 
</replaceable>   | <replaceable>scalar-subquery</replaceable>   
   | <replaceable>CASE-expression</replaceable>   
   | <replaceable>CAST-expression</replaceable>   
   | (<replaceable>datetime-expression</replaceable>)   

<replaceable>interval-term</replaceable> is:
     <replaceable>interval-factor</replaceable>     
   | <replaceable>numeric-term</replaceable>  * <replaceable>interval-factor</replaceable
> 
   
<replaceable>interval-factor</replaceable> is:
   [+|-] <replaceable>interval-primary</replaceable> 

<replaceable>interval-primary</replaceable> is: 
     <replaceable>interval-literal</replaceable>  
   | <replaceable>column-reference</replaceable>  
   | <replaceable>interval-type-host-variable
</replaceable>   | <replaceable>dynamic parameter
</replaceable>   | <replaceable>aggregate-function</replaceable> 
   | <replaceable>sequence-function 
</replaceable>   | <replaceable>scalar-subquery</replaceable>    
   | <replaceable>CASE-expression</replaceable>    
   | <replaceable>CAST-expression</replaceable>   
   | (<replaceable>interval-expression</replaceable>)   
<literal condition="hidden">   | <replaceable>OLAP-window-expression</replaceable
>
</literal></programlisting>
<para>Datetime value expressions are built from operands that can
be:</para>
<itemizedlist>
<listitem><para>Interval value expressions</para></listitem>
<listitem><para>Datetime or interval literals</para></listitem>
<listitem><para>Dynamic parameters</para></listitem>
<listitem><para>Column references with datetime or interval values</para>
</listitem>
<listitem><para>Dynamic parameters</para></listitem>
<listitem><para>Datetime or interval value functions</para></listitem>
<listitem><para>Any aggregate functions, sequence functions, scalar
subqueries, CASE expressions, or CAST expressions that return datetime
or interval values</para></listitem>
<listitem condition="hidden"><para>OLAP window functions</para>
</listitem>
</itemizedlist>
<section id="i1010833">
<title>Considerations for Datetime Value Expressions</title>
<para><emphasis role="bold">Data Type of Result</emphasis></para>
<para>In general, the data type of the result is the data type of
the <replaceable>datetime-primary</replaceable> part of the datetime
expression. <indexterm><primary>Datetime value expression</primary>
<secondary>examples of</secondary></indexterm>For example, datetime
value expressions include:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="3" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<thead>
<row rowsep="1" valign="bottom"><entry align="left" valign="bottom"
>Datetime Expression</entry><entry align="left" valign="bottom">Description</entry>
<entry align="left" valign="bottom">Result Data Type</entry></row>
</thead>
<tbody>
<row><entry><literal>CURRENT_DATE + INTERVAL '1' DAY</literal></entry>
<entry>The sum of the current date and an interval value of one day.</entry>
<entry>DATE</entry></row>
<row><entry><literal>CURRENT_DATE + est_complete</literal></entry>
<entry>The sum of the current date and the interval value in column
EST_COMPLETE.</entry><entry>DATE</entry></row>
<row><entry><literal>( SELECT ship_timestamp    FROM project   WHERE
projcode=1000 )   + INTERVAL '07:04' DAY TO HOUR</literal></entry>
<entry>The sum of the ship timestamp for the specified project and
an interval value of seven days, four hours. </entry><entry>TIMESTAMP</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<para>The datetime primary in the first expression is CURRENT_DATE,
a function that returns a value with DATE data type. Therefore, the
data type of the result is DATE.</para>
<para>In the last expression, the datetime primary is this scalar
subquery:</para>
<programlisting>( SELECT ship_timestamp FROM project WHERE projcode=1000 )
</programlisting>
<para>The preceding subquery returns a value with TIMESTAMP data type.
Therefore, the data type of the result is TIMESTAMP.</para>
<para><emphasis role="bold">Restrictions on Operations With Datetime
or Interval Operands</emphasis></para>
<para>You<indexterm><primary>Expression</primary><secondary>interval
value</secondary></indexterm> can use datetime and interval operands
with arithmetic operators in a datetime value expression only in these
combinations<indexterm><primary>Expression</primary><secondary>datetime
value</secondary></indexterm>:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="4" tgroupstyle="TI  inline table">
<thead>
<row><entry>Operand 1</entry><entry>Operator</entry><entry>Operand
2</entry><entry>Result Type</entry></row>
</thead>
<tbody>
<row><entry>Datetime</entry><entry>+ or –</entry><entry>Interval</entry>
<entry>Datetime</entry></row>
<row><entry>Interval</entry><entry>+</entry><entry>Datetime</entry>
<entry>Datetime</entry></row>
</tbody>
</tgroup>
</informaltable>
<para>When a numeric value is added to or subtracted from a DATE type,
the numeric value is automatically CASTed to an INTERVAL DAY value.
When a numeric value is added to or subtracted from a time type or
a timestamp type, the numeric value is automatically CASTed to an
INTERVAL SECOND value. For information on CAST, see <xref
linkend="i1006592" role="select:quotedtitle page"/>. For more information
on INTERVALS, see <xref linkend="i1010948"
role="select:quotedtitle page"/></para>
<para>When using these operations, note:</para>
<itemizedlist>
<listitem><para>Adding or subtracting an interval of months to a DATE
value results in a value of the same day plus or minus the specified
number of months. Because different months have different lengths,
this is an approximate result.</para></listitem>
<listitem><para>Datetime and interval arithmetic can yield unexpected
results, depending on how the fields are used. For example, execution
of this expression (evaluated left to right) returns an error:</para>
<programlisting>DATE '2007-01-30' + INTERVAL '1' MONTH + INTERVAL '7' DAY 
</programlisting>
<para>In contrast, this expression (which adds the same values as
the previous expression, but in a different order) correctly generates
the value 2007-03-06: </para>
<programlisting>DATE '2007-01-30' + INTERVAL '7' DAY + INTERVAL '1' MONTH 
</programlisting>
</listitem>
</itemizedlist>
<para>You can avoid these unexpected results by using the <xref
linkend="i1050522" role="select:quotedtitle page"/>.</para>
</section>
<section id="i1042435">
<title>Examples of Datetime Value Expressions</title>
<para>The PROJECT table consists of five columns that use the data
types NUMERIC, VARCHAR, DATE, TIMESTAMP, and INTERVAL DAY. Suppose
that you have inserted values into the PROJECT table. For example:</para>
<programlisting>INSERT INTO persnl.project
VALUES (1000,'SALT LAKE CITY',DATE '2007-04-10',
       TIMESTAMP '2007-04-21:08:15:00.00',INTERVAL '15' DAY);
</programlisting>
<para>The next examples use these values in the PROJECT table: </para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="4" tgroupstyle="TI  inline table">
<tbody>
<row><entry>PROJCODE</entry><entry>START_DATE</entry><entry>SHIP_TIMESTAMP</entry>
<entry>EST_COMPLETE</entry></row>
<row><entry>    1000</entry><entry>2007-04-10</entry><entry>2007-04-21
08:15:00.00</entry><entry>          15</entry></row>
<row><entry>     945</entry><entry>2007-10-20</entry><entry>2007-12-21
08:15:00.00</entry><entry>          30</entry></row>
<row><entry>     920</entry><entry>2007-02-21</entry><entry>2007-03-12
09:45:00.00</entry><entry>          20</entry></row>
<row><entry>     134</entry><entry>2007-11-20</entry><entry>2008-01-01
00:00:00.00</entry><entry>          30</entry></row>
</tbody>
</tgroup>
</informaltable>
<itemizedlist>
<listitem><para>Add an interval value qualified by YEAR to a datetime
value: </para>
<programlisting>SELECT start_date + INTERVAL '1' YEAR
FROM persnl.project
WHERE projcode = 1000;

(EXPR)
----------
2008-04-10

--- 1 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Subtract an interval value qualified by MONTH from
a datetime value: </para>
<programlisting>SELECT ship_timestamp - INTERVAL '1' MONTH
FROM persnl.project
WHERE projcode = 134;

(EXPR)
--------------------------
2007-12-01 00:00:00.000000

--- 1 row(s) selected.
</programlisting>
<para>The result is 2007-12-01 00:00:00.00. The YEAR value is decremented
by 1 because subtracting a month from January 1 causes the date to
be in the previous year.</para>
</listitem>
<listitem><para>Add a column whose value is an interval qualified
by DAY to a datetime value: </para>
<programlisting>SELECT start_date + est_complete
FROM persnl.project
WHERE projcode = 920;

(EXPR)
----------
2007-03-12

--- 1 row(s) selected.
</programlisting>
<para>The result of adding 20 days to 2008-02-21 is 2008-03-12. Trafodion
SQL correctly handles 2008 as a leap year.</para>
</listitem>
<listitem><para>Subtract an interval value qualified by HOUR TO MINUTE
from a datetime value: </para>
<programlisting>SELECT ship_timestamp - INTERVAL '15:30' HOUR TO MINUTE
FROM persnl.project
WHERE projcode = 1000;

(EXPR)
--------------------------
2008-04-20 16:45:00.000000
</programlisting>
<para>The result of subtracting 15 hours and 30 minutes from 2007-04-21
08:15:00.00 is 2007-04-20 16:45:00.00. </para>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1010948">
<title>Interval Value Expressions</title>
<itemizedlist>
<listitem><para><xref linkend="i1010985" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1011067" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<para>The operands of an interval value expression can be combined
in specific ways with addition and subtraction operators. In this
syntax diagram, the data type of a datetime expression is DATE, TIME,
or TIMESTAMP; the data type of an interval term or expression is <indexterm>
<primary>Interval value expression</primary><secondary>syntax diagram
of</secondary></indexterm>INTERVAL.</para>
<programlisting><replaceable>interval-expression</replaceable> is: 
     <replaceable>interval-term</replaceable> 
   | <replaceable>interval-expression</replaceable> + <replaceable
>interval-term</replaceable> 
   | <replaceable>interval-expression</replaceable> - <replaceable
>interval-term</replaceable> 
   | (<replaceable>datetime-expression</replaceable> - <replaceable
>datetime-primary</replaceable>) 
        [<replaceable>interval-qualifier</replaceable>] 

<replaceable>interval-term</replaceable> is:
     <replaceable>interval-factor</replaceable>     
   | <replaceable>interval-term</replaceable> * <replaceable>numeric-factor</replaceable
>  
   | <replaceable>interval-term</replaceable> / <replaceable>numeric-factor</replaceable
>  
   | <replaceable>numeric-term</replaceable>  * <replaceable>interval-factor</replaceable
> 

<replaceable>interval-factor</replaceable> is:
   [+|-] <replaceable>interval-primary</replaceable> 

<replaceable>interval-primary</replaceable> is: 
     <replaceable>interval-literal</replaceable>
   | <replaceable>column-reference</replaceable>
   | <replaceable>interval-type-host-variable</replaceable>
   | <replaceable>dynamic-parameter</replaceable>
   | <replaceable>aggregate-function</replaceable> 
   | <replaceable>sequence-function</replaceable>
   | <replaceable>scalar-subquery</replaceable>
   | <replaceable>CASE-expression</replaceable>
   | <replaceable>CAST-expression</replaceable>
   | (<replaceable>interval-expression</replaceable>)
<literal condition="hidden">   | <replaceable>OLAP-window-function</replaceable
>
</literal>
<replaceable>numeric-factor</replaceable> is:
     [+|-] <replaceable>numeric-primary</replaceable>  
   | [+|-] <replaceable>numeric-primary</replaceable> ** <replaceable
>numeric-factor</replaceable> 
</programlisting>
<para>Interval value expressions are built from operands that can
be:</para>
<itemizedlist>
<listitem><para>Integers</para></listitem>
<listitem><para>Datetime value expressions</para></listitem>
<listitem><para>Interval literals</para></listitem>
<listitem><para>Column references with datetime or interval values</para>
</listitem>
<listitem condition="hidden"><para>OLAP window functions</para>
</listitem>
<listitem><para>Dynamic parameters</para></listitem>
<listitem><para>Datetime or interval value functions</para></listitem>
<listitem><para>Aggregate functions, sequence functions, scalar subqueries,
CASE expressions, or CAST expressions that return interval values</para>
</listitem>
</itemizedlist>
<para>For <replaceable>interval-term</replaceable>, <replaceable>datetime-expression</replaceable
>, and <replaceable>datetime-primary</replaceable>, see <xref
linkend="Datetime_Value_Expressions" role="select:quotedtitle page"
/>.</para>
<para>If the interval expression is the difference of two datetime
expressions, by default, the result is expressed in the least significant
unit of measure for that interval. For date differences, the interval
is expressed in days. For timestamp differences, the interval is expressed
in fractional seconds.</para>
<para>If the interval expression is the difference or sum of interval
operands, the interval qualifiers of the operands are either year-month
or day-time. If you are updating or inserting a value that is the
result of adding or subtracting two interval qualifiers, the interval
qualifier of the result depends on the interval qualifier of the target
column. </para>
<section id="i1010985">
<title>Considerations for Interval Value Expressions</title>
<para><emphasis role="bold">Start and End Fields</emphasis></para>
<para>Within the definition of an interval range, the <replaceable
>start-field</replaceable> and <replaceable>end-field</replaceable
> can be any of the specified fields with these restrictions:</para>
<itemizedlist>
<listitem><para>An interval is either year-month or day-time. If the <replaceable
>start-field</replaceable> is YEAR, the <replaceable>end-field</replaceable
> is MONTH; if the <replaceable>start-field</replaceable> is DAY,
HOUR, or MINUTE, the <replaceable>end-field</replaceable> is also
a time field. </para></listitem>
<listitem><para>The <replaceable>start-field</replaceable> must precede
the <replaceable>end-field</replaceable> within the hierarchy YEAR,
MONTH, DAY, HOUR, MINUTE, and SECOND.</para></listitem>
</itemizedlist>
<para>Within the definition of an interval expression, the <replaceable
>start-field</replaceable> and <replaceable>end-field</replaceable
> of all operands in the expression must be either year-month or day-time. </para>
<para><emphasis role="bold">Interval Qualifier</emphasis></para>
<para>The rules for determining the interval qualifier of the result
expression vary. <indexterm><primary>Interval value expression</primary>
<secondary>examples of</secondary></indexterm>For example, interval
value expressions include:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="3" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<thead>
<row rowsep="1" valign="bottom"><entry align="left" valign="bottom"
>Datetime Expression</entry><entry align="left" valign="bottom">Description</entry>
<entry align="left" valign="bottom">Result Data Type</entry></row>
</thead>
<tbody>
<row><entry><literal>CURRENT_DATE  - start_date</literal></entry><entry
>By default, the interval difference between the current date and
the value in column START_DATE is expressed in days. You are not required
to specify the interval qualifier.</entry><entry>INTERVAL DAY (12)</entry>
</row>
<row><entry><literal>INTERVAL '3' DAY     - INTERVAL '2' DAY</literal
></entry><entry>The difference of two interval literals. The result
is 1 day.</entry><entry>INTERVAL DAY (3)</entry></row>
<row><entry><literal>INTERVAL '3' DAY     + INTERVAL '2' DAY</literal
></entry><entry>The sum of two interval literals. The result is 5
days.</entry><entry>INTERVAL DAY (3)</entry></row>
<row><entry><literal>INTERVAL '2' YEAR     - INTERVAL '3' MONTH</literal
></entry><entry>The difference of two interval literals. The result
is 1 year, 9 months.</entry><entry>INTERVAL YEAR (3) TO MONTH</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<para><emphasis role="bold">Restrictions on Operations</emphasis></para>
<para><indexterm><primary>Expression</primary><secondary>interval
value</secondary></indexterm>You can use datetime and interval operands
with arithmetic operators in an interval value expression only in
these combinations<indexterm><primary>Expression</primary><secondary
>datetime value</secondary></indexterm>:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="4" tgroupstyle="TI  inline table">
<thead>
<row><entry>Operand 1</entry><entry>Operator</entry><entry>Operand
2</entry><entry>Result Type</entry></row>
</thead>
<tbody>
<row><entry>Datetime</entry><entry>–</entry><entry>Datetime</entry>
<entry>Interval</entry></row>
<row><entry>Interval</entry><entry>+ or –</entry><entry>Interval</entry>
<entry>Interval</entry></row>
<row><entry>Interval</entry><entry>* or /</entry><entry>Numeric</entry>
<entry>Interval</entry></row>
<row><entry>Numeric</entry><entry>*</entry><entry>Interval</entry>
<entry>Interval</entry></row>
</tbody>
</tgroup>
</informaltable>
<para>This table lists valid combinations of datetime and interval
arithmetic operators, and the data type of the result:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="TI  inline table">
<thead>
<row><entry>Operands</entry><entry>Result type</entry></row>
</thead>
<tbody>
<row><entry>Date + Interval or  Interval + Date</entry><entry>Date</entry>
</row>
<row><entry>Date + Numeric or Numeric + Date</entry><entry>Date</entry>
</row>
<row><entry>Date - Numeric</entry><entry>Date</entry></row>
<row><entry>Date – Interval</entry><entry>Date</entry></row>
<row><entry>Date – Date</entry><entry>Interval</entry></row>
<row><entry>Time + Interval or  Interval + Time</entry><entry>Time</entry>
</row>
<row><entry>Time + Numeric or Numeric + Time</entry><entry>Time</entry>
</row>
<row><entry>Time - Number</entry><entry>Time</entry></row>
<row><entry>Time – Interval</entry><entry>Time</entry></row>
<row><entry>Timestamp + Interval or  Interval + Timestamp</entry><entry
>Timestamp</entry></row>
<row><entry>Timestamp + Numeric or Numeric + Timestamp</entry><entry
>Timestamp</entry></row>
<row><entry>Timestamp - Numeric</entry><entry>Timestamp</entry></row>
<row><entry>Timestamp – Interval</entry><entry>Timestamp</entry></row>
<row><entry>year-month Interval + year-month Interval</entry><entry
>year-month Interval</entry></row>
<row><entry>day-time Interval + day-time Interval</entry><entry>day-time
Interval</entry></row>
<row><entry>year-month Interval – year-month Interval</entry><entry
>year-month Interval</entry></row>
<row><entry>day-time Interval – day-time Interval</entry><entry>day-time
Interval</entry></row>
<row><entry>Time – Time</entry><entry>Interval</entry></row>
<row><entry>Timestamp – Timestamp</entry><entry>Interval</entry></row>
<row><entry>Interval * Number or  Number * Interval</entry><entry
>Interval</entry></row>
<row><entry>Interval / Number</entry><entry>Interval</entry></row>
<row><entry>Interval – Interval or Interval + Interval</entry><entry
>Interval</entry></row>
</tbody>
</tgroup>
</informaltable>
<para>When using these operations, note:</para>
<itemizedlist>
<listitem><para>If you subtract a datetime value from another datetime
value, both values must have the same data type. To get this result,
use the CAST expression. For example:</para>
<programlisting>CAST (ship_timestamp AS DATE) - start_date
</programlisting>
</listitem>
<listitem><para>If you subtract a datetime value from another datetime
value, and you specify the interval qualifier, you must allow for
the maximum number of digits in the result for the precision. For
example:</para>
<programlisting>(CURRENT_TIMESTAMP - ship_timestamp) DAY(4) TO SECOND(6)
</programlisting>
</listitem>
<listitem><para>If you are updating a value that is the result of
adding or subtracting two interval values, an SQL error occurs if
the source value does not fit into the target column's range of interval
fields. For example, this expression cannot replace an INTERVAL DAY
column:</para>
<programlisting>INTERVAL '1' MONTH + INTERVAL '7' DAY
</programlisting>
</listitem>
<listitem><para>If you multiply or divide an interval value by a numeric
value expression, Trafodion SQL converts the interval value to its
least significant subfield and then multiplies or divides it by the
numeric value expression. The result has the same fields as the interval
that was multiplied or divided. For example, this expression returns
the value <literal>5-02</literal>:</para>
<programlisting>INTERVAL '2-7' YEAR TO MONTH * 2
</programlisting>
</listitem>
</itemizedlist>
</section>
<section id="i1011067">
<title>Examples of Interval Value Expressions</title>
<para>The PROJECT table consists of five columns using the data types
NUMERIC, VARCHAR, DATE, TIMESTAMP, and INTERVAL DAY. Suppose that
you have inserted values into the PROJECT table. For example:</para>
<programlisting>INSERT INTO persnl.project
VALUES (1000,'SALT LAKE CITY',DATE '2007-04-10',
        TIMESTAMP '2007-04-21:08:15:00.00',INTERVAL '15' DAY);
</programlisting>
<para>The next example uses these values in the PROJECT table: </para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="4" tgroupstyle="TI  inline table">
<tbody>
<row><entry>PROJCODE</entry><entry>START_DATE</entry><entry>SHIP_TIMESTAMP</entry>
<entry>EST_COMPLETE</entry></row>
<row><entry>1000</entry><entry>2007-04-10</entry><entry>2007-04-21:08:15:00.0000</entry>
<entry>15</entry></row>
<row><entry>2000</entry><entry>2007-06-10</entry><entry>2007-07-21:08:30:00.0000</entry>
<entry>30</entry></row>
<row><entry>2500</entry><entry>2007-10-10</entry><entry>2007-12-21:09:00:00.0000</entry>
<entry>60</entry></row>
<row><entry>3000</entry><entry>2007-08-21</entry><entry>2007-10-21:08:10:00.0000</entry>
<entry>60</entry></row>
<row><entry>4000</entry><entry>2007-09-21</entry><entry>2007-10-21:10:15:00.0000</entry>
<entry>30</entry></row>
<row><entry>5000</entry><entry>2007-09-28</entry><entry>2007-10-28:09:25:01.1111</entry>
<entry>30</entry></row>
</tbody>
</tgroup>
</informaltable>
<itemizedlist>
<listitem><para>Suppose that the CURRENT_TIMESTAMP is 2000-01-06 11:14:41.748703.
Find the number of days, hours, minutes, seconds, and fractional seconds
in the difference of the current timestamp and the SHIP_TIMESTAMP
in the PROJECT table:</para>
<programlisting>SELECT projcode, 
  (CURRENT_TIMESTAMP - ship_timestamp) DAY(4) TO SECOND(6) 
FROM samdbcat.persnl.project;

Project/Code  (EXPR)                 
------------  ---------------------  
        1000   1355 02:58:57.087086  
        2000   1264 02:43:57.087086  
        2500   1111 02:13:57.087086  
        3000   1172 03:03:57.087086  
        4000   1172 00:58:57.087086  
        5000   1165 01:48:55.975986  

--- 6 row(s) selected.
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1011132">
<title>Numeric Value Expressions</title>
<itemizedlist>
<listitem><para><xref linkend="i1011152" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1026147" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<para><indexterm><primary>Numeric value expression</primary><secondary
>syntax diagram of</secondary></indexterm>The operands of a numeric
value expression can be combined in specific ways with arithmetic
operators. In this syntax diagram, the data type of a term, factor,
or numeric primary is numeric.<indexterm><primary>Expression</primary>
<secondary>numeric value</secondary></indexterm></para>
<programlisting><replaceable>numeric-expression</replaceable> is:
     <replaceable>numeric-term</replaceable>  
   | <replaceable>numeric-expression</replaceable> + <replaceable
>numeric-term</replaceable> 
   | <replaceable>numeric-expression</replaceable> - <replaceable
>numeric-term</replaceable> 

<replaceable>numeric-term</replaceable> is:
     <replaceable>numeric-factor</replaceable>   
   | <replaceable>numeric-term</replaceable> * <replaceable>numeric-factor</replaceable
> 
   | <replaceable>numeric-term</replaceable> / <replaceable>numeric-factor</replaceable
> 

<replaceable>numeric-factor</replaceable> is:
     [+|-] <replaceable>numeric-primary</replaceable>  
   | [+|-] <replaceable>numeric-primary</replaceable> ** <replaceable
>numeric-factor</replaceable> 

<replaceable>numeric-primary</replaceable> is:
     <replaceable>unsigned-numeric-literal</replaceable> 
   | <replaceable>column-reference</replaceable> 
   | <replaceable>numeric-type-host-variable
</replaceable>   | <replaceable>dynamic parameter
</replaceable>   | <replaceable>numeric-value-function</replaceable
>   
   | <replaceable>aggregate-function</replaceable> 
   | <replaceable>sequence-function 
</replaceable>   | <replaceable>scalar-subquery</replaceable>   
   | <replaceable>CASE-expression</replaceable>   
   | <replaceable>CAST-expression</replaceable>  
   | (<replaceable>numeric-expression</replaceable>)  
<literal condition="hidden">   | <replaceable>OLAP-window-function</replaceable
>
</literal></programlisting>
<para>As shown in the preceding syntax diagram, numeric value expressions
are built from operands that can be:</para>
<itemizedlist>
<listitem><para>Numeric literals</para></listitem>
<listitem><para>Column references with numeric values</para></listitem>
<listitem><para>Dynamic parameters</para></listitem>
<listitem><para>Numeric value functions</para></listitem>
<listitem condition="hidden"><para>OLAP window functions</para>
</listitem>
<listitem><para>Aggregate functions, sequence functions, scalar subqueries,
CASE expressions, or CAST expressions that return numeric values</para>
</listitem>
</itemizedlist>
<section id="i1011152">
<title>Considerations for Numeric Value Expressions</title>
<bridgehead>Order of Evaluation</bridgehead>
<procedure>
<step><para>Expressions within parentheses<indexterm><primary>Numeric
value expression</primary><secondary>evaluation order</secondary>
</indexterm></para></step>
<step><para>Unary operators</para></step>
<step><para>Exponentiation</para></step>
<step><para>Multiplication and division</para></step>
<step><para>Addition and subtraction</para></step>
</procedure>
<para>Operators at the same level are evaluated from left to right
for all operators except exponentiation. Exponentiation operators
at the same level are evaluated from right to left. For example, X
+ Y + Z is evaluated as (X + Y) + Z, whereas X ** Y ** Z is evaluated
as X ** (Y ** Z).</para>
<bridgehead>Additional Rules for Arithmetic Operations</bridgehead>
<para>Numeric expressions are evaluated according to these additional
rules:</para>
<itemizedlist>
<listitem><para>An expression with a numeric operator evaluates to
null if any of the operands is null.</para></listitem>
<listitem><para>Dividing by 0 causes an error.</para></listitem>
<listitem><para>Exponentiation is allowed only with numeric data types.
If the first operand is 0 (zero), the second operand must be greater
than 0, and the result is 0. If the second operand is 0, the first
operand cannot be 0, and the result is 1. If the first operand is
negative, the second operand must be a value with an exact numeric
data type and a scale of zero.</para></listitem>
<listitem><para>Exponentiation is subject to rounding error. In general,
results of exponentiation should be considered approximate.</para>
</listitem>
</itemizedlist>
<bridgehead>Precision, Magnitude, and Scale of Arithmetic Results</bridgehead>
<para><indexterm><primary>Scale</primary></indexterm>The precision,
magnitude, and scale are computed during the evaluation of an arithmetic
expression<indexterm><primary>Magnitude</primary></indexterm>. Precision
is the maximum number of digits in the expression<indexterm><primary
>Precision, description of</primary></indexterm>. Magnitude is the
number of digits to the left of the decimal point. Scale is the number
of digits to the right of the decimal point.</para>
<para>For example, a column declared as NUMERIC (18, 5) has a precision
of 18, a magnitude of 13, and a scale of 5. As another example, the
literal 12345.6789 has a precision of 9, a magnitude of 5, and a scale
of 4.</para>
<para>The maximum precision for exact numeric data types is 128 digits.
The maximum precision for the REAL data type is approximately 7 decimal
digits, and the maximum precision for the DOUBLE PRECISION data type
is approximately 16 digits.</para>
<para>When Trafodion SQL encounters an arithmetic operator in an expression,
it applies these rules (with the restriction that if the precision
becomes greater than 18, the resulting precision is set to 18 and
the resulting scale is the maximum of 0 and (18- (<replaceable>resulted
precision</replaceable> - <replaceable>resulted scale</replaceable
>)).</para>
<itemizedlist>
<listitem><para>If the operator is + or -, the resulting scale is
the maximum of the scales of the operands. The resulting precision
is the maximum of the magnitudes of the operands, plus the scale of
the result, plus 1.</para></listitem>
<listitem><para>If the operator is *, the resulting scale is the sum
of the scales of the operands. The resulting precision is the sum
of the magnitudes of the operands and the scale of the result.</para>
</listitem>
<listitem><para>If the operator is /, the resulting scale is the sum
of the scale of the numerator and the magnitude of the denominator.
The resulting magnitude is the sum of the magnitude of the numerator
and the scale of the denominator. </para></listitem>
</itemizedlist>
<para>For example, if the numerator is NUMERIC (7, 3) and the denominator
is NUMERIC (7, 5), the resulting scale is 3 plus 2 (or 5), and the
resulting magnitude is 4 plus 5 (or 9). The expression result is NUMERIC
(14, 5).</para>
<bridgehead>Conversion of Numeric Types for Arithmetic Operations</bridgehead>
<para>Trafodion SQL automatically converts between floating-point
numeric types (REAL and DOUBLE PRECISION) and other numeric types.
All numeric values in the expression are first converted to binary,
with the maximum precision needed anywhere in the evaluation. </para>
</section>
<section id="i1026147">
<title>Examples of Numeric Value Expressions</title>
<para><indexterm><primary>Numeric value expression</primary><secondary
>examples of</secondary></indexterm>These are examples of numeric
value expressions:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<tbody>
<row><entry><literal>-57</literal></entry><entry>Numeric literal.</entry>
</row>
<row><entry><literal>salary * 1.10</literal></entry><entry>The product
of the values in the SALARY column and a numeric literal.</entry></row>
<row><entry><literal>unit_price * qty_ordered</literal></entry><entry
>The product of the values in the UNIT_PRICE and QTY_ORDERED columns.</entry>
</row>
<row><entry><literal>12 * (7 - 4)</literal></entry><entry>An expression
whose operands are numeric literals.</entry></row>
<row><entry><literal>COUNT (DISTINCT city)</literal></entry><entry
>Function applied to the values in a column.</entry></row>
</tbody>
</tgroup>
</informaltable>
</section>
</section>
</section>
<section id="i1032512" pagebreak="yes">
<title>Identifiers</title>
<indexterm><primary>Identifiers</primary></indexterm>
<para>SQL identifiers are names used to identify tables, views, columns,
and other SQL entities. The two types of identifiers are regular and
delimited. A delimited identifier is enclosed in double quotes (<literal
>"</literal>). <phrase>Case-insensitive delimited identifiers are
used only for usernames and role names. </phrase>Either regular, delimited,
or case-sensitive delimited identifiers can contain up to 128 characters.</para>
<section id="RegularIdentifiers">
<title>Regular Identifiers</title>
<para>Regular identifiers begin with a letter (A through Z and a through
z), but can also contain digits (0 through 9) or underscore characters
(_). Regular identifiers are not case‑sensitive. You cannot use a
reserved word as a regular identifier.</para>
</section>
<section id="DelimitedIdentifiers">
<title>Delimited Identifiers</title>
<indexterm><primary>Delimited identifiers</primary></indexterm>
<para>Delimited identifiers are character strings that appear within
double quote characters (<literal>"</literal>) and consist of alphanumeric
characters, including the underscore character (_) or a dash (-).
Unlike regular identifiers, delimited identifiers are case-sensitive.
Trafodion SQL does not support spaces or special characters in delimited
identifiers given the constraints of the underlying HBase filesystem.
You can use reserved words as delimited identifiers.</para>
</section>
<section id="csDelimitedIdentifier">
<title>Case-Insensitive Delimited Identifiers</title>
<para>Case-insensitive delimited identifiers, which are used for usernames
and roles, are character strings that appear within double quote characters
(") and consist of alphanumeric characters (A through Z and a through
z), digits (0 through 9), underscores (_), dashes (-), periods (.),
at symbols (@), and forward slashes (/), except for the leading at
sign (@) or leading forward slash (/) character.</para>
<para>Unlike other delimited identifiers, case-insensitive-delimited
identifiers are case-insensitive. Identifiers are up-shifted before
being inserted into the SQL metadata. Thus, whether you specify a
user's name as <literal>"Penelope.Quan@hp.com"</literal>, <literal
>"PENELOPE.QUAN@hp.com"</literal>, or <literal>"penelope.quan@hp.com"</literal
>, the value stored in the metadata will be the same: <literal>PENELOPE.QUAN@HP.COM</literal
>.</para>
<para>You can use reserved words as case-insensitive delimited identifiers.</para>
</section>
<section id="i1011246">
<title>Examples of Identifiers</title>
<itemizedlist>
<listitem><para>These are regular identifiers:</para>
<programlisting>mytable
SALES2006
Employee_Benefits_Selections
CUSTOMER_BILLING_INFORMATION
</programlisting>
<para>Because regular identifiers are case insensitive, SQL treats
all these identifiers as alternative representations of <literal>mytable</literal
>:</para>
<programlisting>mytable        MYTABLE        MyTable        mYtAbLe
</programlisting>
</listitem>
<listitem><para>These are delimited identifiers:</para>
<programlisting>"mytable"
"table"
"CUSTOMER-BILLING-INFORMATION"
</programlisting>
<para>Because delimited identifiers are case-sensitive, SQL treats
the identifier <literal>"mytable"</literal> as different from the
identifiers <literal>"MYTABLE"</literal> or <literal>"MyTable"</literal
>. <phrase condition="hidden">Trailing spaces in a delimited identifier
are truncated. For example, <literal>"mytable   "</literal> is equivalent
to <literal>"mytable"</literal>. </phrase></para>
<para>You can use reserved words as delimited identifiers. For example, <literal
>table</literal> is not allowed as a regular identifier, but <literal
>"table"</literal> is allowed as a delimited identifier.</para>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1017920" pagebreak="yes">
<title>Indexes</title>
<indexterm><primary>Indexes</primary><secondary>description of</secondary>
</indexterm>
<para>An index is an ordered set of pointers to rows of a table. Each
index is based on the values in one or more columns. Indexes are transparent
to DML syntax.</para>
<para>A one-to-one correspondence always exists between index rows
and base table rows. </para>
<section>
<title>SQL Indexes</title>
<para>Each row in a Trafodion SQL index contains: </para>
<itemizedlist>
<listitem><para>The columns specified in the CREATE INDEX statement</para>
</listitem>
<listitem><para>The clustering key of the underlying table (the user-defined
clustering key)</para></listitem>
</itemizedlist>
<para>An index name is an SQL identifier. Indexes have their own namespace
within a schema, so an index name might be the same as a table or
constraint name. However, no two indexes in a schema can have the
same name.</para>
<para>See <xref linkend="i1075725" role="select:quotedtitle page"
/>.</para>
</section>
</section>
<section id="i1017925" pagebreak="yes">
<title>Keys</title>
<para>Trafodion SQL supports these types of keys:</para>
<itemizedlist>
<listitem><para><xref linkend="i1023308" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="syskey" role="select:quotedtitle"/></para>
</listitem>
<listitem><para><xref linkend="i1042705" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1023323" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<section id="i1023308">
<title>Clustering Keys</title>
<para><indexterm><primary>Clustering key</primary><secondary>description
of</secondary></indexterm> Every table has a clustering key, which
is the set of columns that determine the order of the rows on disk.
Trafodion SQL organizes records of a table or index by using a b-tree
based on this clustering key. Therefore, the values of the clustering
key act as logical row-ids. <indexterm><primary>Keys</primary>
<secondary>clustering</secondary></indexterm></para>
</section>
<section id="syskey">
<title>SYSKEY</title>
<indexterm><primary>Keys</primary><secondary>SYSKEY</secondary>
</indexterm><indexterm><primary>SYSKEY</primary><secondary>system-defined
clustering key</secondary></indexterm>
<para>When the STORE BY clause is specified with the <replaceable
>key-column-list</replaceable> clause, an additional column is <phrase
>appended</phrase> to the <replaceable>key-column-list</replaceable
> called the SYSKEY.</para>
<para>A SYSKEY (or system-defined clustering key) is a clustering
key column which is defined by Trafodion SQL rather than by the user.
Its type is LARGEINT SIGNED. When you insert a record in a table,
Trafodion SQL automatically generates a value for the SYSKEY column.
You cannot supply the value.</para>
<para>You cannot specify a SYSKEY at insert time and you cannot update
it after it has been generated. To see the value of the generated
SYSKEY, include the SYSKEY column in the select list:<programlisting
>SELECT *, SYSKEY FROM t4;</programlisting></para>
</section>
<section id="i1042705">
<title>Index Keys</title>
<para><indexterm><primary>Keys</primary><secondary>index</secondary>
</indexterm>A one-to-one correspondence always exists between index
rows and base table rows<indexterm><primary>Index keys</primary>
</indexterm>.</para>
<para>Each row in a Trafodion SQL index contains:</para>
<itemizedlist>
<listitem><para>The columns specified in the CREATE INDEX statement</para>
</listitem>
<listitem><para>The clustering (primary) key of the underlying table
(the user-defined clustering key)</para></listitem>
</itemizedlist>
<para condition="hidden">For a unique index, the clustering key of
the index is composed of the first of these items. The clustering
key of the index cannot exceed 2048 bytes, but the entire row (including
the clustering key of the index) can contain up to 4K bytes.</para>
<para>For a nonunique index, the clustering key of the index is composed
of both items. The clustering key cannot exceed 2048 bytes. Because
the clustering key includes all the columns in the table, each row
is also limited to 2048 bytes.</para>
<para>For varying-length character columns, the length referred to
in these byte limits is the defined column length, not the stored
length. (The stored length is the expanded length, which includes
two extra bytes for storing the data length of the item.)</para>
<para>See <xref linkend="i1075725" role="select:quotedtitle page"
/>.</para>
</section>
<section id="i1023323">
<title>Primary Keys</title>
<para><indexterm><primary>Keys</primary><secondary>primary</secondary>
</indexterm>A primary key is the column or set of columns that define
the uniqueness constraint for a table. The columns cannot contain
nulls, and only one primary key constraint can exist on a table<indexterm>
<primary>Primary key, description of</primary></indexterm>.</para>
</section>
</section>
<section id="i1018360" pagebreak="yes">
<title>Literals</title>
<para>A <indexterm><primary>Literals</primary><secondary>examples
of</secondary></indexterm>literal is a constant you can use in an
expression, in a statement, or as a parameter value<indexterm><primary
>Literals</primary><secondary>description of</secondary></indexterm
>. An SQL literal can be one of these data types: </para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<tbody>
<row><entry><xref linkend="i1011528" role="select:quotedtitle page"
/></entry><entry>A series of characters enclosed in single quotes.
 Example: <literal>'Planning'</literal></entry></row>
<row><entry><xref linkend="i1011631" role="select:quotedtitle page"
/></entry><entry>Begins with keyword DATE, TIME, or TIMESTAMP and
followed by a character string.  Example: <literal>DATE '1990-01-22'</literal
></entry></row>
<row><entry><xref linkend="i1011733" role="select:quotedtitle page"
/></entry><entry>Begins with keyword INTERVAL and followed by a character
string and an interval qualifier.  Example: <literal>INTERVAL '2-7'
YEAR TO MONTH</literal></entry></row>
<row><entry><xref linkend="i1039040" role="select:quotedtitle page"
/></entry><entry>A simple numeric literal (one without an exponent)
or a numeric literal in scientific notation. Example: <literal>99E-2</literal
></entry></row>
</tbody>
</tgroup>
</informaltable>
<section id="i1011528">
<title>Character String Literals</title>
<itemizedlist>
<listitem><para><xref linkend="i1011561" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1011602" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>String literals</primary></indexterm><indexterm>
<primary>Character string literals</primary></indexterm>
<para>A character string literal is a series of characters enclosed
in single quotes. </para>
<para>You can specify either a string of characters or a set of hexadecimal
code values representing the characters in the string.</para>
<programlisting>[_<replaceable>character-set</replaceable> | N]<replaceable
>'string'</replaceable> 
| [_<replaceable>character-set</replaceable> | N] X'<replaceable>hex-code-value</replaceable
>... '
| [_<replaceable>character-set</replaceable> | N] X'[<replaceable
>space</replaceable>...]<replaceable>hex-code-value</replaceable>[[<replaceable
>space</replaceable>...]<replaceable>hex-code-value</replaceable>...][<replaceable
>space</replaceable>...]'</programlisting>
<variablelist>
<varlistentry><term>_<replaceable>character-set</replaceable> </term>
<listitem><para>specifies the character set ISO88591 or UTF8. The <literal
>_<replaceable>character-set</replaceable></literal> specification
of the string literal should correspond with the character set of
the column definition, which is either ISO88591 or UTF8. If you omit
the <literal>_</literal>character-set specification, Trafodion SQL
initially assumes the ISO88591 character set if the string literal
consists entirely of 7-bit ASCII characters and <phrase>UTF8</phrase
> otherwise. (However, the initial assumption will later be changed
if the string literal is used in a context that requires a character
set different from the initial assumption.)</para></listitem>
</varlistentry>
<varlistentry><term>N </term>
<!--WRITER'S NOTE: Check if this is true concerning UTF8.-->
<listitem><indexterm><primary>Character sets</primary><secondary>setting
default</secondary></indexterm><para>associates the string literal
with the character set of the NATIONAL CHARACTER (NCHAR) data type.
The character set for NCHAR is determined during the installation
of Trafodion SQL. This value can be either <phrase>UTF8</phrase> (the
default) or ISO88591.</para></listitem>
</varlistentry>
<varlistentry><term>'<replaceable>string</replaceable>' </term>
<listitem><para>is a series of any input characters enclosed in single
quotes. A single quote within a string is represented by two single
quotes (''). A string can have a length of zero if you specify two
single quotes ('') without a space in between.</para></listitem>
</varlistentry>
</variablelist>
<variablelist>
<varlistentry><term>X</term>
<listitem><para>indicates the hexadecimal string.</para></listitem>
</varlistentry>
<varlistentry><term>'<replaceable>hex-code-value</replaceable>' </term>
<listitem><para>represents the code value of a character in hexadecimal
form enclosed in single quotes. It must contain an even number of
hexadecimal digits. <phrase condition="hidden">For UCS2, each hex-code-value
must be of four hexadecimal digits long. </phrase>For ISO88591, each
value must be two digits long. For UTF8, each value can be 2, 4, 6,
or 8 hexadecimal digits long. If <replaceable>hex-code-value</replaceable
> is improperly formatted (for example, it contains an invalid hexadecimal
digit or an odd number of hexadecimal digits), an error is returned.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>space</replaceable></term>
<listitem><para>is space sequences that can be added before or after <replaceable
>hex-code-value</replaceable> for readability. The encoding for <replaceable
>space</replaceable> must be the TERMINAL_CHARSET for an interactive
interface and the SQL module character set for the programmatic interface.</para>
</listitem>
</varlistentry>
</variablelist>
<section id="i1011561">
<title>Considerations for Character String Literals</title>
<para><emphasis role="bold">Using String Literals</emphasis></para>
<para>A string literal can be as long as a character column. See <xref
linkend="i1010251" role="select:quotedtitle page"/>. </para>
<para>You can also use string literals in string value expressions—for
example, in expressions that use the concatenation operator (||) or
in expressions that use functions returning string values. </para>
<para>When specifying string literals: <itemizedlist>
<listitem><para>Do not put a space between the character set qualifier
and the character string literal. If you use this character string
literal in a statement, Trafodion SQL returns an error.</para>
</listitem>
<listitem><para>To specify a single quotation mark within a string
literal, use two consecutive single quotation marks.</para></listitem>
<listitem><para>To specify a string literal whose length is more than
one line, separate the literal into several smaller string literals,
and use the concatenation operator (||) to concatenate them.</para>
</listitem>
<listitem><para>Case is significant in string literals. Lowercase
letters are not equivalent to the corresponding uppercase letters. </para>
</listitem>
<listitem><para>Leading and trailing spaces within a string literal
are significant.</para></listitem>
<listitem><para>Alternately, a string whose length is more than one
line can be written as a literal followed by a space, CR, or tab character,
followed by another string literal.</para></listitem>
</itemizedlist></para>
</section>
<section id="i1011602">
<title>Examples of Character String Literals</title>
<itemizedlist>
<listitem><para>These data type column specifications are shown with
examples of literals that can be stored in the columns. </para>
<informaltable frame="topbot">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="col4"/>
<thead>
<row rowsep="1" valign="bottom"><entry align="left" valign="bottom"
>Character String Data Type</entry><entry align="left" valign="bottom"
>Character String Literal Example</entry></row>
</thead>
<tbody>
<row><entry>CHAR (12) UPSHIFT</entry><entry>'PLANNING'</entry></row>
<row><entry>VARCHAR (18)</entry><entry>'NEW YORK'</entry></row>
</tbody>
</tgroup>
</informaltable>
</listitem>
<listitem><para>These are string literals:<programlisting>'This is a string literal.'
'abc^&amp;*'
'1234.56'
'This literal contains '' a single quotation mark.'</programlisting
></para></listitem>
<listitem><para>This is a string literal concatenated over three lines:<programlisting
>'This literal is' ||
' in three parts,' ||
'specified over three lines.'</programlisting></para></listitem>
<listitem><para>This is a hexadecimal string literal representing
the VARCHAR pattern of the ISO88591 string 'Strauß':<programlisting
>_ISO88591 X'53 74 72 61 75 DF'</programlisting></para></listitem>
</itemizedlist>
</section>
</section>
<section id="i1011631">
<title>Datetime Literals</title>
<itemizedlist>
<listitem><para><xref linkend="i1011723" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<para>A datetime literal is a DATE, TIME, or TIMESTAMP constant you
can use in an expression, in a statement, or as a parameter value.
Datetime literals have the same range of valid values as the corresponding
datetime data types. You cannot use leading or trailing spaces within
a datetime string (within the single quotes)<indexterm><primary>Datetime
literals</primary><secondary>description of</secondary></indexterm
>.</para>
<para>A datetime literal begins with the <literal>DATE</literal>, <literal
>TIME</literal>, or <literal>TIMESTAMP</literal> keyword and can appear
in default, USA, or European format.</para>
<programlisting>DATE '<replaceable>date</replaceable>' | TIME '<replaceable
>time</replaceable>' | TIMESTAMP '<replaceable>timestamp</replaceable
>'

<replaceable>date</replaceable> is:
     yyyy-mm-dd                            Default 
   | mm/dd/yyyy                            USA 
   | dd.mm.yyyy                            European 

<replaceable>time</replaceable> is:
     hh:mm:ss.msssss                       Default 
   | hh:mm:ss.msssss [am | pm]             USA 
   | hh.mm.ss.msssss                       European 

<replaceable>timestamp</replaceable> is:
     yyyy-mm-dd hh:mm:ss.msssss            Default 
   | mm/dd/yyyy hh:mm:ss.msssss [am | pm]  USA 
   | dd.mm.yyyy hh.mm.ss.msssss            European 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>date,time,timestamp</replaceable
> </term>
<listitem><para>specify the datetime literal strings whose component
fields are:   </para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL1  desc list">
<tbody>
<row><entry><literal>yyyy</literal></entry><entry>Year, from 0001
to 9999</entry></row>
<row><entry><literal>mm</literal></entry><entry>Month, from 01 to
12</entry></row>
<row><entry><literal>dd</literal></entry><entry>Day, from 01 to 31</entry>
</row>
<row><entry><literal>hh</literal></entry><entry>Hour, from 00 to 23</entry>
</row>
<row><entry><literal>mm</literal></entry><entry>Minute, from 00 to
59</entry></row>
<row><entry><literal>ss</literal></entry><entry>Second, from 00 to
59</entry></row>
<row><entry><literal>msssss</literal></entry><entry>Microsecond, from
000000 to 999999</entry></row>
<row><entry><literal>am</literal></entry><entry>AM or am, indicating
time from midnight to before noon</entry></row>
<row><entry><literal>pm</literal></entry><entry>PM or pm, indicating
time from noon to before midnight</entry></row>
</tbody>
</tgroup>
</informaltable>
</listitem>
</varlistentry>
</variablelist>
<section id="i1011723">
<title>Examples of Datetime Literals</title>
<itemizedlist>
<listitem><para><indexterm><primary>Literals</primary><secondary>datetime,
examples of</secondary></indexterm>These are DATE literals in default<indexterm>
<primary>Data types</primary><secondary>literals, examples of</secondary>
<tertiary>datetime literals</tertiary></indexterm>, USA, and European
formats, respectively<indexterm><primary>Datetime data types</primary>
<secondary>examples of literals</secondary></indexterm>:</para>
<programlisting>DATE '2008-01-22'
DATE '01/22/2008'
DATE '22.01.2008'</programlisting>
</listitem>
<listitem><para>These are TIME literals in default, USA, and European
formats, respectively:</para>
<programlisting>TIME '13:40:05'
TIME '01:40:05 PM'
TIME '13.40.05'
</programlisting>
</listitem>
<listitem><para>These are TIMESTAMP literals in default, USA, and
European formats, respectively:</para>
<programlisting>TIMESTAMP '2008-01-22 13:40:05'
TIMESTAMP '01/22/2008 01:40:05 PM'
TIMESTAMP '22.01.2008 13.40.05'
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1011733" pagebreak="yes">
<title>Interval Literals</title>
<itemizedlist>
<listitem><para><xref linkend="i1011803" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1039007" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<para>An interval literal is a constant of data type INTERVAL that
represents a positive or negative duration of time as a year-month
or day-time interval; it begins with the keyword INTERVAL optionally
preceded or followed by a minus sign (for negative duration). You
cannot include leading or trailing spaces within an interval string
(within single quotes)<indexterm><primary>Interval literals</primary>
<secondary>description of</secondary></indexterm>.</para>
<programlisting>[-]INTERVAL [-]{'<replaceable>year-month</replaceable
>' | '<replaceable>day:time</replaceable>'} <replaceable>interval-qualifier</replaceable
> 

<replaceable>year-month</replaceable> is: 
   <replaceable>years</replaceable> [-<replaceable>months</replaceable
>] | <replaceable>months</replaceable> 

<replaceable>day:time</replaceable> is: 
     <replaceable>days</replaceable> [[:]<replaceable>hours</replaceable
> [:<replaceable>minutes</replaceable> [:<replaceable>seconds</replaceable
> [.<replaceable>fraction</replaceable>]]]]
   | <replaceable>hours</replaceable> [:<replaceable>minutes</replaceable
> [:<replaceable>seconds</replaceable> [.<replaceable>fraction</replaceable
>]]]
   | <replaceable>minutes</replaceable> [:<replaceable>seconds</replaceable
> [.<replaceable>fraction</replaceable>]]
   | <replaceable>seconds</replaceable> [.<replaceable>fraction</replaceable
>]

<replaceable>interval-qualifier</replaceable> is: 
   <replaceable>start-field</replaceable> TO <replaceable>end-field</replaceable
> | <replaceable>single-field</replaceable>  

<replaceable>start-field</replaceable> is: 
   {YEAR | MONTH | DAY | HOUR | MINUTE} [(<replaceable>leading-precision</replaceable
>)] 

<replaceable>end-field</replaceable> is: 
   YEAR | MONTH | DAY | HOUR | MINUTE | SECOND [(<replaceable>fractional-precision</replaceable
>)] 

<replaceable>single-field</replaceable> is: 
   <replaceable>start-field</replaceable> | SECOND [(<replaceable
>leading-precision</replaceable>,<replaceable>fractional-precision</replaceable
>)] 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>start-field</replaceable> TO <replaceable
>end-field</replaceable>  </term>
<listitem><para>must be year-month or day-time.The <replaceable>start-field</replaceable
> you specify must precede the <replaceable>end-field</replaceable
> you specify in the list of field names. </para>
<variablelist>
<varlistentry><term>{YEAR | MONTH | DAY | HOUR | MINUTE} [(<replaceable
>leading-precision</replaceable>)]</term>
<listitem><para>specifies the <replaceable>start-field</replaceable
>. A <replaceable>start-field</replaceable> can have a <replaceable
>leading-precision</replaceable> up to 18 digits (the maximum depends
on the number of fields in the interval). The <replaceable>leading-precision</replaceable
> is the number of digits allowed in the <replaceable>start-field</replaceable
>. The default for <replaceable>leading-precision</replaceable> is
2.</para></listitem>
</varlistentry>
<varlistentry><term>YEAR | MONTH | DAY | HOUR | MINUTE | SECOND [(<replaceable
>fractional-precision</replaceable>)]</term>
<listitem><para>specifies the <replaceable>end-field</replaceable
>. If the <replaceable>end-field</replaceable> is <literal>SECOND</literal
>, it can have a<replaceable> fractional-precision</replaceable> up
to 6 digits. The <replaceable>fractional-precision</replaceable> is
the number of digits of precision after the decimal point. The default
for <replaceable>fractional-precision</replaceable> is 6.</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>start-field</replaceable> | SECOND
[(<replaceable>leading-precision</replaceable>, <replaceable>fractional-precision</replaceable
>)] </term>
<listitem><para>specifies the <replaceable>single-field</replaceable
>. If the <replaceable>single-field</replaceable> is <literal>SECOND</literal
>, the <replaceable>leading-precision</replaceable> is the number
of digits of precision before the decimal point, and the <replaceable
>fractional-precision</replaceable> is the number of digits of precision
after the decimal point.</para><para>The default for <replaceable
>leading-precision</replaceable> is 2, and the default for <replaceable
>fractional-precision</replaceable> is 6. The maximum for <replaceable
>leading-precision</replaceable> is 18, and the maximum for <replaceable
>fractional-precision</replaceable> is 6.</para>
</listitem>
</varlistentry>
</variablelist>
<para>See <xref linkend="i1041657" role="select:quotedtitle page"
/> and <xref linkend="i1010948" role="select:quotedtitle page"/>.</para>
<variablelist>
<varlistentry><term>'<replaceable>year-month</replaceable>' | '<replaceable
>day:time</replaceable>' </term>
<listitem><para>specifies the date and time components of an interval
literal. The day and hour fields can be separated by a space or a
colon. The interval literal strings are: </para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL1  desc list">
<tbody>
<row><entry><replaceable>years</replaceable></entry><entry>Unsigned
integer that specifies a number of years. <replaceable>years</replaceable
> can be up to 18 digits, or 16 digits if <replaceable>months</replaceable
> is the end-field. The maximum for the <replaceable>leading-precision</replaceable
> is specified within the interval qualifier by either YEAR(18) or
YEAR(16) TO MONTH.</entry></row>
<row><entry><replaceable>months</replaceable></entry><entry>Unsigned
integer that specifies a number of months. Used as a starting field, <replaceable
>months</replaceable> can have up to 18 digits. The maximum for the <replaceable
>leading-precision</replaceable> is specified by MONTH(18). Used as
an ending field, the value of <replaceable>months</replaceable> must
be in the range 0 to 11.</entry></row>
<row><entry><replaceable>days</replaceable></entry><entry>Unsigned
integer that specifies number of days. <replaceable>days</replaceable
> can have up to 18 digits if no end-field exists; 16 digits if <replaceable
>hours</replaceable> is the end-field; 14 digits if <replaceable>minutes</replaceable
> is the end-field; and 13-<replaceable>f</replaceable> digits if <replaceable
>seconds</replaceable> is the end-field, where f is the <replaceable
>fraction</replaceable> less than or equal to 6. These maximums are
specified by DAY(18), DAY(16) TO HOUR, DAY(14) TO MINUTE, and DAY(13-<replaceable
>f</replaceable>) TO SECOND(<replaceable>f</replaceable>).</entry></row>
<row><entry><replaceable>hours</replaceable></entry><entry>Unsigned
integer that specifies a number of hours. Used as a starting field, <replaceable
>hours</replaceable> can have up to 18 digits if no end-field exists;
16 digits if <replaceable>minutes</replaceable> is the end-field;
and 14-<replaceable>f</replaceable> digits if <replaceable>seconds</replaceable
> is the end-field, where f is the <replaceable>fraction</replaceable
> less than or equal to 6. These maximums are specified by HOUR(18),
HOUR(16) TO MINUTE, and HOUR(14-f) TO SECOND(<replaceable>f</replaceable
>). Used as an ending field, the value of <replaceable>hours</replaceable
> must be in the range 0 to 23.</entry></row>
<row><entry><replaceable>minutes</replaceable></entry><entry>Unsigned
integer that specifies a number of minutes. Used as a starting field, <replaceable
>minutes</replaceable> can have up to 18 digits if no end-field exists;
and 16-f digits if <replaceable>seconds</replaceable> is the end-field,
where <replaceable>f</replaceable> is the <replaceable>fraction</replaceable
> less than or equal to 6. These maximums are specified by MINUTE(18),
and MINUTE(16-<replaceable>f</replaceable>) TO SECOND(<replaceable
>f</replaceable>). Used as an ending field, the value of <replaceable
>minutes</replaceable> must be in the range 0 to 59.</entry></row>
<row><entry><replaceable>seconds</replaceable></entry><entry>Unsigned
integer that specifies a number of seconds. Used as a starting field, <replaceable
>seconds</replaceable> can have up to 18 digits, minus the number
of digits f in the <replaceable>fraction</replaceable> less than or
equal to 6. This maximum is specified by SECOND(18-<replaceable>f</replaceable
>, <replaceable>f</replaceable>). The value of <replaceable>seconds</replaceable
> must be in the range 0 to 59.9(<replaceable>n</replaceable>), where <replaceable
>n</replaceable> is the number of digits specified for seconds precision.</entry>
</row>
<row><entry><replaceable>fraction</replaceable></entry><entry>Unsigned
integer that specifies a fraction of a second. When <replaceable>seconds</replaceable
> is used as an ending field, <replaceable>fraction</replaceable> is
limited to the number of digits specified by the <replaceable>fractional-precision</replaceable
> field following the SECOND keyword.</entry></row>
</tbody>
</tgroup>
</informaltable>
</listitem>
</varlistentry>
</variablelist>
<section id="i1011803">
<title>Considerations for Interval Literals</title>
<para><emphasis role="bold">Length of Year-Month and Day-Time Strings</emphasis
></para>
<para>An interval literal can contain a maximum of 18 digits, in the
string following the INTERVAL keyword, plus a hyphen (-) that separates
the year-month fields, and colons (:) that separate the day-time fields.
You can also separate day and hour with a space.</para>
</section>
<section id="i1039007">
<title>Examples of Interval Literals</title>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<tbody>
<row><entry><literal>INTERVAL '1' MONTH</literal><indexterm><primary
>Interval literals</primary><secondary>examples of</secondary>
</indexterm> </entry><entry>Interval of 1 month<indexterm><primary
>Interval literals</primary><secondary>examples of </secondary>
</indexterm></entry></row>
<row><entry><literal>INTERVAL '7' DAY </literal></entry><entry>Interval
of 7 days<indexterm><primary>Literals</primary><secondary>interval,
examples of</secondary></indexterm></entry></row>
<row><entry><literal>INTERVAL '2-7' YEAR TO MONTH</literal></entry>
<entry>Interval of 2 years, 7 months<indexterm><primary>Data types</primary>
<secondary>literals, examples of</secondary><tertiary>interval literals</tertiary>
</indexterm></entry></row>
<row><entry><literal>INTERVAL '5:2:15:36.33' DAY TO SECOND(2)</literal
></entry><entry>Interval of 5 days, 2 hours, 15 minutes, and 36.33
seconds </entry></row>
<row><entry><literal>INTERVAL - '5' DAY</literal></entry><entry>Interval
that subtracts 5 days </entry></row>
<row><entry><literal>INTERVAL '100' DAY(3)</literal></entry><entry
>Interval of 100 days. This example requires an explicit leading precision
of 3 because the default is 2.</entry></row>
<row><entry><literal>INTERVAL '364 23' DAY(3) TO HOUR</literal></entry>
<entry>Interval of 364 days, 23 hours. The separator for the day and
hour fields can be a space or a colon.</entry></row>
</tbody>
</tgroup>
</informaltable>
</section>
</section>
<section id="i1039040">
<title>Numeric Literals</title>
<para>A numeric literal represents a numeric value. Numeric literals
can be represented as an exact numeric literal (without an exponent)
or as an approximate numeric literal by using scientific notation
(with an exponent). </para>
<programlisting><replaceable>exact-numeric-literal</replaceable> is: 
     [+|-]<replaceable>unsigned-integer</replaceable>[.[<replaceable
>unsigned-integer</replaceable>]] 
   | [+|-].<replaceable>unsigned-integer</replaceable>  

<replaceable>approximate-numeric-literal</replaceable> is: 
   <replaceable>mantissa</replaceable>{E|e}<replaceable>exponent</replaceable
> 

<replaceable>mantissa</replaceable> is: 
   <replaceable>exact-numeric-literal</replaceable> 

<replaceable>exponent</replaceable> is: 
   [+|-]<replaceable>unsigned-integer</replaceable>  

<replaceable>unsigned-integer</replaceable> is: 
   <replaceable>digit</replaceable>...
</programlisting>
<variablelist>
<varlistentry><term><indexterm><primary>Numeric literals</primary>
<secondary>exact</secondary></indexterm><replaceable>exact-numeric-literal</replaceable
> </term>
<listitem><para>is an exact numeric value that includes an optional
plus sign (+) or minus sign (-), up to 128 digits (0 through 9), and
an optional period (.) that indicates a decimal point. Leading zeros
do not count toward the 128-digit limit; trailing zeros do. </para>
<para>A numeric literal without a sign is a positive number. An exact
numeric literal that does not include a decimal point is an integer.
Every exact numeric literal has the data type NUMERIC and the minimum
precision required to represent its value.</para>
</listitem>
</varlistentry>
<varlistentry><term><indexterm><primary>Numeric literals</primary>
<secondary>approximate</secondary></indexterm><replaceable>approximate-numeric-literal</replaceable
> </term>
<listitem><para>is an exact numeric literal followed by an exponent
expressed as an uppercase E or lowercase e followed by an optionally
signed integer.</para><para>Numeric values expressed in scientific
notation are treated as data type REAL if they include no more than
seven digits before the exponent, but treated as type DOUBLE PRECISION
if they include eight or more digits. Because of this factor, trailing
zeros after a decimal can sometimes increase the precision of a numeric
literal used as a DOUBLE PRECISION value. </para>
<para>For example, if XYZ is a table that consists of one DOUBLE PRECISION
column, the inserted value:</para>
<programlisting>INSERT INTO XYZ VALUES (1.00000000E-10)
</programlisting>
<para>has more precision than:</para>
<programlisting>INSERT INTO XYZ VALUES (1.0E-10)
</programlisting>
</listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of Numeric Literals</title>
<para><indexterm><primary>Numeric data types</primary><secondary>literals,
examples of</secondary></indexterm>These<indexterm><primary>Data types</primary>
<secondary>literals, examples of</secondary><tertiary>numeric literals</tertiary>
</indexterm> are all numeric literals<indexterm><primary>Numeric literals</primary>
<secondary>examples of</secondary></indexterm>, along with their display
format<indexterm><primary>Literals</primary><secondary>numeric, examples
of</secondary></indexterm>:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL1  desc list">
<thead>
<row><entry>Literal</entry><entry>Display Format</entry></row>
</thead>
<tbody>
<row><entry><literal>477</literal></entry><entry><literal>477</literal
></entry></row>
<row><entry><literal>580.45</literal></entry><entry><literal>580.45</literal
></entry></row>
<row><entry><literal>+005</literal></entry><entry><literal>5</literal
></entry></row>
<row><entry><literal>-.3175</literal></entry><entry><literal>-.3175</literal
></entry></row>
<row><entry><literal>1300000000</literal></entry><entry><literal>1300000000</literal
></entry></row>
<row><entry><literal>99.</literal></entry><entry><literal>99</literal
></entry></row>
<row><entry><literal>-0.123456789012345678</literal></entry><entry
><literal>-.123456789012345678</literal></entry></row>
<row><entry><literal>99E-2</literal></entry><entry><literal>9.9000000E-001</literal
></entry></row>
<row><entry><literal>12.3e+5</literal></entry><entry><literal>1.2299999E+006</literal
></entry></row>
</tbody>
</tgroup>
</informaltable>
</section>
</section>
</section>
<section id="i1018603" pagebreak="yes">
<title>Null</title>
<para>Null is a special symbol, independent of data type, that represents
an unknown<indexterm><primary>Null symbol</primary></indexterm>. The
Trafodion SQL keyword NULL represents null. Null indicates that an
item has no value. For sorting purposes, null is greater than all
other values. You cannot store null in a column by using INSERT or
UPDATE, unless the column allows null. </para>
<para>A column that allows null can be null at any row position. A
nullable column has extra bytes associated with it in each row. A
special value stored in these bytes indicates that the column has
null for that row. </para>
<section id="i1012148">
<title>Using Null Versus Default Values</title>
<para>Various scenarios exist in which a row in a table might contain
no value for a specific column. For example:</para>
<itemizedlist>
<listitem><para>A database of telemarketing contacts might have null
AGE fields if contacts did not provide their age.</para></listitem>
<listitem><para>An order record might have a DATE_SHIPPED column empty
until the order is actually shipped.</para></listitem>
<listitem><para>An employee record for an international employee might
not have a social security number.</para></listitem>
</itemizedlist>
<para>You allow null in a column when you want to convey that a value
in the column is unknown (such as the age of a telemarketing contact)
or not applicable (such as the social security number of an international
employee).</para>
<para>In deciding whether to allow nulls or use defaults, also note:</para>
<itemizedlist>
<listitem><para>Nulls are not the same as blanks. Two blanks can be
compared and found equal, while the result of a comparison of two
nulls is indeterminate.</para></listitem>
<listitem><para>Nulls are not the same as zeros. Zeros can participate
in arithmetic operations, while nulls are excluded from any arithmetic
operation. </para></listitem>
</itemizedlist>
</section>
<section id="i1012158">
<title>Defining Columns That Allow or Prohibit Null</title>
<para>The CREATE TABLE and ALTER TABLE statements define the attributes
for columns within tables. A column allows nulls unless the column
definition includes the NOT NULL clause or the column is part of the
primary key of the table. </para>
<para>Null is the default for a column (other than NOT NULL) unless
the column definition includes a DEFAULT clause (other than DEFAULT
NULL) or the NO DEFAULT clause. The default value for a column is
the value Trafodion SQL inserts in a row when an INSERT statement
omits a value for a particular column. </para>
<section id="i1012171">
<title>Null in DISTINCT, GROUP BY, and ORDER BY Clauses</title>
<para>In evaluating the DISTINCT, GROUP BY, and ORDER BY clauses,
Trafodion SQL considers all nulls to be equal. Additional considerations
for these clauses are:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<tbody>
<row><entry>DISTINCT</entry><entry>Nulls are considered duplicates;
therefore, a result has at most one null.</entry></row>
<row><entry>GROUP BY</entry><entry>The result has at most one null
group.</entry></row>
<row><entry>ORDER BY</entry><entry>Nulls are considered greater than
nonnull values.</entry></row>
</tbody>
</tgroup>
</informaltable>
</section>
<section id="i1018791" pagebreak="yes">
<title>Null and Expression Evaluation Comparison </title>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="3" tgroupstyle="TI  inline table">
<thead>
<row><entry>Expression Type</entry><entry>Condition</entry><entry
>Result</entry></row>
</thead>
<tbody>
<row><entry>Boolean operators (AND, OR, NOT)</entry><entry>Either
operand is null.</entry><entry>For AND, the result is null.  For OR,
the result is true if the other operand is true, or null if the other
operand is null or false.  For NOT, the result is null.</entry></row>
<row><entry>Arithmetic operators</entry><entry>Either or both operands
are null.</entry><entry>The result is null.</entry></row>
<row><entry>NULL predicate</entry><entry>The operand is null.</entry>
<entry>The result is true.</entry></row>
<row><entry>Aggregate (or set) functions  (except COUNT)</entry><entry
>Some rows have null columns.The function is evaluated after eliminating
nulls.</entry><entry>The result is null if set is empty.</entry></row>
<row><entry>COUNT(*)</entry><entry>The function does not eliminate
nulls.</entry><entry>The result is the number of rows in the table
whether or not the rows are null.</entry></row>
<row><entry>COUNT COUNT DISTINCT</entry><entry>The function is evaluated
after eliminating nulls.</entry><entry>The result is zero if set is
empty.</entry></row>
<row><entry>Comparison: =, &lt;>, &lt;, >, &lt;=, >=, LIKE</entry>
<entry>Either operand is null.</entry><entry>The result is null.</entry>
</row>
<row><entry>IN predicate</entry><entry>Some expressions in the IN
value list are null.</entry><entry>The result is null if all of the
expressions are null.</entry></row>
<row><entry>Subquery</entry><entry>No rows are returned.</entry><entry
>The result is null.</entry></row>
</tbody>
</tgroup>
</informaltable>
</section>
</section>
</section>
<section id="i1018855" pagebreak="yes">
<title>Predicates</title>
<para>A <indexterm><primary>Predicates</primary><secondary>description
of</secondary></indexterm>predicate determines an answer to a question
about a value or group of values<indexterm><primary>Predicates</primary>
<secondary sortas="[Predicates:000">summary of</secondary></indexterm
>. A predicate returns true, false, or, if the question cannot be
answered, unknown. Use predicates within search conditions to choose
rows from tables or views. </para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<tbody>
<row><entry><xref linkend="i1005865" role="select:quotedtitle page"
/></entry><entry>Determines whether a sequence of values is within
a range of sequences of values.</entry></row>
<row><entry><xref linkend="i1005963" role="select:quotedtitle page"
/> <literallayout>( =, &lt;>, &lt;, >, &lt;=, >= )</literallayout
></entry><entry>Compares the values of sequences of expressions, or
compares the values of sequences of row values that are the result
of row subqueries.</entry></row>
<row><entry><xref linkend="i1006113" role="select:quotedtitle page"
/></entry><entry>Determines whether any rows are selected by a subquery.
If the subquery finds at least one row that satisfies its search condition,
the predicate evaluates to true. Otherwise, if the result table of
the subquery is empty, the predicate is false.</entry></row>
<row><entry><xref linkend="i1006169" role="select:quotedtitle page"
/></entry><entry>Determines if a sequence of values is equal to any
of the sequences of values in a list of sequences.</entry></row>
<row><entry><xref linkend="LIKE-Predicate"
role="select:quotedtitle page"/></entry><entry>Searches for character
strings that match a pattern.</entry></row>
<row><entry><xref linkend="i1006415" role="select:quotedtitle page"
/></entry><entry>Determines whether all the values in a sequence of
values are null.</entry></row>
<row><entry><xref linkend="i1006550" role="select:quotedtitle page"
/> ( ALL, ANY, SOME ) </entry><entry>Compares the values of sequences
of expressions to the values in each row selected by a table subquery.
The comparison is quantified by ALL, SOME, or ANY.</entry></row>
</tbody>
</tgroup>
</informaltable>
<para>See the individual entry for a predicate or predicate group.</para>
<section id="i1005865">
<title>BETWEEN Predicate</title>
<itemizedlist>
<listitem><para><xref linkend="i1005902" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1005912" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<para><indexterm><primary>Predicates</primary><secondary>BETWEEN</secondary>
</indexterm>The BETWEEN predicate determines whether a sequence of
values is within a range of sequences of values<indexterm><primary
>BETWEEN predicate</primary><secondary>syntax diagram of</secondary>
</indexterm>.</para>
<programlisting><replaceable>row-value-constructor</replaceable> [NOT] BETWEEN 
    <replaceable>row-value-constructor</replaceable> AND <replaceable
>row-value-constructor</replaceable> 
<indexterm><primary>Row value constructor</primary><secondary>BETWEEN predicate use of</secondary>
</indexterm>ro<replaceable>w-value-constructor</replaceable> is:
     (<replaceable>expression</replaceable> [,<replaceable>expression</replaceable
> ]...) 
   | <replaceable>row-subquery</replaceable> 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>row-value-constructor</replaceable
> </term>
<listitem><para>specifies an operand of the BETWEEN predicate. The
three operands can be either of:</para>
<variablelist>
<varlistentry><term>(<replaceable>expression</replaceable> [,<replaceable
>expression</replaceable> ]...) </term>
<listitem><para>is a sequence of SQL value expressions, separated
by commas and enclosed in parentheses. <replaceable>expression</replaceable
> cannot include an aggregate function unless <replaceable>expression</replaceable
> is in a HAVING clause. <indexterm><primary>Subquery</primary>
<secondary>scalar</secondary><tertiary>BETWEEN predicate </tertiary>
</indexterm><replaceable>expression</replaceable> can be a scalar
subquery (a subquery that returns a single row consisting of a single
column). See <xref linkend="i1013683" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>row-subquery</replaceable> </term>
<listitem><para><indexterm><primary>Subquery</primary><secondary>row</secondary>
<tertiary>BETWEEN predicate</tertiary></indexterm>is a subquery that
returns a single row (consisting of a sequence of values). See <xref
linkend="i1032551" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<para><indexterm><primary>BETWEEN predicate</primary><secondary>operand
requirements</secondary></indexterm>The three <replaceable>row-value-constructors</replaceable
> specified in a BETWEEN predicate must contain the same number of
elements. That is, the number of value expressions in each list, or
the number of values returned by a row subquery, must be the same.</para>
<para>The data types of the respective values of the three <replaceable
>row-value-constructors</replaceable> must be comparable. Respective
values are values with the same ordinal position in the two lists.
See <xref linkend="i1013224" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
</variablelist>
<section id="i1005902">
<title>Considerations for BETWEEN</title>
<para><emphasis role="bold">Logical Equivalents Using AND and OR</emphasis
></para>
<para>The predicate <replaceable>expr1</replaceable> BETWEEN <replaceable
>expr2</replaceable> <literal>AND</literal> <replaceable>expr3</replaceable
> is true if and only if this condition is true<indexterm><primary
>BETWEEN predicate</primary><secondary>logical equivalents</secondary>
</indexterm>:</para>
<programlisting>expr2 &lt;= expr1 AND expr1 &lt;= expr3 
</programlisting>
<para>The predicate <replaceable>expr1</replaceable> NOT BETWEEN <replaceable
>expr2</replaceable> AND <replaceable>expr3</replaceable> is true
if and only if this condition is true:</para>
<programlisting>expr2 > expr1 OR expr1 > expr3 
</programlisting>
<para><emphasis role="bold">Descending Columns in Keys</emphasis></para>
<para>If a clause specifies a column in a key BETWEEN <replaceable
>expr2</replaceable> and <replaceable>expr3</replaceable>, <replaceable
>expr3</replaceable> must be greater than <replaceable>expr2</replaceable
> even if the column is specified as DESCENDING within its table definition. </para>
</section>
<section id="i1005912">
<title>Examples of BETWEEN</title>
<itemizedlist>
<listitem><para>This predicate is true if the total price of the units
in inventory is in the range from $1,000 to $10,000<indexterm><primary
>BETWEEN predicate</primary><secondary>examples of</secondary>
</indexterm>: </para>
<programlisting>qty_on_hand * price 
  BETWEEN 1000.00 AND 10000.00
</programlisting>
</listitem>
<listitem><para>This predicate is true if the part cost is less than
$5 or more than $800:</para>
<programlisting>partcost NOT BETWEEN 5.00 AND 800.00
</programlisting>
</listitem>
<listitem><para>This BETWEEN predicate selects the part number 6400:</para>
<programlisting>SELECT * FROM partsupp 
WHERE partnum BETWEEN 6400 AND 6700
  AND partcost > 300.00<literal condition="hidden"> SERIALIZABLE ACCESS</literal
>;

Part/Num  Supp/Num  Part/Cost     Qty/Rec
--------  --------  ------------  ----------
    6400         1        390.00          50
    6401         2        500.00          20
    6401         3        480.00          38

--- 3 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Find names between Jody Selby and Gene Wright:</para>
<programlisting>(last_name, first_name) BETWEEN
  ('SELBY', 'JODY') AND ('WRIGHT', 'GENE')
</programlisting>
<para>The name Barbara Swift would meet the criteria; the name Mike
Wright would not. </para>
<programlisting>SELECT empnum, first_name, last_name
FROM persnl.employee
WHERE (last_name, first_name) BETWEEN
  ('SELBY', 'JODY') AND ('WRIGHT', 'GENE');

EMPNUM  FIRST_NAME       LAST_NAME            
------  ---------------  -------------------- 
    43  PAUL             WINTER               
    72  GLENN            THOMAS               
    74  JOHN             WALKER               
   ...
--- 15 row(s) selected.
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1005963">
<title>Comparison Predicates</title>
<itemizedlist>
<listitem><para><xref linkend="i1006001" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1006018" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<para><indexterm><primary>Comparison predicates</primary><secondary
>syntax diagram of</secondary></indexterm>A comparison predicate compares
the values of sequences of expressions<indexterm><primary>Predicates</primary>
<secondary>comparison</secondary></indexterm>, or the values of sequences
of row values that are the result of row subqueries<indexterm><primary
>Comparison predicates</primary><secondary>comparison operators</secondary>
</indexterm>. </para>
<programlisting><replaceable>row-value-constructor</replaceable> <replaceable
>comparison-op</replaceable> <replaceable>row-value-constructor</replaceable
> 

<replaceable>comparison-op</replaceable> is:
     =    Equal
   | &lt;>   Not equal
   | &lt;    Less than
   | >    Greater than
   | &lt;=   Less than or equal to
   | >=   Greater than or equal to

<indexterm><primary>Row value constructor</primary><secondary>comparison predicates use of</secondary>
</indexterm><replaceable>row-value-constructor</replaceable> is:
     (<replaceable>expression</replaceable> [,<replaceable>expression</replaceable
>]...) 
   | <replaceable>row-subquery</replaceable>  
</programlisting>
<variablelist>
<varlistentry><term><replaceable>row-value-constructor</replaceable
> </term>
<listitem><para>specifies an operand of a comparison predicate. The
two operands can be either of these:</para>
<variablelist>
<varlistentry><term>(<replaceable>expression</replaceable> [,<replaceable
>expression</replaceable> ]...) </term>
<listitem><para>is a sequence of SQL value expressions, separated
by commas and enclosed in parentheses. <replaceable>expression</replaceable
> cannot include an aggregate function unless expression is in a HAVING
clause. <indexterm><primary>Subquery</primary><secondary>scalar</secondary>
<tertiary>comparison predicate </tertiary></indexterm><replaceable
>expression</replaceable> can be a scalar subquery (a subquery that
returns a single row consisting of a single column). See <xref
linkend="i1013683" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>row-subquery</replaceable> </term>
<listitem><para><indexterm><primary>Subquery</primary><secondary>row</secondary>
<tertiary>comparison predicate</tertiary></indexterm>is a subquery
that returns a single row (consisting of a sequence of values). See <xref
linkend="i1032551" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<para><indexterm><primary>Comparison predicates</primary><secondary
>operand requirements</secondary></indexterm>The two <replaceable
>row-value-constructors</replaceable> must contain the same number
of elements. That is, the number of value expressions in each list,
or the number of values returned by a row subquery, must be the same.</para>
<para>The data types of the respective values of the two <replaceable
>row-value-constructors</replaceable> must be comparable. (Respective
values are values with the same ordinal position in the two lists.)
See <xref linkend="i1013224" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
</variablelist>
<section id="i1006001">
<title>Considerations for Comparison Predicates</title>
<para><emphasis role="bold">When a Comparison Predicate Is True</emphasis
></para>
<para>Trafodion SQL determines whether a relationship is true or false
by comparing values in corresponding positions in sequence, until
it finds the first nonequal pair.</para>
<para>You cannot use a comparison predicate in a WHERE or HAVING clause
to compare row value constructors when the value expressions in one
row value constructor are equal to null. Use the IS NULL predicate
instead.</para>
<para>Suppose that two rows with multiple components exist, X and
Y:</para>
<programlisting>X=(X1,X2,...,Xn), Y=(Y1,Y2,...,Yn).
</programlisting>
<para>Predicate <literal>X=Y</literal> is true if for all <literal
>i=1,...,n: Xi=Yi</literal>. For this predicate, Trafodion SQL must
look through all values. Predicate <literal>X = Y</literal> is false
if for some <literal>i Xi&lt;>Yi</literal>. When SQL finds nonequal
components, it stops and does not look at remaining components.</para>
<para>Predicate <literal>X&lt;>Y</literal> is true if <literal>X=Y</literal
> is false. If <literal>X1&lt;>Y1</literal>, Trafodion SQL does not
look at all components. It stops and returns a value of false for
the <literal>X=Y</literal> predicate and a value of true for the <literal
>X&lt;>Y</literal> predicate. Predicate <literal>X&lt;>Y</literal
> is false if <literal>X=Y</literal> is true, or for all <literal
>i=1,...,n: Xi=Yi</literal>. In this situation, Trafodion SQL must
look through all components.</para>
<para>Predicate <literal>X>Y</literal> is true if for some index <literal
>m Xm>Ym</literal> and for all <literal>i=1,..,m-1: Xi=Yi</literal
>. Trafodion SQL does not look through all components. It stops when
it finds the first nonequal components, <literal>Xm&lt;>Ym</literal
>. If <literal>Xm>Ym,</literal> the predicate is true. Otherwise the
predicate is false. The predicate is also false if all components
are equal, or <literal>X=Y</literal>.</para>
<para>Predicate <literal>X>=Y</literal> is true if <literal>X>Y</literal
> is true or <literal>X=Y</literal> is true. In this scenario, Trafodion
SQL might look through all components and return true if they are
all equal. It stops at the first nonequal components, <literal>Xm&lt;>Ym</literal
>. If <literal>Xm>Ym,</literal> the predicate is true. Otherwise,
it is false.</para>
<para>Predicate <literal>X&lt;Y</literal> is true if for some index <literal
>m Xm&lt;Ym,</literal> and for all <literal>i=1,..,m-1: Xi=Yi</literal
>. Trafodion SQL does not look through all components. It stops when
it finds the first nonequal components <literal>Xm&lt;>Ym</literal
>. If <literal>Xm&lt;Ym,</literal> the predicate is true. Otherwise,
the predicate is false. The predicate is also false if all components
are equal, or <literal>X=Y</literal>.</para>
<para>Predicate <literal>X&lt;=Y</literal> is true if <literal>X&lt;Y</literal
> is true or <literal>X=Y</literal> is true. In this scenario, Trafodion
SQL might need to look through all components and return true if they
are all equal. It stops at the first nonequal components, <literal
>Xm&lt;>Ym</literal>. If <literal>Xm&lt;Ym,</literal> the predicate
is true. Otherwise, it is false.</para>
<para><emphasis role="bold">Comparing Character Data</emphasis></para>
<para>For comparisons between character strings of different lengths,
the shorter string is padded on the right with spaces (HEX 20) until
it is the length of the longer string<indexterm><primary>Comparison
predicates</primary><secondary>data conversions</secondary></indexterm
>. Both fixed-length and variable-length strings are padded in this
way. </para>
<para>For example, Trafodion SQL considers the string ‘JOE’ equal
to a value JOE stored in a column of data type CHAR or VARCHAR of
width three or more. Similarly, Trafodion SQL considers a value JOE
stored in any column of the CHAR data type equal to the value JOE
stored in any column of the VARCHAR data type. </para>
<para>Two strings are equal if all characters in the same ordinal
position are equal. Lowercase and uppercase letters are not considered
equivalent.</para>
<para><emphasis role="bold">Comparing Numeric Data</emphasis></para>
<para>Before evaluation, all numeric values in an expression are first
converted to the maximum precision needed anywhere in the expression.</para>
<para><emphasis role="bold">Comparing Interval Data</emphasis></para>
<para>For comparisons of INTERVAL values, Trafodion SQL first converts
the intervals to a common unit. If no common unit exists, Trafodion
SQL reports an error. Two INTERVAL values must be both year-month
intervals or both day-time intervals.</para>
<para><emphasis role="bold">Comparing Multiple Values</emphasis></para>
<para>Use multivalue predicates whenever possible; they are generally
more efficient than equivalent conditions without multivalue predicates. </para>
</section>
<section id="i1006018">
<title>Examples of Comparison Predicates</title>
<itemizedlist>
<listitem><para>This predicate is true if the customer number is equal
to 3210<indexterm><primary>Comparison predicates</primary><secondary
>examples of</secondary></indexterm>:</para>
<programlisting>custnum = 3210
</programlisting>
</listitem>
<listitem><para>This predicate is true if the salary is greater than
the average salary of all employees:</para>
<programlisting>salary > 
  (SELECT AVG (salary) FROM persnl.employee);
</programlisting>
</listitem>
<listitem><para>This predicate is true if the customer name is BACIGALUPI:</para>
<programlisting>custname = 'BACIGALUPI'
</programlisting>
</listitem>
<listitem><para>This predicate evaluates to unknown for any rows in
either CUSTOMER or ORDERS that contain null in the CUSTNUM column:</para>
<programlisting>customer.custnum > orders.custnum
</programlisting>
</listitem>
<listitem><para>This predicate returns information about anyone whose
name follows MOSS, DUNCAN in a list arranged alphabetically by last
name and, for the same last name, alphabetically by first name: </para>
<programlisting>(last_name, first_name) > ('MOSS', 'DUNCAN')
</programlisting>
<para>REEVES, ANNE meets this criteria, but MOSS, ANNE does not. </para>
<para>This multivalue predicate is equivalent to this condition with
three comparison predicates:</para>
<programlisting>(last_name > 'MOSS') OR
(last_name = 'MOSS' AND first_name > 'DUNCAN')
</programlisting>
</listitem>
<listitem><para>Compare two datetime values START_DATE and the result
of the CURRENT_DATE function:</para>
<programlisting>START_DATE &lt; CURRENT_DATE
</programlisting>
</listitem>
<listitem><para>Compare two datetime values START_DATE and SHIP_TIMESTAMP:</para>
<programlisting>CAST (start_date AS TIMESTAMP) &lt; ship_timestamp
</programlisting>
</listitem>
<listitem><para>Compare two INTERVAL values:</para>
<programlisting>JOB1_TIME &lt; JOB2_TIME
</programlisting>
<para>Suppose that JOB1_TIME, defined as INTERVAL DAY TO MINUTE, is
2 days 3 hours, and JOB2_TIME, defined as INTERVAL DAY TO HOUR, is
3 days. </para>
<para>To evaluate the predicate, Trafodion SQL converts the two INTERVAL
values to MINUTE. The comparison predicate is true.</para>
</listitem>
<listitem><para>The next examples contain a subquery in a comparison
predicate. Each subquery operates on a separate logical copy of the
EMPLOYEE table. </para><para>The processing sequence is outer to inner.
A row selected by an outer query allows an inner query to be evaluated,
and a single value is returned. The next inner query is evaluated
when it receives a value from its outer query.</para>
<para>Find all employees whose salary is greater than the maximum
salary of employees in department 1500:</para>
<programlisting>SELECT first_name, last_name, deptnum, salary
  FROM persnl.employee
  WHERE salary > (SELECT MAX (salary)
                  FROM persnl.employee
                  WHERE deptnum = 1500);

FIRST_NAME       LAST_NAME             DEPTNUM  SALARY 
---------------  --------------------  -------  -----------
ROGER            GREEN                    9000    175500.00
KATHRYN          HALL                     4000     96000.00
RACHEL           MCKAY                    4000    118000.00
THOMAS           RUDLOFF                  2000    138000.40
JANE             RAYMOND                  3000    136000.00
JERRY            HOWARD                   1000    137000.10

--- 6 row(s) selected.
</programlisting>
<para>Find all employees from other departments whose salary is less
than the minimum salary of employees (not in department 1500) that
have a salary greater than the average salary for department 1500:</para>
<programlisting>
SELECT first_name, last_name, deptnum, salary
FROM persnl.employee
WHERE deptnum &lt;> 1500 AND
  salary &lt; (SELECT MIN (salary)
            FROM persnl.employee
            WHERE deptnum &lt;> 1500 AND
              salary > (SELECT AVG (salary)
                        FROM persnl.employee
                        WHERE deptnum = 1500));

FIRST_NAME       LAST_NAME             DEPTNUM  SALARY 
---------------  --------------------  -------  -----------
JESSICA          CRINER                   3500     39500.00
ALAN             TERRY                    3000     39500.00
DINAH            CLARK                    9000     37000.00
BILL             WINN                     2000     32000.00
MIRIAM           KING                     2500     18000.00
...   

--- 35 row(s) selected.
</programlisting>
<para>The first subquery of this query determines the minimum salary
of employees from other departments whose salary is greater than the
average salary for department 1500. The main query then finds the
names of employees who are not in department 1500 and whose salary
is less than the minimum salary determined by the first subquery.</para>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1006113">
<title>EXISTS Predicate</title>
<para><indexterm><primary>EXISTS predicate</primary><secondary>syntax
diagram of</secondary></indexterm>The EXISTS predicate determines
whether any rows are selected by a subquery<indexterm><primary>Predicates</primary>
<secondary>EXISTS</secondary></indexterm>. If the subquery finds at
least one row that satisfies its search condition, the predicate evaluates
to true. Otherwise, if the result table of the subquery is empty,
the predicate is false. </para>
<programlisting>[NOT] EXISTS <replaceable>subquery</replaceable>
</programlisting>
<variablelist>
<varlistentry><term><replaceable>subquery</replaceable> </term>
<listitem><para>specifies the operand of the predicate. A <replaceable
>subquery</replaceable> is a query expression enclosed in parentheses. <indexterm>
<primary>EXISTS predicate</primary><secondary>correlated subquery
within</secondary></indexterm>An EXISTS <replaceable>subquery</replaceable
> is typically correlated with an outer query<indexterm><primary>Subquery</primary>
<secondary>correlated</secondary></indexterm>. See <xref
linkend="i1032551" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of EXISTS</title>
<itemizedlist>
<listitem><para>Find locations of employees with job code 300<indexterm>
<primary>EXISTS predicate</primary><secondary>examples of</secondary>
</indexterm>:</para>
<programlisting>SELECT deptnum, location FROM persnl.dept D
WHERE EXISTS
 (SELECT jobcode FROM persnl.employee E
  WHERE D.deptnum = E.deptnum AND jobcode = 300);

DEPTNUM  LOCATION
-------  -------------
   3000  NEW YORK
   3100  TORONTO
   3200  FRANKFURT
   3300  LONDON
   3500  HONG KONG

--- 5 row(s) selected.
</programlisting>
<para>In the preceding example, the EXISTS predicate contains a subquery
that determines which locations have employees with job code 300.
The subquery depends on the value of D.DEPTNUM from the outer query
and must be evaluated for each row of the result table where D.DEPTNUM
equals E.DEPTNUM. The column D.DEPTNUM is an example of an outer reference.</para>
</listitem>
<listitem><para>Search for departments that have no employees with
job code 420: </para>
<programlisting>SELECT deptname FROM persnl.dept D
WHERE NOT EXISTS
  (SELECT jobcode FROM persnl.employee E
   WHERE D.deptnum = E.deptnum AND jobcode = 420); 

DEPTNAME      
------------  
FINANCE       
PERSONNEL     
INVENTORY     
...
--- 11 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Search for parts with less than 20 units in the inventory: </para>
<programlisting>SELECT partnum, suppnum 
FROM invent.partsupp PS
WHERE EXISTS
  (SELECT partnum FROM invent.partloc PL
   WHERE PS.partnum = PL.partnum AND qty_on_hand &lt; 20);

PARTNUM  SUPPNUM
-------  -------
    212        1
    212        3
   2001        1
   2003        2
    ...

--- 18 row(s) selected.
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1006169">
<title>IN Predicate</title>
<itemizedlist>
<listitem><para><xref linkend="i1006205" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1006229" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<para>The IN predicate determines if a sequence of values is equal
to any of the sequences of values in a list of sequences<indexterm>
<primary>Predicates</primary><secondary>IN</secondary></indexterm
>. The NOT operator reverses its truth value. For example, if IN <indexterm>
<primary>IN predicate</primary><secondary>syntax diagram of</secondary>
</indexterm>is true, NOT IN is false.</para>
<programlisting><replaceable>row-value-constructor</replaceable> 
   [NOT] IN {<replaceable>table-subquery</replaceable> | <replaceable
>in-value-list</replaceable>}
 
<indexterm><primary>Row value constructor</primary><secondary>IN predicate use of</secondary>
</indexterm><replaceable>row-value-constructor</replaceable> is: 
     (<replaceable>expression</replaceable> [,<replaceable>expression</replaceable
>]...) 
   | <replaceable>row-subquery</replaceable>  

<replaceable>in-value-list</replaceable> is:
   (<replaceable>expression</replaceable> [,<replaceable>expression</replaceable
>]...) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>row-value-constructor</replaceable
> </term>
<listitem><para>specifies the first operand of the IN predicate. The
first operand can be either of:</para>
<variablelist>
<varlistentry><term>(<replaceable>expression</replaceable> [,<replaceable
>expression</replaceable> ]...) </term>
<listitem><para>is a sequence of SQL value expressions, separated
by commas and enclosed in parentheses. <replaceable>expression</replaceable
> cannot include an aggregate function unless expression is in a HAVING
clause. <indexterm><primary>Subquery</primary><secondary>scalar</secondary>
<tertiary>IN predicate </tertiary></indexterm><replaceable>expression</replaceable
> can be a scalar subquery (a subquery that returns a single row consisting
of a single column). See <xref linkend="i1013683"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>row-subquery</replaceable> </term>
<listitem><para><indexterm><primary>Subquery</primary><secondary>row</secondary>
<tertiary>IN predicate</tertiary></indexterm>is a subquery that returns
a single row (consisting of a sequence of values). See <xref
linkend="i1032551" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>table-subquery</replaceable> </term>
<listitem><para><indexterm><primary>Subquery</primary><secondary>table</secondary>
</indexterm><indexterm><primary>Table </primary><secondary>subquery</secondary>
</indexterm>is a subquery that returns a table (consisting of rows
of columns). The table specifies rows of values to be compared with
the row of values specified by the <replaceable>row-value-constructor</replaceable
>. The number of values of the <replaceable>row-value-constructor</replaceable
> must be equal to the number of columns in the result table of the <replaceable
>table-subquery</replaceable>, and the data types of the values must
be comparable.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>in-value-list</replaceable> </term>
<listitem><para>is a sequence of SQL value expressions, separated
by commas and enclosed in parentheses. <replaceable>expression</replaceable
> cannot include an aggregate function defined on a column. <replaceable
>expression</replaceable> can be a scalar subquery (a subquery that
returns a single row consisting of a single column). In this case,
the result of the <replaceable>row-value-constructor</replaceable
> is a single value. The data types of the values must be comparable. <indexterm>
<primary>Limits</primary><secondary>IN predicate</secondary></indexterm
>The number of expressions in the <replaceable>in-value-list</replaceable
> can have at least 5000 expressions.</para></listitem>
</varlistentry>
</variablelist>
<section id="i1006205">
<title>Considerations for IN</title>
<para><emphasis role="bold">Logical Equivalent Using ANY (or SOME)</emphasis
></para>
<para>The predicate <replaceable>expr</replaceable><literal> IN</literal
> <literal>(</literal><replaceable>expr1</replaceable><literal>, </literal
><replaceable>expr2</replaceable><literal>, ... )</literal> is true
if and only if the following predicate is true<indexterm><primary
>IN predicate</primary><secondary>logical equivalent using ANY</secondary>
</indexterm>:</para>
<programlisting><replaceable>expr</replaceable> = ANY (<replaceable
>expr1</replaceable>, <replaceable>expr2</replaceable>, ... ) 
</programlisting>
<para><emphasis role="bold">IN Predicate Results</emphasis></para>
<para>The IN predicate is true if and only if either of these is true<indexterm>
<primary>IN predicate</primary><secondary>operand requirements</secondary>
</indexterm>:</para>
<itemizedlist>
<listitem><para>The result of the <replaceable>row-value-constructor</replaceable
> (a row or sequence of values) is equal to any row of column values
specified by <replaceable>table-subquery</replaceable>. </para><para
>A table subquery is a query expression and can be specified as a
form of a simple table; for example, as the VALUES keyword followed
by a list of row values. See <xref linkend="i1008894"
role="select:quotedtitle page"/>.</para>
</listitem>
<listitem><para>The result of the <replaceable>row-value-constructor</replaceable
> (a single value) is equal to any of the values specified by the
list of expressions <replaceable>in-value-list</replaceable>. </para>
<para>In this case, it is helpful to think of the list of expressions
as a one-column table—a special case of a table subquery. The degree
of the row value constructor and the degree of the list of expressions
are both one. </para>
</listitem>
</itemizedlist>
<para><emphasis role="bold">Comparing Character Data</emphasis></para>
<para>Two strings are equal if all characters in the same ordinal
position are equal. Lowercase and uppercase letters are not considered
equivalent. For comparisons between character strings of different
lengths, the shorter string is padded on the right with spaces (HEX
20) until it is the length of the longer string. Both fixed-length
and varying-length strings are padded in this way. </para>
<para>For example, Trafodion SQL considers the string ‘JOE’ equal
to a value JOE stored in a column of data type CHAR or VARCHAR of
width three or more. Similarly, Trafodion SQL considers a value JOE
stored in any column of the CHAR data type equal to the value JOE
stored in any column of the VARCHAR data type. </para>
<para><emphasis role="bold">Comparing Numeric Data</emphasis></para>
<para>Before evaluation, all numeric values in an expression are first
converted to the maximum precision needed anywhere in the expression.</para>
<para><emphasis role="bold">Comparing Interval Data</emphasis></para>
<para>For comparisons of INTERVAL values, Trafodion SQL first converts
the intervals to a common unit. If no common unit exists, Trafodion
SQL reports an error. Two INTERVAL values must be both year-month
intervals or both day-time intervals.</para>
</section>
<section id="i1006229">
<title>Examples of IN</title>
<itemizedlist>
<listitem><para>Find those employees whose EMPNUM is 39, 337, or 452<indexterm>
<primary>IN predicate</primary><secondary>examples of</secondary>
</indexterm>: </para>
<programlisting>SELECT last_name, first_name, empnum
FROM persnl.employee
WHERE empnum IN (39, 337, 452);

LAST_NAME             FIRST_NAME       EMPNUM
--------------------  ---------------  ------
CLARK                 DINAH               337
SAFFERT               KLAUS                39
--- 2 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Find those items in PARTS whose part number is not
in the PARTLOC table:</para>
<programlisting>SELECT partnum, partdesc
FROM sales.parts
WHERE partnum NOT IN 
  (SELECT partnum
   FROM invent.partloc);

PARTNUM  PARTDESC
-------  ------------------
    186  186 MegaByte Disk

--- 1 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Find those items (and their suppliers) in PARTS that
have a supplier in the PARTSUPP table:</para>
<programlisting>SELECT P.partnum, P.partdesc, S.suppnum, S.suppname
FROM sales.parts P,
  invent.supplier S 
WHERE P.partnum, S.suppnum IN 
  (SELECT partnum, suppnum 
   FROM invent.partsupp);
</programlisting>
</listitem>
<listitem><para>Find those employees in EMPLOYEE whose last name and
job code match the list of last names and job codes:</para>
<programlisting>SELECT empnum, last_name, first_name
FROM persnl.employee
WHERE (last_name, jobcode) IN 
  (VALUES ('CLARK', 500), ('GREEN', 200));
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="LIKE-Predicate">
<title>LIKE Predicate</title>
<para><indexterm><primary>LIKE predicate</primary><secondary>syntax
of</secondary></indexterm>The <indexterm><primary>Predicates</primary>
<secondary>LIKE</secondary></indexterm>LIKE predicate searches for
character strings that match a pattern.</para>
<section>
<title>Syntax</title>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="1" tgroupstyle="SD  syntax diagram">
<tbody>
<row><entry><programlisting><replaceable>match-value</replaceable
> [NOT] LIKE <replaceable>pattern</replaceable> [ESCAPE <replaceable
>esc-char-expression</replaceable>]</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<variablelist>
<varlistentry><term><replaceable>match-value</replaceable></term>
<listitem><para>is a character value expression that specifies a set
of strings to search for that match the <replaceable>pattern</replaceable
>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>pattern</replaceable></term>
<listitem><para>is a character value expression that specifies the
pattern string for the search.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>esc-char-expression</replaceable
></term>
<listitem><para>is a character value expression that must evaluate
to a single character. The escape character value is used to turn
off the special meaning of percent (<literal>%</literal>) and underscore
(<literal>_</literal>). See <xref linkend="Wild-Card-Characters"
role="select:quotedtitle page"/> and <xref linkend="Escape-Characters"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<para>See <xref linkend="i1010765" role="select:quotedtitle page"
/>.</para>
</section>
<section>
<title>Considerations</title>
<para><indexterm><primary>LIKE predicate</primary><secondary>considerations
for</secondary></indexterm></para>
<section>
<title>Comparing the Value to the Pattern</title>
<para>The values that you compare must be character strings. Lowercase
and uppercase letters are not equivalent. To make lowercase letters
match uppercase letters, use the UPSHIFT function. A blank is compared
in the same way as any other character.</para>
</section>
<section>
<title>When a LIKE Predicate Is True</title>
<para>When you refer to a column, the LIKE predicate is true if the <replaceable
>pattern</replaceable> matches the column value. If the value of the
column reference is null, the LIKE predicate evaluates to unknown
for that row. If the values that you compare are both empty strings
(that is, strings of zero length), the LIKE predicate is true.</para>
</section>
<section>
<title>Using NOT</title>
<para>If you specify NOT, the predicate is true if the <replaceable
>pattern</replaceable> does not match any string in the <replaceable
>match-value</replaceable> or is not the same length as any string
in the <replaceable>match-value</replaceable>. For example, <literal
>NAME NOT LIKE '_Z'</literal> is true if the string is not two characters
long or the last character is not Z. In a search condition, the predicate <literal
>NAME NOT LIKE '_Z'</literal> is equivalent to <literal>NOT (NAME
LIKE '_Z')</literal>.</para>
</section>
<section id="Wild-Card-Characters">
<title>Wild-Card Characters</title>
<para>You can look for similar values by specifying only part of the
characters of <replaceable>pattern</replaceable> combined with these
wild-card characters:</para>
<itemizedlist>
<listitem><para><xref linkend="Percent-Sign"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="Underscore"
role="select:quotedtitle page"/></para></listitem>
</itemizedlist>
<section id="Percent-Sign">
<title>Percent Sign (%)</title>
<para>Use a percent sign to indicate zero or more characters of any
type. For example, <literal>'%ART%'</literal> matches <literal>'SMART'</literal
>, <literal>'ARTIFICIAL'</literal>, and <literal>'PARTICULAR'</literal
>, but not <literal>'smart'</literal>. </para>
</section>
<section id="Underscore">
<title>Underscore (_)</title>
<para>Use an underscore to indicate any single character. For example, <literal
>'BOO_'</literal> matches <literal>'BOOK'</literal> and <literal>'BOOT'</literal
> but not <literal>'BOO'</literal>, <literal>'BOOKLET'</literal>,
or <literal>'book'</literal>.</para>
</section>
</section>
<section id="Escape-Characters">
<title>Escape Characters</title>
<para>To search for a string containing a percent sign (<literal>%</literal
>) or an underscore (<literal>_</literal>), define an escape character,
using <literal>ESCAPE <replaceable>esc-char-expression</replaceable
></literal>, to turn off the special meaning of the percent sign and
underscore.</para>
<para>To include a percent sign or an underscore in a comparison string,
type the escape character immediately preceding the percent sign or
underscore. For example, to locate the value <literal>'A_B'</literal
>, type:</para>
<informalexample>
<screen><userinput>NAME LIKE 'A\_B' ESCAPE '\'</userinput></screen>
</informalexample>
<para>To include the escape character itself in the comparison string,
type two escape characters. For example, to locate <literal>'A_B\C%'</literal
>, type:</para>
<informalexample>
<screen><userinput>NAME LIKE 'A\_B\\C\%' ESCAPE '\'</userinput></screen>
</informalexample>
<para>The escape character must precede only the percent sign, underscore,
or escape character itself. For example, the pattern <literal>RA\BS</literal
> is an invalid LIKE pattern if the escape character is defined to
be <literal>'\'</literal>. Error 8410 will be returned if this kind
of pattern is used in an SQL query.</para>
</section>
<section>
<title>Comparing the Pattern to CHAR Columns</title>
<para>Columns of data type CHAR are fixed length. When a value is
inserted into a CHAR column, Trafodion SQL pads the value in the column
with blanks if necessary. The value <literal>'JOE'</literal> inserted
into a CHAR(4) column becomes <literal>'JOE '</literal> (three characters
plus one blank). The LIKE predicate is true only if the column value
and the comparison value are the same length. The column value <literal
>'JOE '</literal> does not match <literal>'JOE'</literal> but does
match <literal>'JOE%'</literal>.</para>
</section>
<section>
<title>Comparing the Pattern to VARCHAR Columns</title>
<para>Columns of variable-length character data types do not include
trailing blanks unless blanks are specified when data is entered.
For example, the value <literal>'JOE'</literal> inserted in a VARCHAR(4)
column is <literal>'JOE'</literal> with no trailing blanks. The value
matches both <literal>'JOE'</literal> and <literal>'JOE%'</literal
>.</para>
<para>If you cannot locate a value in a variable-length character
column, it might be because trailing blanks were specified when the
value was inserted into the table. For example, a value of <literal
>'5MB '</literal> (with one trailing blank) will not be located by <literal
>LIKE '%MB'</literal> but will be located by <literal>LIKE '%MB%'</literal
>.</para>
</section>
</section>
<section>
<title>Examples</title>
<itemizedlist>
<listitem><para>Find all employee last names beginning with <literal
>ZE</literal>:</para>
<screen><userinput>last_name LIKE 'ZE%'</userinput></screen>
</listitem>
<listitem><para>Find all part descriptions that are not <literal>'FLOPPY_DISK'</literal
>:</para>
<screen><userinput>partdesc NOT LIKE 'FLOPPY\_DISK' ESCAPE '\'</userinput
></screen>
<para>The escape character indicates that the underscore in <literal
>'FLOPPY_DISK'</literal> is part of the string to search for, not
a wild-card character.</para>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1006415">
<title>NULL Predicate</title>
<para><indexterm><primary>NULL predicate</primary><secondary>syntax
diagram of</secondary></indexterm>The NULL predicate determines whether
all the expressions in a sequence are null<indexterm><primary>Predicates</primary>
<secondary>NULL</secondary></indexterm>. See <xref linkend="i1018603"
role="select:quotedtitle page"/>. </para>
<programlisting><replaceable>row-value-constructor</replaceable> IS [NOT] NULL

<indexterm><primary>Row value constructor</primary><secondary>NULL predicate use of</secondary>
</indexterm>row-<replaceable>value-constructor</replaceable> is:
     (<replaceable>expression</replaceable> [,<replaceable>expression</replaceable
>]...)
   | <replaceable>row-subquery</replaceable>  
</programlisting>
<variablelist>
<varlistentry><term><replaceable>row-value-constructor</replaceable
> </term>
<listitem><para>specifies the operand of the NULL predicate. The operand
can be either of these:</para>
<variablelist>
<varlistentry><term>(<replaceable>expression</replaceable> [,<replaceable
>expression</replaceable> ]...) </term>
<listitem><para>is a sequence of SQL value expressions, separated
by commas and enclosed in parentheses. <replaceable>expression</replaceable
> cannot include an aggregate function unless expression is in a HAVING
clause. <indexterm><primary>Subquery</primary><secondary>scalar</secondary>
<tertiary>NULL predicate</tertiary></indexterm><replaceable>expression</replaceable
> can be a scalar subquery (a subquery that returns a single row consisting
of a single column). See <xref linkend="i1013683"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>row-subquery</replaceable> </term>
<listitem><para><indexterm><primary>Subquery</primary><secondary>row</secondary>
<tertiary>NULL predicate</tertiary></indexterm>is a subquery that
returns a single row (consisting of a sequence of values). See <xref
linkend="i1032551" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
<para>If all of the expressions in the <replaceable>row-value-constructor</replaceable
> are null, the IS NULL predicate is true. Otherwise, it is false.
If none of the expressions in the <replaceable>row-value-constructor</replaceable
> are null, the IS NOT NULL predicate is true. Otherwise, it is false. </para>
<section>
<title>Considerations for NULL</title>
<para><emphasis role="bold">Summary of NULL Results</emphasis></para>
<para>Let rvc be the value of the <replaceable>row-value-constructor</replaceable
>. This table summarizes the results of NULL predicates. The degree
of a <replaceable>rvc</replaceable> is the number of values in the <replaceable
>rvc</replaceable>.   </para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="5" tgroupstyle="TI  inline table">
<thead>
<row><entry>Expressions</entry><entry><replaceable>rvc</replaceable
><literal> IS  NULL</literal></entry><entry><replaceable>rvc</replaceable
><literal> IS  NOT NULL</literal></entry><entry><literal>NOT </literal
><replaceable>rvc</replaceable> <literal>IS  NULL</literal></entry>
<entry><literal>NOT r</literal><replaceable>vc</replaceable><literal
> IS  NOT NULL</literal></entry></row>
</thead>
<tbody>
<row><entry>degree 1: null</entry><entry>TRUE</entry><entry>FALSE</entry>
<entry>FALSE</entry><entry>TRUE</entry></row>
<row><entry>degree 1: not null</entry><entry>FALSE</entry><entry>TRUE</entry>
<entry>TRUE</entry><entry>FALSE</entry></row>
<row><entry>degree>1: all null</entry><entry>TRUE</entry><entry>FALSE</entry>
<entry>FALSE</entry><entry>TRUE</entry></row>
<row><entry>degree>1: some null</entry><entry>FALSE</entry><entry
>FALSE</entry><entry>TRUE</entry><entry>TRUE</entry></row>
<row><entry>degree>1: none null</entry><entry>FALSE</entry><entry
>TRUE</entry><entry>TRUE</entry><entry>FALSE</entry></row>
</tbody>
</tgroup>
</informaltable>
<para>The <replaceable>rvc</replaceable> IS NOT NULL predicate is
not equivalent to NOT <replaceable>rvc</replaceable> IS NULL.</para>
</section>
<section>
<title>Examples of NULL</title>
<itemizedlist>
<listitem><para>Find all rows with null in the SALARY column<indexterm>
<primary>NULL predicate</primary><secondary>examples of</secondary>
</indexterm>: </para>
<programlisting>salary IS NULL
</programlisting>
</listitem>
<listitem><para>This predicate evaluates to true if the expression
(PRICE + TAX) evaluates to null:</para>
<programlisting>(price + tax) IS NULL
</programlisting>
</listitem>
<listitem><para>Find all rows where both FIRST_NAME and SALARY are
null: </para>
<programlisting>(first_name, salary) IS NULL
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1006550">
<title>Quantified Comparison Predicates</title>
<itemizedlist>
<listitem><para><xref linkend="i1044032" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1006603" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<para><indexterm><primary>Quantified comparison predicates</primary>
<secondary>syntax diagram of</secondary></indexterm>A quantified comparison
predicate compares the values of sequences of expressions to the values
in each row selected by a table subquery<indexterm><primary>Predicates</primary>
<secondary>quantified comparison</secondary></indexterm>. The comparison
operation is quantified by the logical quantifiers ALL, ANY, or SOME.</para>
<programlisting><replaceable>row-value-constructor</replaceable> <replaceable
>comparison-op</replaceable> <replaceable>quantifier</replaceable
> <replaceable>table-subquery</replaceable> 

<indexterm><primary>Row value constructor</primary><secondary>quantified comparison predicates use of</secondary>
</indexterm><replaceable>row-value-constructor</replaceable> is:
     (<replaceable>expression</replaceable> [,<replaceable>expression</replaceable
>]...)
   | <replaceable>row-subquery</replaceable>  

<replaceable>comparison-op</replaceable> is:
     =    Equal
   | &lt;>   Not equal
   | !=   Not equal
   | &lt;    Less than
   | >    Greater than
   | &lt;=   Less than or equal to
   | >=   Greater than or equal to 

<replaceable>quantifier</replaceable> is:
   ALL | ANY | SOME 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>row-value-constructor</replaceable
> </term>
<listitem><para>specifies the first operand of a quantified comparison
predicate. The first operand can be either of:</para>
<variablelist>
<varlistentry><term>(<replaceable>expression</replaceable> [,<replaceable
>expression</replaceable> ]...) </term>
<listitem><para>is a sequence of SQL value expressions, separated
by commas and enclosed in parentheses. <replaceable>expression</replaceable
> cannot include an aggregate function unless <replaceable>expression</replaceable
> is in a HAVING clause. <indexterm><primary>Subquery</primary>
<secondary>scalar</secondary><tertiary>quantified comparison predicate</tertiary>
</indexterm><replaceable>expression</replaceable> can be a scalar
subquery (a subquery that returns a single row consisting of a single
column). See <xref linkend="i1013683" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
<varlistentry><term>row-subquery </term>
<listitem><para><indexterm><primary>Subquery</primary><secondary>row</secondary>
<tertiary>quantified comparison predicate</tertiary></indexterm>is
a subquery that returns a single row (consisting of a sequence of
values). See <xref linkend="i1032551" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term><indexterm><primary>Quantified comparison predicates</primary>
<secondary>ALL, ANY, SOME</secondary></indexterm>ALL</term>
<listitem><para>specifies that the predicate is true if the comparison
is true for every row selected by <replaceable>table-subquery</replaceable
> (or if <replaceable>table-subquery</replaceable> selects no rows),
and specifies that the predicate is false if the comparison is false
for at least one row selected.</para></listitem>
</varlistentry>
<varlistentry><term>ANY | SOME</term>
<listitem><para>specifies that the predicate is true if the comparison
is true for at least one row selected by the <replaceable>table-subquery</replaceable
> and specifies that the predicate is false if the comparison is false
for every row selected (or if <replaceable>table-subquery</replaceable
> selects no rows).</para></listitem>
</varlistentry>
<varlistentry><term>table-subquery </term>
<listitem><para>provides the values for the comparison. <indexterm>
<primary>Quantified comparison predicates</primary><secondary>operand
requirements</secondary></indexterm>The number of values returned
by the <replaceable>row-value-constructor</replaceable> must be equal
to the number of values specified by the <replaceable>table-subquery</replaceable
>, and the data types of values returned by the <replaceable>row-value-constructor</replaceable
> must be comparable to the data types of values returned by the <replaceable
>table-subquery</replaceable>. See <xref linkend="i1032551"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section id="i1044032">
<title>Considerations for ALL, ANY, SOME</title>
<para><indexterm><primary>Quantified comparison predicates</primary>
<secondary>result of</secondary></indexterm>Let <replaceable>R</replaceable
> be the result of the <replaceable>row-value-constructor</replaceable
>, <replaceable>T</replaceable> the result of the <replaceable>table-subquery</replaceable
>, and <replaceable>RT</replaceable> a row in <replaceable>T</replaceable
>.</para>
<para><emphasis role="bold">Result of </emphasis><replaceable>R</replaceable
><replaceable>comparison-op</replaceable><emphasis role="bold"> ALL </emphasis
><replaceable>T</replaceable></para>
<para>If <replaceable>T</replaceable> is empty or if <replaceable
>R</replaceable> <replaceable>comparison-op</replaceable> <replaceable
>RT</replaceable> is true for every row <replaceable>RT</replaceable
> in <replaceable>T</replaceable>, the <replaceable>comparison-op</replaceable
> ALL predicate is true.</para>
<para>If <replaceable>R</replaceable> <replaceable>comparison-op</replaceable
> <replaceable>RT</replaceable> is false for at least one row <replaceable
>RT</replaceable> in <replaceable>T</replaceable>, the <replaceable
>comparison-op</replaceable> ALL predicate is false.</para>
<para><emphasis role="bold">Result of </emphasis><replaceable>R</replaceable
><replaceable>comparison-op</replaceable><emphasis role="bold"> ANY </emphasis
><replaceable>T</replaceable><emphasis role="bold"> or </emphasis
><replaceable>R</replaceable><replaceable>comparison-op</replaceable
><emphasis role="bold"> SOME </emphasis><replaceable>T</replaceable
></para>
<para>If <replaceable>T</replaceable> is empty or if <replaceable
>R</replaceable> <replaceable>comparison-op</replaceable> <replaceable
>RT</replaceable> is false for every row <replaceable>RT</replaceable
> in <replaceable>T</replaceable>, the <replaceable>comparison-op</replaceable
> ANY predicate is false.</para>
<para>If <replaceable>R</replaceable> <replaceable>comparison-op</replaceable
> <replaceable>RT</replaceable> is true for at least one row <replaceable
>RT</replaceable> in <replaceable>T</replaceable>, the <replaceable
>comparison-op</replaceable> ANY predicate is true.</para>
</section>
<section id="i1006603">
<title>Examples of ALL, ANY, SOME</title>
<itemizedlist>
<listitem><para>This predicate is true if the salary is greater than
the salaries of all the employees who have a jobcode of 420<indexterm>
<primary>Quantified comparison predicates</primary><secondary>examples
of</secondary></indexterm>:</para>
<programlisting>salary > ALL (SELECT salary
              FROM persnl.employee
              WHERE jobcode = 420) 
</programlisting>
<para>Consider this SELECT statement using the preceding predicate:</para>
<programlisting>SELECT empnum, first_name, last_name, salary
FROM persnl.employee
WHERE salary > ALL (SELECT salary
                    FROM persnl.employee
                    WHERE jobcode = 420);
</programlisting>
<para>The inner query providing the comparison values yields these
results:</para>
<programlisting>SELECT salary
FROM persnl.employee 
WHERE jobcode = 420;

SALARY
-----------
   33000.00
   36000.00
   18000.10

--- 3 row(s) selected.
</programlisting>
<para>The SELECT statement using this inner query yields these results.
The salaries listed are greater than the salary of every employees
with jobcode equal to 420—that is, greater than $33,000.00, $36,000.00,
and $18,000.10:</para>
<programlisting>SELECT empnum, first_name, last_name, salary
FROM persnl.employee
WHERE salary > ALL (SELECT salary
                    FROM persnl.employee
                    WHERE jobcode = 420);

EMPNUM  FIRST_NAME       LAST_NAME             SALARY
------  ---------------  --------------------  -----------
     1  ROGER            GREEN                   175500.00
    23  JERRY            HOWARD                  137000.10
    29  JANE             RAYMOND                 136000.00
   ...
   343  ALAN             TERRY                    39500.00
   557  BEN              HENDERSON                65000.00
   568  JESSICA          CRINER                   39500.00

--- 23 row(s) selected.
</programlisting>
</listitem>
<listitem><para>This predicate is true if the part number is equal
to any part number with more than five units in stock:</para>
<programlisting>partnum = ANY (SELECT partnum 
               FROM sales.odetail 
               WHERE qty_ordered > 5) 
</programlisting>
<para>Consider this SELECT statement using the preceding predicate:</para>
<programlisting>SELECT ordernum, partnum, qty_ordered 
FROM sales.odetail 
WHERE partnum = ANY (SELECT partnum 
                     FROM sales.odetail 
                    WHERE qty_ordered > 5);
</programlisting>
<para>The inner query providing the comparison values yields these
results:</para>
<programlisting>SELECT partnum 
FROM sales.odetail 
WHERE qty_ordered > 5;

Part/Num
--------
    2403
    5100
    5103
    6301
    6500
    ....

--- 60 row(s) selected.
</programlisting>
<para>The SELECT statement using this inner query yields these results.
All of the order numbers listed have part number equal to any part
number with more than five total units in stock—that is, equal to
2403, 5100, 5103, 6301, 6500, and so on:</para>
<programlisting>SELECT ordernum, partnum, qty_ordered
FROM sales.odetail
WHERE partnum = ANY (SELECT partnum
                     FROM sales.odetail
                     WHERE qty_ordered > 5);

Order/Num   Part/Num  Qty/Ord
----------  --------  ----------
    100210       244           3
    100210      2001           3
    100210      2403           6
    100210      5100          10
    100250       244           4
    100250      5103          10
    100250      6301          15
    100250      6500          10
    ......      ....          ..

--- 71 row(s) selected.
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
</section>
<section id="i1040985" pagebreak="yes">
<title>Privileges</title>
<indexterm><primary>Privileges</primary></indexterm>
<para>A privilege provides authorization to perform a specific operation
for a specific object.</para>
<para>A privilege can be granted to or revoked from a user or role
in many ways:</para>
<itemizedlist>
<listitem><para>Implicit privileges are granted to an owner of an
object when the object is created. The owner retains implicit privileges
for the lifespan of the object.</para></listitem>
<listitem><para>Explicit privileges can be granted to or revoked from
a user or role. Explicit privileges can be granted or revoked by a
database user administrator, an object owner, or a user who has been
granted the privilege with the WITH GRANT OPTION option. </para>
</listitem>
<listitem><para>The privileges granted to a user can come from various
sources. Privileges can be directly granted to a user or they can
be inherited through a role. For example, a user gets the SELECT privilege
on table T1 from two different roles. If one of the roles is revoked
from the user, the user will still be able to select from T1 via the
SELECT privilege granted to the remaining role.</para></listitem>
<listitem><para>A user who is granted a role is thereby conferred
all privileges of the role. The only way to revoke any such privilege
is to revoke the role from the user. For more information, see <xref
linkend="RolesElement" role="select:quotedtitle page"/>.</para>
</listitem>
</itemizedlist>
<para>You can manage privileges by using the GRANT and REVOKE statements.
For more information on GRANT, see:</para>
<itemizedlist>
<listitem><para><xref linkend="i1068219" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="GrantCompPriv_stmt"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="GrantRole" role="select:quotedtitle page"
/></para></listitem>
</itemizedlist>
<para>For more information on REVOKE, see:</para>
<itemizedlist>
<listitem><para><xref linkend="i1059131" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="RevokeCompPrivs_stmt"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="RevokeRole"
role="select:quotedtitle page"/></para></listitem>
</itemizedlist>
</section>
<section id="RolesElement" pagebreak="yes">
<title>Roles</title>
<indexterm><primary>Roles</primary><secondary>description of</secondary>
</indexterm><indexterm><primary>Primary role</primary><secondary>described</secondary>
</indexterm>
<para>A role offers the flexibility of implicitly assigning a set
of privileges to users, instead of assigning privileges individually.
A user can be granted one or more roles. A role can be granted to
one or more users. A role can be granted by or revoked by a database
user administrator, a role owner, or a member of the role. </para>
<para>Privileges are granted to a role. When a role is granted to
a user, the privileges granted to the role become available to the
user. If new privileges are granted to the role, those privileges
become available to all users who have been granted the role. When
a role is revoked from a user, the privileges granted to the role
are no longer available to the user. <phrase>In Trafodion Release
0.9, </phrase> for any privilege changes to take effect, the user
must disconnect any current sessions and then reconnect to establish
new sessions. <phrase>However, starting in Trafodion Release 1.0,
the change in privileges is automatically propagated to and detected
by active sessions, so there is no need for users to disconnect from
and reconnect to a session to see the updated set of privileges. </phrase
>For more information about privileges, see <xref linkend="i1040985"
role="select:quotedtitle page"/>.</para>
<para>A role name is an authorization ID. A role name cannot be identical
to a registered database username. For more information, see <xref
linkend="AuthIDsElement" role="select:quotedtitle page"/>.</para>
<para>To manage roles, see these SQL statements:</para>
<itemizedlist>
<listitem><para><xref linkend="CreateRole"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="DropRole" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="GrantRole" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="RevokeRole"
role="select:quotedtitle page"/></para></listitem>
</itemizedlist>
</section>
<section id="i1032499" pagebreak="yes">
<title>Schemas</title>
<indexterm><primary>Schemas</primary><secondary>description of</secondary>
</indexterm><indexterm><primary>ANSI </primary><secondary>names, schemas</secondary>
</indexterm><indexterm><primary>Aliases, schemas</primary></indexterm>
<para>The ANSI SQL:1999 schema name is an SQL identifier that is unique
for a given ANSI catalog name. Trafodion SQL automatically qualifies
the schema name with the current default catalog name<phrase>, TRAFODION</phrase
>.</para>
<para>The logical name of the form <replaceable>schema.object</replaceable
> is an ANSI name. The part <replaceable>schema</replaceable> denotes
the ANSI-defined schema.</para>
<para>To be compliant with ANSI SQL:1999, Trafodion SQL provides support
for ANSI object names. By using these names, you can develop ANSI-compliant
applications that access all SQL objects. You can access Trafodion
SQL objects with the name of the actual object. See <xref
linkend="i1010143" role="select:quotedtitle page"/>.</para>
<section id="Creating-and-Dropping-Schema">
<title>Creating and Dropping Schemas</title>
<indexterm><primary>CREATE SCHEMA statement</primary></indexterm>
<indexterm><primary>DROP SCHEMA statement</primary></indexterm>
<indexterm><primary>Schemas</primary><secondary>creating</secondary>
</indexterm><indexterm><primary>Schemas</primary><secondary>dropping</secondary>
</indexterm>
<para><phrase>In Trafodion Release 0.9 and earlier, </phrase>a schema
is created when you qualify a table or view name with a new schema
name in a CREATE TABLE or CREATE VIEW statement. A schema is dropped
when all the database objects in the schema have been dropped. <phrase
>The CREATE SCHEMA statement would run but not do anything.</phrase
></para>
<para>Starting in Trafodion Release 1.0.0, you can now create a schema
using the CREATE SCHEMA command and drop a schema using the DROP SCHEMA
statement. For more information, see the <xref linkend="i1061008"
role="select:quotedtitle page"/> and the <xref linkend="i1061009"
role="select:quotedtitle page"/>.</para>
</section>
</section>
<section id="i1012266" pagebreak="yes">
<title>Search Condition</title>
<indexterm><primary>Search condition</primary><secondary>syntax diagram
of</secondary></indexterm>
<para>A search condition is used to choose rows from tables or views,
depending on the result of applying the condition to rows. The condition
is a Boolean expression consisting of predicates combined together
with OR, AND, and NOT operators.</para>
<para>You can use a search condition in the WHERE clause of a SELECT,
DELETE, or UPDATE statement, the HAVING clause of a SELECT statement,
the searched form of a CASE expression, the ON clause of a SELECT
statement that involves a join, a CHECK constraint, or a ROWS SINCE
sequence function.</para>
<programlisting>
<replaceable>search-condition</replaceable> is: 
   <replaceable>boolean-term</replaceable> | <replaceable>search-condition</replaceable
> OR <replaceable>boolean-term</replaceable> 

<replaceable>boolean-term</replaceable> is: 
   <replaceable>boolean-factor</replaceable> | <replaceable>boolean-term</replaceable
> AND <replaceable>boolean-factor</replaceable> 

<replaceable>boolean-factor</replaceable> is: 
   [NOT] <replaceable>boolean-primary</replaceable> 

<replaceable>boolean-primary</replaceable> is: 
   <replaceable>predicate</replaceable> | (<replaceable>search-condition</replaceable
>) 
</programlisting>
<variablelist>
<varlistentry><term><indexterm><primary>Boolean operators</primary>
<secondary>NOT, AND, OR</secondary></indexterm>OR</term>
<listitem><para><indexterm><primary>Logical operators</primary>
<secondary>search condition use of</secondary></indexterm>specifies
the resulting search condition<indexterm><primary>Logical operators</primary>
<secondary>NOT, AND, OR</secondary></indexterm> is true if and only
if either of the surrounding predicates or search conditions<indexterm>
<primary>Search condition</primary><secondary>Boolean operators within</secondary>
</indexterm> is true<indexterm><primary>Boolean operators</primary>
<secondary>search condition use of</secondary></indexterm>.</para>
</listitem>
</varlistentry>
<varlistentry><term>AND</term>
<listitem><para>specifies the resulting search condition is true if
and only if both the surrounding predicates or search conditions are
true.</para></listitem>
</varlistentry>
<varlistentry><term>NOT</term>
<listitem><para>reverses the truth value of its operand—the following
predicate or search condition.</para></listitem>
</varlistentry>
<varlistentry><term><indexterm><primary>Search condition</primary>
<secondary>predicate within</secondary></indexterm>predicate </term>
<listitem><para>is a BETWEEN, comparison, EXISTS, IN, LIKE, NULL,
or quantified comparison predicate. A predicate specifies conditions
that must be satisfied for a row to be chosen. See <xref
linkend="i1018855" role="select:quotedtitle page"/> and individual
entries.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Considerations for Search Condition</title>
<section>
<title>Order of Evaluation</title>
<para>SQL evaluates search conditions in this order: </para>
<procedure>
<step><para>Predicates within parentheses</para></step>
<step><para>NOT</para></step>
<step><para>AND</para></step>
<step><para>OR</para></step>
</procedure>
</section>
<section>
<title>Column References</title>
<para>Within a search condition, a reference to a column refers to
the value of that column in the row currently being evaluated by the
search condition. </para>
</section>
<section>
<title>Subqueries</title>
<para>If a search condition includes a subquery and the subquery returns
no values, the predicate evaluates to null. See <xref linkend="i1032551"
role="select:quotedtitle page"/>.</para>
</section>
</section>
<section>
<title>Examples of Search Condition</title>
<itemizedlist>
<listitem><para>Select rows by using a search condition composed of
three comparison predicates joined by AND operators<indexterm><primary
>Search condition</primary><secondary>examples of</secondary>
</indexterm>:</para>
<programlisting>select O.ordernum, O.deliv_date, OD.qty_ordered
FROM sales.orders O,
  sales.odetail OD 
WHERE qty_ordered &lt; 9 AND deliv_date &lt;= DATE '2008-11-01'
  AND O.ordernum = OD.ordernum;

ORDERNUM    DELIV_DATE  QTY_ORDERED
----------  ----------  -----------
    100210  2008-04-10           3
    100210  2008-04-10           3
    100210  2008-04-10           6
    100250  2008-06-15           4
    101220  2008-12-15           3
       ...
--- 28 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Select rows by using a search condition composed of
three comparison predicates, two of which are joined by an OR operator
(within parentheses), and where the result of the OR and the first
comparison predicate are joined by an AND operator:</para>
<programlisting>SELECT partnum, S.suppnum, suppname
FROM invent.supplier S,
  invent.partsupp PS
WHERE S.suppnum = PS.suppnum
  AND (partnum &lt; 3000 OR partnum = 7102);

PARTNUM  SUPPNUM  SUPPNAME
-------  -------  ------------------
    212        1  NEW COMPUTERS INC
    244        1  NEW COMPUTERS INC
    255        1  NEW COMPUTERS INC
    ...
   7102       10  LEVERAGE INC

--- 18 row(s) selected.
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1032551" pagebreak="yes">
<title>Subquery</title>
<para><indexterm><primary>Subquery</primary><secondary>description
of</secondary></indexterm>A subquery is a query expression enclosed
in parentheses<indexterm><primary>Search condition</primary><secondary
>description of</secondary></indexterm>. Its syntactic form is specified
in the syntax of a SELECT statement. For further information about
query expressions, see <xref linkend="i1008894"
role="select:quotedtitle page"/>.</para>
<para>A subquery is used to provide values for a BETWEEN, comparison,
EXISTS, IN, or quantified comparison predicate in a search condition.
It is also used to specify a derived table in the FROM clause of a
SELECT statement.</para>
<para>A subquery can be a table, row, or scalar subquery. Therefore,
its result table can be a table consisting of multiple rows and columns,
a single row of column values, or a single row consisting of only
one column value. </para>
<section>
<title>SELECT Form of a Subquery</title>
<para>A subquery is typically specified as a special form of a SELECT
statement enclosed in parentheses that queries (or selects) to provide
values in a search condition or to specify a derived table as a table
reference. </para>
<para>The form of a subquery specified as a SELECT statement is <replaceable
>query-expr</replaceable>.</para>
<para>Neither the ORDER BY clause nor [FIRST N] / [ANY N] clause is
allowed in a subquery. </para>
</section>
<section>
<title>Using Subqueries to Provide Comparison Values</title>
<indexterm><primary>Subquery</primary><secondary>outer query</secondary>
</indexterm><indexterm><primary>Subquery</primary><secondary>inner
query</secondary></indexterm>
<para>When a subquery is used to provide comparison values, the SELECT
statement that contains the subquery is called an outer query. The
subquery within the SELECT is called an <replaceable>inner query</replaceable
>. In this case, the differences between the SELECT statement and
the SELECT form of a subquery are:</para>
<itemizedlist>
<listitem><para>A subquery is always enclosed in parentheses.</para>
</listitem>
<listitem><para>A subquery cannot contain an ORDER BY clause.</para>
</listitem>
<listitem><para>If a subquery is not part of an EXISTS, IN, or quantified
comparison predicate, and the subquery evaluates to more than one
row, a run-time error occurs.</para></listitem>
</itemizedlist>
</section>
<section>
<title>Nested Subqueries When Providing Comparison Values</title>
<para>An outer query (a main SELECT statement) can have nested subqueries.
Subqueries within the same WHERE or HAVING clause are at the same
level. For example, this query has one level of nesting:</para>
<programlisting>SELECT * FROM TABLE1
  WHERE A = (SELECT P FROM TABLE2 WHERE Q = 1)
    AND B = (SELECT X FROM TABLE3 WHERE Y = 2) 
</programlisting>
<para>A subquery within the WHERE clause of another subquery is at
a different level, however, so this query has two levels of nesting:</para>
<programlisting>SELECT * FROM TABLE1
  WHERE A = (SELECT P FROM TABLE2
             WHERE Q = (SELECT X FROM TABLE3
                        WHERE Y = 2)) 
</programlisting>
<para>The maximum level of nested subqueries might depend on:<itemizedlist>
<listitem><para>The complexity of the subqueries.</para></listitem>
<listitem><para>Whether the subquery is correlated and if so, whether
it can be unnested.</para></listitem>
<listitem><para>Amount of available memory.</para></listitem>
</itemizedlist>Other factors may affect the maximum level of subqueries.</para>
</section>
<section>
<title>Correlated Subqueries When Providing Comparison Values</title>
<para><indexterm><primary>Subquery</primary><secondary>correlated </secondary>
</indexterm>In a subquery, when you refer to columns of any table
or view defined in an outer query, the reference is called an outer
reference. A subquery containing an outer reference is called a correlated
subquery<indexterm><primary>Subquery</primary><secondary>outer reference</secondary>
</indexterm>.</para>
<para>If you refer to a column name that occurs in more than one outer
query, you must qualify the column name with the correlation name
of the table or view to which it belongs. Similarly, if you refer
to a column name that occurs in the subquery and in one or more outer
queries, you must qualify the column name with the correlation name
of the table or view to which it belongs. The correlation name is
known to other subqueries at the same level, or to inner queries but
not to outer queries.</para>
<para>If you use the same correlation name at different levels of
nesting, an inner query uses the one from the nearest outer level. </para>
</section>
</section>
<section id="i1019224" pagebreak="yes">
<title>Tables</title>
<indexterm><primary>Table </primary><secondary>description of</secondary>
</indexterm>
<para>A table is a logical representation of data in which a set of
records is represented as a sequence of rows, and the set of fields
common to all rows is represented by columns. A column is a set of
values of the same data type with the same definition. The intersection
of a row and column represents the data value of a particular field
in a particular record. </para>
<para>Every table must have one or more columns, but the number of
rows can be zero. No inherent order of rows exists within a table. </para>
<para>You create <phrase>a Trafodion</phrase> SQL user table by using
the CREATE TABLE statement. See the <xref linkend="i1063425"
role="select:quotedtitle page"/>. The definition of a user table within
the statement includes this information:</para>
<itemizedlist>
<listitem><para>Name of the table</para></listitem>
<listitem><para>Name of each column of the table</para></listitem>
<listitem><para>Type of data you can store in each column of the table</para>
</listitem>
<listitem><para>Other information about the table, including the physical
characteristics of the file that stores the table (for example, the
storage order of rows within the table)</para></listitem>
</itemizedlist>
<para>A Trafodion SQL table is described in an SQL schema and stored
as an HBase table. <phrase>Trafodion SQL tables have regular ANSI
names in the catalog TRAFODION. </phrase>A Trafodion SQL table name
can be a fully qualified ANSI name of the form <literal>TRAFODION.<replaceable
>schema-name.object-name</replaceable></literal>.<phrase> A Trafodion
SQL table’s metadata is stored in the schema <literal>TRAFODION."_MD_"</literal
>.</phrase></para>
<para>Because Trafodion defines the encodings for column values in
Trafodion SQL tables, those tables support various Trafodion SQL statements.
See <xref linkend="Supported-SQL-HBase" role="select:quotedtitle page"
/>.</para>
<para>Internally, Trafodion SQL tables use a single HBase column family
and shortened column names to conserve space. Their encoding allows
keys consisting of multiple columns and preserves the order of key
values as defined by SQL. The underlying HBase column model makes
it very easy to add and remove columns from Trafodion SQL tables.
HBase columns that are not recorded in the Trafodion metadata are
ignored, and missing columns are considered NULL values.</para>
<section>
<title>Base Tables and Views</title>
<para>In some descriptions of SQL, tables created with a CREATE TABLE
statement are called base tables to distinguish them from views, which
are called logical tables.</para>
<para><indexterm><primary>Views</primary><secondary>relationship to
tables</secondary></indexterm>A view is a named logical table defined
by a query specification that uses one or more base tables or other
views. See <xref linkend="i1040744" role="select:quotedtitle page"
/>.</para>
</section>
<section>
<title>Example of a Base Table</title>
<para>For example, this EMPLOYEE table is a base table in a sample
database: </para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="6" tgroupstyle="TI  inline table">
<thead>
<row><entry>EMPNUM</entry><entry>FIRST_NAME</entry><entry>LAST_NAME</entry>
<entry>DEPTNUM</entry><entry>JOBCODE</entry><entry>SALARY</entry></row>
</thead>
<tbody>
<row><entry>1</entry><entry>ROGER</entry><entry>GREEN</entry><entry
>9000</entry><entry>100</entry><entry>175500.00</entry></row>
<row><entry>23</entry><entry>JERRY</entry><entry>HOWARD</entry><entry
>1000</entry><entry>100</entry><entry>137000.00</entry></row>
<row><entry>75</entry><entry>TIM</entry><entry>WALKER</entry><entry
>3000</entry><entry>300</entry><entry>32000.00</entry></row>
<row><entry>. . .</entry><entry>. . .</entry><entry>. . .</entry><entry
>. . .</entry><entry>. . .</entry><entry>. . .</entry></row>
</tbody>
</tgroup>
</informaltable>
<para>In this sample table, the columns are EMPNUM, FIRST_NAME, LAST_NAME,
DEPTNUM, JOBCODE, and SALARY. The values in each column have the same
data type. </para>
</section>
</section>
<section id="i1040744" pagebreak="yes">
<title>Views</title>
<para><indexterm><primary>Views</primary><secondary>description of</secondary>
</indexterm>A view provides an alternate way of looking at data in
one or more tables. A view is a named specification of a result table,
which is a set of rows selected or generated from one or more base
tables or other views. The specification is a SELECT statement that
is executed whenever the view is referenced. </para>
<para>A view is a logical table created with the CREATE VIEW statement
and derived by projecting a subset of columns, restricting a subset
of rows, or both, from one or more base tables or other views. </para>
<section>
<title>SQL Views</title>
<para>A view’s name must be unique among table and view names within
the schema that contains it. </para>
<para>Single table views can be updatable. Multitable views are not
updatable. </para>
<para>For information about SQL views, see <xref linkend="i1076221"
role="select:quotedtitle page"/> and <xref linkend="i1007707"
role="select:quotedtitle page"/>.</para>
</section>
<section id="i1040586">
<title>Example of a View</title>
<para>You can define a view to show only part of the data in a table.
For example, this EMPLIST view is defined as part of the EMPLOYEE
table: </para>
<informaltable colsep="0" frame="all" rowsep="0">
<tgroup cols="5" tgroupstyle="TI  inline table">
<thead>
<row><entry>EMPNUM</entry><entry>FIRST_NAME</entry><entry>LAST_NAME</entry>
<entry>DEPTNUM</entry><entry>JOBCODE</entry></row>
</thead>
<tbody>
<row><entry>1</entry><entry>ROGER</entry><entry>GREEN</entry><entry
>9000</entry><entry>100</entry></row>
<row><entry>23</entry><entry>JERRY</entry><entry>HOWARD</entry><entry
>1000</entry><entry>100</entry></row>
<row><entry>75</entry><entry>TIM</entry><entry>WALKER</entry><entry
>3000</entry><entry>300</entry></row>
<row><entry>. . .</entry><entry>. . .</entry><entry>. . .</entry><entry
>. . .</entry><entry>. . .</entry></row>
</tbody>
</tgroup>
</informaltable>
<para>In this sample view, the columns are EMPNUM, FIRST_NAME, LAST_NAME,
DEPTNUM, and JOBCODE. The SALARY column in the EMPLOYEE table is not
part of the EMPLIST view. </para>
</section>
</section>
</chapter>
<chapter id="i1004213">
<title>SQL Clauses</title>
<para>Clauses are used by Trafodion SQL statements to specify default
values, ways to sample or sort data, how to store physical data, and
other details.</para>
<para>This section describes:</para>
<itemizedlist>
<listitem><para><xref linkend="i1005636" role="select:quotedtitle"
/> specifies a default value for a column being created.</para>
</listitem>
<listitem><para><xref linkend="FORMATcl" role="select:quotedtitle"
/> specifies the format to use.</para></listitem>
<listitem><para><xref linkend="i1005599" role="select:quotedtitle"
/> specifies the sampling method used to select a subset of the intermediate
result table of a SELECT statement.</para></listitem>
<listitem><para><xref linkend="i1004369" role="select:quotedtitle"
/> specifies the order in which to sort rows of the intermediate result
table for calculating sequence functions.</para></listitem>
<listitem><para><xref linkend="i1004421" role="select:quotedtitle"
/> generates, for each row of the SELECT source table, a row for each
item in the transpose item list.</para></listitem>
</itemizedlist>
<section id="i1005636" pagebreak="yes">
<title>DEFAULT Clause</title>
<para><xref linkend="i1005712" role="select:quotedtitle"/></para>
<indexterm><primary>Clauses</primary><secondary>DEFAULT</secondary>
</indexterm><indexterm><primary>DEFAULT clause</primary><secondary
>syntax diagram of</secondary></indexterm><indexterm><primary>CREATE
TABLE statement</primary><secondary>DEFAULT clause</secondary>
</indexterm><indexterm><primary>DEFAULT clause</primary><secondary
>CREATE TABLE use of</secondary></indexterm><indexterm><primary>ALTER
TABLE statement</primary><secondary>DEFAULT clause</secondary>
</indexterm>
<para>The DEFAULT option of the CREATE TABLE or ALTER TABLE <replaceable
>table-name</replaceable> ADD COLUMN statement specifies a default
value for a column being created. The default value is used when a
row is inserted in the table without a value for the column.</para>
<programlisting>DEFAULT <replaceable>default</replaceable> | NO DEFAULT <literal
condition="hidden">| <replaceable>identity-column-specification</replaceable
></literal>

 default is:
     <replaceable>literal</replaceable> 
   | NULL 
   | CURRENT_DATE 
   | CURRENT_TIME 
   | CURRENT_TIMESTAMP

<literal condition="hidden"><replaceable>identity-column-specification</replaceable
> is:
  GENERATED BY DEFAULT AS IDENTITY</literal></programlisting>
<programlisting condition="hidden">  | GENERATED ALWAYS AS IDENTITY</programlisting>
<variablelist>
<varlistentry><term>NO DEFAULT</term>
<listitem><para>specifies the column has no default value. You cannot
specify NO DEFAULT in an ALTER TABLE statement. See <xref
linkend="i1004893" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term>DEFAULT <replaceable>literal</replaceable></term>
<listitem><para>is a literal of a data type compatible with the data
type of the associated column.</para><para>For a character column, <replaceable
>literal</replaceable> must be a string literal of no more than 240
characters or the length of the column, whichever is less. The maximum
length of a default value for a character column is 240 bytes (minus
control characters) or the length of the column, whichever is less.
Control characters consist of character set prefixes and single quote
delimiter found in the text itself.</para>
<para>For a numeric column, <replaceable>literal</replaceable> must
be a numeric literal that does not exceed the defined length of the
column. The number of digits to the right of the decimal point must
not exceed the scale of the column, and the number of digits to the
left of the decimal point must not exceed the number in the length
(or length minus scale, if you specified scale for the column).</para>
<para>For a datetime column, <replaceable>literal</replaceable> must
be a datetime literal with a precision that matches the precision
of the column.</para>
<para>For an INTERVAL column, <replaceable>literal</replaceable> must
be an INTERVAL literal that has the range of INTERVAL fields defined
for the column.</para>
</listitem>
</varlistentry>
<varlistentry><term>DEFAULT NULL</term>
<listitem><para>specifies NULL as the default. This default can occur
only with a column that allows null.</para></listitem>
</varlistentry>
<varlistentry><term>DEFAULT CURRENT_DATE</term>
<listitem><para>specifies the default value for the column as the
value returned by the CURRENT_DATE function at the time of the operation
that assigns a value to the column. This default can occur only with
a column whose data type is DATE.</para></listitem>
</varlistentry>
<varlistentry><term>DEFAULT CURRENT_TIME</term>
<listitem><para>specifies the default value for the column as the
value returned by the CURRENT_TIME function at the time of the operation
that assigns a value to the column. This default can occur only with
a column whose data type is TIME.</para></listitem>
</varlistentry>
<varlistentry><term>DEFAULT CURRENT_TIMESTAMP</term>
<listitem><para>specifies the default value for the column as the
value returned by the CURRENT_TIMESTAMP function at the time of the
operation that assigns a value to the column. This default can occur
only with a column whose data type is TIMESTAMP.</para></listitem>
</varlistentry>
<varlistentry condition="hidden"><term><replaceable>identity-column-specification</replaceable
></term>
<listitem><para>indicates that a particular column is a sequence-generating
IDENTITY column. GENERATED BY DEFAULT AS IDENTITY indicates that the
system will generate values for this column by default or values can
be specified by the user. GENERATED ALWAYS AS IDENTITY indicates that
the system will always generate values for this column by default.
User-specified values are not allowed with GENERATED ALWAYS AS IDENTITY.</para>
</listitem>
</varlistentry>
</variablelist>
<section id="i1005712">
<title>Examples of DEFAULT</title>
<itemizedlist>
<listitem><para>This example uses DEFAULT clauses on CREATE TABLE
to specify default column values:<indexterm><primary>DEFAULT clause</primary>
<secondary>examples of</secondary></indexterm></para>
<programlisting>CREATE TABLE items
  ( item_id      CHAR(12)    NO DEFAULT 
    ,description CHAR(50)    DEFAULT NULL 
    ,num_on_hand INTEGER     DEFAULT 0 NOT NULL );
</programlisting>
</listitem>
<listitem><para>This example uses DEFAULT clauses on CREATE TABLE
to specify default column values:</para>
<programlisting>CREATE TABLE persnl.project 
  ( projcode           NUMERIC (4) UNSIGNED 
                       NO DEFAULT 
                       NOT NULL 
    ,empnum            NUMERIC (4) UNSIGNED 
                       NO DEFAULT 
                       NOT NULL 
    ,projdesc          VARCHAR (18) 
                       DEFAULT NULL 
    ,start_date        DATE 
                       DEFAULT CURRENT_DATE 
    ,ship_timestamp    TIMESTAMP 
                       DEFAULT CURRENT_TIMESTAMP 
    ,est_complete      INTERVAL DAY 
                       DEFAULT INTERVAL '30' DAY 
    ,PRIMARY KEY      (projcode) );
</programlisting>
</listitem>
<listitem condition="hidden"><para>This example uses <replaceable
>identity-column-specification</replaceable> on CREATE TABLE to specify
that the system generates the value for column <literal>surrogate_key</literal
> if you have not specified one:</para>
<programlisting>CREATE TABLE T (surrogate_key LARGEINT GENERATED BY
     DEFAULT AS IDENTITY NOT NULL,
  name CHAR (256) NOT NULL,
  order_number INT UNSIGNED NOT NULL,
     primary key(surrogate_key, order_number)
)
HASH PARTITION BY (surrogate_key);
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="FORMATcl" pagebreak="yes">
<title>FORMAT Clause</title>
<itemizedlist>
<listitem><para><xref linkend="consFORMATcl" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="considsOtherFormats"
role="select:quotedtitle"/></para></listitem>
<listitem><para><xref linkend="exFORMATcl" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<para>The FORMAT <indexterm><primary>Clauses</primary><secondary>FORMAT</secondary>
</indexterm>clause <indexterm><primary>FORMAT clause</primary>
<secondary>syntax diagram</secondary></indexterm>specifies the output
format for DATE values. It can also be used to specify the length
of character output or to specify separating the digits of integer
output with colons.</para>
<para>Date Formats:<programlisting>(FORMAT <replaceable>'format-string'</replaceable
>) |

(DATE, FORMAT 'format-string')

<replaceable>format-string</replaceable> for Date Formats is:
   YYYY-MM-DD
   MM/DD/YYYY
   YY/MM/DD
   YYYY/MM/DD
   YYYYMMDD
   DD.MM.YYYY
   DD-MM-YYYY
   DD-MMM-YYYY
</programlisting>Other Formats:<programlisting>(FORMAT '<replaceable
>format-string</replaceable>')

<replaceable>format-string</replaceable> for other formats is:
   XXX
   99:99:99:99
   -99:99:99:99
</programlisting><variablelist>
<varlistentry><term>YYYY-MM-DD</term>
<listitem><para>specifies that the FORMAT clause output format is <replaceable
>year-month-day</replaceable>.</para></listitem>
</varlistentry>
<varlistentry><term>MM/DD/YYYY</term>
<listitem><para>specifies that the FORMAT clause output format is <replaceable
>month/day/year</replaceable></para></listitem>
</varlistentry>
<varlistentry><term>YY/MM/DD</term>
<listitem><para>specifies that the FORMAT clause output format is <replaceable
>year/month/day</replaceable>.</para></listitem>
</varlistentry>
<varlistentry><term>YYYY/MM/DD</term>
<listitem><para>specifies that the FORMAT clause output format is <replaceable
>year/month/day</replaceable>.</para></listitem>
</varlistentry>
<varlistentry><term>YYYYMMDD</term>
<listitem><para>specifies that the FORMAT clause output format is <replaceable
>yearmonthday</replaceable>.</para></listitem>
</varlistentry>
<varlistentry><term>DD.MM.YYYY</term>
<listitem><para>specifies that the FORMAT clause output format is <replaceable
>day.month.year</replaceable>.</para></listitem>
</varlistentry>
<varlistentry><term>DD-MM-YYYY</term>
<listitem><para>specifies that the FORMAT clause output format is <replaceable
>day-month-year</replaceable>.</para></listitem>
</varlistentry>
<varlistentry><term>DD-MMM-YYYY</term>
<listitem><para>specifies that the FORMAT clause output format is <replaceable
>day-month-year</replaceable>.</para></listitem>
</varlistentry>
<varlistentry><term>XXX</term>
<listitem><para>specifies that the FORMAT clause output format is
a string format. The input must be a numeric or string value.</para>
</listitem>
</varlistentry>
<varlistentry><term>99:99:99:99</term>
<listitem><para>specifies that the FORMAT clause output format is
a timestamp. The input must be a numeric value.</para></listitem>
</varlistentry>
<varlistentry><term>-99:99:99:99</term>
<listitem><para>specifies that the FORMAT clause output format is
a timestamp. The input must be a numeric value.</para></listitem>
</varlistentry>
</variablelist></para>
<section id="consFORMATcl">
<title>Considerations for Date Formats</title>
<para>The expression <indexterm><primary>FORMAT clause</primary>
<secondary>considerations for date formats</secondary></indexterm
>preceding the (FORMAT ”<replaceable>format-string</replaceable>')
clause must be a DATE value.</para>
<para>The expression preceding the (DATE, FORMAT <replaceable>'format-string</replaceable
>') clause must be a quoted string in the USA, EUROPEAN, or DEFAULT
date format.</para>
</section>
<section id="considsOtherFormats">
<title>Considerations for Other Formats</title>
<para>For XXX, the expression <indexterm><primary>FORMAT clause</primary>
<secondary>considerations for other formats</secondary></indexterm
>preceding the (FORMAT <replaceable>'format-string</replaceable>')
clause must be a numeric value or a string value.</para>
<para>For 99:99:99:99 and -99:99:99:99, the expression preceding the
(FORMAT <replaceable>'format-string</replaceable>') clause must be
a numeric value.</para>
</section>
<section id="exFORMATcl">
<title>Examples of FORMAT</title>
<para>The format <indexterm><primary>FORMAT clause</primary><secondary
>examples of</secondary></indexterm>string 'XXX' in this example will
yield a sample result of <literal>abc</literal>:<programlisting>SELECT 'abcde' (FORMAT 'XXX') FROM (VALUES(1)) t;</programlisting
></para>
<para>The format string 'YYYY-MM_DD' in this example will yield a
sample result of <literal>2008-07-17</literal>.<programlisting>SELECT CAST('2008-07-17' AS DATE) (FORMAT 'YYYY-MM-DD') FROM (VALUES(1)) t;</programlisting
></para>
<para>The format string 'MM/DD/YYYY' in this example will yield a
sample result of <literal>07/17/2008</literal>.<programlisting>SELECT '2008-07-17' (DATE, FORMAT 'MM/DD/YYYY') FROM (VALUES(1)) t;</programlisting
></para>
<para>The format string 'YY/MM/DD' in this example will yield a sample
result of <literal>08/07/17</literal>.<programlisting>SELECT '2008-07-17'(DATE, FORMAT 'YY/MM/DD') FROM (VALUES(1)) t;</programlisting
></para>
<para>The format string 'YYYY/MM/DD' in this example will yield a
sample result of <literal>2008/07/17</literal>.<programlisting>SELECT '2008-07-17' (DATE, FORMAT 'YYYY/MM/DD') FROM (VALUES(1)) t;</programlisting
></para>
<para>The format string 'YYYYMMDD' in this example will yield a sample
result of <literal>20080717</literal>.<programlisting>SELECT '2008-07-17' (DATE, FORMAT 'YYYYMMDD') FROM (VALUES(1)) t;</programlisting
></para>
<para>The format string 'DD.MM.YYYY' in this example will yield a
sample result of <literal>17.07.2008</literal>.<programlisting>SELECT '2008-07-17' (DATE, FORMAT 'DD.MM.YYYY') FROM (VALUES(1)) t;</programlisting
></para>
<para>The format string 'DD-MMM-YYYY' in this example will yield a
sample result of <literal>17–JUL-2008</literal>.<programlisting>SELECT '2008-07-17' (DATE, FORMAT 'DD-MMM-YYYY') FROM (VALUES(1)) t;</programlisting
></para>
<para>The format string '99:99:99:99' in this example will yield a
sample result of <literal>12:34:56:78</literal>.<programlisting>SELECT 12345678 (FORMAT '99:99:99:99') FROM (VALUES(1)) t;</programlisting
></para>
<para>The format string '-99:99:99:99' in this example will yield
a sample result of <literal>-12:34:56:78</literal>.<programlisting
>SELECT (-12345678) (FORMAT '-99:99:99:99') FROM (VALUES(1)) t;</programlisting
></para>
</section>
</section>
<section id="i1005599" pagebreak="yes">
<title>SAMPLE Clause</title>
<itemizedlist>
<listitem><para><xref linkend="i1004313" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1004329" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>SAMPLE clause</primary><secondary>SELECT statement
use of</secondary></indexterm><indexterm><primary>Clauses</primary>
<secondary>SAMPLE</secondary></indexterm>
<para>The SAMPLE clause of the SELECT statement specifies the sampling
method used to select a subset of the intermediate result table of
a SELECT statement. The intermediate result table consists of the
rows returned by a WHERE clause or, if no WHERE clause exists, the
FROM clause. See <xref linkend="i1008894" role="select:quotedtitle page"
/>.</para>
<indexterm><primary>SAMPLE clause</primary><secondary>syntax diagram
of</secondary></indexterm>
<para>SAMPLE is a Trafodion SQL extension.</para>
<programlisting>SAMPLE <replaceable>sampling-method</replaceable> 

<replaceable>sampling-method</replaceable> is: 
     RANDOM <replaceable>percent-size</replaceable>  
   | FIRST <replaceable>rows-size</replaceable> 
              [SORT BY <replaceable>colname</replaceable> [ASC[ENDING] | DESC[ENDING]] 
                [,<replaceable>colname</replaceable> [ASC[ENDING] | DESC[ENDING]]]...] 
   | PERIODIC <replaceable>rows-size</replaceable> EVERY <replaceable
>number-rows</replaceable> ROWS 
              [SORT BY <replaceable>colname</replaceable> [ASC[ENDING] | DESC[ENDING]] 
                [,<replaceable>colname</replaceable> [ASC[ENDING] | DESC[ENDING]]]...] 

<replaceable>percent-size</replaceable> is: 
     <replaceable>percent-result</replaceable> PERCENT [ROWS<literal
condition="hidden"> 
       | {CLUSTERS OF <replaceable>number-blocks</replaceable> BLOCKS}</literal
>] 
   | BALANCE WHEN <replaceable>condition</replaceable> 
       THEN <replaceable>percent-result</replaceable> PERCENT [ROWS] 
       [WHEN <replaceable>condition</replaceable> THEN <replaceable
>percent-result</replaceable> PERCENT [ROWS]]...
       [ELSE <replaceable>percent-result</replaceable> PERCENT [ROWS]] END 

<replaceable>rows-size</replaceable> is: 
     <replaceable>number-rows</replaceable> ROWS 
   | BALANCE WHEN <replaceable>condition</replaceable> THEN <replaceable
>number-rows</replaceable> ROWS 
            [WHEN <replaceable>condition</replaceable> THEN <replaceable
>number-rows</replaceable> ROWS]...
            [ELSE <replaceable>number-rows</replaceable> ROWS] END 
</programlisting>
<variablelist>
<varlistentry><term>RANDOM <replaceable>percent-size</replaceable
> </term>
<listitem><para>directs Trafodion SQL to choose rows randomly (each
row having an unbiased probability of being chosen) without replacement
from the result table. The sampling size is determined by the <replaceable
>percent-size</replaceable>, defined as:</para>
<variablelist>
<varlistentry><term>  <replaceable>percent-result</replaceable> PERCENT
[ROWS<phrase condition="hidden">  | {CLUSTERS OF <replaceable>number-blocks</replaceable
> BLOCKS}</phrase>] | BALANCE WHEN <replaceable>condition</replaceable
> THEN <replaceable>percent-result</replaceable> PERCENT [ROWS]  
   [WHEN <replaceable>condition</replaceable> THEN <replaceable>percent-result</replaceable
> PERCENT [ROWS]]...     [ELSE <replaceable>percent-result</replaceable
> PERCENT [ROWS]] END </term>
<listitem><para>specifies the value of the size for RANDOM sampling
by using a percent of the result table. The value <replaceable>percent-result</replaceable
> must be a numeric literal.</para><para>You can determine the actual
size of the sample. Suppose that <replaceable>N</replaceable> rows
exist in the intermediate result table. Each row is picked with a
probability of <replaceable>r</replaceable>%, where <replaceable>r</replaceable
> is the sample size in PERCENT. Therefore, the actual size of the
resulting sample is approximately <replaceable>r</replaceable>% of <replaceable
>N</replaceable>. The number of rows picked follows a binomial distribution
with mean equal to <replaceable>r</replaceable> * <replaceable>N</replaceable
>/100.</para>
<para>If you specify a sample size greater than 100 PERCENT, Trafodion
SQL returns all the rows in the result table plus duplicate rows.
The duplicate rows are picked from the result table according to the
specified sampling method. This technique is called oversampling<phrase
condition="hidden"> and is not allowed with cluster sampling</phrase
>.</para>
<variablelist>
<varlistentry><term>ROWS</term>
<listitem><para>specifies row sampling. Row sampling is the default<phrase
condition="hidden"> if you specify neither ROWS nor CLUSTERS</phrase
>.</para></listitem>
</varlistentry>
<varlistentry condition="hidden"><term>CLUSTERS OF <replaceable>number-blocks</replaceable
> BLOCKS</term>
<listitem><para>specifies cluster sampling. You can use the CLUSTERS
clause for a base table only if no WHERE clause exists in the SELECT
statement. First, a cluster is chosen randomly, and then all rows
in the selected cluster are added to the sample. The size of the cluster
is determined by <replaceable>number-blocks</replaceable>. This process
is repeated until the sample size is generated. See <xref
linkend="i1004317" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term>BALANCE</term>
<listitem><para>If you specify a BALANCE expression, Trafodion SQL
performs stratified sampling. The intermediate result table is divided
into disjoint strata based on the WHEN conditions. Each stratum is
sampled independently by using the sampling size. For a given row,
the stratum to which it belongs is determined by the first WHEN condition
that is true for that row—if a true condition exists. If no true condition
exists, the row belongs to the ELSE stratum. </para></listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term>FIRST <replaceable>rows-size</replaceable> [SORT
BY <replaceable>colname</replaceable> [ASC[ENDING] | DESC[ENDING]]
[,<replaceable>colname</replaceable> [ASC[ENDING] | DESC[ENDING]]]...]</term>
<listitem><para>directs Trafodion SQL to choose the first rows from
the result table. You can specify the order of the rows to sample.
Otherwise, Trafodion SQL chooses an arbitrary order. The sampling
size is determined by the <replaceable>rows-size</replaceable>, defined
as:</para>
<variablelist>
<varlistentry><term>  <replaceable>number-rows</replaceable> ROWS
 | BALANCE WHEN <replaceable>condition</replaceable> THEN <replaceable
>number-rows</replaceable> ROWS [WHEN <replaceable>condition</replaceable
> THEN <replaceable>number-rows</replaceable> ROWS]...          [ELSE <replaceable
>number-rows</replaceable> ROWS] END </term>
<listitem><para>specifies the value of the size for FIRST sampling
by using the number of rows intended in the sample. The value <replaceable
>number-rows</replaceable> must be an integer literal.</para><para
>You can determine the actual size of the sample. Suppose that <replaceable
>N</replaceable> rows exist in the intermediate result table. If the
size <replaceable>s</replaceable> of the sample is specified as a
number of rows, the actual size of the resulting sample is the minimum
of <replaceable>s</replaceable> and <replaceable>N</replaceable>.</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term>PERIODIC <replaceable>rows-size</replaceable> EVERY <replaceable
>number-rows</replaceable> ROWS           [SORT BY <replaceable>colname</replaceable
> [ASC[ENDING] | DESC[ENDING]]            [,<replaceable>colname</replaceable
> [ASC[ENDING] | DESC[ENDING]]]...] </term>
<listitem><para>directs Trafodion SQL to choose the first rows from
each block (or period) of contiguous rows. This sampling method is
equivalent to a separate FIRST sampling for each period, and the <replaceable
>rows-size</replaceable> is defined as in FIRST sampling. </para><para
>The size of the period is specified as a number of rows. You can
specify the order of the rows to sample. Otherwise, Trafodion SQL
chooses an arbitrary order.</para>
<para>You can determine the actual size of the sample. Suppose that <replaceable
>N</replaceable> rows exist in the intermediate result table. If the
size <replaceable>s</replaceable> of the sample is specified as a
number of rows and the size <replaceable>p</replaceable> of the period
is specified as a number of rows, the actual size of the resulting
sample is calculated as:</para>
<para>FLOOR (N/p) * s + <replaceable>minimum</replaceable> (MOD (N,
p), s) </para>
<para><replaceable>minimum</replaceable> in this expression is used
simply as the mathematical minimum of two values.</para>
</listitem>
</varlistentry>
</variablelist>
<section id="i1004313">
<title>Considerations for SAMPLE</title>
<section>
<title>Sample Rows</title>
<para>In general, when you use the SAMPLE clause, the same query returns
different sets of rows for each execution. The same set of rows is
returned only when you use the FIRST and PERIODIC sampling methods
with the SORT BY option, where no duplicates exist in the specified
column combination for the sort.</para>
</section>
<section condition="hidden" id="i1004317">
<title>Cluster Sampling</title>
<indexterm><primary>SAMPLE clause</primary><secondary>cluster sampling</secondary>
</indexterm><indexterm><primary>Cluster sampling</primary></indexterm>
<indexterm><primary>Sampling, clusters</primary></indexterm>
<para>Cluster sampling is an option supported by the SAMPLE RANDOM
clause in a SELECT statement. A cluster, in this sense, is a logically
contiguous set of disk blocks in the file in which a table is stored.
The number of blocks in a cluster is specified in the CLUSTERS subclause
of the SAMPLE RANDOM clause. For example:</para>
<programlisting>SELECT * FROM customers 
SAMPLE RANDOM 1 PERCENT 
CLUSTERS OF 2 BLOCKS;
</programlisting>
<para>This query randomly selects one percent of the clusters in the
CUSTOMERS table and then adds each row in all selected clusters to
the result table. In other words, think of the CUSTOMERS table as
a sequence of disk blocks, where each two blocks in the sequence is
a cluster. The preceding query selects one percent of the clusters
at random and then returns all the rows in each selected cluster.</para>
<para>Cluster sampling can be done only on a base table, not on intermediate
results. </para>
<indexterm><primary>Performance</primary><secondary>SAMPLE statement,
cluster sampling</secondary></indexterm>
<para>Cluster sampling is generally faster than sampling individual
rows because fewer blocks are read from disk. In random row and periodic
sampling, the entire result table being sampled is read, and each
row in the table is processed. In cluster sampling, only the disk
blocks that are part of the result table are read and processed. Therefore,
if the sampling percentage is small, the performance advantage of
cluster sampling over other sampling methods can be dramatic.</para>
<para>Cluster sampling is designed for large tables. It might return
zero rows if not enough blocks in a table exist to fill at least one
cluster and you specify a large cluster size. </para>
</section>
</section>
<section id="i1004329">
<title>Examples of SAMPLE</title>
<indexterm><primary>SAMPLE clause</primary><secondary>examples of</secondary>
</indexterm>
<para>Suppose that the data-mining tables SALESPER, SALES, and DEPT
have been created as:</para>
<programlisting>CREATE TABLE trafodion.mining.salesper 
   ( empid   NUMERIC (4) UNSIGNED NOT NULL
    ,dnum    NUMERIC (4) UNSIGNED NOT NULL
    ,salary  NUMERIC (8,2) UNSIGNED
    ,age     INTEGER
    ,sex     CHAR (6)
    ,PRIMARY KEY (empid) );
</programlisting>
<programlisting>
CREATE TABLE trafodion.mining.sales
    ( empid   NUMERIC (4) UNSIGNED NOT NULL
     ,product VARCHAR (20)
     ,region  CHAR (4)
     ,amount  NUMERIC (9,2) UNSIGNED
     ,PRIMARY KEY (empid) );
</programlisting>
<programlisting>
CREATE TABLE trafodion.mining.dept
    ( dnum    NUMERIC (4) UNSIGNED NOT NULL
     ,name    VARCHAR (20)
     ,PRIMARY KEY (dnum) );
</programlisting>
<para>Suppose, too, that sample data is inserted into this database. </para>
<itemizedlist>
<listitem><para>Return the SALARY of the youngest 50 sales people: </para>
<programlisting>
SELECT salary
FROM salesperson
SAMPLE FIRST 50 ROWS SORT BY age;

SALARY       
-----------  
   90000.00  
   90000.00  
   28000.00  
   27000.12  
  136000.00  
   37000.40  
        ...  

--- 50 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Return the SALARY of 50 sales people. In this case,
the table is clustered on EMPID. If the optimizer chooses a plan to
access rows using the primary access path, the result consists of
salaries of the 50 sales people with the smallest employee identifiers. </para>
<programlisting>
SELECT salary
FROM salesperson
SAMPLE FIRST 50 ROWS;

SALARY       
-----------  
  175500.00  
  137000.10  
  136000.00  
  138000.40  
   75000.00  
   90000.00  
        ...  

--- 50 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Return the SALARY of the youngest five sales people,
skip the next 15 rows, and repeat this process until no more rows
exist in the intermediate result table. You cannot specify periodic
sampling with the sample size larger than the period. </para>
<programlisting>
SELECT salary
FROM salesperson
SAMPLE PERIODIC 5 ROWS EVERY 20 ROWS SORT BY age;

SALARY       
-----------  
   90000.00  
   90000.00  
   28000.00  
   27000.12  
  136000.00  
   36000.00  
        ...  

--- 17 row(s) selected.
</programlisting>
<para>In this example, 62 rows exist in the SALESPERSON table. For
each set of 20 rows, the first five rows are selected. The last set
consists of two rows, both of which are selected.</para>
</listitem>
<listitem><para>Compute the average salary of a random 10 percent
of the sales people. You will get a different result each time you
run this query because it is based on a random sample.</para>
<programlisting>
SELECT AVG(salary) 
FROM salesperson 
SAMPLE RANDOM 10 PERCENT;

(EXPR)
--------------------
            61928.57

--- 1 row(s) selected.
</programlisting>
</listitem>
<listitem condition="hidden"><para>Compute the average salary of a
random 10 percent of the sales people using cluster sampling where
each cluster is 4 blocks. You will get a different result each time
you run this query because it is based on a random sample.</para>
<programlisting>
SELECT AVG(salary) 
FROM salesperson 
SAMPLE RANDOM 10 PERCENT CLUSTERS OF 4 BLOCKS;

(EXPR)
--------------------- 
            50219.524 

--- 1 row(s) selected.
</programlisting>
<para>For this query execution, the number of rows returned is limited
by the total number of rows in the SALESPERSON table. Therefore, it
is possible that no rows are returned, and the result is null.</para>
</listitem>
<listitem><para>This query illustrates sampling after execution of
the WHERE clause has chosen the qualifying rows. The query computes
the average salary of a random 10 percent of the sales people over
35 years of age. You will get a different result each time you run
this query because it is based on a random sample.</para>
<programlisting>
SELECT AVG(salary) 
FROM salesperson 
WHERE age > 35 
SAMPLE RANDOM 10 PERCENT;

(EXPR)
--------------------
            58000.00

--- 1 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Compute the average salary of a random 10 percent
of sales people belonging to the CORPORATE department. The sample
is taken from the join of the SALESPERSON and DEPARTMENT tables. You
will get a different result each time you run this query because it
is based on a random sample.</para>
<programlisting>
SELECT AVG(salary) 
FROM salesperson S, department D
WHERE S.DNUM = D.DNUM 
AND D.NAME = 'CORPORATE'
SAMPLE RANDOM 10 PERCENT;

(EXPR)
--------------------- 
           106250.000 

--- 1 row(s) selected.
</programlisting>
</listitem>
<listitem><para>In this example, the SALESPERSON table is first sampled
and then joined with the DEPARTMENT table. This query computes the
average salary of all the sales people belonging to the CORPORATE
department in a random sample of 10 percent of the sales employees.</para>
<programlisting>
SELECT AVG(salary) 
FROM ( SELECT salary, dnum 
       FROM salesperson 
       SAMPLE RANDOM 10 PERCENT ) AS S, department D 
WHERE S.DNUM = D.DNUM 
AND D.NAME = 'CORPORATE';

(EXPR)
-------------------- 
           37000.000 

--- 1 row(s) selected.
</programlisting>
<para>The results of this query and some of the results of previous
queries might return null:</para>
<programlisting>
SELECT AVG(salary) 
FROM ( SELECT salary, dnum 
       FROM salesperson 
       SAMPLE RANDOM 10 PERCENT ) AS S, department D 
WHERE S.DNUM = D.DNUM 
AND D.NAME = 'CORPORATE';

(EXPR)
-------------------- 
                   ? 

--- 1 row(s) selected.
</programlisting>
<para>For this query execution, the number of rows returned by the
embedded query is limited by the total number of rows in the SALESPERSON
table. Therefore, it is possible that no rows satisfy the search condition
in the WHERE clause.</para>
</listitem>
<listitem><para>In this example, both the tables are sampled first
and then joined. This query computes the average salary and the average
sale amount generated from a random 10 percent of all the sales people
and 20 percent of all the sales transactions. </para>
<programlisting>
SELECT AVG(salary), AVG(amount)
FROM ( SELECT salary, empid 
       FROM salesperson
       SAMPLE RANDOM 10 PERCENT ) AS S, 
     ( SELECT amount, empid
       FROM sales
       SAMPLE RANDOM 20 PERCENT ) AS T
WHERE S.empid = T.empid;

(EXPR)     (EXPR)
---------  ---------
 45000.00   31000.00

--- 1 row(s) selected.
</programlisting>
</listitem>
<listitem><para>This example illustrates oversampling. This query
retrieves 150 percent of the sales transactions where the amount exceeds
$1000. The result contains every row at least once, and 50 percent
of the rows, picked randomly, occur twice. </para>
<programlisting>
SELECT * 
FROM sales
WHERE amount > 1000
SAMPLE RANDOM 150 PERCENT;

EMPID  PRODUCT               REGION  AMOUNT
-----  --------------------  ------  -----------
    1  PCGOLD, 30MB          E          30000.00
   23  PCDIAMOND, 60MB       W          40000.00
   23  PCDIAMOND, 60MB       W          40000.00
   29  GRAPHICPRINTER, M1    N          11000.00
   32  GRAPHICPRINTER, M2    S          15000.00
   32  GRAPHICPRINTER, M2    S          15000.00 
  ...  ...                 ...               ...

--- 88 row(s) selected.
</programlisting>
</listitem>
<listitem><para>The BALANCE option enables stratified sampling. Retrieve
the age and salary of 1000 sales people such that 50 percent of the
result are male and 50 percent female.</para>
<programlisting>
SELECT age, sex, salary 
FROM salesperson 
SAMPLE FIRST 
       BALANCE WHEN sex = 'male' THEN 15 ROWS 
               WHEN sex = 'female' THEN 15 ROWS 
       END 
ORDER BY age;

AGE             SEX      SALARY
-----------  ------  -----------
         22  male       28000.00
         22  male       90000.00
         22  female    136000.00
         22  male       37000.40
          ...  ...             ...

--- 30 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Retrieve all sales records with the amount exceeding
$10000 and a random sample of 10 percent of the remaining records: </para>
<programlisting>
SELECT * 
FROM sales 
SAMPLE RANDOM 
       BALANCE WHEN amount > 10000 THEN 100 PERCENT 
       ELSE 10 PERCENT 
       END; 

EMPID  PRODUCT               REGION  AMOUNT
-----  --------------------  ------  -----------
    1  PCGOLD, 30MB          E          30000.00
   23  PCDIAMOND, 60MB       W          40000.00
   29  GRAPHICPRINTER, M1    N          11000.00
   32  GRAPHICPRINTER, M2    S          15000.00
  ...  ...                   ...             ...
  228  MONITORCOLOR, M2      N          10500.00
  ...  ...                   ...             ...

--- 32 row(s) selected.
</programlisting>
</listitem>
<listitem><para>This query shows an example of stratified sampling
where the conditions are not mutually exclusive:</para>
<programlisting>
SELECT * 
FROM sales
SAMPLE RANDOM 
BALANCE WHEN amount > 10000 THEN 100 PERCENT 
        WHEN product = 'PCGOLD, 30MB' THEN 25 PERCENT 
        WHEN region = 'W' THEN 40 PERCENT 
        ELSE 10 PERCENT 
        END;

EMPID  PRODUCT               REGION  AMOUNT
-----  --------------------  ------  -----------
    1  PCGOLD, 30MB          E          30000.00
   23  PCDIAMOND, 60MB       W          40000.00
   29  GRAPHICPRINTER, M1    N          11000.00
   32  GRAPHICPRINTER, M2    S          15000.00
   39  GRAPHICPRINTER, M3    S          20000.00
   75  LASERPRINTER, X1      W          42000.00
  ...  ...                   ...             ...

--- 30 row(s) selected.
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1004369" pagebreak="yes">
<title>SEQUENCE BY Clause</title>
<itemizedlist>
<listitem><para><xref linkend="i1007183" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1004412" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<para><indexterm><primary>SEQUENCE BY clause</primary><secondary>SELECT
statement use of</secondary></indexterm>The SEQUENCE BY clause of
the SELECT statement specifies the order in which to sort the rows
of the intermediate result table for calculating sequence functions<indexterm>
<primary>Clauses</primary><secondary>SEQUENCE BY</secondary></indexterm
>. This option is used for processing time-sequenced rows in data
mining applications. See <xref linkend="i1008894"
role="select:quotedtitle page"/>.</para>
<para><indexterm><primary>SEQUENCE BY clause</primary><secondary>syntax
diagram of</secondary></indexterm>SEQUENCE BY is a Trafodion SQL extension. </para>
<programlisting>SEQUENCE BY <replaceable>colname</replaceable> [ASC[ENDING] | DESC[ENDING]] 
   [,<replaceable>colname</replaceable> [ASC[ENDING] | DESC[ENDING]]]... 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>colname</replaceable> </term>
<listitem><para>names a column in <replaceable>select-list</replaceable
> or a column in a table reference in the FROM clause of the SELECT
statement. <replaceable>colname</replaceable> is optionally qualified
by a table, view, or correlation name; for example, CUSTOMER.CITY.</para>
</listitem>
</varlistentry>
<varlistentry><term>ASC | DESC </term>
<listitem><para>specifies the sort order. ASC is the default. For
ordering an intermediate result table on a column that can contain
null, nulls are considered equal to one another but greater than all
other nonnull values.</para></listitem>
</varlistentry>
</variablelist>
<para>You must include a SEQUENCE BY clause if you include a sequence
function in the select list of the SELECT statement. Otherwise, Trafodion
SQL returns an error. Further, you cannot include a SEQUENCE BY clause
if no sequence function exists in the select list. See <xref
linkend="i1012463" role="select:quotedtitle page"/>.</para>
<section id="i1007183">
<title>Considerations for SEQUENCE BY</title>
<itemizedlist>
<listitem><para>Sequence functions behave differently from set (or
aggregate) functions and mathematical (or scalar) functions. </para>
</listitem>
<listitem><para>If you include both SEQUENCE BY and GROUP BY clauses
in the same SELECT statement, the values of the sequence functions
must be evaluated first and then become input for aggregate functions
in the statement.</para>
<itemizedlist>
<listitem><para>For a SELECT statement that contains both SEQUENCE
BY and GROUP BY clauses, you can nest the sequence function in the
aggregate function:</para>
<programlisting>SELECT ordernum, 
    MAX(MOVINGSUM(qty_ordered, 3)) AS maxmovsum_qty,
    AVG(unit_price) AS avg_price
FROM odetail
SEQUENCE BY partnum
GROUP BY ordernum;
</programlisting>
</listitem>
<listitem><para>To use a sequence function as a grouping column, you
must use a derived table for the SEQUENCE BY query and use the derived
column in the GROUP BY clause:</para>
<programlisting>SELECT ordernum, movsum_qty, AVG(unit_price)
FROM
  (SELECT ordernum, MOVINGSUM(qty_ordered, 3), unit_price
   FROM odetail
   SEQUENCE BY partnum) 
     AS tab2 (ordernum, movsum_qty, unit_price)
GROUP BY ordernum, movsum_qty;
</programlisting>
</listitem>
<listitem><para>To use an aggregate function as the argument to a
sequence function, you must also use a derived table:</para>
<programlisting>SELECT MOVINGSUM(avg_price,2)
FROM
  (SELECT ordernum, AVG(unit_price)
   FROM odetail
   GROUP BY ordernum) 
     AS tab2 (ordernum, avg_price)
SEQUENCE BY ordernum;
</programlisting>
</listitem>
</itemizedlist>
</listitem>
<listitem><para>Like aggregate functions, sequence functions generate
an intermediate result. If the query has a WHERE clause, its search
condition is applied during the generation of the intermediate result.
Therefore, you cannot use sequence functions in the WHERE clause of
a SELECT statement.</para>
<itemizedlist>
<listitem><para>This query returns an error:</para>
<programlisting>SELECT ordernum, partnum, RUNNINGAVG(unit_price)
FROM odetail
WHERE ordernum > 800000 AND RUNNINGAVG(unit_price) > 350
SEQUENCE BY qty_ordered;
</programlisting>
</listitem>
<listitem><para>Apply a search condition to the result of a sequence
function, use a derived table for the SEQUENCE BY query, and use the
derived column in the WHERE clause:</para>
<programlisting>SELECT ordernum, partnum, runavg_price
FROM
  (SELECT ordernum, partnum, RUNNINGAVG(unit_price)
   FROM odetail
   SEQUENCE BY qty_ordered) 
     AS tab2 (ordernum, partnum, runavg_price)
WHERE ordernum > 800000 AND runavg_price > 350;
</programlisting>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</section>
<section id="i1004412">
<title>Examples of SEQUENCE BY</title>
<itemizedlist>
<listitem><para>Sequentially number each row for the entire result
and also number the rows for each part number<indexterm><primary>SEQUENCE
BY clause</primary><secondary>examples of</secondary></indexterm>:</para>
<programlisting>SELECT RUNNINGCOUNT(*) AS RCOUNT, MOVINGCOUNT(*, 
  ROWS SINCE (d.partnum&lt;>THIS(d.partnum))) 
    AS MCOUNT,
  d.partnum
FROM orders o, odetail d
WHERE o.ordernum=d.ordernum
SEQUENCE BY d.partnum, o.order_date, o.ordernum
ORDER BY d.partnum, o.order_date, o.ordernum;

RCOUNT                MCOUNT                 Part/Num  
--------------------  ---------------------  --------  
                   1                      1       212  
                   2                      2       212  
                   3                      1       244  
                   4                      2       244  
                   5                      3       244  
                  ...                    ...      ...  
                  67                      1      7301  
                  68                      2      7301  
                  69                      3      7301  
                  70                      4      7301  

--- 70 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Show the orders for each date, the amount for each
order item and the moving total for each order, and the running total
of all the orders. The query sequences orders by date, order number,
and part number. (The CAST function is used for readability only.)</para>
<programlisting>SELECT o.ordernum,
  CAST (MOVINGCOUNT(*,ROWS SINCE(THIS(o.ordernum) &lt;> 
     o.ordernum)) AS INT) AS MCOUNT, 
  d.partnum,  o.order_date, 
  (d.unit_price * d.qty_ordered) AS AMOUNT,
  MOVINGSUM (d.unit_price * d.qty_ordered, 
    ROWS SINCE(THIS(o.ordernum)&lt;>o.ordernum)) AS ORDER_TOTAL,
  RUNNINGSUM (d.unit_price * d.qty_ordered) AS TOTAL_SALES 
FROM orders o, odetail d 
WHERE o.ordernum=d.ordernum 
SEQUENCE BY o.order_date, o.ordernum, d.partnum 
ORDER BY o.order_date, o.ordernum, d.partnum;  

Order/Num   MCOUNT       Part/Num  Order/Date  
AMOUNT      ORDER_TOTAL     TOTAL_SALES 
----------  -----------  --------  ----------  
----------  --------------  --------------  

    100250            1       244  2008-01-23 
  14000.00        14000.00        14000.00  
    100250            2      5103  2008-01-23 
   4000.00        18000.00        18000.00  
    100250            3      6500  2008-01-23 
    950.00        18950.00        18950.00  

    200300            1       244  2008-02-06 
  28000.00        28000.00        46950.00  
    200300            2      2001  2008-02-06 
  10000.00        38000.00        56950.00  
    200300            3      2002  2008-02-06
  14000.00        52000.00        70950.00  
       ...          ...       ...         ... 
    800660           18      7102  2008-10-09 
   1650.00       187360.00      1113295.00  
    800660           19      7301  2008-10-09 
   5100.00       192460.00      1118395.00  

--- 69 row(s) selected.
</programlisting>
<para>For example, for order number 200300, the ORDER_TOTAL is a moving
sum within the order date 2008-02-06, and the TOTAL_SALES is a running
sum for all orders. The current window for the moving sum is defined
as <literal>ROWS SINCE (THIS(o.ordernum)&lt;>o.ordernum)</literal
>, which restricts the ORDER_TOTAL to the current order number.</para>
</listitem>
<listitem><para>Show the amount of time between orders by calculating
the interval between two dates:</para>
<programlisting>SELECT RUNNINGCOUNT(*),o.order_date,DIFF1(o.order_date)
FROM orders o
SEQUENCE BY o.order_date, o.ordernum
ORDER BY o.order_date, o.ordernum ;

(EXPR)                Order/Date  (EXPR)         
--------------------  ----------  -------------  
                   1  2008-01-23              ?  
                   2  2008-02-06             14  
                   3  2008-02-17             11  
                   4  2008-03-03             14  
                   5  2008-03-19             16  
                   6  2008-03-19              0  
                   7  2008-03-27              8  
                   8  2008-04-10             14  
                   9  2008-04-20             10  
                  10  2008-05-12             22  
                  11  2008-06-01             20  
                  12  2008-07-21             50  
                  13  2008-10-09             80  

--- 13 row(s) selected.
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1004421" pagebreak="yes">
<title>TRANSPOSE Clause</title>
<itemizedlist>
<listitem><para><xref linkend="i1004460" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1004553" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<para><indexterm><primary>TRANSPOSE clause</primary><secondary>SELECT
statement use of</secondary></indexterm>The TRANSPOSE clause of the
SELECT statement generates for each row of the SELECT source table
a row for each item in the transpose item list<indexterm><primary
>Clauses</primary><secondary>TRANSPOSE</secondary></indexterm>. The
result table of the TRANSPOSE clause has all the columns of the source
table plus, for each transpose item list, a value column or columns
and an optional key column.</para>
<para><indexterm><primary>TRANSPOSE clause</primary><secondary>syntax
diagram of</secondary></indexterm>TRANSPOSE is a Trafodion SQL extension. </para>
<programlisting>TRANSPOSE <replaceable>transpose-set</replaceable
> [<replaceable>transpose-set</replaceable>]...
   [KEY BY <replaceable>key-colname</replaceable>]

<replaceable>transpose-set</replaceable> is:
   <replaceable>transpose-item-list</replaceable> AS <replaceable
>transpose-col-list</replaceable> 

<replaceable>transpose-item-list</replaceable> is:
     <replaceable>expression-list</replaceable>
   | (<replaceable>expression-list</replaceable>) [,(<replaceable
>expression-list</replaceable>)]...

<replaceable>expression-list</replaceable> is:
   <replaceable>expression</replaceable> [,<replaceable>expression</replaceable
>]...

<replaceable>transpose-col-list</replaceable> is:
     <replaceable>colname</replaceable>   | (<replaceable>colname-list</replaceable
>)

<replaceable>colname-list</replaceable> is:
   <replaceable>colname</replaceable> [,<replaceable>colname</replaceable
>]...
</programlisting>
<variablelist>
<varlistentry><term><replaceable>transpose-item-list</replaceable
> AS <replaceable>transpose-col-list</replaceable> </term>
<listitem><para>specifies a <replaceable>transpose-set</replaceable
>, which correlates a <replaceable>transpose-item-list</replaceable
> with a <replaceable>transpose-col-list</replaceable>. The <replaceable
>transpose-item-list</replaceable> can be a list of expressions or
a list of expression lists enclosed in parentheses. The <replaceable
>transpose-col-list</replaceable> can be a single column name or a
list of column names enclosed in parentheses.</para><para>For example,
in the <replaceable>transpose-set</replaceable> TRANSPOSE (A,X),(B,Y),(C,Z)
AS (V1,V2), the items in the <replaceable>transpose-item-list</replaceable
> are (A,X),(B,Y), and (C,Z), and the <replaceable>transpose-col-list</replaceable
> is (V1,V2). The number of expressions in each item must be the same
as the number of value columns in the column list.</para>
<para>In the example TRANSPOSE A,B,C AS V, the items are A,B, and
C, and the value column is V. This form can be thought of as a shorter
way of writing TRANSPOSE (A),(B),(C) AS (V).</para>
<variablelist>
<varlistentry><term><replaceable>transpose-item-list</replaceable
> </term>
<listitem><para>specifies a list of items. An item is a value expression
or a list of value expressions enclosed in parentheses. </para>
<variablelist>
<varlistentry><term><replaceable>expression-list</replaceable> </term>
<listitem><para>specifies a list of SQL value expressions, separated
by commas. The expressions must have compatible data types.</para><para
>For example, in the transpose set TRANSPOSE A,B,C AS V, the expressions
A,B, and C have compatible data types.</para>
</listitem>
</varlistentry>
<varlistentry><term>(<replaceable>expression-list</replaceable>) [,(<replaceable
>expression-list</replaceable>)]...</term>
<listitem><para>specifies a list of expressions enclosed in parentheses,
followed by another list of expressions enclosed in parentheses, and
so on. The number of expressions within parentheses must be equal
for each list. The expressions in the same ordinal position within
the parentheses must have compatible data types.</para><para>For example,
in the transpose set TRANSPOSE (A,X),(B,Y),(C,Z) AS (V1,V2), the expressions
A,B, and C have compatible data types, and the expressions X,Y, and
Z have compatible data types.</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>transpose-col-list</replaceable> </term>
<listitem><para>specifies the columns that consist of the evaluation
of expressions in the item list as the expressions are applied to
rows of the source table.</para>
<variablelist>
<varlistentry><term><replaceable>colname</replaceable> </term>
<listitem><para>is an SQL identifier that specifies a column name.
It identifies the column consisting of the values in <replaceable
>expression-list</replaceable>.</para><para>For example, in the transpose
set TRANSPOSE A,B,C AS V, the column V corresponds to the values of
the expressions A,B, and C.</para>
</listitem>
</varlistentry>
<varlistentry><term>(<replaceable>colname-list</replaceable>) </term>
<listitem><para>specifies a list of column names enclosed in parentheses.
Each column consists of the values of the expressions in the same
ordinal position within the parentheses in the transpose item list.</para>
<para>For example, in the transpose set TRANSPOSE (A,X),(B,Y),(C,Z)
AS (V1,V2), the column V1 corresponds to the expressions A,B, and
C, and the column V2 corresponds to the expressions X,Y, and Z.</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term>KEY BY <replaceable>key-colname</replaceable> </term>
<listitem><para>optionally specifies which expression (the value in
the transpose column list corresponds to) by its position in the item
list. <replaceable>key-colname</replaceable> is an SQL identifier.
The data type of the key column is exact numeric, and the value is
NOT NULL.</para></listitem>
</varlistentry>
</variablelist>
<section id="i1004460">
<title>Considerations for TRANSPOSE</title>
<section>
<title>Multiple TRANSPOSE Clauses and Sets</title>
<itemizedlist>
<listitem><para>Multiple TRANSPOSE clauses can be used in the same
query. For example:</para>
<programlisting>SELECT KEYCOL1, VALCOL1, KEYCOL2, VALCOL2 FROM MYTABLE
TRANSPOSE A, B, C AS VALCOL1
  KEY BY KEYCOL1
TRANSPOSE D, E, F AS VALCOL2
  KEY BY KEYCOL2 
</programlisting>
</listitem>
<listitem><para>A TRANSPOSE clause can contain multiple transpose
sets. For example:</para>
<programlisting>SELECT KEYCOL, VALCOL1, VALCOL2 FROM MYTABLE
TRANSPOSE A, B, C AS VALCOL1
          D, E, F AS VALCOL2
  KEY BY KEYCOL 
</programlisting>
</listitem>
</itemizedlist>
</section>
<section>
<title>Degree and Column Order of the TRANSPOSE Result</title>
<para>The degree of the TRANSPOSE result is the degree of the source
table (the result table derived from the table reference or references
in the FROM clause and a WHERE clause if specified), plus one if the
key column is specified, plus the cardinalities of all the transpose
column lists<indexterm><primary>TRANSPOSE clause</primary><secondary
>degree of result</secondary></indexterm>.</para>
<para>The columns of the TRANSPOSE result are ordered beginning with
the columns of the source table, followed by the key column if specified,
and then followed by the list of column names in the order in which
they are specified.</para>
</section>
<section>
<title>Data Type of the TRANSPOSE Result</title>
<para>The data type of each of the value columns is the union compatible
data type of the corresponding expressions in the <replaceable>transpose-item-list</replaceable
>. You cannot have expressions with data types that are not compatible
in a <replaceable>transpose-item-list</replaceable>.</para>
<para>For example, in TRANSPOSE (A,X),(B,Y),(C,Z) AS (V1,V2), the
data type of V1 is the union compatible type for A, B, and C, and
the data type of V2 is the union compatible type for X, Y, and Z.</para>
<para>See <xref linkend="i1013224" role="select:quotedtitle page"
/>. </para>
</section>
<section>
<title>Cardinality of the TRANSPOSE Result</title>
<para>The items in each <replaceable>transpose-item-list</replaceable
> are enumerated from 1 to N, where N is the total number of items
in all the item lists in the transpose sets<indexterm><primary>TRANSPOSE
clause</primary><secondary>cardinality of result</secondary></indexterm
>. </para>
<para>In this example with a single transpose set, the value of N
is 3:</para>
<programlisting>TRANSPOSE (A,X),(B,Y),(C,Z) AS (V1,V2)
</programlisting>
<para>In this example with two transpose sets, the value of N is 5:</para>
<programlisting>TRANSPOSE (A,X),(B,Y),(C,Z) AS (V1,V2) 
           L,M AS V3
</programlisting>
<para>The values 1 to N are the key values <replaceable>k</replaceable
>i. The items in each <replaceable>transpose-item-list</replaceable
> are the expression values <replaceable>v</replaceable>i. </para>
<para>The cardinality of the result of the TRANSPOSE clause is the
cardinality of the source table times N, the total number of items
in all the transpose item lists.</para>
<para>For each row of the source table and for each value in the key
values <replaceable>k</replaceable>i, the TRANSPOSE result contains
a row with all the attributes of the source table, the key value <replaceable
>k</replaceable>i in the key column, the expression values vi in the
value columns of the corresponding transpose set, and NULL in the
value columns of other transpose sets.</para>
<para>For example, consider this TRANSPOSE clause:</para>
<programlisting>TRANSPOSE (A,X),(B,Y),(C,Z) AS (V1,V2)
          L,M AS V3
  KEY BY K
</programlisting>
<para>The value of N is 5. One row of the SELECT source table produces
this TRANSPOSE result:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="5" tgroupstyle="TI  inline table">
<thead>
<row><entry><replaceable>columns-of-source</replaceable></entry><entry
>K</entry><entry>V1</entry><entry>V2</entry><entry>V3</entry></row>
</thead>
<tbody>
<row><entry><replaceable>source-row</replaceable></entry><entry>1</entry>
<entry><replaceable>value-of-A</replaceable></entry><entry><replaceable
>value-of-X</replaceable></entry><entry>NULL</entry></row>
<row><entry><replaceable>source-row</replaceable></entry><entry>2</entry>
<entry><replaceable>value-of-B</replaceable></entry><entry><replaceable
>value-of-Y</replaceable></entry><entry>NULL</entry></row>
<row><entry><replaceable>source-row</replaceable></entry><entry>3</entry>
<entry><replaceable>value-of-C</replaceable></entry><entry><replaceable
>value-of-Z</replaceable></entry><entry>NULL</entry></row>
<row><entry><replaceable>source-row</replaceable></entry><entry>4</entry>
<entry>NULL</entry><entry>NULL</entry><entry><replaceable>value-of-L</replaceable
></entry></row>
<row><entry><replaceable>source-row</replaceable></entry><entry>5</entry>
<entry>NULL</entry><entry>NULL</entry><entry><replaceable>value-of-M</replaceable
></entry></row>
</tbody>
</tgroup>
</informaltable>
</section>
</section>
<section id="i1004553">
<title>Examples of TRANSPOSE</title>
<para>Suppose that MYTABLE has been created as<indexterm><primary
>TRANSPOSE clause</primary><secondary>examples of</secondary>
</indexterm>:</para>
<programlisting>
CREATE TABLE mining.mytable
 ( A INTEGER, B INTEGER, C INTEGER, D CHAR(2), 
   E CHAR(2), F CHAR(2) );
</programlisting>
<para>The table MYTABLE has columns A, B, C, D, E, and F with related
data. The columns A, B, and C are type INTEGER, and columns D, E,
and F are type CHAR. </para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="6" tgroupstyle="TI  inline table">
<tbody>
<row><entry>A</entry><entry>B</entry><entry>C</entry><entry>D</entry>
<entry>E</entry><entry>F</entry></row>
<row><entry>1</entry><entry>10</entry><entry>100</entry><entry>d1</entry>
<entry>e1</entry><entry>f1</entry></row>
<row><entry>2</entry><entry>20</entry><entry>200</entry><entry>d2</entry>
<entry>e2</entry><entry>f2</entry></row>
</tbody>
</tgroup>
</informaltable>
<itemizedlist>
<listitem><para>Suppose that MYTABLE has only the first three columns:
A, B, and C. The result of the TRANSPOSE clause has three times as
many rows (because three items exist in the transpose item list) as
rows exist in MYTABLE:</para>
<programlisting>
SELECT * FROM mytable
TRANSPOSE A, B, C AS VALCOL
  KEY BY KEYCOL;
</programlisting>
<para>The result table of the TRANSPOSE query is:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="8" tgroupstyle="TI1  inline table">
<tbody>
<row><entry>A</entry><entry>B</entry><entry>C</entry><entry>D</entry>
<entry>E</entry><entry>F</entry><entry>KEYCOL</entry><entry>VALCOL</entry>
</row>
<row><entry>1</entry><entry>10</entry><entry>100</entry><entry>d1</entry>
<entry>e1</entry><entry>f1</entry><entry>1</entry><entry>1</entry></row>
<row><entry>1</entry><entry>10</entry><entry>100</entry><entry>d1</entry>
<entry>e1</entry><entry>f1</entry><entry>2</entry><entry>10</entry>
</row>
<row><entry>1</entry><entry>10</entry><entry>100</entry><entry>d1</entry>
<entry>e1</entry><entry>f1</entry><entry>3</entry><entry>100</entry>
</row>
<row><entry>2</entry><entry>20</entry><entry>200</entry><entry>d2</entry>
<entry>e2</entry><entry>f2</entry><entry>1</entry><entry>2</entry></row>
<row><entry>2</entry><entry>20</entry><entry>200</entry><entry>d2</entry>
<entry>e2</entry><entry>f2</entry><entry>2</entry><entry>20</entry>
</row>
<row><entry>2</entry><entry>20</entry><entry>200</entry><entry>d2</entry>
<entry>e2</entry><entry>f2</entry><entry>3</entry><entry>200</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</listitem>
<listitem><para>This query shows that the items in the transpose item
list can be any valid scalar expressions:</para>
<programlisting>
SELECT KEYCOL, VALCOL, A, B, C FROM mytable
TRANSPOSE A + B, C + 3, 6 AS VALCOL
  KEY BY KEYCOL;
</programlisting>
<para>The result table of the TRANSPOSE query is: </para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="5" tgroupstyle="TI1  inline table">
<thead>
<row><entry>KEYCOL</entry><entry>VALCOL</entry><entry>A</entry><entry
>B</entry><entry>C</entry></row>
</thead>
<tbody>
<row><entry>1</entry><entry>11</entry><entry>1</entry><entry>10</entry>
<entry>100</entry></row>
<row><entry>2</entry><entry>103</entry><entry>1</entry><entry>10</entry>
<entry>100</entry></row>
<row><entry>3</entry><entry>6</entry><entry>1</entry><entry>10</entry>
<entry>100</entry></row>
<row><entry>1</entry><entry>22</entry><entry>2</entry><entry>20</entry>
<entry>200</entry></row>
<row><entry>2</entry><entry>203</entry><entry>2</entry><entry>20</entry>
<entry>200</entry></row>
<row><entry>3</entry><entry>6</entry><entry>2</entry><entry>20</entry>
<entry>200</entry></row>
</tbody>
</tgroup>
</informaltable>
</listitem>
<listitem><para>This query shows how the TRANSPOSE clause can be used
with a GROUP BY clause. This query is typical of queries used to obtain
cross-table information, where A, B, and C are the independent variables,
and D is the dependent variable.</para>
<programlisting>
SELECT KEYCOL, VALCOL, D, COUNT(*) FROM mytable
TRANSPOSE A, B, C AS VALCOL
  KEY BY KEYCOL
GROUP BY KEYCOL, VALCOL, D;
</programlisting>
<para>The result table of the TRANSPOSE query is: </para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="4" tgroupstyle="TI1  inline table">
<thead>
<row><entry>KEYCOL</entry><entry>VALCOL</entry><entry>D</entry><entry
>COUNT(*)</entry></row>
</thead>
<tbody>
<row><entry>1</entry><entry>1</entry><entry>d1</entry><entry>1</entry>
</row>
<row><entry>2</entry><entry>10</entry><entry>d1</entry><entry>1</entry>
</row>
<row><entry>3</entry><entry>100</entry><entry>d1</entry><entry>1</entry>
</row>
<row><entry>1</entry><entry>2</entry><entry>d2</entry><entry>1</entry>
</row>
<row><entry>2</entry><entry>20</entry><entry>d2</entry><entry>1</entry>
</row>
<row><entry>3</entry><entry>200</entry><entry>d2</entry><entry>1</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</listitem>
<listitem><para>This query shows how to use COUNT applied to VALCOL.
The result table of the TRANSPOSE query shows the number of distinct
values in VALCOL.</para>
<programlisting>
SELECT COUNT(DISTINCT VALCOL) FROM mytable
TRANSPOSE A, B, C AS VALCOL
  KEY BY KEYCOL
GROUP BY KEYCOL;

(EXPR)                
--------------------  
                   2  
                   2  
                   2  

--- 3 row(s) selected.
</programlisting>
</listitem>
<listitem><para>This query shows how multiple TRANSPOSE clauses can
be used in the same query. The result table from this query has nine
times as many rows as rows exist in MYTABLE:</para>
<programlisting>
SELECT KEYCOL1, VALCOL1, KEYCOL2, VALCOL2 FROM mytable
TRANSPOSE A, B, C AS VALCOL1
  KEY BY KEYCOL1
TRANSPOSE D, E, F AS VALCOL2
  KEY BY KEYCOL2; 
</programlisting>
<para>The result table of the TRANSPOSE query is: </para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="4" tgroupstyle="TI1  inline table">
<thead>
<row><entry>KEYCOL1</entry><entry>VALCOL1</entry><entry>KEYCOL2</entry>
<entry>VALCOL2</entry></row>
</thead>
<tbody>
<row><entry>1</entry><entry>1</entry><entry>1</entry><entry>d1</entry>
</row>
<row><entry>1</entry><entry>1</entry><entry>2</entry><entry>e1</entry>
</row>
<row><entry>1</entry><entry>1</entry><entry>3</entry><entry>f1</entry>
</row>
<row><entry>2</entry><entry>10</entry><entry>1</entry><entry>d1</entry>
</row>
<row><entry>2</entry><entry>10</entry><entry>2</entry><entry>e1</entry>
</row>
<row><entry>2</entry><entry>10</entry><entry>3</entry><entry>f1</entry>
</row>
<row><entry>3</entry><entry>100</entry><entry>1</entry><entry>d1</entry>
</row>
<row><entry>3</entry><entry>100</entry><entry>2</entry><entry>e1</entry>
</row>
<row><entry>3</entry><entry>100</entry><entry>3</entry><entry>f1</entry>
</row>
<row><entry>1</entry><entry>2</entry><entry>1</entry><entry>d2</entry>
</row>
<row><entry>1</entry><entry>2</entry><entry>2</entry><entry>e2</entry>
</row>
<row><entry>1</entry><entry>2</entry><entry>3</entry><entry>f2</entry>
</row>
<row><entry>2</entry><entry>20</entry><entry>1</entry><entry>d2</entry>
</row>
<row><entry>2</entry><entry>20</entry><entry>2</entry><entry>e2</entry>
</row>
<row><entry>2</entry><entry>20</entry><entry>3</entry><entry>f2</entry>
</row>
<row><entry>3</entry><entry>200</entry><entry>1</entry><entry>d2</entry>
</row>
<row><entry>3</entry><entry>200</entry><entry>2</entry><entry>e2</entry>
</row>
<row><entry>3</entry><entry>200</entry><entry>3</entry><entry>f2</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</listitem>
<listitem><para>This query shows how a TRANSPOSE clause can contain
multiple transpose sets—that is, multiple <replaceable>transpose-item-list</replaceable
> AS <replaceable>transpose-col-list</replaceable>. The expressions
A, B, and C are of type integer, and expressions D, E, and F are of
type character.</para>
<programlisting>
SELECT KEYCOL, VALCOL1, VALCOL2 FROM mytable
TRANSPOSE A, B, C AS VALCOL1
          D, E, F AS VALCOL2
  KEY BY KEYCOL; 
</programlisting>
<para>The result table of the TRANSPOSE query is: </para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="3" tgroupstyle="TI1  inline table">
<thead>
<row><entry>KEYCOL</entry><entry>VALCOL1</entry><entry>VALCOL2</entry>
</row>
</thead>
<tbody>
<row><entry>1</entry><entry>1</entry><entry>?</entry></row>
<row><entry>2</entry><entry>10</entry><entry>?</entry></row>
<row><entry>3</entry><entry>100</entry><entry>?</entry></row>
<row><entry>4</entry><entry>?</entry><entry>d1</entry></row>
<row><entry>5</entry><entry>?</entry><entry>e1</entry></row>
<row><entry>6</entry><entry>?</entry><entry>f1</entry></row>
<row><entry>1</entry><entry>2</entry><entry>?</entry></row>
<row><entry>2</entry><entry>20</entry><entry>?</entry></row>
<row><entry>3</entry><entry>200</entry><entry>?</entry></row>
<row><entry>4</entry><entry>?</entry><entry>d2</entry></row>
<row><entry>5</entry><entry>?</entry><entry>e2</entry></row>
<row><entry>6</entry><entry>?</entry><entry>f2</entry></row>
</tbody>
</tgroup>
</informaltable>
<para>A question mark (?) in a value column indicates no value for
the given KEYCOL.</para>
</listitem>
<listitem><para>This query shows how the preceding query can include
a GROUP BY clause:</para>
<programlisting>
SELECT KEYCOL, VALCOL1, VALCOL2, COUNT(*) FROM mytable
TRANSPOSE A, B, C AS VALCOL1
          D, E, F AS VALCOL2
  KEY BY KEYCOL 
GROUP BY KEYCOL, VALCOL1, VALCOL2;
</programlisting>
<para>The result table of the TRANSPOSE query is: </para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="4" tgroupstyle="TI1  inline table">
<thead>
<row><entry>KEYCOL</entry><entry>VALCOL1</entry><entry>VALCOL2</entry>
<entry>(EXPR)</entry></row>
</thead>
<tbody>
<row><entry>1</entry><entry>1</entry><entry>?</entry><entry>1</entry>
</row>
<row><entry>2</entry><entry>10</entry><entry>?</entry><entry>1</entry>
</row>
<row><entry>3</entry><entry>100</entry><entry>?</entry><entry>1</entry>
</row>
<row><entry>1</entry><entry>2</entry><entry>?</entry><entry>1</entry>
</row>
<row><entry>2</entry><entry>20</entry><entry>?</entry><entry>1</entry>
</row>
<row><entry>3</entry><entry>200</entry><entry>?</entry><entry>1</entry>
</row>
<row><entry>4</entry><entry>?</entry><entry>d2</entry><entry>1</entry>
</row>
<row><entry>5</entry><entry>?</entry><entry>e2</entry><entry>1</entry>
</row>
<row><entry>6</entry><entry>?</entry><entry>f2</entry><entry>1</entry>
</row>
<row><entry>4</entry><entry>?</entry><entry>d1</entry><entry>1</entry>
</row>
<row><entry>5</entry><entry>?</entry><entry>e1</entry><entry>1</entry>
</row>
<row><entry>6</entry><entry>?</entry><entry>f1</entry><entry>1</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</listitem>
<listitem><para>This query shows how an item in the transpose item
list can contain a list of expressions and that the KEY BY clause
is optional:</para>
<programlisting>
SELECT * FROM mytable
TRANSPOSE (1, A, 'abc'), (2, B, 'xyz') 
  AS (VALCOL1, VALCOL2, VALCOL3); 
</programlisting>
<para>The result table of the TRANSPOSE query is: </para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="9" tgroupstyle="TI1  inline table">
<tbody>
<row><entry>A</entry><entry>B</entry><entry>C</entry><entry>D</entry>
<entry>E</entry><entry>F</entry><entry>VALCOL1</entry><entry>VALCOL2</entry>
<entry>VALCOL3</entry></row>
<row><entry>1</entry><entry>10</entry><entry>100</entry><entry>d1</entry>
<entry>e1</entry><entry>f1</entry><entry>1</entry><entry>1</entry>
<entry>abc</entry></row>
<row><entry>1</entry><entry>10</entry><entry>100</entry><entry>d1</entry>
<entry>e1</entry><entry>f1</entry><entry>2</entry><entry>10</entry>
<entry>xyz</entry></row>
<row><entry>2</entry><entry>20</entry><entry>200</entry><entry>d2</entry>
<entry>e2</entry><entry>f2</entry><entry>1</entry><entry>2</entry>
<entry>abc</entry></row>
<row><entry>2</entry><entry>20</entry><entry>200</entry><entry>d2</entry>
<entry>e2</entry><entry>f2</entry><entry>2</entry><entry>20</entry>
<entry>xyz</entry></row>
</tbody>
</tgroup>
</informaltable>
</listitem>
</itemizedlist>
</section>
</section>
</chapter>
<chapter id="i1056860">
<title>SQL Functions and Expressions</title>
<para>This section describes the syntax and semantics of specific
functions and expressions that you can use in Trafodion SQL statements.
The functions and expressions are categorized according to their functionality. </para>
<section>
<title>Categories</title>
<para>Use these types of functions within an SQL value expression:</para>
<itemizedlist>
<listitem><para><xref linkend="i1016243" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1011823" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1012036" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1012233" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1012463" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1014566" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<para>For more information on SQL value expressions, see <xref
linkend="i1013683" role="select:quotedtitle page"/>.</para>
<section id="i1052328">
<title>Standard Normalization</title>
<para>For datetime functions, the definition of standard normalization
is: If the ending day of the resulting date is invalid, the day will
be rounded DOWN to the last day of the result month.</para>
</section>
<section id="i1016243">
<title>Aggregate (Set) Functions</title>
<para><indexterm><primary>Aggregate functions</primary><secondary
sortas="[Aggregate
functions:000">summary of</secondary></indexterm>An aggregate (or <indexterm>
<primary>Set functions</primary></indexterm>set) function operates
on a group or groups of rows retrieved by the SELECT statement or
the subquery in which the aggregate function appears. </para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<tbody>
<row><entry><xref linkend="i1006450" role="select:quotedtitle page"
/></entry><entry>Computes the average of a group of numbers derived
from the evaluation of the expression argument of the function.</entry>
</row>
<row><entry><xref linkend="i1007007" role="select:quotedtitle page"
/></entry><entry>Counts the number of rows that result from a query
(by using *) or the number of rows that contain a distinct value in
the one-column table derived from the expression argument of the function
(optionally distinct values).</entry></row>
<row><entry><xref linkend="i1053733" role="select:quotedtitle page"
/></entry><entry>Determines a maximum value from the group of values
derived from the evaluation of the expression argument.</entry></row>
<row><entry><xref linkend="i1008659" role="select:quotedtitle page"
/></entry><entry>Determines a minimum value from the group of values
derived from the evaluation of the expression argument.</entry></row>
<row><entry><xref linkend="i1010737" role="select:quotedtitle page"
/></entry><entry>Computes the statistical standard deviation of a
group of numbers derived from the evaluation of the expression argument
of the function. The numbers can be weighted.</entry></row>
<row><entry><xref linkend="i1010970" role="select:quotedtitle page"
/></entry><entry>Computes the sum of a group of numbers derived from
the evaluation of the expression argument of the function.</entry></row>
<row><entry><xref linkend="i1013941" role="select:quotedtitle page"
/></entry><entry>Computes the statistical variance of a group of numbers
derived from the evaluation of the expression argument of the function.
The numbers can be weighted.</entry></row>
</tbody>
</tgroup>
</informaltable>
<para>Columns and expressions can be arguments of an aggregate function.
The expressions cannot contain aggregate functions or subqueries.</para>
<para>An <indexterm><primary>Aggregate functions</primary><secondary
>DISTINCT clause</secondary></indexterm>aggregate function can accept
an argument specified as DISTINCT<indexterm><primary>DISTINCT clause</primary>
<secondary>aggregate functions</secondary></indexterm>, which eliminates
duplicate values before the aggregate function is applied. See <xref
linkend="i1009420" role="select:quotedtitle page"/>.</para>
<para>If you include a GROUP BY clause in the SELECT statement, the
columns you refer to in the select list must be either grouping columns
or arguments of an aggregate function. If you do not include a GROUP
BY clause but you specify an aggregate function in the select list,
all rows of the SELECT result table form the one and only group. </para>
<para>See the individual entry for the function.</para>
</section>
<section id="i1011823">
<title>Character String Functions</title>
<para><indexterm><primary>Character string functions</primary>
<secondary sortas="[Character string functions:000">summary of</secondary>
</indexterm>These functions manipulate character strings and use a
character value expression as an argument or return a result of a
character data type. Character string functions treat each single-byte
or multibyte character in an input string as one character, regardless
of the byte length of the character. </para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<tbody>
<row><entry><xref linkend="i1006374" role="select:quotedtitle page"
/></entry><entry>Returns the ASCII code value of the first character
of a character value expression.</entry></row>
<row><entry><xref linkend="i1006692" role="select:quotedtitle page"
/></entry><entry>Returns the specified code value in a character set.</entry>
</row>
<row><entry><xref linkend="i1006741" role="select:quotedtitle page"
/></entry><entry>Returns the number of characters in a string. You
can also use CHARACTER_LENGTH.</entry></row>
<row><entry><xref linkend="i1051909" role="select:quotedtitle page"
/></entry><entry>Returns an unsigned integer that is the code point
of the first character in a character value expression that can be
associated with one of the supported character sets.</entry></row>
<row><entry><xref linkend="i1006841" role="select:quotedtitle page"
/></entry><entry>Returns the concatenation of two character value
expressions as a string value. You can also use the concatenation
operator (||). </entry></row>
<row><entry><xref linkend="i1008179" role="select:quotedtitle page"
/></entry><entry>Returns a character string where a specified number
of characters within the character string have been deleted and then
a second character string has been inserted at a specified start position.</entry>
</row>
<row><entry><xref linkend="i1008307" role="select:quotedtitle page"
/></entry><entry>Downshifts alphanumeric characters. You can also
use LOWER.</entry></row>
<row><entry><xref linkend="i1008357" role="select:quotedtitle page"
/></entry><entry>Returns the leftmost specified number of characters
from a character expression.</entry></row>
<row><entry><xref linkend="i1008399" role="select:quotedtitle page"
/></entry><entry>Returns the position of a specified substring within
a character string. You can also use POSITION.</entry></row>
<row><entry><xref linkend="i1008495" role="select:quotedtitle page"
/></entry><entry>Downshifts alphanumeric characters. You can also
use LCASE.</entry></row>
<row><entry><xref linkend="i1050993" role="select:quotedtitle page"
/></entry><entry>Replaces the leftmost specified number of characters
in a character expression with a padding character.</entry></row>
<row><entry><xref linkend="i1008542" role="select:quotedtitle page"
/></entry><entry>Removes leading spaces from a character string.</entry>
</row>
<row><entry><xref linkend="i1049766" role="select:quotedtitle page"
/></entry><entry>Returns the length of a character string in bytes.</entry>
</row>
<row><entry><xref linkend="i1013460" role="select:quotedtitle page"
/></entry><entry>Returns the position of a specified substring within
a character string. You can also use LOCATE.</entry></row>
<row><entry><xref linkend="i1009649" role="select:quotedtitle page"
/></entry><entry>Returns a character string composed of the evaluation
of a character expression repeated a specified number of times.</entry>
</row>
<row><entry><xref linkend="i1009669" role="select:quotedtitle page"
/></entry><entry>Returns a character string where all occurrences
of a specified character string in the original string are replaced
with another character string.</entry></row>
<row><entry><xref linkend="i1013470" role="select:quotedtitle page"
/></entry><entry>Returns the rightmost specified number of characters
from a character expression.</entry></row>
<row><entry><xref linkend="i1009782" role="select:quotedtitle page"
/></entry><entry>Replaces the rightmost specified number of characters
in a character expression with a padding character.</entry></row>
<row><entry><xref linkend="i1009806" role="select:quotedtitle page"
/></entry><entry>Removes trailing spaces from a character string.</entry>
</row>
<row><entry><xref linkend="i1013489" role="select:quotedtitle page"
/></entry><entry>Returns a character string consisting of a specified
number of spaces.</entry></row>
<row><entry><xref linkend="i1051783" role="select:quotedtitle page"
/></entry><entry>Extracts a substring from a character string.</entry>
</row>
<row><entry><xref linkend="i1046197" role="select:quotedtitle page"
/></entry><entry>Translates a character string from a source character
set to a target character set.</entry></row>
<row><entry><xref linkend="i1011168" role="select:quotedtitle page"
/></entry><entry>Removes leading or trailing characters from a character
string.</entry></row>
<row><entry><xref linkend="i1011245" role="select:quotedtitle page"
/></entry><entry>Upshifts alphanumeric characters. You can also use
UPSHIFT or UPPER.</entry></row>
<row><entry><xref linkend="i1011272" role="select:quotedtitle page"
/></entry><entry>Upshifts alphanumeric characters. You can also use
UPSHIFT or UCASE.</entry></row>
<row><entry><xref linkend="i1011299" role="select:quotedtitle page"
/></entry><entry>Upshifts alphanumeric characters. You can also use
UPPER or UCASE.</entry></row>
</tbody>
</tgroup>
</informaltable>
<para>See the individual entry for the function.</para>
</section>
<section id="i1012036">
<title>Datetime Functions</title>
<para>These functions use either a datetime value expression as an
argument or return a result of datetime data type<indexterm><primary
>Datetime functions</primary><secondary sortas="[Datetime functions:000"
>summary of</secondary></indexterm>: </para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<tbody>
<row><entry><xref linkend="i1050522" role="select:quotedtitle page"
/></entry><entry>Adds the integer number of months specified by <replaceable
>intr_expr</replaceable> to <replaceable>datetime_expr</replaceable
> and normalizes the result.</entry></row>
<row><entry><xref linkend="i1006896" role="select:quotedtitle page"
/></entry><entry>Converts a Julian timestamp to a TIMESTAMP value.</entry>
</row>
<row><entry><xref linkend="i1013541" role="select:quotedtitle page"
/></entry><entry>Returns the current timestamp. You can also use the <xref
linkend="i1007076" role="select:quotedtitle"/>.</entry></row>
<row><entry><xref linkend="i1007041" role="select:quotedtitle page"
/></entry><entry>Returns the current date.</entry></row>
<row><entry><xref linkend="i1007056" role="select:quotedtitle page"
/></entry><entry>Returns the current time.</entry></row>
<row><entry><xref linkend="i1007076" role="select:quotedtitle page"
/></entry><entry>Returns the current timestamp. You can also use the <xref
linkend="i1013541" role="select:quotedtitle"/>.</entry></row>
<row><entry><xref linkend="i1051539" role="select:quotedtitle page"
/></entry><entry>Adds the interval specified by <replaceable>interval_expression</replaceable
> to <replaceable>datetime_expr</replaceable>.</entry></row>
<row><entry><xref linkend="i1051756" role="select:quotedtitle page"
/></entry><entry>Extracts the datetime field specified by <replaceable
>text</replaceable> from the interval value specified by <literal
>interval</literal> and returns the result as an exact numeric value.</entry>
</row>
<row><entry><xref linkend="i1051610" role="select:quotedtitle page"
/></entry><entry>Extracts the datetime field specified by <replaceable
>text</replaceable> from the datetime value specified by <literal
>timestamp</literal> and returns the result as an exact numeric value.</entry>
</row>
<row><entry><xref linkend="i1051556" role="select:quotedtitle page"
/></entry><entry>Subtracts the specified <replaceable>interval_expression</replaceable
> from <replaceable>datetime_expr.</replaceable></entry></row>
<row><entry><xref linkend="i1051635" role="select:quotedtitle page"
/></entry><entry>Returns the date with the time portion of the day
truncated.</entry></row>
<row><entry><xref linkend="i1051531" role="select:quotedtitle page"
/></entry><entry>Adds the interval specified by <replaceable>datepart</replaceable
> and <replaceable>num_expr</replaceable> to <replaceable>datetime_expr</replaceable
>.</entry></row>
<row><entry><xref linkend="i1051713" role="select:quotedtitle page"
/></entry><entry>Returns the integer value for the number of <replaceable
>datepart</replaceable> units of time between <replaceable>startdate</replaceable
> and <replaceable>enddate</replaceable>.</entry></row>
<row><entry><xref linkend="i1051807" role="select:quotedtitle page"
/></entry><entry>Formats a datetime value for display purposes.</entry>
</row>
<row><entry><xref linkend="i1007259" role="select:quotedtitle page"
/></entry><entry>Returns an integer value in the range 1 through 31
that represents the corresponding day of the month. You can also use
DAYOFMONTH.</entry></row>
<row><entry><xref linkend="i1007289" role="select:quotedtitle page"
/></entry><entry>Returns the name of the day of the week from a date
or timestamp expression.</entry></row>
<row><entry><xref linkend="i1007319" role="select:quotedtitle page"
/></entry><entry>Returns an integer value in the range 1 through 31
that represents the corresponding day of the month. You can also use
DAY.</entry></row>
<row><entry><xref linkend="i1007357" role="select:quotedtitle page"
/></entry><entry>Returns an integer value in the range 1 through 7
that represents the corresponding day of the week.</entry></row>
<row><entry><xref linkend="i1007402" role="select:quotedtitle page"
/></entry><entry>Returns an integer value in the range 1 through 366
that represents the corresponding day of the year.</entry></row>
<row><entry><xref linkend="i1008070" role="select:quotedtitle page"
/></entry><entry>Returns a specified datetime field from a datetime
value expression or an interval value expression. </entry></row>
<row><entry><xref linkend="i1008146" role="select:quotedtitle page"
/></entry><entry>Returns an integer value in the range 0 through 23
that represents the corresponding hour of the day.</entry></row>
<row><entry><xref linkend="i1008228" role="select:quotedtitle page"
/></entry><entry>Converts a datetime value to a Julian timestamp.</entry>
</row>
<row><entry><xref linkend="i1008685" role="select:quotedtitle page"
/></entry><entry>Returns an integer value in the range 0 through 59
that represents the corresponding minute of the hour.</entry></row>
<row><entry><xref linkend="i1008725" role="select:quotedtitle page"
/></entry><entry>Returns an integer value in the range 1 through 12
that represents the corresponding month of the year.</entry></row>
<row><entry><xref linkend="i1008743" role="select:quotedtitle page"
/></entry><entry>Returns a character literal that is the name of the
month of the year (January, February, and so on).</entry></row>
<row><entry><xref linkend="i1009576" role="select:quotedtitle page"
/></entry><entry>Returns an integer value in the range 1 through 4
that represents the corresponding quarter of the year.</entry></row>
<row><entry><xref linkend="i1010458" role="select:quotedtitle page"
/></entry><entry>Returns an integer value in the range 0 through 59
that represents the corresponding second of the minute.</entry></row>
<row><entry><xref linkend="TIMESTAMPADD_Function"
role="select:quotedtitle page"/></entry><entry>Adds the interval of
time specified by <replaceable>interval-ind</replaceable> and <replaceable
>num_expr</replaceable> to <replaceable>datetime_expr</replaceable
>.</entry></row>
<row><entry><xref linkend="TIMESTAMPDIFF_Function"
role="select:quotedtitle page"/></entry><entry>Returns the integer
value for the number of <replaceable>interval-ind</replaceable> units
of time between <replaceable>startdate</replaceable> and <replaceable
>enddate</replaceable>.</entry></row>
<row><entry><xref linkend="i1011615" role="select:quotedtitle page"
/></entry><entry>Returns an integer value in the range 1 through 54
that represents the corresponding week of the year.</entry></row>
<row><entry><xref linkend="i1050358" role="select:quotedtitle page"
/></entry><entry>Returns an integer value that represents the year.</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<para>See the individual entry for the function.</para>
</section>
<section id="i1012233">
<title>Mathematical Functions</title>
<para>Use these mathematical functions within an SQL numeric value
expression<indexterm><primary>Math functions</primary><secondary
sortas="[Math functions:000">summary of</secondary></indexterm>:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<tbody>
<row><entry><xref linkend="i1016299" role="select:quotedtitle page"
/></entry><entry>Returns the absolute value of a numeric value expression.</entry>
</row>
<row><entry><xref linkend="i1006353" role="select:quotedtitle page"
/></entry><entry>Returns the arccosine of a numeric value expression
as an angle expressed in radians.</entry></row>
<row><entry><xref linkend="i1006391" role="select:quotedtitle page"
/></entry><entry>Returns the arcsine of a numeric value expression
as an angle expressed in radians.</entry></row>
<row><entry><xref linkend="i1006411" role="select:quotedtitle page"
/></entry><entry>Returns the arctangent of a numeric value expression
as an angle expressed in radians.</entry></row>
<row><entry><xref linkend="i1006432" role="select:quotedtitle page"
/></entry><entry>Returns the arctangent of the x and y coordinates,
specified by two numeric value expressions, as an angle expressed
in radians.</entry></row>
<row><entry><xref linkend="i1006673" role="select:quotedtitle page"
/></entry><entry>Returns the smallest integer greater than or equal
to a numeric value expression.</entry></row>
<row><entry><xref linkend="i1006946" role="select:quotedtitle page"
/></entry><entry>Returns the cosine of a numeric value expression,
where the expression is an angle expressed in radians.</entry></row>
<row><entry><xref linkend="i1006976" role="select:quotedtitle page"
/></entry><entry>Returns the hyperbolic cosine of a numeric value
expression, where the expression is an angle expressed in radians.</entry>
</row>
<row><entry><xref linkend="i1007432" role="select:quotedtitle page"
/></entry><entry>Converts a numeric value expression expressed in
radians to the number of degrees.</entry></row>
<row><entry><xref linkend="i1018681" role="select:quotedtitle page"
/></entry><entry>Returns the exponential value (to the base e) of
a numeric value expression.</entry></row>
<row><entry><xref linkend="i1008118" role="select:quotedtitle page"
/></entry><entry>Returns the largest integer less than or equal to
a numeric value expression.</entry></row>
<row><entry><xref linkend="i1008458" role="select:quotedtitle page"
/></entry><entry>Returns the natural logarithm of a numeric value
expression.</entry></row>
<row><entry><xref linkend="i1008476" role="select:quotedtitle page"
/></entry><entry>Returns the base 10 logarithm of a numeric value
expression.</entry></row>
<row><entry><xref linkend="i1008703" role="select:quotedtitle page"
/></entry><entry>Returns the remainder (modulus) of an integer value
expression divided by an integer value expression. </entry></row>
<row><entry><xref linkend="i1049895" role="select:quotedtitle page"
/></entry><entry>Returns the value of the operand unless it is zero,
in which case it returns NULL.</entry></row>
<row><entry><xref linkend="i1009457" role="select:quotedtitle page"
/></entry><entry>Returns the constant value of pi as a floating-point
value.</entry></row>
<row><entry><xref linkend="i1009502" role="select:quotedtitle page"
/></entry><entry>Returns the value of a numeric value expression raised
to the power of an integer value expression. You can also use the
exponential operator **.</entry></row>
<row><entry><xref linkend="i1017336" role="select:quotedtitle page"
/></entry><entry>Converts a numeric value expression expressed in
degrees to the number of radians.</entry></row>
<row><entry><xref linkend="i1051643" role="select:quotedtitle page"
/></entry><entry>Returns the value of <replaceable>numeric_expr</replaceable
> round to <replaceable>num</replaceable> places to the right of the
decimal point.</entry></row>
<row><entry><xref linkend="i1010532" role="select:quotedtitle page"
/></entry><entry>Returns an indicator of the sign of a numeric value
expression. If value is less than zero, returns -1 as the indicator.
If value is zero, returns 0. If value is greater than zero, returns
1.</entry></row>
<row><entry><xref linkend="i1010581" role="select:quotedtitle page"
/></entry><entry>Returns the sine of a numeric value expression, where
the expression is an angle expressed in radians.</entry></row>
<row><entry><xref linkend="i1010611" role="select:quotedtitle page"
/></entry><entry>Returns the hyperbolic sine of a numeric value expression,
where the expression is an angle expressed in radians.</entry></row>
<row><entry><xref linkend="i1010707" role="select:quotedtitle page"
/></entry><entry>Returns the square root of a numeric value expression.</entry>
</row>
<row><entry><xref linkend="i1011046" role="select:quotedtitle page"
/></entry><entry>Returns the tangent of a numeric value expression,
where the expression is an angle expressed in radians.</entry></row>
<row><entry><xref linkend="i1011076" role="select:quotedtitle page"
/></entry><entry>Returns the hyperbolic tangent of a numeric value
expression, where the expression is an angle expressed in radians.</entry>
</row>
<row><entry><xref linkend="i1050385" role="select:quotedtitle page"
/></entry><entry>Returns the value of the operand unless it is NULL,
in which case it returns zero.</entry></row>
</tbody>
</tgroup>
</informaltable>
<para>See the individual entry for the function.</para>
</section>
<section id="i1012463">
<title>Sequence Functions</title>
<para><indexterm><primary>Sequence functions</primary><secondary
sortas="[Sequence
functions">summary of</secondary></indexterm>Sequence functions operate
on ordered rows of the intermediate result table of a SELECT statement
that includes a SEQUENCE BY clause. Sequence functions are categorized
generally as difference, moving, offset, or running. </para>
<para>Some sequence functions, such as ROWS SINCE, require sequentially
examining every row in the history buffer until the result is computed.
Examining a large history buffer in this manner for a condition that
has not been true for many rows could be an expensive operation. In
addition, such operations may not be parallelized because the entire
sorted result set must be available to compute the result of the sequence
function.</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<colspec colname="COLSPEC0"/>
<colspec colname="COLSPEC1"/>
<tbody>
<row><entry colsep="1" nameend="COLSPEC1" namest="COLSPEC0"><emphasis
role="bold">Difference sequence functions:</emphasis></entry></row>
<row><entry><xref linkend="i1007464" role="select:quotedtitle page"
/></entry><entry>Calculates differences between values of a column
expression in the current row and previous rows.</entry></row>
<row><entry><xref linkend="i1007542" role="select:quotedtitle page"
/></entry><entry>Calculates differences between values of the result
of DIFF1 of the current row and DIFF1 of previous rows.</entry></row>
<row><entry colsep="1" nameend="COLSPEC1" namest="COLSPEC0"><emphasis
role="bold">Moving sequence functions:</emphasis></entry></row>
<row><entry><xref linkend="i1008761" role="select:quotedtitle page"
/></entry><entry>Returns the average of nonnull values of a column
expression in the current window.</entry></row>
<row><entry><xref linkend="i1008815" role="select:quotedtitle page"
/></entry><entry>Returns the number of nonnull values of a column
expression in the current window.</entry></row>
<row><entry><xref linkend="i1008871" role="select:quotedtitle page"
/></entry><entry>Returns the maximum of nonnull values of a column
expression in the current window.</entry></row>
<row><entry><xref linkend="i1008924" role="select:quotedtitle page"
/></entry><entry>Returns the minimum of nonnull values of a column
expression in the current window.</entry></row>
<row><entry><xref linkend="i1008977" role="select:quotedtitle page"
/></entry><entry>Returns the standard deviation of nonnull values
of a column expression in the current window.</entry></row>
<row><entry><xref linkend="i1009032" role="select:quotedtitle page"
/></entry><entry>Returns the sum of nonnull values of a column expression
in the current window.</entry></row>
<row><entry><xref linkend="i1009085" role="select:quotedtitle page"
/></entry><entry>Returns the variance of nonnull values of a column
expression in the current window.</entry></row>
<row><entry colsep="1" nameend="COLSPEC1" namest="COLSPEC0"><emphasis
role="bold">Offset sequence function:</emphasis></entry></row>
<row><entry><xref linkend="i1009364" role="select:quotedtitle page"
/></entry><entry>Retrieves columns from previous rows.</entry></row>
<row><entry colsep="1" nameend="COLSPEC1" namest="COLSPEC0"><emphasis
role="bold">Running sequence functions:</emphasis></entry></row>
<row><entry><xref linkend="i1053583" role="select:quotedtitle page"
/></entry><entry>Returns the rank of the given value of an intermediate
result table ordered by a SEQUENCE BY clause in a SELECT statement</entry>
</row>
<row><entry><xref linkend="i1009834" role="select:quotedtitle page"
/></entry><entry>Returns the average of nonnull values of a column
expression up to and including the current row.</entry></row>
<row><entry><xref linkend="i1009888" role="select:quotedtitle page"
/></entry><entry>Returns the number of rows up to and including the
current row.</entry></row>
<row><entry><xref linkend="i1009943" role="select:quotedtitle page"
/></entry><entry>Returns the maximum of values of a column expression
up to and including the current row.</entry></row>
<row><entry><xref linkend="i1009991" role="select:quotedtitle page"
/></entry><entry>Returns the minimum of values of a column expression
up to and including the current row.</entry></row>
<row><entry><xref linkend="i1051696" role="select:quotedtitle page"
/></entry><entry>Returns the rank of the given value of an intermediate
result table ordered by a SEQUENCE BY clause in a SELECT statement.</entry>
</row>
<row><entry><xref linkend="i1010039" role="select:quotedtitle page"
/></entry><entry>Returns the standard deviation of nonnull values
of a column expression up to and including the current row.</entry>
</row>
<row><entry><xref linkend="i1010094" role="select:quotedtitle page"
/></entry><entry>Returns the sum of nonnull values of a column expression
up to and including the current row.</entry></row>
<row><entry><xref linkend="i1010142" role="select:quotedtitle page"
/></entry><entry>Returns the variance of nonnull values of a column
expression up to and including the current row.</entry></row>
<row><entry colsep="1" nameend="COLSPEC1" namest="COLSPEC0"><emphasis
role="bold">Other sequence functions:</emphasis></entry></row>
<row><entry><xref linkend="i1008258" role="select:quotedtitle page"
/></entry><entry>Returns the last nonnull value for the specified
column expression. If only null values have been returned, returns
null.</entry></row>
<row><entry><xref linkend="i1009711" role="select:quotedtitle page"
/></entry><entry>Returns the number of rows counted since the specified
condition was last true.</entry></row>
<row><entry><xref linkend="i1053633" role="select:quotedtitle page"
/></entry><entry>Returns the number of rows counted since the specified
set of values last changed.</entry></row>
<row><entry><xref linkend="i1011114" role="select:quotedtitle page"
/></entry><entry>Used in ROWS SINCE to distinguish between the value
of the column in the current row and the value of the column in previous
rows.</entry></row>
</tbody>
</tgroup>
</informaltable>
<para>See <xref linkend="i1004369" role="select:quotedtitle page"
/> and the individual entry for each function.</para>
</section>
<section id="i1014566">
<title>Other Functions and Expressions</title>
<para><indexterm><primary>Value expressions</primary><secondary
sortas="[Value expressions:000">summary of</secondary></indexterm
>Use these other functions and expressions in an SQL value expression: </para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<tbody>
<row><entry><xref linkend="AUTHNAME" role="select:quotedtitle page"
/></entry><entry>Returns the authorization name associated with the
specified authorization ID number.</entry></row>
<row><entry><xref linkend="BITAND_func" role="select:quotedtitle page"
/></entry><entry>Performs 'and' operation on corresponding bits of
the two operands. </entry></row>
<row><entry><xref linkend="i1016101" role="select:quotedtitle page"
/></entry><entry>A conditional expression. The two forms of the CASE
expression are simple and searched. </entry></row>
<row><entry><xref linkend="i1006592" role="select:quotedtitle page"
/></entry><entry>Converts a value from one data type to another data
type that you specify. </entry></row>
<row><entry><xref linkend="i1053092" role="select:quotedtitle page"
/></entry><entry>Returns the value of the first expression in the
list that does not have a NULL value or if all the expressions have
NULL values, the function returns a NULL value.</entry></row>
<row><entry><xref linkend="CONVERTTOHEX_Function"
role="select:quotedtitle page"/></entry><entry>Converts the specified
value expression to hexadecimal for display purposes.</entry></row>
<row><entry><xref linkend="i1013939" role="select:quotedtitle page"
/></entry><entry>Returns the database username of the current user
who invoked the function. <phrase condition="hidden">If used in an
SPJ defined as EXTERNAL SECURITY DEFINER, returns the database username
of the owner of the SPJ.</phrase></entry></row>
<row><entry><xref linkend="i1051682" role="select:quotedtitle page"
/></entry><entry>Compares <replaceable>expr</replaceable> to each <replaceable
>test_expr</replaceable> value one by one in the order provided.</entry>
</row>
<row><entry><xref linkend="i1008313" role="select:quotedtitle page"
/></entry><entry>Generates a result table describing an access plan
for a SELECT, INSERT, DELETE, or UPDATE statement. </entry></row>
<row><entry><xref linkend="i1051657" role="select:quotedtitle page"
/></entry><entry>Returns the first argument if it is not null, otherwise
it returns the second argument.</entry></row>
<row><entry><xref linkend="i1051667" role="select:quotedtitle page"
/></entry><entry>Returns the value of the first operand if the two
operands are not equal, otherwise it returns NULL.</entry></row>
<row><entry><xref linkend="i1009338" role="select:quotedtitle page"
/></entry><entry>Returns the value of the first operand unless it
is NULL, in which case it returns the value of the second operand.</entry>
</row>
<row condition="hidden"><entry><xref linkend="SessionUserFunction"
role="select:quotedtitle page"/></entry><entry>Returns the database
username that invoked the function.</entry></row>
<row><entry><xref linkend="i1013940" role="select:quotedtitle page"
/></entry><entry>Returns either the database username of the current
user who invoked the function or the database username associated
with the specified user ID number. <phrase condition="hidden">If used
in an SPJ defined as EXTERNAL SECURITY DEFINER, returns the database
username of the owner of the SPJ.</phrase></entry></row>
</tbody>
</tgroup>
</informaltable>
<para>See the individual entry for the function.</para>
</section>
</section>
<section id="i1016299" pagebreak="yes">
<title>ABS Function</title>
<para><indexterm><primary>ABS function</primary><secondary>syntax
diagram of</secondary></indexterm>The ABS <indexterm><primary>Math
functions</primary><secondary>ABS</secondary></indexterm>function
returns the absolute value of a numeric value expression. </para>
<para>ABS is a Trafodion SQL extension.</para>
<programlisting>ABS (<replaceable>numeric-expression</replaceable
>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>numeric-expression</replaceable> </term>
<listitem><para>is an SQL numeric value expression that specifies
the value for the argument of the ABS function. The result is returned
as an unsigned numeric value if the precision of the argument is less
than 10 or as a LARGEINT if the precision of the argument is greater
than or equal to 10. See <xref linkend="i1011132"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of ABS</title>
<para>This function returns the value 8<indexterm><primary>ABS function</primary>
<secondary>examples of</secondary></indexterm>:</para>
<programlisting>ABS (-20 + 12)
</programlisting>
</section>
</section>
<section id="i1006353" pagebreak="yes">
<title>ACOS Function</title>
<para><indexterm><primary>ACOS function</primary><secondary>syntax
diagram of</secondary></indexterm>The ACOS <indexterm><primary>Math
functions</primary><secondary>ACOS</secondary></indexterm>function
returns the arccosine of a numeric value expression as an angle expressed
in radians. </para>
<para>ACOS is a Trafodion SQL extension.</para>
<programlisting>ACOS (<replaceable>numeric-expression</replaceable
>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>numeric-expression</replaceable> </term>
<listitem><para>is an SQL numeric value expression that specifies
the value for the argument of the ACOS function. The range for the
value of the argument is from -1 to +1. See <xref linkend="i1011132"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of ACOS</title>
<itemizedlist>
<listitem><para><indexterm><primary>ACOS function</primary><secondary
>examples of</secondary></indexterm>The ACOS function returns the
value 3.49044274380724416E-001 or approximately 0.3491 in radians
(which is 20 degrees).</para>
<programlisting>ACOS (0.9397)
</programlisting>
</listitem>
<listitem><para>This function returns the value 0.3491. The function
ACOS is the inverse of the function COS. </para>
<programlisting>ACOS (COS (0.3491))
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1050522" pagebreak="yes">
<title>ADD_MONTHS Function</title>
<para><indexterm><primary>ADD_MONTHS function</primary><secondary
>syntax diagram of</secondary></indexterm>The <indexterm><primary
>Datetime functions</primary><secondary>ADD_MONTHS</secondary>
</indexterm>ADD_MONTHS function adds the integer number of months
specified by <replaceable>int_expr</replaceable> to <replaceable>datetime_expr</replaceable
> and normalizes the result.</para>
<para>ADD_MONTHS is a Trafodion SQL extension.</para>
<programlisting>ADD_MONTHS (<replaceable>datetime_expr</replaceable
>, <replaceable>int_expr</replaceable> [, <replaceable>int2</replaceable
>  ])
</programlisting>
<variablelist>
<varlistentry><term><replaceable>datetime_expr</replaceable></term>
<listitem><para>is an expression that evaluates to a datetime value
of type DATE or TIMESTAMP. The return value is the same type as the <replaceable
>datetime_expr.</replaceable> See <xref
linkend="Datetime_Value_Expressions" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>int_expr</replaceable></term>
<listitem><para>is an SQL numeric value expression of data type SMALLINT
or INTEGER that specifies the number of months. See <xref
linkend="i1011132" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term> <replaceable>int2</replaceable></term>
<listitem><para>is an unsigned integer constant. If <replaceable>int2</replaceable
> is omitted or is the literal 0, the normalization is the standard
normalization. If <replaceable>int2</replaceable> is the literal 1,
the normalization includes the standard normalization and if the starting
day (the day part of <replaceable>datetime_expr</replaceable>) is
the last day of the starting month, then the ending day (the day part
of the result value) is set to the last valid day of the result month.
See <xref linkend="i1052328" role="select:quotedtitle page"/>. See <xref
linkend="i1011132" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of ADD_MONTHS</title>
<itemizedlist>
<listitem><para>This function returns the value DATE '2007-03-31'<indexterm>
<primary>ADD_MONTHS function</primary><secondary>examples of</secondary>
</indexterm>:</para>
<programlisting>ADD_MONTHS(DATE '2007-02-28', 1, 1)
</programlisting>
</listitem>
<listitem><para>This function returns the value DATE '2007-03-28':</para>
<programlisting>ADD_MONTHS(DATE '2007-02-28', 1, 0)
</programlisting>
</listitem>
<listitem><para>This function returns the value DATE '2008-03-28':</para>
<programlisting>ADD_MONTHS(DATE '2008-02-28', 1, 1)  
</programlisting>
</listitem>
<listitem><para>This function returns the timestamp '2009-02-28 00:00:00':</para>
<programlisting>ADD_MONTHS(timestamp'2008-02-29 00:00:00',12,1) 
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1006374" pagebreak="yes">
<title>ASCII Function</title>
<para><indexterm><primary>Character string functions</primary>
<secondary>ASCII</secondary></indexterm>The ASCII function returns
the integer that is the ASCII code of the first character in a character
string expression associated with either the ISO8891 character set
or the UTF8 character set<indexterm><primary>Character string functions</primary>
<secondary>ASCII</secondary></indexterm>.</para>
<para><indexterm><primary>ASCII function</primary><secondary>syntax
diagram of</secondary></indexterm>ASCII is a Trafodion SQL extension.</para>
<programlisting>ASCII (<replaceable>character-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>character-expression</replaceable
> </term>
<listitem><para>is an SQL character value expression that specifies
a string of characters. See <xref linkend="i1010765"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Considerations for ASCII</title>
<para>For a string expression in the UTF8 character set, if the value
of the first byte in the string is greater than 127, Trafodion SQL
returns this error message: <screen><computeroutput>ERROR[8428] The argument to function ASCII is not valid.</computeroutput
></screen></para>
</section>
<section>
<title>Example of ASCII</title>
<para>Select the column JOBDESC and return the ASCII code of the first
character of the job description:<indexterm><primary>ASCII function</primary>
<secondary>examples of</secondary></indexterm></para>
<programlisting>SELECT jobdesc, ASCII (jobdesc)
FROM persnl.job;

JOBDESC            (EXPR)  
-----------------  --------
MANAGER            77 
PRODUCTION SUPV    80 
ASSEMBLER          65 
SALESREP           83 
...                ... 

--- 10 row(s) selected.
</programlisting>
</section>
</section>
<section id="i1006391" pagebreak="yes">
<title>ASIN Function</title>
<para><indexterm><primary>ASIN function</primary><secondary>syntax
diagram of</secondary></indexterm>The ASIN <indexterm><primary>Math
functions</primary><secondary>ASIN</secondary></indexterm>function
returns the arcsine of a numeric value expression as an angle expressed
in radians. </para>
<para>ASIN is a Trafodion SQL extension.</para>
<programlisting>ASIN (<replaceable>numeric-expression</replaceable
>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>numeric-expression</replaceable> </term>
<listitem><para>is an SQL numeric value expression that specifies
the value for the argument of the ASIN function. The range for the
value of the argument is from -1 to +1. See <xref linkend="i1011132"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of ASIN</title>
<itemizedlist>
<listitem><para>This function returns the value 3.49044414403046400E-001
or approximately 0.3491 in radians (which is 20 degrees)<indexterm>
<primary>ASIN function</primary><secondary>examples of</secondary>
</indexterm>:</para>
<programlisting>ASIN (0.3420)
</programlisting>
</listitem>
<listitem><para>This function returns the value 0.3491. The function
ASIN is the inverse of the function SIN.</para>
<programlisting>ASIN (SIN (0.3491))
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1006411" pagebreak="yes">
<title>ATAN Function</title>
<para><indexterm><primary>ATAN function</primary><secondary>syntax
diagram of</secondary></indexterm>The ATAN <indexterm><primary>Math
functions</primary><secondary>ATAN</secondary></indexterm>function
returns the arctangent of a numeric value expression as an angle expressed
in radians. </para>
<para>ATAN is a Trafodion SQL extension.</para>
<programlisting>ATAN (<replaceable>numeric-expression</replaceable
>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>numeric-expression</replaceable> </term>
<listitem><para>is an SQL numeric value expression that specifies
the value for the argument of the ATAN function. See <xref
linkend="i1011132" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of ATAN</title>
<itemizedlist>
<listitem><para><indexterm><primary>ATAN function</primary><secondary
>examples of</secondary></indexterm>This function returns the value
8.72766423249958272E-001 or approximately 0.8727 in radians (which
is 50 degrees):</para>
<programlisting>ATAN (1.192)
</programlisting>
</listitem>
<listitem><para>This function returns the value 0.8727. The function
ATAN is the inverse of the function TAN.</para>
<programlisting>ATAN (TAN (0.8727))
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1006432" pagebreak="yes">
<title>ATAN2 Function</title>
<para><indexterm><primary>ATAN2 function</primary><secondary>syntax
diagram of</secondary></indexterm>The ATAN2 <indexterm><primary>Math
functions</primary><secondary>ATAN2</secondary></indexterm>function
returns the arctangent of the x and y coordinates, specified by two
numeric value expressions, as an angle expressed in radians. </para>
<para>ATAN2 is a Trafodion SQL extension.</para>
<programlisting>ATAN2 (<replaceable>numeric-expression-x</replaceable
>,<replaceable>numeric-expression-y</replaceable>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>numeric-expression-x</replaceable
>, <replaceable>numeric-expression-y</replaceable> </term>
<listitem><para>are SQL numeric value expressions that specify the
value for the <literal>x</literal> and <literal>y</literal> coordinate
arguments of the ATAN2 function. See <xref linkend="i1011132"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of ATAN2</title>
<para><indexterm><primary>ATAN2 function</primary><secondary>examples
of</secondary></indexterm>This function returns the value 2.66344329881899520E+000,
or approximately 2.6634:</para>
<programlisting>ATAN2 (1.192,-2.3)
</programlisting>
</section>
</section>
<section id="AUTHNAME" pagebreak="yes">
<title>AUTHNAME Function</title>
<indexterm><primary>AUTHNAME function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Other functions and
expressions</primary><secondary>AUTHNAME</secondary></indexterm>
<para>The AUTHNAME function returns the name of the authorization
ID that is associated with the specified authorization ID number.</para>
<programlisting>AUTHNAME (<replaceable>auth-id</replaceable>)</programlisting>
<variablelist>
<varlistentry><term><replaceable>auth-id</replaceable> </term>
<listitem><para>is the 32-bit number associated with an authorization
ID. See <xref linkend="AuthIDsElement" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
</variablelist>
<para>The AUTHNAME function is similar to the <xref linkend="i1013940"
role="select:quotedtitle page"/>.</para>
<section>
<title>Considerations for AUTHNAME</title>
<indexterm><primary>AUTHNAME function</primary><secondary>considerations
for</secondary></indexterm>
<itemizedlist>
<listitem><para>This function can be specified only in the top level
of a SELECT statement.</para></listitem>
<listitem><para>The value returned is string data type VARCHAR(128)
and is in ISO8859-1 encoding.</para></listitem>
</itemizedlist>
</section>
<section>
<title>Example of AUTHNAME</title>
<indexterm><primary>AUTHNAME function</primary><secondary>example
of</secondary></indexterm>
<para>This example shows the authorization name associated with the
authorization ID number, 33333:</para>
<programlisting>>>SELECT AUTHNAME (33333) FROM (values(1)) x(a);
(EXPR)
-------------------------
<computeroutput>DB__ROOT</computeroutput>
--- 1 row(s) selected.</programlisting>
</section>
</section>
<section id="i1006450" pagebreak="yes">
<title>AVG Function</title>
<para><indexterm><primary>AVG function</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>Aggregate functions</primary>
<secondary>AVG</secondary></indexterm><indexterm><primary>Aggregate
functions</primary><secondary>AVG</secondary></indexterm>AVG is an
aggregate function that returns the average of a set of numbers.</para>
<programlisting>AVG ([ALL | DISTINCT] <replaceable>expression</replaceable
>) 
</programlisting>
<variablelist>
<varlistentry><term><indexterm><primary>DISTINCT clause</primary>
<secondary>AVG function use of</secondary></indexterm>ALL | DISTINCT</term>
<listitem><para>specifies whether duplicate values are included in
the computation of the AVG of the <replaceable>expression</replaceable
>. The default option is ALL, which causes duplicate values to be
included. <indexterm><primary>AVG function</primary><secondary>DISTINCT
clause use of</secondary></indexterm>If you specify DISTINCT, duplicate
values are eliminated before the AVG function is applied.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>expression</replaceable> </term>
<listitem><para>specifies a numeric or interval value <replaceable
>expression</replaceable> that determines the values to average. The <replaceable
>expression</replaceable> cannot contain an aggregate function or
a subquery. The DISTINCT clause specifies that the AVG function operates
on distinct values from the one-column table derived from the evaluation
of <replaceable>expression</replaceable>.</para><para>See <xref
linkend="i1011132" role="select:quotedtitle page"/> and <xref
linkend="i1010948" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
</variablelist>
<section id="i1006471">
<title>Considerations for AVG</title>
<section>
<title>Data Type of the Result</title>
<para>The data type of the result depends on the data type of the
argument. If the argument is an exact numeric type, the result is
LARGEINT. If the argument is an approximate numeric type, the result
is DOUBLE PRECISION. If the argument is INTERVAL data type, the result
is INTERVAL with the same precision as the argument.</para>
<para>The scale of the result is the same as the scale of the argument.
If the argument has no scale, the result is truncated.</para>
</section>
<section>
<title>Operands of the Expression</title>
<para>The expression includes columns from the rows of the SELECT
result table but cannot include an aggregate function<indexterm>
<primary>AVG function</primary><secondary>operand requirements</secondary>
</indexterm>. These expressions are valid:</para>
<programlisting>AVG (SALARY)
AVG (SALARY * 1.1)
AVG (PARTCOST * QTY_ORDERED)
</programlisting>
</section>
<section>
<title>Nulls</title>
<para>All nulls are eliminated before the function is applied to the
set of values. If the result table is empty, AVG returns NULL.</para>
</section>
</section>
<section id="i1055457">
<title>Examples of AVG</title>
<itemizedlist>
<listitem><para>Return the average value of the SALARY column<indexterm>
<primary>AVG function</primary><secondary>examples of</secondary>
</indexterm>:</para>
<programlisting>SELECT AVG (salary) 
FROM persnl.employee;
</programlisting>
<programlisting>
(EXPR)                
--------------------- 
             49441.52 

--- 1 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Return the average value of the set of unique SALARY
values:</para>
<programlisting>SELECT AVG(DISTINCT salary) AS Avg_Distinct_Salary 
FROM persnl.employee;

AVG_DISTINCT_SALARY
--------------------- 
             53609.89 

--- 1 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Return the average salary by department:</para>
<programlisting>SELECT deptnum, AVG (salary) AS "AVERAGE SALARY"
FROM persnl.employee
WHERE deptnum &lt; 3000
GROUP BY deptnum;

Dept/Num  "AVERAGE SALARY"
--------  ---------------------
    1000               52000.17
    2000               50000.10
    1500               41250.00
    2500               37000.00

--- 4 row(s) selected.
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="BITAND_func" pagebreak="yes">
<title>BITAND Function</title>
<para><indexterm><primary>BITAND function</primary><secondary>syntax
diagram of</secondary></indexterm>The BITAND function performs an
AND operation on corresponding bits of the two operands. If both bits
are 1, the result bit is 1. Otherwise the result bit is 0.<indexterm>
<primary>Other functions and expressions</primary><secondary>BITAND </secondary>
</indexterm></para>
<programlisting>BITAND (<replaceable>expression</replaceable>, <replaceable
>expression</replaceable>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>expression</replaceable> </term>
<listitem><para>The result data type is a binary number. Depending
on the precision of the operands, the data type of the result can
either be an INT (32-bit integer) or a LARGEINT (64-bit integer).</para>
<para>If the max precision of either operand is greater than 9, LARGEINT
is chosen (numbers with precision greater than 9 are represented by
LARGEINT). Otherwise, INT is chosen.</para>
<para>If both operands are unsigned, the result is unsigned. Otherwise,
the result is signed. </para>
<para>Both operands are converted to the result data type before performing
the bit operation.</para>
</listitem>
</varlistentry>
</variablelist>
<section id="BITAND_usage">
<title>Considerations for BITAND</title>
<para>BITAND can be used anywhere in an SQL query where an expression
could be used. This includes SELECT lists, WHERE predicates, VALUES
clauses, SET statement, and so on.</para>
<para>This function returns a numeric data type and can be used in
arithmetic expressions.</para>
<para>Numeric operands can be positive or negative numbers. All numeric
data types are allowed with the exceptions listed in the <xref
linkend="BITAND_restrictions" role="select:quotedtitle"/> section.</para>
</section>
<section id="BITAND_restrictions">
<title>Restrictions for BITAND</title>
<para>The following are BITAND restrictions:<itemizedlist>
<listitem><para>Must have 2 operands</para></listitem>
<listitem><para>Operands must be binary or decimal exact numerics</para>
</listitem>
<listitem><para>Operands must have scale of zero</para></listitem>
<listitem><para>Operands cannot be floating point numbers</para>
</listitem>
<listitem><para>Operands cannot be an extended precision numeric (the
maximum precision of an extended numeric data type is 128)</para>
</listitem>
</itemizedlist></para>
</section>
<section>
<title>Examples of BITAND</title>
<para><indexterm><primary>BITAND function</primary><secondary>examples
of</secondary></indexterm></para>
<programlisting>>>select bitand(1,3) from (values(1)) x(a);

(EXPR)
--------------
               1

--- 1 row(s) selected
</programlisting>
<programlisting>>>select 1 &amp; 3 from (values(1)) x(a);

(EXPR)
--------------
               1

--- 1 row(s) selected
</programlisting>
<programlisting>>>select bitand(1,3) + 0 from (values(1)) x(a);

(EXPR)
--------------
               1

--- 1 row(s) selected
</programlisting>
</section>
</section>
<section id="i1016101" pagebreak="yes">
<title>CASE (Conditional) Expression</title>
<itemizedlist>
<listitem><para><xref linkend="i1016131" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1016148" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<para><indexterm><primary>Value expressions</primary><secondary>CASE
(Conditional) expression</secondary></indexterm>The CASE expression
is a conditional expression with two forms: simple and searched<indexterm>
<primary>CASE expression</primary><secondary>searched CASE form</secondary>
</indexterm>. </para>
<para>In a simple CASE expression, Trafodion SQL compares a value
to a sequence of values and sets the CASE expression to the value
associated with the first match—if a match exists. If no match exists,
Trafodion SQL returns the value specified in the ELSE clause (which
can be null).<indexterm><primary>Other functions and expressions</primary>
<secondary>CASE expression</secondary></indexterm></para>
<para>In a searched CASE expression, Trafodion SQL evaluates a sequence
of conditions and sets the CASE expression to the value associated
with the first condition that is true—if a true condition exists.
If no true condition exists, Trafodion SQL returns the value specified
in the ELSE clause (which can be null). </para>
<programlisting>Simp<indexterm><primary>CASE expression</primary>
<secondary>syntax diagram of</secondary></indexterm>le CASE is:

CASE <replaceable>case-expression</replaceable>
  WHEN <replaceable>expression-1</replaceable> THEN {<replaceable
>result-expression-1</replaceable> | NULL}
  WHEN <replaceable>expression-2</replaceable> THEN {<replaceable
>result-expression-2</replaceable> | NULL}
  ...
  WHEN <replaceable>expression-n</replaceable> THEN {<replaceable
>result-expression-n</replaceable> | NULL}
  [ELSE {<replaceable>result-expression</replaceable> | NULL}]
END 

Searched CASE is:

CASE
  WHEN <replaceable>condition-1</replaceable> THEN {<replaceable>result-expression-1</replaceable
> | NULL}
  WHEN <replaceable>condition-2</replaceable> THEN {<replaceable>result-expression-2</replaceable
> | NULL}
  ...
  WHEN <replaceable>condition-n</replaceable> THEN {<replaceable>result-expression-n</replaceable
> | NULL}
  [ELSE {<replaceable>result-expression</replaceable> | NULL}]
END 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>case-expression</replaceable> </term>
<listitem><para>specifies a value expression that is compared to the
value expressions in each WHEN clause of a simple CASE. The data type
of each <replaceable>expression</replaceable> in the WHEN clause must
be comparable to the data type of <replaceable>case‑expression</replaceable
>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>expression-1</replaceable> ... <replaceable
>expression-n</replaceable> </term>
<listitem><para>specifies a value associated with each <replaceable
>result-expression</replaceable>. If the value of an <replaceable
>expression</replaceable> in a WHEN clause matches the value of <replaceable
>case-expression</replaceable>, simple CASE returns the associated <replaceable
>result-expression</replaceable> value. If no match exists, the CASE
expression returns the value expression specified in the ELSE clause,
or NULL if the ELSE value is not specified.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>result-expression-1</replaceable
> ... <replaceable>result-expression-n</replaceable> </term>
<listitem><para>specifies the result value expression associated with
each <replaceable>expression</replaceable> in a WHEN clause of a simple
CASE, or with each <replaceable>condition</replaceable> in a WHEN
clause of a searched CASE. All of the <replaceable>result-expressions</replaceable
> must have comparable data types, and at least one of the <replaceable
>result-expressions</replaceable> must return nonnull.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>result-expression</replaceable> </term>
<listitem><para>follows the ELSE keyword and specifies the value returned
if none of the expressions in the WHEN clause of a simple CASE are
equal to the case expression, or if none of the conditions in the
WHEN clause of a searched CASE are true. If the ELSE <replaceable
>result-expression</replaceable> clause is not specified, CASE returns
NULL. The data type of <replaceable>result-expression</replaceable
> must be comparable to the other results. </para></listitem>
</varlistentry>
<varlistentry><term><indexterm><primary>Search condition</primary>
<secondary>CASE expression use of</secondary></indexterm><replaceable
>condition-1</replaceable> ... <replaceable>condition-n</replaceable
> </term>
<listitem><para>specifies conditions to test for in a searched CASE.
If a <replaceable>condition</replaceable> is true, the CASE expression
returns the associated <replaceable>result-expression</replaceable
> value. If no <replaceable>condition</replaceable> is true, the CASE
expression returns the value expression specified in the ELSE clause,
or NULL if the ELSE value is not specified.</para></listitem>
</varlistentry>
</variablelist>
<section id="i1016131">
<title>Considerations for CASE</title>
<section>
<title>Data Type of the CASE Expression</title>
<para>The data type of the result of the CASE expression depends on
the data types of the result expressions. If the results all have
the same data type, the CASE expression adopts that data type. If
the results have comparable but not identical data types, the CASE
expression adopts the data type of the union of the result expressions.
This result data type is determined in these ways<indexterm><primary
>CASE expression</primary><secondary>data type of</secondary>
</indexterm>.</para>
</section>
<section>
<title>Character Data Type</title>
<para>If any data type of the result expressions is variable-length
character string, the result data type is variable-length character
string with maximum length equal to the maximum length of the result
expressions.</para>
<para>Otherwise, if none of the data types is variable-length character
string, the result data type is fixed-length character string with
length equal to the maximum of the lengths of the result expressions.</para>
</section>
<section>
<title>Numeric Data Type</title>
<para>If all of the data types of the result expressions are exact
numeric, the result data type is exact numeric with precision and
scale equal to the maximum of the precisions and scales of the result
expressions.</para>
<para>For example, if <replaceable>result-expression-1</replaceable
> and <replaceable>result-expression-2</replaceable> have data type
NUMERIC(5) and <replaceable>result-expression-3</replaceable> has
data type NUMERIC(8,5), the result data type is NUMERIC(10,5).</para>
<para>If any data type of the result expressions is approximate numeric,
the result data type is approximate numeric with precision equal to
the maximum of the precisions of the result expressions.</para>
</section>
<section>
<title>Datetime Data Type</title>
<para>If the data type of the result expressions is datetime, the
result data type is the same datetime data type.</para>
</section>
<section>
<title>Interval Data Type</title>
<para>If the data type of the result expressions is interval, the
result data type is the same interval data type (either year-month
or day-time) with the start field being the most significant of the
start fields of the result expressions and the end field being the
least significant of the end fields of the result expressions.</para>
</section>
</section>
<section id="i1016148">
<title>Examples of CASE</title>
<itemizedlist>
<listitem><para>Use a simple CASE to decode JOBCODE and return NULL
if JOBCODE does not match any of the listed values<indexterm><primary
>CASE expression</primary><secondary>examples of</secondary></indexterm
>:</para>
<programlisting>SELECT last_name, first_name,
  CASE jobcode 
    WHEN 100 THEN 'MANAGER'
    WHEN 200 THEN 'PRODUCTION SUPV'
    WHEN 250 THEN 'ASSEMBLER'
    WHEN 300 THEN 'SALESREP'
    WHEN 400 THEN 'SYSTEM ANALYST'
    WHEN 420 THEN 'ENGINEER'
    WHEN 450 THEN 'PROGRAMMER'
    WHEN 500 THEN 'ACCOUNTANT'
    WHEN 600 THEN 'ADMINISTRATOR ANALYST'
    WHEN 900 THEN 'SECRETARY'
    ELSE NULL
  END
FROM persnl.employee;

LAST_NAME             FIRST_NAME       (EXPR)
--------------------  ---------------  -----------------

GREEN                 ROGER            MANAGER
HOWARD                JERRY            MANAGER
RAYMOND               JANE             MANAGER
...
CHOU                  JOHN             SECRETARY
CONRAD                MANFRED          PROGRAMMER
HERMAN                JIM              SALESREP
CLARK                 LARRY            ACCOUNTANT
HALL                  KATHRYN          SYSTEM ANALYST
...

--- 62 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Use a searched CASE to return LAST_NAME, FIRST_NAME
and a value based on SALARY that depends on the value of DEPTNUM:</para>
<programlisting>SELECT last_name, first_name, deptnum,
  CASE
    WHEN deptnum = 9000 THEN salary * 1.10
    WHEN deptnum = 1000 THEN salary * 1.12
    ELSE salary
  END
FROM persnl.employee;

LAST_NAME        FIRST_NAME    DEPTNUM  (EXPR)
---------------- ------------  -------  -------------------
GREEN            ROGER            9000          193050.0000
HOWARD           JERRY            1000          153440.1120
RAYMOND          JANE             3000          136000.0000
...
--- 62 row(s) selected. 
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1006592" pagebreak="yes">
<title>CAST Expression</title>
<itemizedlist>
<listitem><para><xref linkend="i1047137" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1047122" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1006637" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<para><indexterm><primary>CAST expression</primary><secondary>syntax
diagram of</secondary></indexterm>The CAST expression converts data
to the data type you specify<indexterm><primary>Value expressions</primary>
<secondary>CAST expression</secondary></indexterm>.<indexterm><primary
>Other functions and expressions</primary><secondary>CAST expression</secondary>
</indexterm></para>
<programlisting>CAST ({<replaceable>expression</replaceable> | NULL} AS <replaceable
>data-type</replaceable>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>expression</replaceable> | NULL </term>
<listitem><para>specifies the operand to convert to the data type <replaceable
>data-type</replaceable>.</para><para><indexterm><primary>Data type
conversion, CAST expression</primary></indexterm>If the operand is
an <replaceable>expression</replaceable>, then <replaceable>data-type</replaceable
> depends on the data type of <replaceable>expression</replaceable
> and follows the rules outlined in <xref linkend="i1047122"
role="select:quotedtitle page"/>.</para>
<para>If the operand is NULL, or if the value of the <replaceable
>expression</replaceable> is null, the result of CAST is NULL, regardless
of the data type you specify<indexterm><primary>CAST expression</primary>
<secondary>data type conversion</secondary></indexterm>.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>data-type</replaceable> </term>
<listitem><para>specifies a data type to associate with the operand
of CAST. See <xref linkend="i1010093" role="select:quotedtitle page"
/>.</para><para>When casting data to a CHAR or VARCHAR data type,
the resulting data value is left justified. Otherwise, the resulting
data value is right justified. Further, when you are casting to a
CHAR or VARCHAR data type, you must specify the length of the target
value.</para>
</listitem>
</varlistentry>
</variablelist>
<section id="i1047137">
<title>Considerations for CAST</title>
<itemizedlist>
<listitem><para>Fractional portions are discarded when you use CAST
of a numeric value to an INTERVAL type.</para></listitem>
<listitem><para>Depending on how your file is set up, using CAST might
cause poor query performance by<indexterm><primary>Performance</primary>
<secondary>CAST</secondary></indexterm> preventing the optimizer from
choosing the most efficient plan and requiring the executor to perform
a complete table or index scan.</para></listitem>
</itemizedlist>
</section>
<section id="i1047122">
<title>Valid Conversions for CAST </title>
<itemizedlist>
<listitem><para><indexterm><primary>CAST expression</primary><secondary
>valid type combinations</secondary></indexterm>An exact or approximate
numeric value to any other numeric data type.</para></listitem>
<listitem><para>An exact or approximate numeric value to any character
string data type.</para></listitem>
<listitem><para>An exact numeric value to either a single-field year-month
or day-time interval such as INTERVAL DAY(2).</para></listitem>
<listitem><para>A character string to any other data type, with one
restriction:</para><para>The contents of the character string to be
converted must be consistent in meaning with the data type of the
result. For example, if you are converting to DATE, the contents of
the character string must be 10 characters consisting of the year,
a hyphen, the month, another hyphen, and the day.</para>
</listitem>
<listitem><para>A date value to a character string or to a TIMESTAMP
(Trafodion SQL fills in the time part with 00:00:00.00).</para>
</listitem>
<listitem><para>A time value to a character string or to a TIMESTAMP
(Trafodion SQL fills in the date part with the current date). </para>
</listitem>
<listitem><para>A timestamp value to a character string, a DATE, a
TIME, or another TIMESTAMP with different fractional seconds precision.</para>
</listitem>
<listitem><para>A year-month interval value to a character string,
an exact numeric, or to another year-month INTERVAL with a different
start field precision.</para></listitem>
<listitem><para>A day-time interval value to a character string, an
exact numeric, or to another day-time INTERVAL with a different start
field precision.</para></listitem>
</itemizedlist>
</section>
<section id="i1006637">
<title>Examples of CAST</title>
<itemizedlist>
<listitem><para>In this example, the fractional portion is discarded<indexterm>
<primary>CAST expression</primary><secondary>examples of</secondary>
</indexterm>:</para>
<programlisting>CAST (123.956 as INTERVAL DAY(18))
</programlisting>
</listitem>
<listitem><para>This example returns the difference of two timestamps
in minutes:</para>
<programlisting>CAST((d.step_end - d.step_start) AS INTERVAL MINUTE)
</programlisting>
</listitem>
<listitem><para>Suppose that your database includes a log file of
user information. This example converts the current timestamp to a
character string and concatenates the result to a character literal.
Note the length must be specified.</para>
<programlisting>
INSERT INTO stats.logfile
(user_key, user_info)
VALUES (001, 'User JBrook, executed at ' ||
        CAST (CURRENT_TIMESTAMP AS CHAR(26)));
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1006673" pagebreak="yes">
<title>CEILING Function</title>
<para><indexterm><primary>CEILING function</primary><secondary>syntax
diagram of</secondary></indexterm>The CEILING <indexterm><primary
>Math functions</primary><secondary>CEILING</secondary></indexterm
>function returns the smallest integer, represented as a FLOAT data
type, greater than or equal to a numeric value expression. </para>
<para>CEILING is a Trafodion SQL extension.</para>
<programlisting>CEILING (<replaceable>numeric-expression</replaceable
>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>numeric-expression</replaceable> </term>
<listitem><para>is an SQL numeric value expression that specifies
the value for the argument of the CEILING function. See <xref
linkend="i1011132" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of CEILING</title>
<para>This function returns the integer value 3.00000000000000000E+000,
represented as a FLOAT data type<indexterm><primary>CEILING function</primary>
<secondary>examples of</secondary></indexterm>:</para>
<programlisting>CEILING (2.25)
</programlisting>
</section>
</section>
<section id="i1006692" pagebreak="yes">
<title>CHAR Function</title>
<indexterm><primary>Character string functions</primary><secondary
>CHAR</secondary></indexterm><indexterm><primary>CHAR function</primary>
<secondary>syntax diagram of</secondary></indexterm>
<para>The CHAR function returns the character that has the specified
code value, which must be of exact numeric with scale 0.</para>
<para>CHAR is a Trafodion SQL extension.</para>
<programlisting>CHAR(<replaceable>code-value</replaceable>, [,<replaceable
>char-set-name</replaceable>])
</programlisting>
<variablelist>
<varlistentry><term><replaceable>code-value</replaceable></term>
<listitem><para>is a valid code value in the character set in use.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>char-set-name</replaceable></term>
<listitem><para>can be ISO88591 or UTF8. The returned character will
be associated with the character set specified by <replaceable>char-set-name</replaceable
><phrase condition="hidden"> with the DEFAULT collation</phrase>.</para>
<para>The default for <replaceable>char-set-name</replaceable> is
ISO88591. </para>
</listitem>
</varlistentry>
</variablelist>
<section>
<title>Considerations for CHAR</title>
<itemizedlist>
<listitem><para>For the ISO88591 character set, the return type is
VARCHAR(1).</para></listitem>
<listitem condition="hidden"><para>For the UCS2 character set, the
return type is CHAR(1).</para></listitem>
<listitem><para>For the UTF8 character set, the return type is VARCHAR(1).</para>
</listitem>
</itemizedlist>
</section>
<section>
<title>Example of CHAR</title>
<para>Select the column CUSTNAME and return the ASCII code of the
first character of the customer name and its CHAR value<indexterm>
<primary>CHAR function</primary><secondary>examples of</secondary>
</indexterm>:</para>
<programlisting>SELECT custname, ASCII (custname), CHAR (ASCII (custname)) 
FROM sales.customer;

CUSTNAME            (EXPR)   (EXPR) 
------------------  -------  -------
CENTRAL UNIVERSITY  67       C 
BROWN MEDICAL CO    66       B 
STEVENS SUPPLY      83       S 
PREMIER INSURANCE   80       P 
...                 ...      ... 

--- 15 row(s) selected.
</programlisting>
</section>
</section>
<section id="i1006741" pagebreak="yes">
<title>CHAR_LENGTH Function</title>
<para><indexterm><primary>CHAR_LENGTH function</primary><secondary
>syntax diagram of</secondary></indexterm><indexterm><primary>Character
string functions</primary><secondary>CHAR_LENGTH </secondary>
</indexterm>The CHAR_LENGTH function returns the number of characters
in a string. You can also use CHARACTER_LENGTH. Every character, including
multibyte characters, counts as one character.</para>
<programlisting>CHAR[ACTER]_LENGTH (<replaceable>string-value-expression</replaceable
>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>string-value-expression</replaceable
> </term>
<listitem><para>specifies the string value expression for which to
return the length in characters. Trafodion SQL returns the result
as a two-byte signed integer with a scale of zero. If <replaceable
>string-value-expression</replaceable> is null, Trafodion SQL returns
a length of null. See <xref linkend="i1010765"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section id="i1006766">
<title>Considerations for CHAR_LENGTH</title>
<section>
<title>CHAR and VARCHAR Operands</title>
<para>For a column declared as fixed CHAR, Trafodion SQL returns the
maximum length of that column. For a VARCHAR column, Trafodion SQL
returns the actual length of the string stored in that column. </para>
</section>
</section>
<section id="i1006786">
<title>Examples of CHAR_LENGTH</title>
<itemizedlist>
<listitem><para><indexterm><primary>Concatenation operator (||)</primary>
<secondary>examples of</secondary></indexterm>This function returns
12 as the result. The concatenation operator is denoted by two vertical
bars (||)<indexterm><primary>CHAR_LENGTH function</primary><secondary
>examples of</secondary></indexterm>.</para>
<programlisting>CHAR_LENGTH ('ROBERT' || ' ' || 'SMITH')
</programlisting>
</listitem>
<listitem><para>The string '' is the null (or empty) string. This
function returns 0 (zero):</para>
<programlisting>CHAR_LENGTH ('')
</programlisting>
</listitem>
<listitem><para>The DEPTNAME column has data type CHAR(12). Therefore,
this function always returns 12:</para>
<programlisting>CHAR_LENGTH (deptname)
</programlisting>
</listitem>
<listitem><para>The PROJDESC column in the PROJECT table has data
type VARCHAR(18). This function returns the actual length of the column
value—not 18 for shorter strings—because it is a VARCHAR value:</para>
<programlisting>SELECT CHAR_LENGTH (projdesc)
FROM persnl.project;

(EXPR)
----------

        14
        13
        13
        17
         9
         9
--- 6 row(s) selected.
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1053092" pagebreak="yes">
<title>COALESCE Function</title>
<para><indexterm><primary>COALESCE function</primary><secondary>syntax
diagram of</secondary></indexterm>The COALESCE function returns the
value of the first expression in the list that does not have a NULL
value or if all the expressions have NULL values, the function returns
a NULL value. <indexterm><primary>Other functions and expressions</primary>
<secondary>COALESCE</secondary></indexterm></para>
<programlisting>COALESCE (<replaceable>expr1, expr2, ...</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>expr1</replaceable></term>
<listitem><para>an expression to be compared.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>expr2</replaceable></term>
<listitem><para>an expression to be compared.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of COALESCE</title>
<para>COALESCE returns the value of the first operand that is not
NULL<indexterm><primary>COALESCE function</primary><secondary>example
of</secondary></indexterm>:</para>
<programlisting>SELECT COALESCE (office_phone, cell_phone, home_phone, pager,
    fax_num, ‘411’) from emptbl;
</programlisting>
</section>
</section>
<section id="i1051909" pagebreak="yes">
<title>CODE_VALUE Function</title>
<para><indexterm><primary>CODE_VALUE function </primary><secondary
>syntax diagram of</secondary></indexterm><indexterm><primary>Character
string functions</primary><secondary>CODE_VALUE</secondary></indexterm
><indexterm><primary>Character string functions</primary><secondary
>CODE_VALUE</secondary></indexterm>The CODE_VALUE function returns
an unsigned integer (INTEGER UNSIGNED) that is the code point of the
first character in a character value expression that can be associated
with one of the supported character sets.</para>
<para>CODE_VALUE is a Trafodion SQL extension.</para>
<programlisting>CODE_VALUE(<replaceable>character-value-expression</replaceable
>)
<literal>_<replaceable>character-set</replaceable></literal></programlisting>
<variablelist>
<varlistentry><term><replaceable>character-value-expression</replaceable
></term>
<listitem><para>is a character string.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of CODE_VALUE Function</title>
<para>This function returns 97 as the result:<indexterm><primary>CODE_VALUE
function</primary><secondary>example of</secondary></indexterm></para>
<programlisting>>>select code_value('abc') from (values(1))x;

(EXPR)
----------

        97
</programlisting>
</section>
</section>
<section id="i1006841" pagebreak="yes">
<title>CONCAT Function</title>
<para><indexterm><primary>CONCAT function</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>Character string
functions</primary><secondary>CONCAT</secondary></indexterm>The CONCAT
function returns the concatenation of two character value expressions
as a character string value. You can also use the concatenation operator
(||).</para>
<para>CONCAT is a Trafodion SQL extension.</para>
<programlisting>CONCAT (<replaceable>character-expr-1</replaceable
>, <replaceable>character-expr-2</replaceable>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>character-expr-1</replaceable>, <replaceable
>character-expr-2</replaceable> </term>
<listitem><para>are SQL character value expressions (of data type
CHAR or VARCHAR) that specify two strings of characters. Both character
value expressions must be either ISO8859-1 character expressions or <phrase
>UTF8</phrase> character expressions. The result of the CONCAT function
is the concatenation of <replaceable>character-expr-1</replaceable
> with <replaceable>character-expr-2</replaceable>. The result type
is CHAR if both expressions are of type CHAR and it is VARCHAR if
either of the expressions is of type VARCHAR. See <xref
linkend="i1010765" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Concatenation Operator (||)</title>
<para><indexterm><primary>Concatenation operator (||)</primary>
<secondary>description of</secondary></indexterm>The concatenation
operator, denoted by two vertical bars (||), concatenates two string
values to form a new string value. To indicate that two strings are
concatenated, connect the strings with two vertical bars (||):</para>
<programlisting>character-expr-1 || character-expr-2 
</programlisting>
<para>An operand can be any SQL value expression of data type CHAR
or VARCHAR. </para>
</section>
<section>
<title>Considerations for CONCAT</title>
<section>
<title>Operands</title>
<para>A string value can be specified by any character value expression,
such as a character string literal, character string function, column
reference, aggregate function, scalar subquery, CASE expression, or
CAST expression. The value of the operand must be of type CHAR or
VARCHAR.</para>
<para>If you use the CAST expression, you must specify the length
of CHAR or VARCHAR.</para>
</section>
<section>
<title>SQL Parameters</title>
<para>You can concatenate an SQL parameter and a character value expression.
The concatenated parameter takes on the data type attributes of the
character value expression. Consider this example, where <literal
>?p</literal> is assigned a string value of  <literal>'5 March'</literal
>:</para>
<programlisting>?p || <literal>'</literal> 2002<literal>'</literal
>
</programlisting>
<para>The type assignment of the parameter <literal>?p</literal> becomes
CHAR(5), the same data type as the character literal <literal>' 2002'</literal
>. Because you assigned a string value of more than five characters
to <literal>?p</literal>, Trafodion SQL returns a truncation warning,
and the result of the concatenation is <literal>5 Mar 2002</literal
>. </para>
<para>To specify the type assignment of the parameter, use the CAST
expression on the parameter as:</para>
<programlisting>CAST(?p AS CHAR(7)) || <literal>'</literal>2002<literal
>'</literal>
</programlisting>
<para>In this example, the parameter is not truncated, and the result
of the concatenation is  <literal>5 March 2002</literal>.</para>
</section>
</section>
<section>
<title>Examples of CONCAT</title>
<itemizedlist>
<listitem><para><indexterm><primary>CONCAT function</primary><secondary
>examples of</secondary></indexterm><indexterm><primary>Concatenation
operator (||)</primary><secondary>examples of</secondary></indexterm
>Insert information consisting of a single character string. Use the
CONCAT function to construct and insert the value: </para>
<programlisting>INSERT INTO stats.logfile
(user_key, user_info)
VALUES (001, CONCAT ('Executed at ', 
        CAST (CURRENT_TIMESTAMP AS CHAR(26))));
</programlisting>
</listitem>
<listitem><para>Use the concatenation operator || to construct and
insert the value: </para>
<programlisting>INSERT INTO stats.logfile
(user_key, user_info) 
VALUES (002, 'Executed at ' ||
        CAST (CURRENT_TIMESTAMP AS CHAR(26)));
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="CONVERTTOHEX_Function" pagebreak="yes">
<title>CONVERTTOHEX Function</title>
<para><indexterm><primary>Other functions and expressions</primary>
<secondary>CONVERTTOHEX</secondary></indexterm>The CONVERTTOHEX function
converts the specified value expression to hexadecimal for display
purposes.</para>
<para><indexterm><primary>CONVERTTOHEX function</primary><secondary
>syntax diagram of</secondary></indexterm>CONVERTTOHEX is a Trafodion
SQL extension.</para>
<programlisting>CONVERTTOHEX (<replaceable>expression</replaceable
>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>expression</replaceable></term>
<listitem><para>is any numeric, character, datetime, or interval expression.</para>
</listitem>
</varlistentry>
</variablelist>
<para>The primary purpose of the CONVERTTOHEX function is to eliminate
any doubt as to the exact value in a column.  It is particularly useful
for character expressions where some characters may be from character
sets that are not supported by the client terminal’s locale or may
be control codes or other non-displayable characters.</para>
<section>
<title>Considerations for CONVERTTOHEX</title>
<para>Although CONVERTTOHEX is usable on datetime and interval expressions,
the displayed output shows the internal value and is, consequently,
not particularly meaningful to general users and is subject to change
in future releases.</para>
<para>CONVERTTOHEX returns ASCII characters in ISO8859-1 encoding.</para>
</section>
<section>
<title>Examples of CONVERTTOHEX</title>
<itemizedlist>
<listitem><para><indexterm><primary>CONVERTTOHEX function</primary>
<secondary>examples of</secondary></indexterm>Display the contents
of a smallint, integer, and largeint in hexadecimal:</para>
<programlisting>CREATE  TABLE   EG (S1 smallint,  I1 int,  L1 largeint);
INSERT  INTO  EG  VALUES( 37, 2147483647, 2305843009213693951);
SELECT CONVERTTOHEX(S1), CONVERTTOHEX(I1), CONVERTTOHEX(L1) from EG;

(EXPR)  (EXPR)      (EXPR)
------  --------    ----------------
0025    7FFFFFFF    1FFFFFFFFFFFFFFF


</programlisting>
</listitem>
<listitem><para><indexterm><primary>CONVERTTOHEX function</primary>
<secondary>examples of</secondary></indexterm>Display the contents
of a CHAR(4) column, a VARCHAR(4) column, and a CHAR(4) column that
uses the <phrase>UTF8</phrase> character set. The varchar column does
not have a trailing space character as the fixed-length columns have:</para>
<programlisting>CREATE TABLE EG_CH (FC4 CHAR(4), VC4 VARCHAR(4), FC4U CHAR(4) CHARACTER SET <literal
>UTF8</literal>);
INSERT INTO EG_CH values('ABC', 'abc', _<literal>UTF8</literal>'abc');
SELECT CONVERTTOHEX(FC4), CONVERTTOHEX(VC4), CONVERTTOHEX(FC4U) from EG_CH;

(EXPR)      (EXPR)     (EXPR)
--------    --------   ----------------

41424320    616263     0061006200630020</programlisting>
</listitem>
<listitem><para><indexterm><primary>CONVERTTOHEX function</primary>
<secondary>examples of</secondary></indexterm>Display the internal
values for a DATE column, a TIME column, a TIMESTAMP(2) column, and
a TIMESTAMP(6) column:</para>
<programlisting>CREATE TABLE DT (D1 date, T1 time, TS1 timestamp(2), TS2 timestamp(6) );
INSERT INTO DT values(current_date, current_time, current_timestamp, 
    current_timestamp);
SELECT CONVERTTOHEX(D1), CONVERTTOHEX(T1), CONVERTTOHEX(TS1),
    CONVERTTOHEX(TS2) from DT;
 
(EXPR)       (EXPR)     (EXPR)                     EXPR)
-----------  ---------  -------------------------  ------------------------- 
07D8040F     0E201E     07D8040F0E201E00000035     07D8040F0E201E00081ABB</programlisting>
</listitem>
<listitem><para><indexterm><primary>CONVERTTOHEX function</primary>
<secondary>examples of</secondary></indexterm>Display the internal
values for an INTERVAL YEAR column, an INTERVAL YEAR(2) TO MONTH column,
and an INTERVAL DAY TO SECOND column:</para>
<programlisting>CREATE TABLE IVT ( IV1 interval year, IV2 interval year(2) to month, 
    IV3 interval day to second);
INSERT INTO IVT values( interval '1' year, interval '3-2' year(2) to month, 
    interval '31:14:59:58' day to second);
 SELECT CONVERTTOHEX(IV1), CONVERTTOHEX(IV2), CONVERTTOHEX(IV3) from IVT;
 
(EXPR)    (EXPR)        (EXPR)
------    --------      -----------------------
 
0001      0026          0000027C2F9CB780                
   </programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1006896" pagebreak="yes">
<title>CONVERTTIMESTAMP Function</title>
<para>The <indexterm><primary>Datetime functions</primary><secondary
>CONVERTTIMESTAMP</secondary></indexterm>CONVERTTIMESTAMP function
converts a Julian timestamp to a value with data type TIMESTAMP. </para>
<para><indexterm><primary>CONVERTTIMESTAMP function</primary><secondary
>syntax diagram of</secondary></indexterm>CONVERTTIMESTAMP is a Trafodion
SQL extension.</para>
<programlisting>CONVERTTIMESTAMP (<replaceable>julian-timestamp</replaceable
>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>julian-timestamp</replaceable></term>
<listitem><para>is an expression that evaluates to a Julian timestamp,
which is a LARGEINT value.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Considerations for CONVERTTIMESTAMP</title>
<para>The <replaceable>julian-timestamp</replaceable> value must be
in the range from 148731163200000000 to 274927348799999999.</para>
<section>
<title>Relationship to the JULIANTIMESTAMP Function</title>
<para>The operand of CONVERTTIMESTAMP is a Julian timestamp, and the
function result is a value of data type TIMESTAMP. The operand of
the CONVERTTIMESTAMP function is a value of data type TIMESTAMP, and
the function result is a Julian timestamp. That is, the two functions
have an inverse relationship to one another<indexterm><primary>CONVERTTIMESTAMP
function</primary><secondary>JULIANTIMESTAMP inverse relationship
to</secondary></indexterm>.</para>
</section>
<section>
<title>Use of CONVERTTIMESTAMP</title>
<para>You can use the inverse relationship between the JULIANTIMESTAMP
and CONVERTTIMESTAMP functions to insert Julian timestamp columns
into your database and display these column values in a TIMESTAMP
format.</para>
</section>
</section>
<section>
<title>Examples of CONVERTTIMESTAMP</title>
<itemizedlist>
<listitem><para>Suppose that the EMPLOYEE table includes a column,
named HIRE_DATE, which contains the hire date of each employee as
a Julian timestamp. Convert the Julian timestamp into a TIMESTAMP
value<indexterm><primary>CONVERTTIMESTAMP function</primary><secondary
>examples of</secondary></indexterm>: </para>
<programlisting>SELECT CONVERTTIMESTAMP (hire_date)
FROM persnl.employee; 
</programlisting>
</listitem>
<listitem><para>This example illustrates the inverse relationship
between JULIANTIMESTAMP and CONVERTTIMESTAMP.</para>
<programlisting>SELECT CONVERTTIMESTAMP (JULIANTIMESTAMP (ship_timestamp))
FROM persnl.project;
</programlisting>
<para>If, for example, the value of SHIP_TIMESTAMP is 2008-04-03 21:05:36.143000,
the result of CONVERTTIMESTAMP(JULIANTIMESTAMP(ship_timestamp)) is
the same value, 2008-04-03 21:05:36.143000.</para>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1006946" pagebreak="yes">
<title>COS Function</title>
<para><indexterm><primary>COS function</primary><secondary>syntax
diagram of</secondary></indexterm>The COS <indexterm><primary>Math
functions</primary><secondary>COS</secondary></indexterm>function
returns the cosine of a numeric value expression, where the expression
is an angle expressed in radians. </para>
<para>COS is a Trafodion SQL extension.</para>
<programlisting>COS (<replaceable>numeric-expression</replaceable
>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>numeric-expression</replaceable> </term>
<listitem><para>is an SQL numeric value expression that specifies
the value for the argument of the COS function. See <xref
linkend="i1011132" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of COS</title>
<para>This function returns the value 9.39680940386503680E-001, or
approximately 0.9397, the cosine of 0.3491 (which is 20 degrees)<indexterm>
<primary>COS function</primary><secondary>examples of</secondary>
</indexterm>:</para>
<programlisting>COS (0.3491)
</programlisting>
</section>
</section>
<section id="i1006976" pagebreak="yes">
<title>COSH Function</title>
<para><indexterm><primary>COSH function</primary><secondary>syntax
diagram of</secondary></indexterm>The COSH <indexterm><primary>Math
functions</primary><secondary>COSH</secondary></indexterm>function
returns the hyperbolic cosine of a numeric value expression, where
the expression is an angle expressed in radians. </para>
<para>COSH is a Trafodion SQL extension.</para>
<programlisting>COSH (<replaceable>numeric-expression</replaceable
>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>numeric-expression </replaceable
></term>
<listitem><para>is an SQL numeric value expression that specifies
the value for the argument of the COSH function. See <xref
linkend="i1011132" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of COSH</title>
<para>This function returns the value 1.88842387716101568E+000, or
approximately 1.8884, the hyperbolic cosine of 1.25 in radians<indexterm>
<primary>COSH function</primary><secondary>examples of</secondary>
</indexterm>:</para>
<programlisting>COSH (1.25)
</programlisting>
</section>
</section>
<section id="i1007007" pagebreak="yes">
<title>COUNT Function</title>
<para>The COUNT function counts the number of rows that result from
a query or the number of rows that contain a distinct value in a specific
column. <indexterm><primary>COUNT function</primary><secondary>syntax
diagram of</secondary></indexterm>The result of COUNT is data type
LARGEINT. The result can never be NULL<indexterm><primary>Aggregate
functions</primary><secondary>COUNT</secondary></indexterm>.</para>
<programlisting>COUNT  {(*) | ([ALL | DISTINCT] <replaceable>expression</replaceable
>)} 
</programlisting>
<variablelist>
<varlistentry><term>COUNT (*)</term>
<listitem><para>returns the number of rows in the table specified
in the FROM clause of the SELECT statement that contains COUNT (*).
If the result table is empty (that is, no rows are returned by the
query) COUNT (*) returns zero.</para></listitem>
</varlistentry>
<varlistentry><term>ALL | DISTINCT</term>
<listitem><para>returns the number of all rows or the number of distinct
rows in the one-column table derived from the evaluation of <replaceable
>expression</replaceable>. The default option is ALL, which causes
duplicate values to be included. <indexterm><primary>COUNT function</primary>
<secondary>DISTINCT clause within</secondary></indexterm>If you specify
DISTINCT, duplicate values are eliminated before the COUNT function
is applied<indexterm><primary>DISTINCT clause</primary><secondary
>COUNT function use of</secondary></indexterm>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>expression</replaceable> </term>
<listitem><para>specifies a value expression that determines the values
to count. The <replaceable>expression</replaceable> cannot contain
an aggregate function or a subquery. The DISTINCT clause specifies
that the COUNT function operates on distinct values from the one-column
table derived from the evaluation of <replaceable>expression</replaceable
>. See <xref linkend="i1013683" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
</variablelist>
<section>
<title>Considerations for COUNT</title>
<section>
<title>Operands of the Expression</title>
<para>The operand of COUNT is either * or an expression that includes
columns from the result table specified by the SELECT statement that
contains COUNT. However, the expression cannot include an aggregate
function or a subquery. These expressions are valid:</para>
<programlisting>COUNT (*)
COUNT (DISTINCT JOBCODE)
COUNT (UNIT_PRICE * QTY_ORDERED)
</programlisting>
</section>
<section>
<title>Nulls</title>
<para>COUNT is evaluated after eliminating all nulls from the one-column
table specified by the operand. If the table has no rows, COUNT returns
zero.</para>
<para>COUNT(*) does not eliminate null rows from the table specified
in the FROM clause of the SELECT statement. If all rows in a table
are null, COUNT(*) returns the number of rows in the table.</para>
</section>
</section>
<section>
<title>Examples of COUNT</title>
<itemizedlist>
<listitem><para>Count the number of rows in the EMPLOYEE table<indexterm>
<primary>COUNT function</primary><secondary>examples of</secondary>
</indexterm>:</para>
<programlisting>SELECT COUNT (*)
FROM persnl.employee;

(EXPR)
-----------
         62 

--- 1 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Count the number of employees who have a job code
in the EMPLOYEE table:</para>
<programlisting>SELECT COUNT (jobcode)
FROM persnl.employee;

(EXPR)
----------- 
         56 

--- 1 row(s) selected.

SELECT COUNT(*)
FROM persnl.employee
WHERE jobcode IS NOT NULL;

(EXPR)
----------- 
         56 

--- 1 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Count the number of distinct departments in the EMPLOYEE
table:</para>
<programlisting>SELECT COUNT (DISTINCT deptnum)
FROM persnl.employee;

(EXPR)
----------- 
         11 

--- 1 row(s) selected.
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1013541" pagebreak="yes">
<title>CURRENT Function</title>
<para><indexterm><primary>CURRENT_TIMESTAMP function</primary>
<secondary>syntax diagram of</secondary></indexterm>The CURRENT function
returns a value of type TIMESTAMP based on the current local date
and time. <indexterm><primary>Datetime functions</primary><secondary
>CURRENT</secondary></indexterm></para>
<para>The function is evaluated once when the query starts execution
and is not reevaluated (even if it is a long running query).</para>
<para>You can also use <xref linkend="i1007076"
role="select:quotedtitle page"/>.</para>
<programlisting>CURRENT [(<replaceable>precision</replaceable>)] 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>precision</replaceable> </term>
<listitem><para><indexterm><primary>CURRENT_TIMESTAMP function</primary>
<secondary>precision specification within</secondary></indexterm>is
an integer value in the range 0 to 6 that specifies the precision
of (the number of decimal places in) the fractional seconds in the
returned value. The default is 6.</para><para>For example, the function
CURRENT (2) returns the current date and time as a value of data type
TIMESTAMP, where the precision of the fractional seconds is 2, for
example, 2008-06-26 09:01:20.89. The value returned is not a string
value.</para>
</listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of CURRENT</title>
<para>The PROJECT table contains a column SHIP_TIMESTAMP of data type
TIMESTAMP<indexterm><primary>CURRENT_TIMESTAMP function</primary>
<secondary>examples of</secondary></indexterm>. Update a row by using
the CURRENT value:</para>
<programlisting>UPDATE persnl.project
SET ship_timestamp = CURRENT 
WHERE projcode = 1000; 
</programlisting>
</section>
</section>
<section id="i1007041" pagebreak="yes">
<title>CURRENT_DATE Function</title>
<para><indexterm><primary>CURRENT_DATE function</primary><secondary
>syntax diagram of</secondary></indexterm>The <indexterm><primary
>Datetime functions</primary><secondary>CURRENT_DATE</secondary>
</indexterm>CURRENT_DATE function returns the local current date as
a value of type DATE.</para>
<para>The function is evaluated once when the query starts execution
and is not reevaluated (even if it is a long running query).</para>
<programlisting>CURRENT_DATE</programlisting>
<para>The CURRENT_DATE function returns the current date, such as
2008-09-28. The value returned is a value of type DATE, not a string
value.</para>
<section>
<title>Examples of CURRENT_DATE</title>
<itemizedlist>
<listitem><para>Select rows from the ORDERS table based on the current
date<indexterm><primary>CURRENT_DATE function</primary><secondary
>examples of</secondary></indexterm>: </para>
<programlisting>SELECT * FROM sales.orders 
WHERE deliv_date >= CURRENT_DATE;
</programlisting>
</listitem>
<listitem><para>The PROJECT table has a column EST_COMPLETE of type
INTERVAL DAY. If the current date is the start date of your project,
determine the estimated date of completion:</para>
<programlisting>SELECT projdesc, CURRENT_DATE + est_complete
FROM persnl.project;

Project/Description  (EXPR)
-------------------  ----------
SALT LAKE CITY       2008-01-18
ROSS PRODUCTS        2008-02-02
MONTANA TOOLS        2008-03-03
AHAUS TOOL/SUPPLY    2008-03-03
THE WORKS            2008-02-02
THE WORKS            2008-02-02

--- 6 row(s) selected.
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1007056" pagebreak="yes">
<title>CURRENT_TIME Function</title>
<para><indexterm><primary>CURRENT_TIME function</primary><secondary
>syntax diagram of</secondary></indexterm>The CURRENT_TIME function
returns the current local time as a value of type TIME<indexterm>
<primary>Datetime functions</primary><secondary>CURRENT_TIME</secondary>
</indexterm>.</para>
<para>The function is evaluated once when the query starts execution
and is not reevaluated (even if it is a long running query).</para>
<programlisting>CURRENT_TIME [(<replaceable>precision</replaceable
>)] 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>precision</replaceable> </term>
<listitem><para><indexterm><primary>CURRENT_TIME function</primary>
<secondary>precision specification within</secondary></indexterm>is
an integer value in the range 0 to 6 that specifies the precision
of (the number of decimal places in) the fractional seconds in the
returned value. The default is 0.</para><para>For example, the function
CURRENT_TIME (2) returns the current time as a value of data type
TIME, where the precision of the fractional seconds is 2, for example,
14:01:59.30. The value returned is not a string value.</para>
</listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of CURRENT_TIME</title>
<para>Use CURRENT_DATE and CURRENT_TIME as a value in an inserted
row<indexterm><primary>CURRENT_TIME function</primary><secondary>examples
of</secondary></indexterm>:</para>
<programlisting>INSERT INTO stats.logfile 
(user_key, run_date, run_time, user_name)
VALUES (001, CURRENT_DATE, CURRENT_TIME, 'JuBrock');
</programlisting>
</section>
</section>
<section id="i1007076" pagebreak="yes">
<title>CURRENT_TIMESTAMP Function</title>
<para><indexterm><primary>CURRENT_TIMESTAMP function</primary>
<secondary>syntax diagram of</secondary></indexterm>The CURRENT_TIMESTAMP
function returns a value of type TIMESTAMP based on the current local
date and time<indexterm><primary>Datetime functions</primary><secondary
>CURRENT_TIMESTAMP</secondary></indexterm>.</para>
<para>The function is evaluated once when the query starts execution
and is not reevaluated (even if it is a long running query).</para>
<para> You can also use the <xref linkend="i1013541"
role="select:quotedtitle page"/>.</para>
<programlisting>CURRENT_TIMESTAMP [(<replaceable>precision</replaceable
>)] 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>precision</replaceable> </term>
<listitem><para><indexterm><primary>CURRENT_TIMESTAMP function</primary>
<secondary>precision specification within</secondary></indexterm>is
an integer value in the range 0 to 6 that specifies the precision
of (the number of decimal places in) the fractional seconds in the
returned value. The default is 6.</para><para>For example, the function
CURRENT_TIMESTAMP (2) returns the current date and time as a value
of data type TIMESTAMP, where the precision of the fractional seconds
is 2; for example, 2008-06-26 09:01:20.89. The value returned is not
a string value.</para>
</listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of CURRENT_TIMESTAMP</title>
<para>The PROJECT table contains a column SHIP_TIMESTAMP of data type
TIMESTAMP<indexterm><primary>CURRENT_TIMESTAMP function</primary>
<secondary>examples of</secondary></indexterm>. Update a row by using
the CURRENT_TIMESTAMP value:</para>
<programlisting>UPDATE persnl.project
SET ship_timestamp = CURRENT_TIMESTAMP 
WHERE projcode = 1000; 
</programlisting>
</section>
</section>
<section id="i1013939" pagebreak="yes">
<title>CURRENT_USER Function</title>
<indexterm><primary>CURRENT_USER function</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>Other functions
and expressions</primary><secondary>CURRENT_USER</secondary></indexterm>
<para>The CURRENT_USER function returns the database username of the
current user who invoked the function. The current user is the authenticated
user who started the session. That database username is used for authorization
of SQL statements in the current session. <phrase condition="hidden"
>A new value can be pushed onto the authorization stack if a stored
procedure in Java (SPJ) is defined with EXTERNAL SECURITY DEFINER
rights. </phrase></para>
<programlisting>CURRENT_USER</programlisting>
<para>The CURRENT_USER function is similar to the <xref
linkend="i1013940" role="select:quotedtitle page"/>.</para>
<section>
<title>Considerations for CURRENT_USER</title>
<indexterm><primary>CURRENT_USER function</primary><secondary>considerations
for</secondary></indexterm>
<itemizedlist>
<listitem><para>This function can be specified only in the top level
of a SELECT statement.</para></listitem>
<listitem><para>The value returned is string data type VARCHAR(128)
and is in ISO8859-1 encoding.</para></listitem>
</itemizedlist>
<section condition="hidden">
<title>CURRENT_USER and Stored Procedures in Java</title>
<para>The CURRENT_USER function has special considerations when used
inside an SPJ. In previous releases, the CURRENT_USER, SESSION_USER,
and USER functions were equivalent, that is, they returned the same
value even if the function was used inside an SPJ. The returned value
was the authenticated database username of the user who invoked the
SPJ. </para>
<para>In this release, the CURRENT_USER (or USER) function can be
different than the SESSION_USER function if an SPJ is defined with
the EXTERNAL SECURITY DEFINER attribute.</para>
<para>For SPJs defined with the EXTERNAL SECURITY INVOKER attribute,
the CURRENT_USER function returns the authenticated database username
of the user who invoked the function. For SPJs defined with the EXTERNAL
SECURITY DEFINER attribute, the CURRENT_USER function returns the
database username of the owner of the SPJ, which is used for authorizing
SQL operations in the SPJ.</para>
<para>For information about SPJs and DEFINER and INVOKER rights, see
the <citetitle>Trafodion Guide to Stored Procedures in Java</citetitle
>.</para>
<para condition="hidden">For information about SPJs and DEFINER and
INVOKER rights, see the <citetitle>Trafodion Guide to Stored Procedures
in Java</citetitle>.</para>
</section>
</section>
<section>
<title>Example of CURRENT_USER</title>
<indexterm><primary>CURRENT_USER function</primary><secondary>example
of</secondary></indexterm>
<para>This example retrieves the database username for the current
user:</para>
<programlisting>SELECT CURRENT_USER FROM <literal>(values(1)) x(a)</literal
>;

(EXPR)
-----------------------
<literal>TSHAW
</literal>--- 1 row(s) selected.</programlisting>
<itemizedlist condition="hidden">
<listitem><para>This example retrieves the database username for the
current user:</para>
<programlisting>SELECT CURRENT_USER FROM <literal>(values(1) x(a)</literal
>;

(EXPR)
-----------------------
<literal>TSHAW
</literal>--- 1 row(s) selected.</programlisting>
</listitem>
<listitem condition="hidden"><para>The next two examples use this
Java method <literal>getUser()</literal> in an SPJ, which uses the
CURRENT_USER function to retrieve the database-user name.</para>
<screen>
public static void getUser( ResultSet [] rs )
                      throws SQLException
{
   Connection conn = DriverManager.getConnection("jdbc:default:connection");
   Statement stmt = conn.createStatement() ;
   rs[0] = stmt.executeQuery("SELECT CURRENT_USER FROM (VALUES(1)) X(A);");
}</screen>
<itemizedlist>
<listitem><para>In this example, database user JSMITH registers the
SPJ with the name GETCURUSER1. He sets the EXTERNAL SECURITY attribute
to INVOKER. Database user TSHAW (who has the EXECUTE privilege) executes
the CALL statement. The following output is returned, which shows
the database-user name of the invoker of the SPJ:</para>
<screen>
CALL GETCURUSER1();
(EXPR)
-------------------------
TSHAW
...
--- 1 row(s) selected.</screen>
</listitem>
<listitem><para>In this example, database user JSMITH registers the
SPJ with the name GETCURUSER2. He sets the EXTERNAL SECURITY attribute
to DEFINER. Database user TSHAW (who has the EXECUTE privilege) executes
the CALL statement. The following output is returned, which shows
the owner of the SPJ:</para>
<screen>
CALL GETCURUSER2();
(EXPR)
----------------------------
JSMITH
...
---1 row(s) selected.</screen>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1051539" pagebreak="yes">
<title>DATE_ADD Function</title>
<para><indexterm><primary>DATE_ADD function</primary><secondary>syntax
diagram of</secondary></indexterm>The DATE_ADD function adds the interval
specified by <replaceable>interval_expression</replaceable> to <replaceable
>datetime_expr</replaceable>. If the specified interval is in years
or months, DATE_ADD normalizes the result. See <xref linkend="i1052328"
role="select:quotedtitle page"/>. The type of the <replaceable>datetime_expr</replaceable
> is returned, unless the <replaceable>interval_expression</replaceable
> contains any time components, then a timestamp is returned.<indexterm>
<primary>Datetime functions</primary><secondary>DATE_ADD</secondary>
</indexterm></para>
<para>DATE_ADD is a Trafodion SQL extension.</para>
<programlisting>
DATE_ADD (<replaceable>datetime_expr</replaceable>, <replaceable>interval_expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>datetime_expr</replaceable></term>
<listitem><para>is an expression that evaluates to a datetime value
of type DATE or TIMESTAMP. See <xref
linkend="Datetime_Value_Expressions" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>interval_expression</replaceable
></term>
<listitem><para>is an expression that can be combined in specific
ways with addition operators. The <replaceable>interval_expression</replaceable
> accepts all interval expression types that the Trafodion database
software considers as valid interval expressions. See <xref
linkend="i1010948" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of DATE_ADD</title>
<itemizedlist>
<listitem><para>This function <indexterm><primary>DATE_ADD function</primary>
<secondary>examples of</secondary></indexterm>returns the value DATE
'2007-03-07'</para>
<programlisting>DATE_ADD(DATE '2007-02-28', INTERVAL '7' DAY)
</programlisting>
</listitem>
<listitem><para>This function returns the value DATE '2008-03-06'</para>
<programlisting>DATE_ADD(DATE '2008-02-28', INTERVAL '7' DAY)
</programlisting>
</listitem>
<listitem><para>This function returns the timestamp '2008-03-07 00:00:00'</para>
<programlisting>DATE_ADD(timestamp'2008-02-29 00:00:00', INTERVAL '7' DAY)
</programlisting>
</listitem>
<listitem><para>This function returns the timestamp '2008-02-28 23:59:59'</para>
<programlisting>DATE_ADD(timestamp '2007-02-28 23:59:59', INTERVAL '12' MONTH)
</programlisting>
</listitem>
</itemizedlist>
<para>Note: compare the last example with the last example under DATE_SUB.</para>
</section>
</section>
<section id="i1051556" pagebreak="yes">
<title>DATE_SUB Function</title>
<para><indexterm><primary>DATE_SUB function</primary><secondary>syntax
diagram of</secondary></indexterm>The DATE_SUB function subtracts
the specified <replaceable>interval_expression</replaceable> from <replaceable
>datetime_expr</replaceable>. If the specified interval is in years
or months, DATE_SUB normalizes the result. See <xref linkend="i1052328"
role="select:quotedtitle page"/>. The type of the <replaceable>datetime_expr</replaceable
> is returned, unless the <replaceable>interval_expression</replaceable
> contains any time components, then a timestamp is returned.<indexterm>
<primary>Datetime functions</primary><secondary>DATE_SUB</secondary>
</indexterm></para>
<para>DATE_SUB is a Trafodion SQL extension.</para>
<programlisting>DATE_SUB (<replaceable>datetime_expr</replaceable
>, <replaceable>interval_expression</replaceable>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>datetime_expr</replaceable></term>
<listitem><para>is an expression that evaluates to a datetime value
of type DATE or TIMESTAMP. See <xref
linkend="Datetime_Value_Expressions" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>interval_expression</replaceable
></term>
<listitem><para>is an expression that can be combined in specific
ways with subtraction operators. The <replaceable>interval_expression</replaceable
> accepts all interval expression types that the Trafodion database
software considers as valid interval expressions. See <xref
linkend="i1010948" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of DATE_SUB</title>
<itemizedlist>
<listitem><para>This function <indexterm><primary>DATE_SUB function</primary>
<secondary>examples of</secondary></indexterm>returns the value DATE
'2009-02-28'</para>
<programlisting>DATE_SUB(DATE '2009-03-07', INTERVAL'7' DAY)
</programlisting>
</listitem>
<listitem><para>This function returns the value DATE '2008-02-29'</para>
<programlisting>DATE_SUB(DATE '2008-03-07', INTERVAL'7' DAY)
</programlisting>
</listitem>
<listitem><para>This function returns the timestamp '2008-02-29 00:00:00'</para>
<programlisting>DATE_SUB(timestamp '2008-03-31 00:00:00', INTERVAL '31' DAY)
</programlisting>
</listitem>
<listitem><para>This function returns the timestamp '2007-02-28 23:59:59'</para>
<programlisting>DATE_SUB(timestamp '2008-02-29 23:59:59', INTERVAL '12' MONTH)</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1051531" pagebreak="yes">
<title>DATEADD Function</title>
<para><indexterm><primary>DATEADD function</primary><secondary>syntax
diagram of</secondary></indexterm>The DATEADD function adds the interval
of time specified by <replaceable>datepart</replaceable> and <replaceable
>num_expr</replaceable> to <replaceable>datetime_expr</replaceable
>. If the specified interval is in years or months, DATEADD normalizes
the result. See <xref linkend="i1052328" role="select:quotedtitle page"
/>. The type of the <replaceable>datetime_expr</replaceable> is returned,
unless the interval expression contains any time components, then
a timestamp is returned.<indexterm><primary>Datetime functions</primary>
<secondary>DATEADD</secondary></indexterm></para>
<para>DATEADD is a Trafodion SQL extension. </para>
<programlisting>DATEADD(<replaceable>datepart</replaceable>, <replaceable
>num_expr</replaceable>, <replaceable>datetime_expr</replaceable>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>datepart</replaceable></term>
<listitem><para>is YEAR, MONTH, DAY, HOUR, MINUTE, SECOND, QUARTER,
WEEK, or one of the following abbreviations:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL1  desc list">
<colspec colname="COLSPEC0" colwidth="0.24*"/>
<colspec colwidth="1.76*"/>
<tbody>
<row><entry>YEAR</entry><entry><replaceable>YY</replaceable> and <replaceable
>YYYY</replaceable>    </entry></row>
<row><entry>MONTH</entry><entry><replaceable>M</replaceable> and <replaceable
>MM</replaceable></entry></row>
<row><entry>DAY</entry><entry><replaceable>D</replaceable> and <replaceable
>DD</replaceable></entry></row>
<row><entry>HOUR</entry><entry> <replaceable>HH</replaceable>   </entry>
</row>
<row><entry>MINUTE</entry><entry><replaceable>MI</replaceable> and <replaceable
>M</replaceable></entry></row>
<row><entry>SECOND</entry><entry><replaceable>SS</replaceable> and <replaceable
>S</replaceable></entry></row>
<row><entry>QUARTER</entry><entry><replaceable>Q</replaceable> and <replaceable
>QQ</replaceable> </entry></row>
<row><entry>WEEK</entry><entry><replaceable>WW</replaceable> and <replaceable
>WK</replaceable>   </entry></row>
</tbody>
</tgroup>
</informaltable>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>num_expr</replaceable></term>
<listitem><para>is an SQL exact numeric value expression that specifies
how many <replaceable>datepart</replaceable> units of time are to
be added to <replaceable>datetime_expr</replaceable>. If <replaceable
>num_expr</replaceable> has a fractional portion, it is ignored. If <replaceable
>num_expr</replaceable> is negative, the return value precedes <replaceable
>datetime_expr</replaceable> by the specified amount of time. See <xref
linkend="i1011132" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>datetime_expr</replaceable></term>
<listitem><para>is an expression that evaluates to a datetime value
of type DATE or TIMESTAMP. The type of the <replaceable>datetime_expression</replaceable
> is returned, unless the interval expression contains any time components,
then a timestamp is returned. See <xref
linkend="Datetime_Value_Expressions" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of DATEADD</title>
<itemizedlist>
<listitem><para>This function <indexterm><primary>DATEADD function</primary>
<secondary>examples of</secondary></indexterm>adds seven days to the
date specified in <replaceable>start_date</replaceable></para>
<programlisting>DATEADD(DAY, 7,start_date)
</programlisting>
</listitem>
<listitem><para>This function returns the value DATE '2009-03-07'</para>
<programlisting>DATEADD(DAY, 7 , DATE '2009-02-28')
</programlisting>
</listitem>
<listitem><para>This function returns the value DATE '2008-03-06'</para>
<programlisting>DATEADD(DAY, 7, DATE '2008-02-28')
</programlisting>
</listitem>
<listitem><para>This function returns the timestamp '2008-03-07 00:00:00'</para>
<programlisting>DATEADD(DAY, 7, timestamp'2008-02-29 00:00:00')
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1051713" pagebreak="yes">
<title>DATEDIFF Function</title>
<para><indexterm><primary>DATEDIFF function</primary><secondary>syntax
diagram of</secondary></indexterm>The DATEDIFF function returns the
integer value for the number of <replaceable>datepart</replaceable
> units of time between <replaceable>startdate</replaceable> and <replaceable
>enddate</replaceable>. If <replaceable>enddate</replaceable> precedes <replaceable
>startdate</replaceable>, the return value is negative or zero.</para>
<para>DATEDIFF is a Trafodion SQL extension. <indexterm><primary>Datetime
functions</primary><secondary>DATEDIFF</secondary></indexterm></para>
<programlisting>DATEDIFF (<replaceable>datepart</replaceable>, <replaceable
>startdate</replaceable>, <replaceable>enddate</replaceable>)
</programlisting>
<variablelist>
<varlistentry><term>datepart</term>
<listitem><para>is YEAR, MONTH, DAY, HOUR, MINUTE, SECOND, QUARTER,
WEEK, or one of the following abbreviations</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL1  desc list">
<colspec colname="COLSPEC1" colwidth="0.29*"/>
<colspec colwidth="1.71*"/>
<tbody>
<row><entry>YEAR</entry><entry><replaceable>YY</replaceable> and <replaceable
>YYYY</replaceable>    </entry></row>
<row><entry>MONTH</entry><entry><replaceable>M</replaceable> and <replaceable
>MM</replaceable></entry></row>
<row><entry>DAY</entry><entry><replaceable>D</replaceable> and <replaceable
>DD</replaceable></entry></row>
<row><entry>HOUR</entry><entry> <replaceable>HH</replaceable>   </entry>
</row>
<row><entry>MINUTE</entry><entry><replaceable>MI</replaceable> and <replaceable
>M</replaceable></entry></row>
<row><entry>SECOND</entry><entry><replaceable>SS</replaceable> and <replaceable
>S</replaceable></entry></row>
<row><entry>QUARTER</entry><entry><replaceable>Q</replaceable> and <literal
>QQ</literal> </entry></row>
<row><entry>WEEK</entry><entry><replaceable>WW</replaceable> and <replaceable
>WK</replaceable>   </entry></row>
</tbody>
</tgroup>
</informaltable>
</listitem>
</varlistentry>
<varlistentry><term>startdate</term>
<listitem><para>may be of type DATE or TIMESTAMP. See <xref
linkend="Datetime_Value_Expressions" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
<varlistentry><term>enddate</term>
<listitem><para>may be of type DATE or TIMESTAMP. See <xref
linkend="Datetime_Value_Expressions" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
</variablelist>
<para>The method of counting crossed boundaries such as days, minutes,
and seconds makes the result given by DATEDIFF consistent across all
data types. The result is a signed integer value equal to the number
of datepart boundaries crossed between the first and second date.</para>
<para>For example, the number of weeks between Sunday, January 4,
and Sunday, January 11, is 1. The number of months between March 31
and April 1 would be 1 because the month boundary is crossed from
March to April. The DATEDIFF function generates an error if the result
is out of range for integer values. For seconds, the maximum number
is equivalent to approximately 68 years. The DATEDIFF function generates
an error if a difference in weeks is requested and one of the two
dates precedes January 7 of the year 0001.</para>
<section>
<title>Examples of DATEDIFF</title>
<itemizedlist>
<listitem><para>This <indexterm><primary>DATEDIFF function</primary>
<secondary>examples of</secondary></indexterm>function returns the
value of 0 because no one-second boundaries are crossed.</para>
<programlisting>DATEDIFF(SECOND, TIMESTAMP '2006-09-12 11:59:58.999998', TIMESTAMP '2006-09-12 11:59:58.999999')
</programlisting>
</listitem>
<listitem><para>This function returns the value 1 because a one-second
boundary is crossed even though the two timestamps differ by only
one microsecond.</para>
<programlisting>DATEDIFF(SECOND, TIMESTAMP '2006-09-12 11:59:58.999999', TIMESTAMP '2006-09-12 11:59:59.000000')  
</programlisting>
</listitem>
<listitem><para>This function returns the value of 0.</para>
<programlisting>DATEDIFF(YEAR, TIMESTAMP '2006-12-31 23:59:59.999998', TIMESTAMP '2006-12-31 23:59:59.999999') 
</programlisting>
</listitem>
<listitem><para>This function returns the value of 1 because a year
boundary is crossed.</para>
<programlisting>DATEDIFF(YEAR, TIMESTAMP '2006-12-31 23:59:59.999999', TIMESTAMP '2007-01-01 00:00:00.000000')  
</programlisting>
</listitem>
<listitem><para>This function returns the value of 2 because two WEEK
boundaries are crossed.</para>
<programlisting>DATEDIFF(WEEK, DATE '2006-01-01’, DATE '2006-01-09')
</programlisting>
</listitem>
<listitem><para>This function returns the value of -29.</para>
<programlisting>DATEDIFF(DAY, DATE '2008-03-01’, DATE '2008-02-01')
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1051807" pagebreak="yes">
<title>DATEFORMAT Function</title>
<indexterm><primary>DATEFORMAT function</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>Datetime functions</primary>
<secondary>DATEFORMAT</secondary></indexterm>
<para>The DATEFORMAT function returns a datetime value as a character
string literal in the DEFAULT, USA, or EUROPEAN format. The data type
of the result is CHAR.</para>
<para>DATEFORMAT is a Trafodion SQL extension.</para>
<programlisting>DATEFORMAT (<replaceable>datetime-expression</replaceable
>,{DEFAULT | USA | EUROPEAN})
</programlisting>
<variablelist>
<varlistentry><term><replaceable>datetime-expression</replaceable
> </term>
<listitem><para>is an expression that evaluates to a datetime value
of type DATE, TIME, or TIMESTAMP. See <xref
linkend="Datetime_Value_Expressions" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
<varlistentry><term>DEFAULT | USA | EUROPEAN</term>
<listitem><para>specifies a format for a datetime value. See <xref
linkend="i1011631" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Considerations for DATEFORMAT</title>
<para>The DATEFORMAT function returns the datetime value in ISO8859-1
encoding.</para>
</section>
<section>
<title>Examples of DATEFORMAT</title>
<indexterm><primary>DATEFORMAT function</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>Convert a datetime literal in DEFAULT format to a
string in USA format: </para>
<programlisting>DATEFORMAT (TIMESTAMP '2008-06-20 14:20:20.00', USA) 
</programlisting>
<para>The function returns this string literal:</para>
<programlisting>'06/20/2008 02:20:20.00 PM'
</programlisting>
</listitem>
<listitem><para>Convert a datetime literal in DEFAULT format to a
string in European format: </para>
<programlisting>DATEFORMAT (TIMESTAMP '2008-06-20 14:20:20.00', EUROPEAN) 
</programlisting>
<para>The function returns this string literal:</para>
<programlisting>'20.06.2008 14.20.20.00'
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1051756" pagebreak="yes">
<title>DATE_PART Function (of an Interval)</title>
<indexterm><primary>DATE_PART (of an interval)  function</primary>
<secondary>syntax diagram of</secondary></indexterm><indexterm><primary
>Datetime functions</primary><secondary>DATE_PART (interval)</secondary>
</indexterm>
<para>The DATE_PART function extracts the datetime field specified
by <replaceable>text</replaceable> from the <replaceable>interval</replaceable
> value specified by <replaceable>interval</replaceable> and returns
the result as an exact numeric value. The DATE_PART function accepts
the specification of 'YEAR', 'MONTH', 'DAY', 'HOUR', 'MINUTE', or
'SECOND' for text.</para>
<para>DATE_PART is a Trafodion SQL extension. </para>
<programlisting>DATE_PART (<replaceable>text</replaceable>, <replaceable
>interval</replaceable>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>text</replaceable></term>
<listitem><para>specifies YEAR, MONTH, DAY, HOUR, MINUTE, or SECOND.
The value must be enclosed in single quotes.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>interval</replaceable></term>
<listitem><para><replaceable>interval</replaceable> accepts all interval
expression types that the Trafodion database software considers as
valid interval expressions. See <xref linkend="i1010948"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<para>The DATE_PART(<replaceable>text</replaceable>, <replaceable
>interval</replaceable>) is equivalent to EXTRACT(<replaceable>text</replaceable
>, <replaceable>interval</replaceable>), except that the DATE_PART
function requires single quotes around the text specification, where
EXTRACT does not allow single quotes.</para>
<para>When SECOND is specified the fractional part of the second is
returned.</para>
<section>
<title>Examples of DATE_PART</title>
<indexterm><primary>DATE_PART (of an interval) function</primary>
<secondary>examples of</secondary></indexterm>
<itemizedlist>
<listitem><para>This function returns the value of 7.</para>
<programlisting>DATE_PART('DAY', INTERVAL '07:04' DAY TO HOUR)
</programlisting>
</listitem>
<listitem><para>This function returns the value of 6.</para>
<programlisting>DATE_PART('MONTH', INTERVAL '6' MONTH)
</programlisting>
</listitem>
<listitem><para>This function returns the value of 36.33.</para>
<programlisting>DATE_PART('SECOND', INTERVAL '5:2:15:36.33' DAY TO SECOND(2))
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1051610" pagebreak="yes">
<title>DATE_PART Function (of a Timestamp)</title>
<indexterm><primary>DATE_PART (of a timestamp) function</primary>
<secondary>syntax diagram of</secondary></indexterm><indexterm><primary
>DATE_PART (of a timestamp) function</primary><secondary>examples
of</secondary></indexterm><indexterm><primary>Datetime functions</primary>
<secondary>DATE_PART (timestamp)</secondary></indexterm>
<para>The DATE_PART function extracts the datetime field specified
by <replaceable>text</replaceable> from the datetime value specified
by <replaceable>datetime_expr</replaceable> and returns the result
as an exact numeric value. The DATE_PART function accepts the specification
of 'YEAR', 'YEARQUARTER', 'YEARMONTH', 'YEARWEEK', 'MONTH', 'DAY',
'HOUR', 'MINUTE', or 'SECOND' for text. </para>
<para>The DATE_PART function of a timestamp can be changed to DATE_PART
function of a datetime because the second argument can be either a
timestamp or a date expression.</para>
<para>DATE_PART is a Trafodion extension.</para>
<programlisting>DATE_PART(<replaceable>text</replaceable>, <replaceable
>datetime_expr</replaceable>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>text</replaceable></term>
<listitem><para>specifies YEAR, YEARQUARTER, YEARMONTH, YEARWEEK,
MONTH, DAY, HOUR, MINUTE, or SECOND. The value must be enclosed in
single quotes. <itemizedlist>
<listitem><para>YEARMONTH: Extracts the year and the month, as a 6-digit
integer of the form <literal>yyyymm (100 * year + month)</literal
>.</para></listitem>
<listitem><para>YEARQUARTER: Extracts the year and quarter, as a 5-digit
integer of the form <literal>yyyyq, (10 * year + quarter)</literal
> with <literal>q</literal> being <literal>1</literal> for the first
quarter, <literal>2</literal> for the second, and so on.</para>
</listitem>
<listitem><para>YEARWEEK: Extracts the year and week of the year,
as a 6-digit integer of the form <literal>yyyyww (100 * year + week)</literal
>. The week number will be computed in the same way as in the WEEK
function.</para></listitem>
</itemizedlist></para></listitem>
</varlistentry>
<varlistentry><term><replaceable>datetime_expr</replaceable></term>
<listitem><para>is an expression that evaluates to a datetime value
of type DATE or TIMESTAMP. See <xref
linkend="Datetime_Value_Expressions" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
</variablelist>
<para><literal>DATE_PART</literal>(<replaceable>text</replaceable
>, <replaceable>datetime_expr</replaceable>) is mostly equivalent
to <literal>EXTRACT</literal>(<replaceable>text</replaceable>, <replaceable
>datetime_expr</replaceable>), except that <literal>DATE_PART</literal
> requires single quotes around the text specification where <literal
>EXTRACT</literal> does not allow single quotes. In addition, you
cannot use the YEARQUARTER, YEARMONTH, and YEARWEEK text specification
with EXTRACT.</para>
<section>
<title>Examples of DATE_PART</title>
<itemizedlist>
<listitem><para>This function returns the value of 12.</para>
<programlisting>DATE_PART('month', date'12/05/2006')
</programlisting>
</listitem>
<listitem><para>This function returns the value of 2006.</para>
<programlisting>DATE_PART('year', date'12/05/2006')
</programlisting>
</listitem>
<listitem><para>This function returns the value of 31.</para>
<programlisting>DATE_PART('day', TIMESTAMP '2006-12-31 11:59:59.999999') 
</programlisting>
</listitem>
<listitem><para>This function returns the value 201107.</para>
<programlisting>DATE_PART('YEARMONTH', date '2011-07-25')</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1051635" pagebreak="yes">
<title>DATE_TRUNC Function</title>
<indexterm><primary>DATE_TRUNC function</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>Datetime functions</primary>
<secondary>DATE_TRUNC</secondary></indexterm>
<para>The DATE_TRUNC function returns a value of type TIMESTAMP, which
has all fields of lesser precision than <replaceable>text</replaceable
> set to zero (or 1 in the case of months or days). </para>
<para>DATE_TRUNC is a Trafodion SQL extension.</para>
<programlisting>DATE_TRUNC(<replaceable>text</replaceable>, <replaceable
>datetime_expr</replaceable>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>text</replaceable></term>
<listitem><para>specifies 'YEAR', 'MONTH', 'DAY', 'HOUR', 'MINUTE',
or 'SECOND'. The DATE_TRUNC function also accepts the specification
of 'CENTURY' or 'DECADE'.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>datetime_expr</replaceable></term>
<listitem><para>is an expression that evaluates to a datetime value
of type DATE or TIMESTAMP. DATE_TRUNC returns a value of type TIMESTAMP
which has all fields of lesser precision than <replaceable>text</replaceable
> set to zero (or 1 in the case of months or days). See <xref
linkend="Datetime_Value_Expressions" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of DATE_TRUNC</title>
<indexterm><primary>DATE_TRUNC function</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>This function returns the value of TIMESTAMP '2006-12-31
00:00:00'.</para>
<programlisting>DATE_TRUNC('DAY', TIMESTAMP '2006-12-31 11:59:59')
</programlisting>
</listitem>
<listitem><para>This function returns the value of TIMESTAMP '2006-01-01
00:00:00'</para>
<programlisting>DATE_TRUNC('YEAR', TIMESTAMP '2006-12-31 11:59:59')  
</programlisting>
</listitem>
<listitem><para>This function returns the value of TIMESTAMP '2006-12-01
00:00:00'</para>
<programlisting>DATE_TRUNC('MONTH', DATE '2006-12-31')  
</programlisting>
</listitem>
<listitem><para>Restrictions:</para>
<itemizedlist>
<listitem><para>DATE_TRUNC( 'DECADE', …) cannot be used on years less
than 10.</para></listitem>
<listitem><para>DATE_TRUNC( 'CENTURY', …) cannot be used on years
less than 100.</para></listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1007259" pagebreak="yes">
<title>DAY Function</title>
<indexterm><primary>DAY function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Datetime functions</primary>
<secondary>DAY</secondary></indexterm>
<para>The DAY function converts a DATE or TIMESTAMP expression into
an INTEGER value in the range 1 through 31 that represents the corresponding
day of the month. The result returned by the DAY function is equal
to the result returned by the DAYOFMONTH function.</para>
<para>DAY is a Trafodion SQL extension. </para>
<programlisting>DAY (<replaceable>datetime-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>datetime-expression</replaceable
></term>
<listitem><para>is an expression that evaluates to a datetime value
of type DATE or TIMESTAMP. See <xref
linkend="Datetime_Value_Expressions" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of DAY</title>
<indexterm><primary>DAY function</primary><secondary>examples of</secondary>
</indexterm>
<para>Return an integer that represents the day of the month from
the START_DATE column of the PROJECT table: </para>
<programlisting>SELECT start_date, ship_timestamp, DAY(start_date) 
FROM persnl.project
WHERE projcode = 1000;

Start/Date  Time/Shipped                (EXPR)  
----------  --------------------------  ------  
2008-04-10  2008-04-21 08:15:00.000000      10  

</programlisting>
</section>
</section>
<section id="i1007289" pagebreak="yes">
<title>DAYNAME Function</title>
<indexterm><primary>DAYNAME function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Datetime functions</primary>
<secondary>DAYNAME</secondary></indexterm>
<para>The DAYNAME function converts a DATE or TIMESTAMP expression
into a character literal that is the name of the day of the week (Sunday,
Monday, and so on). </para>
<para>DAYNAME is a Trafodion SQL extension.</para>
<programlisting>DAYNAME (<replaceable>datetime-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>datetime-expression</replaceable
> </term>
<listitem><para>is an expression that evaluates to a datetime value
of type DATE or TIMESTAMP. See <xref
linkend="Datetime_Value_Expressions" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Considerations for DAYNAME</title>
<para>The DAYNAME function returns the name of the day in ISO8859-1. </para>
</section>
<section>
<title>Example of DAYNAME</title>
<indexterm><primary>DAYNAME function</primary><secondary>examples
of</secondary></indexterm>
<para>Return the name of the day of the week from the START_DATE column
in the PROJECT table: </para>
<programlisting>SELECT start_date, ship_timestamp, DAYNAME(start_date) 
FROM persnl.project
WHERE projcode = 1000;

Start/Date  Time/Shipped                (EXPR)     
----------  --------------------------  ---------  
2008-04-10  2008-04-21 08:15:00.000000  Thursday   

</programlisting>
</section>
</section>
<section id="i1007319" pagebreak="yes">
<title>DAYOFMONTH Function</title>
<indexterm><primary>DAYOFMONTH function</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>Datetime functions</primary>
<secondary>DAYOFMONTH</secondary></indexterm>
<para>The DAYOFMONTH function converts a DATE or TIMESTAMP expression
into an INTEGER value in the range 1 through 31 that represents the
corresponding day of the month. The result returned by the DAYOFMONTH
function is equal to the result returned by the DAY function.</para>
<para>DAYOFMONTH is a Trafodion SQL extension.</para>
<programlisting>DAYOFMONTH (<replaceable>datetime-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>datetime-expression</replaceable
></term>
<listitem><para>is an expression that evaluates to a datetime value
of type DATE or TIMESTAMP. See <xref
linkend="Datetime_Value_Expressions" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of DAYOFMONTH</title>
<indexterm><primary>DAYOFMONTH function</primary><secondary>examples
of</secondary></indexterm>
<para>Return an integer that represents the day of the month from
the START_DATE column of the PROJECT table: </para>
<programlisting>SELECT start_date, ship_timestamp, DAYOFMONTH(start_date) 
FROM persnl.project
WHERE projcode = 1000;

Start/Date  Time/Shipped                (EXPR)  
----------  --------------------------  ------  
2008-04-10  2008-04-21 08:15:00.000000      10  

</programlisting>
</section>
</section>
<section id="i1007357" pagebreak="yes">
<title>DAYOFWEEK Function</title>
<indexterm><primary>DAYOFWEEK function</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>Datetime functions</primary>
<secondary>DAYOFWEEK</secondary></indexterm>
<para>The DAYOFWEEK function converts a DATE or TIMESTAMP expression
into an INTEGER value in the range 1 through 7 that represents the
corresponding day of the week. The value 1 represents Sunday, 2 represents
Monday, and so forth.</para>
<para>DAYOFWEEK is a Trafodion SQL extension.</para>
<programlisting>DAYOFWEEK (<replaceable>datetime-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>datetime-expression</replaceable
> </term>
<listitem><para>is an expression that evaluates to a datetime value
of type DATE or TIMESTAMP. See <xref
linkend="Datetime_Value_Expressions" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of DAYOFWEEK</title>
<indexterm><primary>DAYOFWEEK function</primary><secondary>examples
of</secondary></indexterm>
<para>Return an integer that represents the day of the week from the
START_DATE column in the PROJECT table: </para>
<programlisting>SELECT start_date, ship_timestamp, DAYOFWEEK(start_date) 
FROM persnl.project
WHERE projcode = 1000;

Start/Date  Time/Shipped                (EXPR)  
----------  --------------------------  ------  
2008-04-10  2008-04-21 08:15:00.000000       5  
</programlisting>
<para>The value returned is 5, representing Thursday. The week begins
on Sunday.</para>
</section>
</section>
<section id="i1007402" pagebreak="yes">
<title>DAYOFYEAR Function</title>
<indexterm><primary>DAYOFYEAR function</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>Datetime functions</primary>
<secondary>DAYOFYEAR</secondary></indexterm>
<para>The DAYOFYEAR function converts a DATE or TIMESTAMP expression
into an INTEGER value in the range 1 through 366 that represents the
corresponding day of the year.</para>
<para>DAYOFYEAR is a Trafodion SQL extension.</para>
<programlisting>DAYOFYEAR (<replaceable>datetime-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>datetime-expression</replaceable
> </term>
<listitem><para>is an expression that evaluates to a datetime value
of type DATE or TIMESTAMP. See <xref
linkend="Datetime_Value_Expressions" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of DAYOFYEAR</title>
<indexterm><primary>DAYOFYEAR function</primary><secondary>examples
of</secondary></indexterm>
<para>Return an integer that represents the day of the year from the
START_DATE column in the PROJECT table: </para>
<programlisting>SELECT start_date, ship_timestamp, DAYOFYEAR(start_date) 
FROM persnl.project 
WHERE projcode = 1000; 

Start/Date  Time/Shipped                (EXPR)                
----------  --------------------------  --------------------  
2008-04-10  2008-04-21 08:15:00.000000                   101

</programlisting>
</section>
</section>
<section id="i1051682" pagebreak="yes">
<title>DECODE Function</title>
<indexterm><primary>DECODE function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Other functions and
expressions</primary><secondary>DECODE</secondary></indexterm>
<para>The DECODE function compares <replaceable>expr</replaceable
> to each <replaceable>test_expr</replaceable> value one by one in
the order provided. If <replaceable>expr</replaceable> is equal to
a <replaceable>test_expr</replaceable>, then the corresponding <replaceable
>retval</replaceable> is returned. If no match is found, <replaceable
>default</replaceable> is returned. If no match is found and <replaceable
>default</replaceable> is omitted, NULL is returned.</para>
<para>DECODE is a Trafodion SQL extension.</para>
<programlisting>DECODE (<replaceable>expr</replaceable>, <replaceable
>test_expr</replaceable>, <replaceable>retval</replaceable> [, <replaceable
>test_expr2</replaceable>, <replaceable>retval2</replaceable> ... ] [ , <replaceable
>default</replaceable> ] )
</programlisting>
<variablelist>
<varlistentry><term><replaceable>expr</replaceable></term>
<listitem><para>is an SQL expression.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>test_expr</replaceable>, <replaceable
>test_expr</replaceable>,..</term>
<listitem><para>are each an SQL expression of a type comparable to
that of <replaceable>expr</replaceable>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>retval</replaceable></term>
<listitem><para>is an SQL expression.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>default</replaceable>, <replaceable
>retval2</replaceable>,..</term>
<listitem><para>are each an SQL expression of a type comparable to
that of <replaceable>retval</replaceable>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Considerations for DECODE</title>
<para>In a DECODE function, two nulls are considered to be equivalent.
If <replaceable>expr</replaceable> is null, then the returned value
is the <replaceable>retval</replaceable> of the first <replaceable
>test_expr</replaceable> that is also null.</para>
<para>The <replaceable>expr</replaceable>, <replaceable>test_expr</replaceable
>, <replaceable>retval</replaceable>, and <replaceable>default</replaceable
> values can be derived from expressions.</para>
<para>The arguments can be any of the numeric types or character types.
However, <replaceable>expr</replaceable> and each <replaceable>test_expr</replaceable
> value must be of comparable types. If <replaceable>expr</replaceable
> and <replaceable>test_expr</replaceable> values are character types,
they must be in the same character set (to be comparable types.) </para>
<para>All the <replaceable>retval</replaceable> values and the <replaceable
>default</replaceable> value, if any, must be of comparable types.</para>
<para>If <replaceable>expr</replaceable> and a <replaceable>test_expr</replaceable
> value are character data, the comparison is made using nonpadded
comparison semantics. </para>
<para>If <replaceable>expr</replaceable> and a <replaceable>test_expr</replaceable
> value are numeric data, the comparison is made with a temporary
copy of one of the numbers, according to defined rules of conversion.
For example, if one number is INTEGER and the other is DECIMAL, the
comparison is made with a temporary copy of the integer converted
to a decimal. </para>
<para>If all the possible return values are of fixed-length character
types, the returned value is a fixed-length character string with
size equal to the maximum size of all the possible return value types.</para>
<para>If any of the possible return values is a variable-length character
type, the returned value is a variable-length character string with
maximum size of all the possible return value types.</para>
<para>If all the possible return values are of integer types, the
returned value is the same type as the largest integer type of all
the possible return values.</para>
<para>If the returned value is of type FLOAT, the precision is the
maximum precision of all the possible return values.</para>
<para>If all the possible returned values are of the same non-integer,
numeric type (REAL, FLOAT, DOUBLE PRECISION, NUMERIC, or DECIMAL),
the returned value is of that same type.</para>
<para>If all the possible return values are of numeric types but not
all the same, and at least one is REAL, FLOAT, or DOUBLE PRECISION,
then the returned value is of type DOUBLE PRECISION.</para>
<para>If all the possible return values are of numeric types but not
all the same, none are REAL, FLOAT, or DOUBLE PRECISION, and at least
one is of type NUMERIC, then the returned value is of type NUMERIC.</para>
<para>If all the possible return values are of numeric types, none
are NUMERIC, REAL, FLOAT, or DOUBLE PRECISION, and at least one is
of type DECIMAL, then the returned value will be of type DECIMAL.</para>
<para>If the returned value is of type NUMERIC or DECIMAL, it has
a precision equal to the sum of:</para>
<itemizedlist>
<listitem><para>The maximum scale of all the possible return value
types and </para></listitem>
<listitem><para>The maximum value of (precision - scale) for all the
possible return value types. </para></listitem>
</itemizedlist>
<para>However, the precision will not exceed 18. </para>
<para>The scale of the returned value is the minimum of:</para>
<itemizedlist>
<listitem><para>the maximum scale of all the possible return value
types and </para></listitem>
<listitem><para>18 - (the maximum value of (precision - scale) for
all the possible return value types). </para></listitem>
</itemizedlist>
<para>The number of components in the DECODE function, including <replaceable
>expr</replaceable>, <replaceable>test_exprs</replaceable>, <replaceable
>retvals</replaceable>, and <replaceable>default</replaceable>, has
no limit other than the general limit of how big an SQL expression
can be. However, large lists do not perform well. </para>
<para>The syntax <computeroutput><literal>DECODE (expr, test_expr,
retval [, test_expr2, retval2 ... ] [ , default ]  )</literal></computeroutput
>:</para>
<para>is logically equivalent to the following: </para>
<programlisting>     CASE WHEN (expr IS NULL AND test_expr IS NULL) OR 
                expr = test_expr  THEN retval
       WHEN (expr IS NULL AND test_expr2 IS NULL) OR 
             expr = test_expr2 THEN retval2
       ...
       ELSE default /* or  ELSE NULL if <replaceable>default</replaceable
> not 
             specified */
  END</programlisting>
<para>No special conversion of <replaceable>expr</replaceable>, <replaceable
>test_exprN</replaceable>, or <replaceable>retvalN</replaceable> exist
other than what a CASE statement normally does.</para>
</section>
<section>
<title>Examples of DECODE</title>
<indexterm><primary>DECODE function</primary><secondary>examples of</secondary>
</indexterm>
<itemizedlist>
<listitem><para>Example of the DECODE function:</para>
<programlisting>SELECT emp_name,
decode(CAST (( yrs_of_service + 3) / 4 AS INT ) ,
       0,0.04,
       1,0.04,
       0.06) as perc_value
FROM employees;
SELECT supplier_name,
decode(supplier_id,    10000,   'Company A',
                       10001,   'Company B',
                       10002,   'Company C',
                       'Company D') as result
FROM suppliers;
</programlisting>
</listitem>
<listitem><para>This example shows a different way of handling NULL
specified as default and not specified as default explicitly:</para>
<programlisting>SELECT decode( (?p1 || ?p2), trim(?p1), ‘Hi’, ?p3, null ) 
    from emp;
..
*** ERROR[4049] A CASE expression cannot have a result data type of both CHAR(2)
and NUMERIC(18,6).
*** ERROR[4062] The preceding error actually occurred in function 
DECODE((?P1 || ?P2),(‘ ’ TRIM ?P1), ‘Hi’, ?P3, NULL)
*** ERROR[8822] The statement was not prepared.
</programlisting>
<para>The last <replaceable>ret-val</replaceable> is an explicit NULL.
When Trafodion SQL encounters this situation, it assumes that the
return value will be NUMERIC(18,6). Once Trafodion SQL determines
that the return values are numeric, it determines that all possible
return values must be numeric. When <literal>‘Hi’</literal> is encountered
in a <replaceable>ret-val</replaceable> position, the error is produced
because the CHAR(2) type argument is not comparable with a NUMERIC(18,6)
type return value.</para>
<para>This statement is equivalent and will not produce an error:</para>
<programlisting>SELECT decode( (?p1 || ?p2), trim(?p1), ‘Hi’ ) from emp;
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1007432" pagebreak="yes">
<title>DEGREES Function</title>
<indexterm><primary>DEGREES function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Math functions</primary>
<secondary>DEGREES</secondary></indexterm>
<para>The DEGREES function converts a numeric value expression expressed
in radians to the number of degrees.</para>
<para>DEGREES is a Trafodion SQL extension.</para>
<programlisting>DEGREES (<replaceable>numeric-expression</replaceable
>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>numeric-expression</replaceable> </term>
<listitem><para>is an SQL numeric value expression that specifies
the value for the argument of the DEGREES function. See <xref
linkend="i1011132" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of DEGREES</title>
<indexterm><primary>DEGREES function</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>This function returns the value 45.0001059971939008
in degrees:</para>
<programlisting>DEGREES (0.78540)
</programlisting>
</listitem>
<listitem><para>This function returns the value of 45. The function
DEGREES is the inverse of the function RADIANS. </para>
<programlisting>DEGREES (RADIANS (45)) 
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1007464" pagebreak="yes">
<title>DIFF1 Function</title>
<itemizedlist>
<listitem><para><xref linkend="i1007489" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1007501" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>Sequence functions</primary><secondary>DIFF1</secondary>
</indexterm>
<para>The DIFF1 function is a sequence function that calculates the
amount of change in an expression from row to row in an intermediate
result table ordered by a SEQUENCE BY clause in a SELECT statement.
See <xref linkend="i1004369" role="select:quotedtitle page"/>.</para>
<indexterm><primary>DIFF1 function</primary><secondary>syntax diagram
of</secondary></indexterm>
<para>DIFF1 is a Trafodion SQL extension.</para>
<programlisting>DIFF1 (<replaceable>column-expression-a</replaceable
> [,<replaceable>column-expression-b</replaceable>])
</programlisting>
<variablelist>
<varlistentry><term><replaceable>column-expression-a </replaceable
></term>
<listitem><para>specifies a derived column determined by the evaluation
of the column expression. If you specify only one column as an argument,
DIFF1 returns the difference between the value of the column in the
current row and its value in the previous row; this version calculates
the unit change in the value from row to row.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>column-expression-b</replaceable
> </term>
<listitem><para>specifies a derived column determined by the evaluation
of the column expression. If you specify two columns as arguments,
DIFF1 returns the difference in consecutive values in <replaceable
>column-expression-a</replaceable> divided by the difference in consecutive
values in <replaceable>column-expression-b</replaceable>. </para><para
>The purpose of the second argument is to distribute the amount of
change from row to row evenly over some unit of change (usually time)
in another column.</para>
</listitem>
</varlistentry>
</variablelist>
<section id="i1007489">
<title>Considerations for DIFF1</title>
<section>
<title>Equivalent Result</title>
<indexterm><primary>DIFF1 function</primary><secondary>equivalent
definitions</secondary></indexterm>
<para>If you specify one argument, the result of DIFF1 is equivalent
to:</para>
<programlisting>column-expression-a - OFFSET(column-expression-a, 1)
</programlisting>
<para>If you specify two arguments, the result of DIFF1 is equivalent
to: </para>
<programlisting>DIFF1(column-expression-a) / DIFF1(column-expression-b)
</programlisting>
<para>The two-argument version involves division by the result of
the DIFF1 function. To avoid divide-by-zero errors, be sure that <replaceable
>column-expression-b</replaceable> does not contain any duplicate
values whose DIFF1 computation could result in a divisor of zero.</para>
</section>
<section>
<title>Datetime Arguments</title>
<para>In general, Trafodion SQL does not allow division by a value
of INTERVAL data type. However, to permit use of the two-argument
version of DIFF1 with times and dates, Trafodion SQL relaxes this
restriction and allows division by a value of INTERVAL data type.</para>
</section>
</section>
<section id="i1007501">
<title>Examples of DIFF1</title>
<indexterm><primary>DIFF1 function</primary><secondary>examples of</secondary>
</indexterm>
<itemizedlist>
<listitem><para>Retrieve the difference between the I1 column in the
current row and the I1 column in the previous row:</para>
<programlisting>SELECT DIFF1 (I1) AS DIFF1_I1
FROM mining.seqfcn
SEQUENCE BY TS;

DIFF1_I1
------------
           ?
       21959
       -9116
      -14461
        7369

--- 5 row(s) selected.
</programlisting>
<para>The first row retrieved displays null because the offset from
the current row does not fall within the results set.</para>
</listitem>
<listitem><para>Retrieve the difference between the TS column in the
current row and the TS column in the previous row:</para>
<programlisting>SELECT DIFF1 (TS) AS DIFF1_TS
FROM mining.seqfcn
SEQUENCE BY TS;

DIFF1_TS
--------------------
                   ?
     30002620.000000  
    134157861.000000  
    168588029.000000  
    114055223.000000  

--- 5 row(s) selected. 
</programlisting>
<para>The results are expressed as the number of seconds. For example,
the difference between TIMESTAMP '1951-02-15 14:35:49' and TIMESTAMP
'1950-03-05 08:32:09' is approximately 347 days. The difference between
TIMESTAMP '1955-05-18 08:40:10' and TIMESTAMP '1951-02-15 14:35:49'
is approximately 4 years and 3 months, and so on.</para>
</listitem>
<listitem><para>This query retrieves the difference in consecutive
values in I1 divided by the difference in consecutive values in TS:</para>
<programlisting>SELECT DIFF1 (I1,TS) AS DIFF1_I1TS
FROM mining.seqfcn
SEQUENCE BY TS;

DIFF1_I1TS          
------------------- 
                  ? 
           .0007319 
          -.0000679 
          -.0000857 
           .0000646 

--- 5 row(s) selected. 
</programlisting>
<para>The results are equivalent to the quotient of the results from
the two preceding examples. For example, in the second row of the
output of this example, 0.0007319 is equal to 21959 divided by 30002620.</para>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1007542" pagebreak="yes">
<title>DIFF2 Function</title>
<itemizedlist>
<listitem><para><xref linkend="i1007570" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1007582" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>Sequence functions</primary><secondary>DIFF2</secondary>
</indexterm>
<para>The DIFF2 function is a sequence function that calculates the
amount of change in a DIFF1 value from row to row in an intermediate
result table ordered by a SEQUENCE BY clause in a SELECT statement.
See <xref linkend="i1004369" role="select:quotedtitle page"/>.</para>
<indexterm><primary>DIFF2 function</primary><secondary>syntax diagram
of</secondary></indexterm>
<para>DIFF2 is a Trafodion SQL extension.</para>
<programlisting>DIFF2 (<replaceable>column-expression-a</replaceable
> [,<replaceable>column-expression-b</replaceable>])
</programlisting>
<variablelist>
<varlistentry><term><replaceable>column-expression-a </replaceable
></term>
<listitem><para>specifies a derived column determined by the evaluation
of the column expression. If you specify only one column as an argument,
DIFF2 returns the difference between the value of DIFF1(<replaceable
>column-expression-a</replaceable>) in the current row and the same
result in the previous row.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>column-expression-b</replaceable
> </term>
<listitem><para>specifies a derived column determined by the evaluation
of the column expression. If you specify two columns as arguments,
DIFF2 returns the difference in consecutive values of DIFF1(<replaceable
>column-expression-a</replaceable>) divided by the difference in consecutive
values in <replaceable>column-expression-b</replaceable>. </para>
</listitem>
</varlistentry>
</variablelist>
<para>See <xref linkend="i1007464" role="select:quotedtitle page"
/>.</para>
<section id="i1007570">
<title>Considerations for DIFF2</title>
<section>
<title>Equivalent Result</title>
<indexterm><primary>DIFF2 function</primary><secondary>equivalent
definitions</secondary></indexterm>
<para>If you specify one argument, the result of DIFF2 is equivalent
to:</para>
<programlisting>DIFF1(<replaceable>column-expression-a</replaceable
>)- OFFSET(DIFF1(<replaceable>column-expression-a</replaceable>),1)
</programlisting>
<para>If you specify two arguments, the result of DIFF2 is equivalent
to: </para>
<programlisting>DIFF2(<replaceable>column-expression-a</replaceable
>) / DIFF1(<replaceable>column-expression-b</replaceable>)
</programlisting>
<para>The two-argument version involves division by the result of
the DIFF1 function. To avoid divide-by-zero errors, be sure that <replaceable
>column-expression-b</replaceable> does not contain any duplicate
values whose DIFF1 computation could result in a divisor of zero.</para>
</section>
<section>
<title>Datetime Arguments</title>
<para>In general, Trafodion SQL does not allow division by a value
of INTERVAL data type. However, to permit use of the two-argument
version of DIFF2 with times and dates, Trafodion SQL relaxes this
restriction and allows division by a value of INTERVAL data type.</para>
</section>
</section>
<section id="i1007582">
<title>Examples of DIFF2</title>
<indexterm><primary>DIFF2 function</primary><secondary>examples of</secondary>
</indexterm>
<itemizedlist>
<listitem><para>Retrieve the difference between the value of DIFF1(I1)
in the current row and the same result in the previous row:</para>
<programlisting>SELECT DIFF2 (I1) AS DIFF2_I1
FROM mining.seqfcn
SEQUENCE BY TS;

DIFF2_I1
-------------------- 
                   ? 
                   ? 
              -31075 
               -5345 
               21830 

--- 5 row(s) selected.
</programlisting>
<para>The results are equal to the difference of DIFF1(I1) for the
current row and DIFF1(I1) of the previous row. For example, in the
third row of the output of this example, -31075 is equal to -9116
minus 21959. The value -9116 is the result of DIFF1(I1) for the current
row, and the value 21959 is the result of DIFF1(I1) for the previous
row. See <xref linkend="i1007501" role="select:quotedtitle page"/>.</para>
</listitem>
<listitem><para>Retrieve the difference in consecutive values of DIFF1(I1)
divided by the difference in consecutive values of TS:</para>
<programlisting>SELECT DIFF2 (I1,TS) AS DIFF2_I1TS 
FROM mining.seqfcn
SEQUENCE BY TS; 

DIFF2_I1TS
---------------------
                    ?
                    ?
             -.000231
             -.000031
              .000191

--- 5 row(s) selected.
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1018681" pagebreak="yes">
<title>EXP Function</title>
<indexterm><primary>EXP function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Math functions</primary>
<secondary>EXP</secondary></indexterm>
<para>This function returns the exponential value (to the base e)
of a numeric value expression.</para>
<para>EXP is a Trafodion SQL extension.</para>
<programlisting>EXP (<replaceable>numeric-expression</replaceable
>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>numeric-expression</replaceable> </term>
<listitem><para>is an SQL numeric value expression that specifies
the value for the argument of the EXP function. See <xref
linkend="i1011132" role="select:quotedtitle page"/>. </para><para
>The minimum input value must be between -744.4400719 and -744.4400720.</para>
<para>The maximum input value must be between 709.78271289338404 and
709.78271289338405.</para>
</listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of EXP</title>
<indexterm><primary>EXP function</primary><secondary>examples of</secondary>
</indexterm>
<itemizedlist>
<listitem><para>This function returns the value 3.49034295746184128E+000,
or approximately 3.4903:</para>
<programlisting>EXP (1.25)
</programlisting>
</listitem>
<listitem><para>This function returns the value 2.0. The function
EXP is the inverse of the function LOG:</para>
<programlisting>EXP (LOG(2.0))
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1008313" pagebreak="yes">
<title>EXPLAIN Function</title>
<itemizedlist>
<listitem><para><xref linkend="i1008366" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1008609" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>EXPLAIN function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Other functions and
expressions</primary><secondary>EXPLAIN</secondary></indexterm>
<!--WRITER'S NOTE: R2.4 SP2 content rolled from README, April 14, 2010-->
<para>The EXPLAIN function is a table-valued stored function that
generates a result table describing an access plan for a SELECT, INSERT,
DELETE, or UPDATE statement. See <xref linkend="i1008388"
role="select:quotedtitle page"/>. </para>
<para>The EXPLAIN function can be specified as a table reference (<replaceable
>table</replaceable>) in the FROM clause of a SELECT statement if
it is preceded by the keyword TABLE and surrounded by parentheses. </para>
<para>For information on the EXPLAIN statement, see <xref
linkend="i1007383" role="select:quotedtitle page"/>.</para>
<programlisting>EXPLAIN (<replaceable>module</replaceable>,'<replaceable
>statement-pattern</replaceable>')

<replaceable>module</replaceable> is:
   '<replaceable>module-name</replaceable>' | NULL 
</programlisting>
<variablelist>
<varlistentry><term>'<replaceable>module-name</replaceable>'</term>
<listitem><para>Reserved for future use.</para><para>The module name
is enclosed in single quotes and is case-sensitive. If a module name
is uppercase, the value you specify within single quotes must be uppercase.
For example: 'MYCAT.MYSCH.MYPROG'</para>
</listitem>
</varlistentry>
<varlistentry><term>NULL </term>
<listitem><para>explains statements prepared in the session. </para>
</listitem>
</varlistentry>
<varlistentry><term>'<replaceable>statement-pattern</replaceable>'</term>
<listitem><para>A statement pattern is enclosed in single quotes and
is case-sensitive. The statement name must be in uppercase<phrase
>, unless you delimit the statement name in a PREPARE statement</phrase
>.</para></listitem>
</varlistentry>
</variablelist>
<section id="i1008366">
<title>Considerations for EXPLAIN Function</title>
<section>
<title>Using a Statement Pattern</title>
<para>Using a statement pattern is analogous to using a LIKE pattern.
You can use the LIKE pattern in the following ways:<programlisting
>select * from table (explain(NULL,'S%'));
select * from table (explain(NULL,'S1'));
select * from table (explain(NULL,'%1'));
</programlisting></para>
<para>However, you cannot use the LIKE pattern in this way: <programlisting
>SELECT * FROM TABLE (EXPLAIN (NULL, '%'))</programlisting></para>
<para>This statement returns the EXPLAIN result for all prepared statements
whose names begin with the uppercase letter '<literal>S</literal>':</para>
<programlisting>SELECT * FROM TABLE (EXPLAIN (NULL,'S%'))</programlisting>
<para>If the statement pattern does not find any matching statement
names, no rows are returned as the result of the SELECT statement.</para>
</section>
<section>
<title>Obtaining an EXPLAIN Plan While Queries Are Running</title>
<indexterm><primary>EXPLAIN function</primary><secondary>plan in running
query</secondary></indexterm>
<para>Trafodion SQL provides the ability to capture an EXPLAIN plan
for a query at any time while the query is running with the QID option.
By default, this behavior is disabled for a Trafodion session. <phrase
condition="hidden">To enable this feature, contact your HP Support
representative for assistance. </phrase></para>
<note>
<para>Enable this feature before you start preparing and executing
queries.</para>
</note>
<para>After this feature is enabled, use the following syntax in an
EXPLAIN function to get the query execution plan of a running query:</para>
<programlisting>SELECT * FROM TABLE (EXPLAIN(NULL, 'QID=<replaceable
>qid</replaceable>'))</programlisting>
<para><replaceable>qid</replaceable> is a case-sensitive identifier,
which represents the query ID. For example:</para>
<programlisting>'QID=MXID01001011194212103659400053369000000085905admin00_2605_S1'</programlisting>
<para>The EXPLAIN function or statement returns the plan that was
generated when the query was prepared. EXPLAIN for QID retrieves all
the information from the original plan of the executing query. The
plan is available until the query finishes executing and is removed
or deallocated.</para>
</section>
<section id="i1008388">
<title>Result of the EXPLAIN Function</title>
<para>The result table of the EXPLAIN function describes the access
plans for SELECT, INSERT, DELETE, or UPDATE statements.  </para>
<indexterm><primary>EXPLAIN function</primary><secondary>operator
tree</secondary></indexterm><indexterm><primary>EXPLAIN function</primary>
<secondary>columns in result</secondary></indexterm>
<para>In this description of the result of the EXPLAIN function, an
operator tree is a structure that represents operators used in an
access plan as nodes, with at most one parent node for each node in
the tree, and with only one root node. </para>
<para>A node of an operator tree is a point in the tree that represents
an event (involving an operator) in a plan. Each node might have subordinate
nodes—that is, each event might generate a subordinate event or events
in the plan. </para>
<informaltable frame="topbot">
<tgroup cols="3" colsep="0" rowsep="0">
<colspec colwidth="1.00*"/>
<colspec colwidth="0.54*"/>
<colspec colwidth="1.46*"/>
<thead>
<row rowsep="1" valign="bottom"><entry>Column Name</entry><entry>Data
Type</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>MODULE_NAME</entry><entry>CHAR(60) </entry><entry>Reserved
for future use. </entry></row>
<row><entry>STATEMENT_ NAME</entry><entry>CHAR(60) </entry><entry
>Statement name; truncated on the right if longer than 60 characters.</entry>
</row>
<row><entry>PLAN_ID</entry><entry>LARGEINT</entry><entry>Unique system-generated
plan ID automatically assigned by Trafodion SQL; generated at compile
time.</entry></row>
<row><entry>SEQ_NUM</entry><entry>INT</entry><entry>Sequence number
of the current operator in the operator tree; indicates the sequence
in which the operator tree is generated.</entry></row>
<row><entry>OPERATOR</entry><entry>CHAR(30)</entry><entry>Current
operator type. <phrase condition="hidden">For a full list of valid
operators, see the <citetitle>Trafodion Query Guide</citetitle>.</phrase
></entry></row>
<row><entry>LEFT_CHILD_ SEQ_NUM</entry><entry>INT</entry><entry>Sequence
number for the first child operator of the current operator; null
if node has no child operators.</entry></row>
<row><entry>RIGHT_CHILD_ SEQ_NUM</entry><entry>INT</entry><entry>Sequence
number for the second child operator of the current operator; null
if node does not have a second child.</entry></row>
<row><entry>TNAME</entry><entry>CHAR(60)</entry><entry>For operators
in scan group, full name of base table, truncated on the right if
too long for column. If correlation name differs from table name,
simple correlation name first and then table name in parentheses.</entry>
</row>
<row><entry>CARDINALITY</entry><entry>REAL</entry><entry>Estimated
number of rows that will be returned by the current operator. Cardinality
appears as ROWS/REQUEST in some forms of EXPLAIN output. For the right
child of a nested join, multiply the cardinality by the number of
requests to get the total number of rows produced by this operator.</entry>
</row>
<row><entry>OPERATOR_COST</entry><entry>REAL</entry><entry>Estimated
cost associated with the current operator to execute the operator.</entry>
</row>
<row><entry>TOTAL_COST</entry><entry>REAL</entry><entry>Estimated
cost associated with the current operator to execute the operator,
including the cost of all subtrees in the operator tree.</entry></row>
<row><entry>DETAIL_COST</entry><entry>VARCHAR (200)</entry><entry
>Cost vector of five items, described in the next table.</entry></row>
<row><entry>DESCRIPTION</entry><entry>VARCHAR (3000)</entry><entry
>Additional information about the operator. <phrase condition="hidden"
>For a detailed look at all operators, see the <citetitle>Trafodion
Query Guide</citetitle>.</phrase></entry></row>
</tbody>
</tgroup>
</informaltable>
<para>The DETAIL_COST column of the EXPLAIN function results contains
these cost factors:</para>
<informaltable frame="topbot">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colwidth="0.56*"/>
<colspec colwidth="1.44*"/>
<tbody>
<row><entry>CPU_TIME<indexterm><primary>DETAIL_COST in EXPLAIN output</primary>
<secondary>CPU_TIME</secondary></indexterm></entry><entry>An estimate
of the number of seconds of processor time it might take to execute
the instructions for this operator. A value of 1.0 is 1 second.</entry>
</row>
<row><entry>IO_TIME<indexterm><primary>DETAIL_COST in EXPLAIN output</primary>
<secondary>IO_TIME</secondary></indexterm></entry><entry>An estimate
of the number of seconds of I/O time (seeks plus data transfer) to
perform the I/O for this operator.</entry></row>
<row><entry>MSG_TIME<indexterm><primary>DETAIL_COST in EXPLAIN output</primary>
<secondary>MSG_TIME</secondary></indexterm></entry><entry>An estimate
of the number of seconds it takes for the messaging for this operator.
The estimate includes the time for the number of local and remote
messages and the amount of data sent.</entry></row>
<row><entry>IDLETIME<indexterm><primary>DETAIL_COST in EXPLAIN output</primary>
<secondary>IDLETIME</secondary></indexterm></entry><entry>An estimate
of the number of seconds to wait for an event to happen. The estimate
includes the amount of time to open a table or start an ESP process.</entry>
</row>
<row><entry>PROBES<indexterm><primary>DETAIL_COST in EXPLAIN output</primary>
<secondary>PROBES</secondary></indexterm></entry><entry>The number
of times the operator will be executed. Usually, this value is 1,
but it can be greater when you have, for example, an inner scan of
a nested-loop join. </entry></row>
</tbody>
</tgroup>
</informaltable>
</section>
</section>
<section id="i1008609">
<title>Examples of EXPLAIN Function</title>
<indexterm><primary>EXPLAIN function</primary><secondary>examples
of</secondary></indexterm>
<para>Display the specified columns in the result table of the EXPLAIN
function for the  prepared statement REGION:</para>
<programlisting>>>select seq_num, operator, operator_cost from table (explain (null, 'REG'));

SEQ_NUM     OPERATOR                       OPERATOR_COST
----------- ------------------------------ ---------------
          1 TRAFODION_SCAN                      0.43691027
          2 ROOT                                       0.0

--- 2 row(s) selected.
>>log;</programlisting>
<para>The example displays only part of the result table of the EXPLAIN
function. It first uses the EXPLAIN function to generate the table
and then selects the desired columns. </para>
</section>
</section>
<section id="i1008070" pagebreak="yes">
<title>EXTRACT Function</title>
<indexterm><primary>Datetime functions</primary><secondary>EXTRACT</secondary>
</indexterm><indexterm><primary>EXTRACT function</primary><secondary
>syntax diagram of</secondary></indexterm>
<para>The EXTRACT function extracts a datetime field from a datetime
or interval value expression. It returns an exact numeric value. </para>
<programlisting>EXTRACT (<replaceable>datetime-field</replaceable
> FROM <replaceable>extract-source</replaceable>) 

<replaceable>datetime-field</replaceable> is:
   YEAR | MONTH | DAY | HOUR | MINUTE | SECOND 

<replaceable>extract-source</replaceable> is:
   datetime-expression | interval-expression 
</programlisting>
<para>See <xref linkend="Datetime_Value_Expressions"
role="select:quotedtitle page"/> and <xref linkend="i1010948"
role="select:quotedtitle page"/>.</para>
<section>
<title>Examples of EXTRACT</title>
<indexterm><primary>EXTRACT function</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>Extract the year from a DATE value:</para>
<programlisting>EXTRACT (YEAR FROM DATE '2007-09-28')
</programlisting>
<para>The result is 2007.</para>
</listitem>
<listitem><para>Extract the year from an INTERVAL value:</para>
<programlisting>EXTRACT (YEAR FROM INTERVAL '01-09' YEAR TO MONTH)
</programlisting>
<para>The result is 1.</para>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1008118" pagebreak="yes">
<title>FLOOR Function</title>
<indexterm><primary>FLOOR function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Math functions</primary>
<secondary>FLOOR</secondary></indexterm>
<para>The FLOOR function returns the largest integer, represented
as a FLOAT data type, less than or equal to a numeric value expression. </para>
<para>FLOOR is a Trafodion SQL extension.</para>
<programlisting>FLOOR (<replaceable>numeric-expression</replaceable
>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>numeric-expression</replaceable> </term>
<listitem><para>is an SQL numeric value expression that specifies
the value for the argument of the FLOOR function. See <xref
linkend="i1011132" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of FLOOR</title>
<indexterm><primary>FLOOR function</primary><secondary>examples of</secondary>
</indexterm>
<para>This function returns the integer value 2.00000000000000000E+000,
represented as a FLOAT data type:</para>
<programlisting>FLOOR (2.25)
</programlisting>
</section>
</section>
<section id="i1008146" pagebreak="yes">
<title>HOUR Function</title>
<indexterm><primary>HOUR function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Datetime functions</primary>
<secondary>HOUR</secondary></indexterm>
<para>The HOUR function converts a TIME or TIMESTAMP expression into
an INTEGER value in the range 0 through 23 that represents the corresponding
hour of the day. </para>
<para>HOUR is a Trafodion SQL extension. </para>
<programlisting>HOUR (<replaceable>datetime-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>datetime-expression</replaceable
> </term>
<listitem><para>is an expression that evaluates to a datetime value
of type TIME or TIMESTAMP. See <xref
linkend="Datetime_Value_Expressions" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of HOUR</title>
<indexterm><primary>HOUR function</primary><secondary>examples of</secondary>
</indexterm>
<para>Return an integer that represents the hour of the day from the
SHIP_TIMESTAMP column in the PROJECT table: <programlisting>SELECT start_date, ship_timestamp, HOUR(ship_timestamp) 
FROM persnl.project 
WHERE projcode = 1000;  

Start/Date  Time/Shipped                (EXPR)   
----------  --------------------------  ------   
2007-04-10  2007-04-21 08:15:00.000000       8 </programlisting></para>
</section>
</section>
<section id="i1008179" pagebreak="yes">
<title>INSERT Function</title>
<indexterm><primary>Character string functions</primary><secondary
>INSERT</secondary></indexterm>
<para>The INSERT function returns a character string where a specified
number of characters within the character string has been deleted,
beginning at a specified start position, and where another character
string has been inserted at the start position. Every character, including
multibyte characters, is treated as one character.</para>
<indexterm><primary>INSERT function</primary><secondary>syntax diagram
of</secondary></indexterm>
<para>INSERT is a Trafodion SQL extension. </para>
<programlisting>INSERT (<replaceable>char-expr-1</replaceable>, <replaceable
>start</replaceable>, <replaceable>length</replaceable>, <replaceable
>char-expr-2</replaceable>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>char-expr-1</replaceable>, <replaceable
>char-expr-2</replaceable> </term>
<listitem><para>are SQL character value expressions (of data type
CHAR or VARCHAR) that specify two strings of characters. The character
string <replaceable>char-expr-2</replaceable> is inserted into the
character string <replaceable>char-expr-1</replaceable>. See <xref
linkend="i1010765" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>start</replaceable> </term>
<listitem><para>specifies the starting position <replaceable>start</replaceable
> within <replaceable>char-expr-1</replaceable> at which to start
deleting <replaceable>length</replaceable> number of characters. After
the deletion, the character string <replaceable>char-expr-2</replaceable
> is inserted into the character string <replaceable>char-expr-1</replaceable
>, beginning at the start position specified by the number <replaceable
>start</replaceable>. The number <replaceable>start</replaceable> must
be a value greater than zero of exact numeric data type and with a
scale of zero.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>length</replaceable> </term>
<listitem><para>specifies the number of characters to delete from <replaceable
>char-expr-1</replaceable>. The number <replaceable>length</replaceable
> must be a value greater than or equal to zero of exact numeric data
type and with a scale of zero. <replaceable>length</replaceable> must
be less than or equal to the length of <replaceable>char‑expr-1</replaceable
>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of INSERT</title>
<indexterm><primary>INSERT function</primary><secondary>examples of</secondary>
</indexterm>
<para>Suppose that your JOB table includes an entry for a sales representative.
Use the INSERT function to change SALESREP to SALES REP:</para>
<programlisting>UPDATE persnl.job 
SET jobdesc = INSERT (jobdesc, 6, 3, ' REP') 
WHERE jobdesc = 'SALESREP';
</programlisting>
<para>Now check the row you updated:</para>
<programlisting>SELECT jobdesc FROM persnl.job
WHERE jobdesc = 'SALES REP';

Job Description
------------------
SALES REP

--- 1 row(s) selected.
</programlisting>
</section>
</section>
<section id="i1051657" pagebreak="yes">
<title>ISNULL Function</title>
<indexterm><primary>ISNULL function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Other functions and
expressions</primary><secondary>ISNULL</secondary></indexterm>
<para>The ISNULL function returns the value of the first argument
if it is not null, otherwise it returns the value of the second argument.
Both expressions must be of comparable types.</para>
<para>ISNULL is a Trafodion SQL extension.</para>
<programlisting>ISNULL(<replaceable>ck_expr</replaceable>, <replaceable
>repl_value</replaceable>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>ck_expr</replaceable></term>
<listitem><para>an expression of any valid SQL data type.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>repl_value</replaceable></term>
<listitem><para>an expression of any valid SQL data type, but must
be a comparable type with that of <replaceable>ck_expr</replaceable
>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of ISNULL</title>
<indexterm><primary>ISNULL function</primary><secondary>examples of</secondary>
</indexterm>
<itemizedlist>
<listitem><para>This function returns a 0 instead of a null if <literal
>value</literal> is null.</para>
<programlisting>ISNULL(value,0)
</programlisting>
</listitem>
<listitem><para>This function returns the date constant if <literal
>date_col</literal> is null.</para>
<programlisting>ISNULL(date_col, DATE '2006-01-01')
</programlisting>
</listitem>
<listitem><para>This function returns 'Smith' if the string column <literal
>last_name</literal> is null.</para>
<programlisting>ISNULL(last_name, 'Smith')
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1008228" pagebreak="yes">
<title>JULIANTIMESTAMP Function</title>
<indexterm><primary>Datetime functions</primary><secondary>JULIANTIMESTAMP</secondary>
</indexterm>
<para>The JULIANTIMESTAMP function converts a datetime value into
a 64-bit Julian timestamp value that represents the number of microseconds
that have elapsed between 4713 B.C., January 1, 00:00, and the specified
datetime value. JULIANTIMESTAMP returns a value of data type LARGEINT.</para>
<para>The function is evaluated once when the query starts execution
and is not reevaluated (even if it is a long running query).</para>
<indexterm><primary>JULIANTIMESTAMP function</primary><secondary>syntax
diagram of</secondary></indexterm>
<para>JULIANTIMESTAMP is a Trafodion SQL extension.</para>
<programlisting>JULIANTIMESTAMP (<replaceable>datetime-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>datetime-expression</replaceable
> </term>
<listitem><para>is an expression that evaluates to a value of type
DATE, TIME, or TIMESTAMP. If <replaceable>datetime-expression</replaceable
> does not contain all the fields from YEAR through SECOND, Trafodion
SQL extends the value before converting it to a Julian timestamp.
Datetime fields to the left of the specified datetime value are set
to current date fields. Datetime fields to the right of the specified
datetime value are set to zero. See <xref
linkend="Datetime_Value_Expressions" role="select:quotedtitle page"
/>. </para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Considerations for JULIANTIMESTAMP</title>
<para>The <replaceable>datetime-expression</replaceable> value must
be a date or timestamp value from the beginning of year 0001 to the
end of year 9999.</para>
</section>
<section>
<title>Examples of JULIANTIMESTAMP</title>
<indexterm><primary>JULIANTIMESTAMP function</primary><secondary>examples
of</secondary></indexterm>
<para>The PROJECT table consists of five columns using the data types
NUMERIC, VARCHAR, DATE, TIMESTAMP, and INTERVAL. </para>
<itemizedlist>
<listitem><para>Convert the TIMESTAMP value into a Julian timestamp
representation:</para>
<programlisting>SELECT ship_timestamp, JULIANTIMESTAMP (ship_timestamp)
FROM persnl.project 
WHERE projcode = 1000;

SHIP_TIMESTAMP              (EXPR)
--------------------------  --------------------
2008-04-21 08:15:00.000000    212075525700000000

--- 1 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Convert the DATE value into a Julian timestamp representation:</para>
<programlisting>SELECT start_date, JULIANTIMESTAMP (start_date)
FROM persnl.project 
WHERE projcode = 1000; 

START_DATE  (EXPR)
----------  --------------------
2008-04-10    212074545600000000

--- 1 row(s) selected.
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1008258" pagebreak="yes">
<title>LASTNOTNULL Function</title>
<indexterm><primary>Sequence functions</primary><secondary>LASTNOTNULL</secondary>
</indexterm>
<para>The LASTNOTNULL function is a sequence function that returns
the last nonnull value of a column in an intermediate result table
ordered by a SEQUENCE BY clause in a SELECT statement. See <xref
linkend="i1004369" role="select:quotedtitle page"/>.</para>
<indexterm><primary>LASTNOTNULL function</primary><secondary>syntax
diagram of</secondary></indexterm>
<para>LASTNOTNULL is a Trafodion SQL extension.</para>
<programlisting>LASTNOTNULL (<replaceable>column-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>column-expression </replaceable></term>
<listitem><para>specifies a derived column determined by the evaluation
of the column expression. If only null values have been returned,
LASTNOTNULL returns null.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of LASTNOTNULL</title>
<indexterm><primary>LASTNOTNULL function</primary><secondary>examples
of</secondary></indexterm>
<para>Return the last nonnull value of a column:</para>
<programlisting>SELECT LASTNOTNULL (I1) AS LASTNOTNULL 
FROM mining.seqfcn SEQUENCE BY TS;

LASTNOTNULL
-----------
       6215
       6215
      19058
      19058
      11966

--- 5 row(s) selected.
</programlisting>
</section>
</section>
<section id="i1008307" pagebreak="yes">
<title>LCASE Function</title>
<indexterm><primary>Character string functions</primary><secondary
>LCASE</secondary></indexterm>
<para>The LCASE function downshifts alphanumeric characters. For non-alphanumeric
characters, LCASE returns the same character. LCASE can appear anywhere
in a query where a value can be used, such as in a select list, an
ON clause, a WHERE clause, a HAVING clause, a LIKE predicate, an expression,
or as qualifying a new value in an UPDATE or INSERT statement. The
result returned by the LCASE function is equal to the result returned
by the <xref linkend="i1008495" role="select:quotedtitle page"/>.</para>
<indexterm><primary>LCASE function</primary><secondary>syntax diagram
of</secondary></indexterm>
<para>LCASE returns a string of fixed-length or variable-length character
data, depending on the data type of the input string.</para>
<para>LCASE is a Trafodion SQL extension.</para>
<programlisting>LCASE (<replaceable>character-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>character-expression</replaceable
> </term>
<listitem><para>is an SQL character value expression that specifies
a string of characters to downshift. See <xref linkend="i1010765"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of LCASE</title>
<indexterm><primary>LCASE function</primary><secondary>examples of</secondary>
</indexterm>
<para>Suppose that your CUSTOMER table includes an entry for Hotel
Oregon. Select the column CUSTNAME and return in uppercase and lowercase
letters by using the UCASE and LCASE functions:</para>
<programlisting>SELECT custname,UCASE(custname),LCASE(custname)
FROM sales.customer;

(EXPR)              (EXPR)              (EXPR)
-----------------  -------------------  ------------------
...                ...                  ...
Hotel Oregon       HOTEL OREGON         hotel oregon

--- 17 row(s) selected.
</programlisting>
<para>See <xref linkend="i1011245" role="select:quotedtitle page"
/>.</para>
</section>
</section>
<section id="i1008357" pagebreak="yes">
<title>LEFT Function</title>
<indexterm><primary>LEFT function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Character string functions</primary>
<secondary>LEFT</secondary></indexterm>
<para>The LEFT function returns the leftmost specified number of characters
from a character expression. Every character, including multibyte
characters, is treated as one character.</para>
<para>LEFT is a Trafodion SQL extension.</para>
<programlisting>LEFT (<replaceable>character-expr</replaceable>, <replaceable
>count</replaceable>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>character-expr</replaceable> </term>
<listitem><para>specifies the source string from which to return the
leftmost specified number of characters. The source string is an SQL
character value expression. The operand is the result of evaluating <replaceable
>character-expr</replaceable>. See <xref linkend="i1010765"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>count</replaceable> </term>
<listitem><para>specifies the number of characters to return from <replaceable
>character-expr</replaceable>. The number <replaceable>count</replaceable
> must be a value of exact numeric data type greater than or equal
to 0 with a scale of zero. </para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of LEFT</title>
<indexterm><primary>LEFT function</primary><secondary>examples of</secondary>
</indexterm>
<itemizedlist>
<listitem><para>Return 'Robert':</para>
<programlisting>LEFT ('Robert John Smith', 6)
</programlisting>
</listitem>
<listitem><para>Use the LEFT function to append the company name to
the job descriptions:</para>
<programlisting>UPDATE persnl.job 
SET jobdesc = LEFT (jobdesc, 11) ||' COMNET';

SELECT jobdesc FROM persnl.job;

Job Description
------------------

MANAGER COMNET
PRODUCTION  COMNET
ASSEMBLER COMNET
SALESREP COMNET
SYSTEM ANAL COMNET
ENGINEER COMNET
PROGRAMMER COMNET
ACCOUNTANT COMNET
ADMINISTRAT COMNET
SECRETARY COMNET

--- 10 row(s) selected.
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1008399" pagebreak="yes">
<title>LOCATE Function</title>
<indexterm><primary>LOCATE function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Character string functions</primary>
<secondary>LOCATE</secondary></indexterm>
<para>The LOCATE function searches for a given substring in a character
string. If the substring is found, Trafodion SQL returns the character
position of the substring within the string. Every character, including
multibyte characters, is treated as one character. The result returned
by the LOCATE function is equal to the result returned by the <xref
linkend="i1013460" role="select:quotedtitle page"/>.</para>
<para>LOCATE is a Trafodion SQL extension. </para>
<programlisting>LOCATE (<replaceable>substring-expression</replaceable
>,<replaceable>source-expression</replaceable>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>substring-expression</replaceable
> </term>
<listitem><para>is an SQL character value expression that specifies
the substring to search for in <replaceable>source-expression</replaceable
>. The <replaceable>substring-expression</replaceable> cannot be NULL.
See <xref linkend="i1010765" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>source-expression</replaceable> </term>
<listitem><para>is an SQL character value expression that specifies
the source string. The <replaceable>source-expression</replaceable
> cannot be NULL. See <xref linkend="i1010765"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<para>Trafodion SQL returns the result as a 2-byte signed integer
with a scale of zero. If <replaceable>substring-expression</replaceable
> is not found in <replaceable>source-expression</replaceable>, Trafodion
SQL returns 0. </para>
<section>
<title>Considerations for LOCATE</title>
<section>
<title>Result of LOCATE</title>
<indexterm><primary>LOCATE function</primary><secondary>result of</secondary>
</indexterm>
<para>If the length of <replaceable>source-expression</replaceable
> is zero and the length of <replaceable>substring-expression</replaceable
> is greater than zero, Trafodion SQL returns 0. If the length of <replaceable
>substring-expression</replaceable> is zero, Trafodion SQL returns
1.</para>
<para>If the length of <replaceable>substring-expression</replaceable
> is greater than the length of <replaceable>source-expression</replaceable
>, Trafodion SQL returns 0. If <replaceable>source-expression</replaceable
> is a null value, Trafodion SQL returns a null value.</para>
</section>
<section>
<title>Using UCASE</title>
<para>To ignore case in the search, use the UCASE function (or the
LCASE function) for both the <replaceable>substring-expression</replaceable
> and the <replaceable>source-expression</replaceable>.</para>
</section>
</section>
<section>
<title>Examples of LOCATE</title>
<indexterm><primary>LOCATE function</primary><secondary>examples of</secondary>
</indexterm>
<itemizedlist>
<listitem><para>Return the value 8 for the position of the substring <literal
>‘John’</literal> within the string:</para>
<programlisting>LOCATE ('John','Robert John Smith')
</programlisting>
</listitem>
<listitem><para>Suppose that the EMPLOYEE table has an EMPNAME column
that contains both the first and last names. This SELECT statement
returns all records in table EMPLOYEE that contain the substring 'SMITH',
regardless of whether the column value is in uppercase or lowercase
characters:</para>
<programlisting>SELECT * FROM persnl.employee
  WHERE LOCATE ('SMITH',UCASE(empname)) > 0 ;
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1008458" pagebreak="yes">
<title>LOG Function</title>
<indexterm><primary>LOG function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Math functions</primary>
<secondary>LOG</secondary></indexterm>
<para>The LOG function returns the natural logarithm of a numeric
value expression.</para>
<para>LOG is a Trafodion SQL extension.</para>
<programlisting>LOG (<replaceable>numeric-expression</replaceable
>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>numeric-expression</replaceable> </term>
<listitem><para>is an SQL numeric value expression that specifies
the value for the argument of the LOG function. The value of the argument
must be greater than zero. See <xref linkend="i1011132"
role="select:quotedtitle page"/>. </para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of LOG</title>
<indexterm><primary>LOG function</primary><secondary>examples of</secondary>
</indexterm>
<para>This function returns the value 6.93147180559945344E-001, or
approximately 0.69315:</para>
<programlisting>LOG (2.0)
</programlisting>
</section>
</section>
<section id="i1008476" pagebreak="yes">
<title>LOG10 Function</title>
<indexterm><primary>LOG10 function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Math functions</primary>
<secondary>LOG10</secondary></indexterm>
<para>The LOG10 function returns the base 10 logarithm of a numeric
value expression.</para>
<para>LOG10 is a Trafodion SQL extension.</para>
<programlisting>LOG10 (<replaceable>numeric-expression</replaceable
>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>numeric-expression</replaceable> </term>
<listitem><para>is an SQL numeric value expression that specifies
the value for the argument of the LOG10 function. The value of the
argument must be greater than zero. See <xref linkend="i1011132"
role="select:quotedtitle page"/>. </para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of LOG10</title>
<indexterm><primary>LOG10 function</primary><secondary>examples of</secondary>
</indexterm>
<para>This function returns the value 1.39794000867203776E+000, or
approximately 1.3979:</para>
<programlisting>LOG10 (25)
</programlisting>
</section>
</section>
<section id="i1008495" pagebreak="yes">
<title>LOWER Function</title>
<itemizedlist>
<listitem><para><xref linkend="i1041438" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1041443" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>Character string functions</primary><secondary
>LOWER</secondary></indexterm>
<para>The LOWER function downshifts alphanumeric characters. For non-alphanumeric
characters, LOWER returns the same character. LOWER can appear anywhere
in a query where a value can be used, such as in a select list, an
ON clause, a WHERE clause, a HAVING clause, a LIKE predicate, an expression,
or as qualifying a new value in an UPDATE or INSERT statement. The
result returned by the LOWER function is equal to the result returned
by the <xref linkend="i1008307" role="select:quotedtitle page"/>.</para>
<indexterm><primary>LOWER function</primary><secondary>syntax diagram
of</secondary></indexterm>
<para>LOWER returns a string of fixed-length or variable-length character
data, depending on the data type of the input string. </para>
<programlisting>LOWER (<replaceable>character-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>character-expression</replaceable
> </term>
<listitem><para>is an SQL character value expression that specifies
a string of characters to downshift. See <xref linkend="i1010765"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section id="i1041438">
<title>Considerations for LOWER</title>
<!--WRITER'S NOTE: Check if this is true concerning UTF8.-->
<para>For a <phrase>UTF8</phrase> character expression, the LOWER
function downshifts all the uppercase or title case characters in
a given string to lowercase and returns a character string with the
same data type and character set as the argument. </para>
<para>A lower case character is a character that has the “alphabetic”
property in Unicode Standard 2 whose Unicode name includes lower.
An uppercase character is a character that has the “alphabetic” property
in the Unicode Standard 2 and whose Unicode name includes <replaceable
>upper</replaceable>. A title case character is a character that has
the Unicode “alphabetic” property and whose Unicode name includes <replaceable
>title</replaceable>.</para>
</section>
<section id="i1041443">
<title>Example of LOWER</title>
<indexterm><primary>LOWER function</primary><secondary>examples of</secondary>
</indexterm>
<para>Suppose that your CUSTOMER table includes an entry for Hotel
Oregon. Select the column CUSTNAME and return the result in uppercase
and lowercase letters by using the UPPER and LOWER functions:</para>
<programlisting>SELECT custname,UPPER(custname),LOWER(custname)
FROM sales.customer;

(EXPR)              (EXPR)              (EXPR)
-----------------  -------------------  ------------------
...                ...                  ...
Hotel Oregon       HOTEL OREGON         hotel oregon

--- 17 row(s) selected.
</programlisting>
<para>See <xref linkend="i1011272" role="select:quotedtitle page"
/>.</para>
</section>
</section>
<section id="i1050993" pagebreak="yes">
<title>LPAD Function</title>
<indexterm><primary>LPAD function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Character string functions</primary>
<secondary>LPAD</secondary></indexterm>
<para>The LPAD function pads the left side of a string with the specified
string. Every character in the string, including multibyte characters,
is treated as one character.</para>
<para>LPAD is a Trafodion SQL extension.</para>
<programlisting>LPAD (<replaceable>str</replaceable>, <replaceable
>len</replaceable> [,<replaceable>padstr</replaceable>]) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>str</replaceable> </term>
<listitem><para>can be an expression. See <xref linkend="i1010765"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>len</replaceable> </term>
<listitem><para>identifies the desired number of characters to be
returned and can be an expression but must be an integral value. If <replaceable
>len</replaceable> is equal to the length of the string, no change
is made. If <replaceable>len</replaceable> is smaller than the string
size, the string is truncated.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>pad-character </replaceable></term>
<listitem><para>can be an expression and may be a string.</para>
</listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of LPAD</title>
<indexterm><primary>LPAD function</primary><secondary>examples of</secondary>
</indexterm>
<itemizedlist>
<listitem><para>This function returns <literal>'   kite'</literal
>:</para>
<programlisting>lpad('kite', 7)
</programlisting>
</listitem>
<listitem><para>This function returns 'ki':</para>
<programlisting>lpad('kite', 2)
</programlisting>
</listitem>
<listitem><para>This function returns '0000kite':</para>
<programlisting>lpad('kite', 8, '0')
</programlisting>
</listitem>
<listitem><para>This function returns 'go fly a kite':</para>
<programlisting>lpad('go fly a kite', 13, 'z')
</programlisting>
</listitem>
<listitem><para>This function returns 'John,John, go fly a kite'':</para>
<programlisting>lpad('go fly a kite', 23, 'John,')
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1008542" pagebreak="yes">
<title>LTRIM Function</title>
<indexterm><primary>LTRIM function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Character string functions</primary>
<secondary>LTRIM</secondary></indexterm>
<para>The LTRIM function removes leading spaces from a character string.
If you must remove any leading character other than space, use the
TRIM function and specify the value of the character. See the<xref
linkend="i1011168" role="select:quotedtitle page"/>.</para>
<para>LTRIM is a Trafodion SQL extension.</para>
<programlisting>LTRIM (<replaceable>character-expression</replaceable
>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>character-expression</replaceable
></term>
<listitem><para>is an SQL character value expression and specifies
the string from which to trim leading spaces. See <xref
linkend="i1010765" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Considerations for LTRIM</title>
<section>
<title>Result of LTRIM</title>
<para>The result is always of type VARCHAR, with maximum length equal
to the fixed length or maximum variable length of <replaceable>character-expression</replaceable
>.</para>
</section>
</section>
<section>
<title>Example of LTRIM</title>
<indexterm><primary>LTRIM function</primary><secondary>examples of</secondary>
</indexterm>
<para>Return 'Robert_____ ':</para>
<programlisting>LTRIM ('    Robert    ')
</programlisting>
<para>See <xref linkend="i1011168" role="select:quotedtitle page"
/> and <xref linkend="i1009806" role="select:quotedtitle page"/>.</para>
</section>
</section>
<section id="i1053733" pagebreak="yes">
<title>MAX/MAXIMUM Function</title>
<indexterm><primary>MAX function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>MAXIMUM function</primary>
<secondary>syntax diagram of</secondary></indexterm><indexterm><primary
>Aggregate functions</primary><secondary>MAX/MAXIMUM</secondary>
</indexterm>
<para>MAX is an aggregate function that returns the maximum value
within a set of values. MAXIMUM is the equivalent of MAX wherever
the function name MAX appears within a statement. The data type of
the result is the same as the data type of the argument. </para>
<programlisting>MAX | MAXIMUM ([ALL | DISTINCT] <replaceable>expression</replaceable
>) 
</programlisting>
<indexterm><primary>DISTINCT clause</primary><secondary>MAX function
use of</secondary></indexterm><indexterm><primary>DISTINCT clause</primary>
<secondary>MAXIMUM function use of</secondary></indexterm><indexterm>
<primary>MAX function</primary><secondary>DISTINCT clause within</secondary>
</indexterm><indexterm><primary>MAXIMUM function</primary><secondary
>DISTINCT clause within</secondary></indexterm>
<variablelist>
<varlistentry><term>ALL | DISTINCT</term>
<listitem><para>specifies whether duplicate values are included in
the computation of the maximum of the <replaceable>expression</replaceable
>. The default option is ALL, which causes duplicate values to be
included. If you specify DISTINCT, duplicate values are eliminated
before the MAX/MAXIMUM function is applied.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>expression</replaceable> </term>
<listitem><para>specifies an expression that determines the values
to include in the computation of the maximum. The <replaceable>expression</replaceable
> cannot contain an aggregate function or a subquery. The DISTINCT
clause specifies that the MAX/MAXIMUM function operates on distinct
values from the one-column table derived from the evaluation of <replaceable
>expression</replaceable>. All nulls are eliminated before the function
is applied to the set of values. If the result table is empty, MAX/MAXIMUM
returns NULL.</para><para>See <xref linkend="i1013683"
role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
</variablelist>
<section>
<title>Considerations for MAX/MAXIMUM</title>
<section>
<title>Operands of the Expression</title>
<indexterm><primary>MAX function</primary><secondary>considerations
for</secondary></indexterm><indexterm><primary>MAXIMUM function</primary>
<secondary>considerations for</secondary></indexterm>
<para>The expression includes columns from the rows of the SELECT
result table but cannot include an aggregate function. These expressions
are valid:</para>
<programlisting>MAX (SALARY)
MAX (SALARY * 1.1)
MAX (PARTCOST * QTY_ORDERED)
</programlisting>
</section>
</section>
<section>
<title>Example of MAX/MAXIMUM</title>
<indexterm><primary>MAXIMUM function</primary><secondary>examples
of</secondary></indexterm><indexterm><primary>MAX function</primary>
<secondary>examples of</secondary></indexterm>
<para>Display the maximum value in the SALARY column:</para>
<programlisting>SELECT MAX (salary) 
FROM persnl.employee;

(EXPR)
-----------
  175500.00

--- 1 row(s) selected.
</programlisting>
</section>
</section>
<section id="i1008659" pagebreak="yes">
<title>MIN Function</title>
<indexterm><primary>Aggregate functions</primary><secondary>MIN</secondary>
</indexterm><indexterm><primary>MIN function</primary><secondary>syntax
diagram of</secondary></indexterm>
<para>MIN is an aggregate function that returns the minimum value
within a set of values. The data type of the result is the same as
the data type of the argument.</para>
<programlisting>MIN ([ALL | DISTINCT] <replaceable>expression</replaceable
>) 
</programlisting>
<indexterm><primary>DISTINCT clause</primary><secondary>MIN function
use of</secondary></indexterm><indexterm><primary>MIN function</primary>
<secondary>DISTINCT clause within</secondary></indexterm>
<variablelist>
<varlistentry><term>ALL | DISTINCT</term>
<listitem><para>specifies whether duplicate values are included in
the computation of the minimum of the <replaceable>expression</replaceable
>. The default option is ALL, which causes duplicate values to be
included. If you specify DISTINCT, duplicate values are eliminated
before the MIN function is applied.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>expression</replaceable> </term>
<listitem><para>specifies an expression that determines the values
to include in the computation of the minimum. The <replaceable>expression</replaceable
> cannot contain an aggregate function or a subquery. The DISTINCT
clause specifies that the MIN function operates on distinct values
from the one-column table derived from the evaluation of <replaceable
>expression</replaceable>. All nulls are eliminated before the function
is applied to the set of values. If the result table is empty, MIN
returns NULL.</para><para>See <xref linkend="i1013683"
role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
</variablelist>
<section>
<title>Considerations for MIN</title>
<section>
<title>Operands of the Expression</title>
<para>The expression includes columns from the rows of the SELECT
result table—but cannot include an aggregate function. These expressions
are valid:</para>
<programlisting>MIN (SALARY)
MIN (SALARY * 1.1)
MIN (PARTCOST * QTY_ORDERED)
</programlisting>
</section>
</section>
<section>
<title>Example of MIN</title>
<indexterm><primary>MIN function</primary><secondary>examples of</secondary>
</indexterm>
<para>Display the minimum value in the SALARY column:</para>
<programlisting>SELECT MIN (salary) 
FROM persnl.employee; 

(EXPR)
-----------
   17000.00 

--- 1 row(s) selected.
</programlisting>
</section>
</section>
<section id="i1008685" pagebreak="yes">
<title>MINUTE Function</title>
<indexterm><primary>MINUTE function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Datetime functions</primary>
<secondary>MINUTE</secondary></indexterm>
<para>The MINUTE function converts a TIME or TIMESTAMP expression
into an INTEGER value, in the range 0 through 59, that represents
the corresponding minute of the hour. </para>
<para>MINUTE is a Trafodion SQL extension. </para>
<programlisting>MINUTE (<replaceable>datetime-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>datetime-expression</replaceable
> </term>
<listitem><para>is an expression that evaluates to a datetime value
of type TIME or TIMESTAMP. See <xref
linkend="Datetime_Value_Expressions" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of MINUTE</title>
<indexterm><primary>MINUTE function</primary><secondary>examples of</secondary>
</indexterm>
<para>Return an integer that represents the minute of the hour from
the SHIP_TIMESTAMP column in the PROJECT table: </para>
<programlisting>SELECT start_date, ship_timestamp, MINUTE(ship_timestamp)
FROM persnl.project
WHERE projcode = 1000;

Start/Date  Time/Shipped                (EXPR)  
----------  --------------------------  ------  
2008-04-10  2008-04-21 08:15:00.000000      15  

</programlisting>
</section>
</section>
<section id="i1008703" pagebreak="yes">
<title>MOD Function</title>
<indexterm><primary>MOD function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Math functions</primary>
<secondary>MOD</secondary></indexterm>
<para>The MOD function returns the remainder (modulus) of an integer
value expression divided by an integer value expression. </para>
<para>MOD is a Trafodion SQL extension.</para>
<programlisting>MOD (<replaceable>integer-expression-1</replaceable
>,<replaceable>integer-expression-2</replaceable>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>integer-expression-1</replaceable
> </term>
<listitem><para>is an SQL numeric value expression of data type SMALLINT,
INTEGER, or LARGEINT that specifies the value for the dividend argument
of the MOD function. </para></listitem>
</varlistentry>
<varlistentry><term><replaceable>integer-expression-2</replaceable
> </term>
<listitem><para>is an SQL numeric value expression of data type SMALLINT,
INTEGER, or LARGEINT that specifies the value for the divisor argument
of the MOD function. The divisor argument cannot be zero.</para>
</listitem>
</varlistentry>
</variablelist>
<para>See <xref linkend="i1011132" role="select:quotedtitle page"
/>. </para>
<section>
<title>Example of MOD</title>
<indexterm><primary>MOD function</primary><secondary>examples of</secondary>
</indexterm>
<para>This function returns the value 2 as the remainder or modulus:</para>
<programlisting>MOD (11,3)
</programlisting>
</section>
</section>
<section id="i1008725" pagebreak="yes">
<title>MONTH Function</title>
<indexterm><primary>MONTH function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Datetime functions</primary>
<secondary>MONTH</secondary></indexterm>
<para>The MONTH function converts a DATE or TIMESTAMP expression into
an INTEGER value in the range 1 through 12 that represents the corresponding
month of the year. </para>
<para>MONTH is a Trafodion SQL extension. </para>
<programlisting>MONTH (<replaceable>datetime-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>datetime-expression</replaceable
> </term>
<listitem><para>is an expression that evaluates to a datetime value
of type DATE or TIMESTAMP. See <xref
linkend="Datetime_Value_Expressions" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of MONTH</title>
<indexterm><primary>MONTH function</primary><secondary>examples of</secondary>
</indexterm>
<para>Return an integer that represents the month of the year from
the START_DATE column in the PROJECT table: </para>
<programlisting>SELECT start_date, ship_timestamp, MONTH(start_date)
FROM persnl.project
WHERE projcode = 1000;

Start/Date  Time/Shipped                (EXPR)  
----------  --------------------------  ------  
2008-04-10  2008-04-21 08:15:00.000000       4  

</programlisting>
</section>
</section>
<section id="i1008743" pagebreak="yes">
<title>MONTHNAME Function</title>
<indexterm><primary>MONTHNAME function</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>Datetime functions</primary>
<secondary>MONTHNAME</secondary></indexterm>
<para>The MONTHNAME function converts a DATE or TIMESTAMP expression
into a character literal that is the name of the month of the year
(January, February, and so on). </para>
<para>MONTHNAME is a Trafodion SQL extension. </para>
<programlisting>MONTHNAME (<replaceable>datetime-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>datetime-expression </replaceable
></term>
<listitem><para>is an expression that evaluates to a datetime value
of type DATE or TIMESTAMP. See <xref
linkend="Datetime_Value_Expressions" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Considerations for MONTHNAME</title>
<para>The MONTHNAME function returns the name of the month in ISO8859-1.</para>
</section>
<section>
<title>Example of MONTHNAME</title>
<indexterm><primary>MONTHNAME function</primary><secondary>examples
of</secondary></indexterm>
<para>Return a character literal that is the month of the year from
the START_DATE column in the PROJECT table: </para>
<programlisting>SELECT start_date, ship_timestamp, MONTHNAME(start_date)
FROM persnl.project
WHERE projcode = 1000;

Start/Date  Time/Shipped                (EXPR)     
----------  --------------------------  ---------  
2008-04-10  2008-04-21 08:15:00.000000  April   

</programlisting>
</section>
</section>
<section id="i1008761" pagebreak="yes">
<title>MOVINGAVG Function</title>
<indexterm><primary>Sequence functions</primary><secondary>MOVINGAVG</secondary>
</indexterm>
<para>The MOVINGAVG function is a sequence function that returns the
average of nonnull values of a column in the current window of an
intermediate result table ordered by a SEQUENCE BY clause in a SELECT
statement. See <xref linkend="i1004369" role="select:quotedtitle page"
/>.</para>
<indexterm><primary>MOVINGAVG function</primary><secondary>syntax
diagram of</secondary></indexterm>
<para>MOVINGAVG is a Trafodion SQL extension.</para>
<programlisting>MOVINGAVG (<replaceable>column-expression</replaceable
>,<replaceable>integer-expression</replaceable> [,<replaceable>max-rows</replaceable
>])
</programlisting>
<variablelist>
<varlistentry><term><replaceable>column-expression</replaceable> </term>
<listitem><para>specifies a derived column determined by the evaluation
of the column expression.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>integer-expression</replaceable> </term>
<listitem><para>is an SQL numeric value expression of signed data
type SMALLINT or INTEGER that specifies the current window. The current
window is defined as the current row and the previous (<replaceable
>integer-expression</replaceable> - 1) rows.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>max-rows</replaceable> </term>
<listitem><para>is an SQL numeric value expression of signed data
type SMALLINT or INTEGER that specifies the maximum number of rows
in the current window. </para><para>Note these considerations for
the window size:</para>
<itemizedlist>
<listitem><para>The actual value for the window size is the minimum
of integer-<replaceable>expression</replaceable> and <replaceable
>max-rows</replaceable>.</para></listitem>
<listitem><para>If these conditions are met, MOVINGAVG returns the
same result as RUNNINGAVG:</para>
<itemizedlist>
<listitem><para>The <replaceable>integer-expression</replaceable> is
out of range, and <replaceable>max-rows</replaceable> is not specified.
This condition includes the case in which both <replaceable>integer-expression</replaceable
> and <replaceable>max-rows</replaceable> are larger than the result
table.</para></listitem>
<listitem><para>The minimum of <replaceable>integer-expression</replaceable
> and <replaceable>max-rows</replaceable> is out of range. In this
case, <replaceable>integer-expression</replaceable> could be within
range, but <replaceable>max-rows</replaceable> might be the minimum
value of the two and be out of range (for example, a negative number).</para>
</listitem>
</itemizedlist>
</listitem>
<listitem><para>The number of rows is out of range if it is larger
than the size of the result table, negative, or NULL.</para></listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of MOVINGAVG</title>
<indexterm><primary>MOVINGAVG function</primary><secondary>examples
of</secondary></indexterm>
<para>Return the average of nonnull values of a column in the current
window of three rows:</para>
<programlisting>create table db.mining.seqfcn (I1 integer, ts timestamp);
SELECT MOVINGAVG (I1,3) AS MOVINGAVG3
FROM mining.seqfcn
SEQUENCE BY TS;

I1              TS
6215            TIMESTAMP ‘1950-03-05 08:32:09’
28174           TIMESTAMP ‘1951-02-15 14:35:49’
null            TIMESTAMP ‘1955-05-18 08:40:10’
4597            TIMESTAMP ‘1960-09-19 14:40:39’
11966           TIMESTAMP ‘1964-05-01 16:41:02’

MOVINGAVG3
--------------------- 
                 6215 
                17194 
                17194 
                16385 
                 8281 

--- 5 row(s) selected.
</programlisting>
</section>
</section>
<section id="i1008815" pagebreak="yes">
<title>MOVINGCOUNT Function</title>
<indexterm><primary>Sequence functions</primary><secondary>MOVINGCOUNT</secondary>
</indexterm>
<para>The MOVINGCOUNT function is a sequence function that returns
the number of nonnull values of a column in the current window of
an intermediate result table ordered by a SEQUENCE BY clause in a
SELECT statement. See <xref linkend="i1004369"
role="select:quotedtitle page"/>.</para>
<indexterm><primary>MOVINGCOUNT function</primary><secondary>syntax
diagram of</secondary></indexterm>
<para>MOVINGCOUNT is a Trafodion SQL extension.</para>
<programlisting>MOVINGCOUNT (<replaceable>column-expression</replaceable
>,<replaceable>integer-expression</replaceable> [,<replaceable>max-rows</replaceable
>])
</programlisting>
<variablelist>
<varlistentry><term><replaceable>column-expression</replaceable> </term>
<listitem><para>specifies a derived column determined by the evaluation
of the column expression.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>integer-expression</replaceable> </term>
<listitem><para>is an SQL numeric value expression of signed data
type SMALLINT or INTEGER that specifies the current window. The current
window is defined as the current row and the previous (<replaceable
>integer-expression</replaceable> - 1) rows. </para></listitem>
</varlistentry>
<varlistentry><term><replaceable>max-rows</replaceable> </term>
<listitem><para>is an SQL numeric value expression of signed data
type SMALLINT or INTEGER that specifies the maximum number of rows
in the current window. </para><para>Note these considerations for
the window size:</para>
<itemizedlist>
<listitem><para>The actual value for the window size is the minimum
of <replaceable>integer-expression</replaceable> and <replaceable
>max-rows</replaceable>.</para></listitem>
<listitem><para>If these conditions are met, MOVINGCOUNT returns the
same result as RUNNINGCOUNT:</para>
<itemizedlist>
<listitem><para>The <replaceable>integer-expression</replaceable> is
out of range, and <replaceable>max-rows</replaceable> is not specified.
This condition includes the case in which both <replaceable>integer-expression</replaceable
> and <replaceable>max-rows</replaceable> are larger than the result
table.</para></listitem>
<listitem><para>The minimum of <replaceable>integer-expression</replaceable
> and <replaceable>max-rows</replaceable> is out of range. In this
case, <replaceable>integer-expression</replaceable> could be within
range, but <replaceable>max-rows </replaceable>might be the minimum
value of the two and be out of range (for example, a negative number).</para>
</listitem>
</itemizedlist>
</listitem>
<listitem><para>The number of rows is out of range if it is larger
than the size of the result table, negative, or NULL.</para></listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
<section>
<title>Considerations for MOVINGCOUNT</title>
<para>The MOVINGCOUNT sequence function is defined differently from
the COUNT aggregate function. If you specify DISTINCT for the COUNT
aggregate function, duplicate values are eliminated before COUNT is
applied. You cannot specify DISTINCT for the MOVINGCOUNT sequence
function; duplicate values are counted.</para>
</section>
<section>
<title>Example of MOVINGCOUNT</title>
<indexterm><primary>MOVINGCOUNT function</primary><secondary>examples
of</secondary></indexterm>
<para>Return the number of nonnull values of a column in the current
window of three rows:</para>
<programlisting>SELECT MOVINGCOUNT (I1,3) AS MOVINGCOUNT3
FROM mining.seqfcn
SEQUENCE BY TS;

MOVINGCOUNT3
------------
           1
           2
           2
           2
           2

--- 5 row(s) selected.
</programlisting>
</section>
</section>
<section id="i1008871" pagebreak="yes">
<title>MOVINGMAX Function</title>
<indexterm><primary>Sequence functions</primary><secondary>MOVINGMAX</secondary>
</indexterm>
<para>The MOVINGMAX function is a sequence function that returns the
maximum of nonnull values of a column in the current window of an
intermediate result table ordered by a SEQUENCE BY clause in a SELECT
statement. See <xref linkend="i1004369" role="select:quotedtitle page"
/>.</para>
<indexterm><primary>MOVINGMAX function</primary><secondary>syntax
diagram of</secondary></indexterm>
<para>MOVINGMAX is a Trafodion SQL extension.</para>
<programlisting>MOVINGMAX (<replaceable>column-expression</replaceable
>,<replaceable>integer-expression</replaceable> [,<replaceable>max-rows</replaceable
>])
</programlisting>
<variablelist>
<varlistentry><term><replaceable>column-expression</replaceable> </term>
<listitem><para>specifies a derived column determined by the evaluation
of the column expression.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>integer-expression</replaceable> </term>
<listitem><para>is an SQL numeric value expression of signed data
type SMALLINT or INTEGER that specifies the current window. The current
window is defined as the current row and the previous (<replaceable
>integer-expression</replaceable> - 1) rows. </para></listitem>
</varlistentry>
<varlistentry><term><replaceable>max-rows</replaceable> </term>
<listitem><para>is an SQL numeric value expression of signed data
type SMALLINT or INTEGER that specifies the maximum number of rows
in the current window. </para><para>Note these considerations for
the window size:</para>
<itemizedlist>
<listitem><para>The actual value for the window size is the minimum
of <replaceable>integer-expression</replaceable> and <replaceable
>max-rows</replaceable>.</para></listitem>
<listitem><para>If these conditions are met, MOVINGMAX returns the
same result as RUNNINGMAX:</para>
<itemizedlist>
<listitem><para>The <replaceable>integer-expression</replaceable> is
out of range, and <replaceable>max-rows</replaceable> is not specified.
This condition includes the case in which both <replaceable>integer-expression</replaceable
> and <replaceable>max-rows</replaceable> are larger than the result
table.</para></listitem>
<listitem><para>The minimum of <replaceable>integer-expression</replaceable
> and <replaceable>max-rows</replaceable> is out of range. In this
case, <replaceable>integer-expression</replaceable> could be within
range, but <replaceable>max-rows</replaceable> might be the minimum
value of the two and be out of range (for example, a negative number).</para>
</listitem>
</itemizedlist>
</listitem>
<listitem><para>The number of rows is out of range if it is larger
than the size of the result table, negative, or NULL.</para></listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of MOVINGMAX</title>
<indexterm><primary>MOVINGMAX function</primary><secondary>examples
of</secondary></indexterm>
<para>Return the maximum of nonnull values of a column in the current
window of three rows:</para>
<programlisting>SELECT MOVINGMAX (I1,3) AS MOVINGMAX3
FROM mining.seqfcn
SEQUENCE BY TS;

MOVINGMAX3
------------
       6215 
      28174 
      28174 
      28174 
      11966 

--- 5 row(s) selected.
</programlisting>
</section>
</section>
<section id="i1008924" pagebreak="yes">
<title>MOVINGMIN Function</title>
<indexterm><primary>Sequence functions</primary><secondary>MOVINGMIN</secondary>
</indexterm>
<para>The MOVINGMIN function is a sequence function that returns the
minimum of nonnull values of a column in the current window of an
intermediate result table ordered by a SEQUENCE BY clause in a SELECT
statement. See <xref linkend="i1004369" role="select:quotedtitle page"
/>.</para>
<indexterm><primary>MOVINGMIN function</primary><secondary>syntax
diagram of</secondary></indexterm>
<para>MOVINGMIN is a Trafodion SQL extension.</para>
<programlisting>MOVINGMIN (<replaceable>column-expression</replaceable
>,<replaceable>integer-expression</replaceable> [,<replaceable>max-rows</replaceable
>])
</programlisting>
<variablelist>
<varlistentry><term><replaceable>column-expression</replaceable> </term>
<listitem><para>specifies a derived column determined by the evaluation
of the column expression.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>integer-expression</replaceable> </term>
<listitem><para>is an SQL numeric value expression of signed data
type SMALLINT or INTEGER that specifies the current window. The current
window is defined as the current row and the previous (<replaceable
>integer-expression</replaceable> - 1) rows. </para></listitem>
</varlistentry>
<varlistentry><term><replaceable>max-rows</replaceable> </term>
<listitem><para>is an SQL numeric value expression of signed data
type SMALLINT or INTEGER that specifies the maximum number of rows
in the current window. </para><para>Note these considerations for
the window size:</para>
<itemizedlist>
<listitem><para>The actual value for the window size is the minimum
of <replaceable>integer-expression</replaceable> and <replaceable
>max-rows</replaceable>.</para></listitem>
<listitem><para>If these conditions are met, MOVINGMIN returns the
same result as RUNNINGMIN:</para>
<itemizedlist>
<listitem><para>The <replaceable>integer-expression</replaceable> is
out of range, and <replaceable>max-rows</replaceable> is not specified.
This condition includes the case in which both <replaceable>integer-expression</replaceable
> and <replaceable>max-rows</replaceable> are larger than the result
table.</para></listitem>
<listitem><para>The minimum of i<replaceable>nteger-expression</replaceable
> and <replaceable>max-rows</replaceable> is out of range. In this
case, <replaceable>integer-expression</replaceable> could be within
range, but <replaceable>max-rows</replaceable> might be the minimum
value of the two and be out of range (for example, a negative number).</para>
</listitem>
</itemizedlist>
</listitem>
<listitem><para>The number of rows is out of range if it is larger
than the size of the result table, negative, or NULL.</para></listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of MOVINGMIN</title>
<indexterm><primary>MOVINGMIN function</primary><secondary>examples
of</secondary></indexterm>
<para>Return the minimum of nonnull values of a column in the current
window of three rows:</para>
<programlisting>SELECT MOVINGMIN (I1,3) AS MOVINGMIN3
FROM mining.seqfcn
SEQUENCE BY TS;

MOVINGMIN3
------------
        6215
        6215
        6215
        4597
        4597 

--- 5 row(s) selected.
</programlisting>
</section>
</section>
<section id="i1008977" pagebreak="yes">
<title>MOVINGSTDDEV Function</title>
<indexterm><primary>Sequence functions</primary><secondary>MOVINGSTDDEV</secondary>
</indexterm>
<para>The MOVINGSTDDEV function is a sequence function that returns
the standard deviation of nonnull values of a column in the current
window of an intermediate result table ordered by a SEQUENCE BY clause
in a SELECT statement. See <xref linkend="i1004369"
role="select:quotedtitle page"/>.</para>
<indexterm><primary>MOVINGSTDDEV function</primary><secondary>syntax
diagram of</secondary></indexterm>
<para>MOVINGSTDDEV is a Trafodion SQL extension.</para>
<programlisting>MOVINGSTDDEV (<replaceable>column-expression</replaceable
>,<replaceable>integer-expression</replaceable> 
              [,<replaceable>max-rows</replaceable>])
</programlisting>
<variablelist>
<varlistentry><term><replaceable>column-expression</replaceable> </term>
<listitem><para>specifies a derived column determined by the evaluation
of the column expression.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>integer-expression</replaceable> </term>
<listitem><para>is an SQL numeric value expression of signed data
type SMALLINT or INTEGER that specifies the current window. The current
window is defined as the current row and the previous (<replaceable
>integer-expression</replaceable> - 1) rows. </para></listitem>
</varlistentry>
<varlistentry><term><replaceable>max-rows</replaceable> </term>
<listitem><para>is an SQL numeric value expression of signed data
type SMALLINT or INTEGER that specifies the maximum number of rows
in the current window. </para><para>Note these considerations for
the window size:</para>
<itemizedlist>
<listitem><para>The actual value for the window size is the minimum
of <replaceable>integer-expression</replaceable> and <replaceable
>max-rows</replaceable>.</para></listitem>
<listitem><para>If these conditions are met, MOVINGSTDDEV returns
the same result as RUNNINGSTDDEV:</para>
<itemizedlist>
<listitem><para>The <replaceable>integer-expression</replaceable> is
out of range, and <replaceable>max-rows</replaceable> is not specified.
This condition includes the case in which both <replaceable>integer-expression</replaceable
> and <replaceable>max-rows</replaceable> are larger than the result
table.</para></listitem>
<listitem><para>The minimum of <replaceable>integer-expression</replaceable
> and <replaceable>max-rows</replaceable> is out of range. In this
case, <replaceable>integer-expression</replaceable> could be within
range, but <replaceable>max-rows</replaceable> might be the minimum
value of the two and be out of range (for example, a negative number).</para>
</listitem>
</itemizedlist>
</listitem>
<listitem><para>The number of rows is out of range if it is larger
than the size of the result table, negative, or NULL.</para></listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of MOVINGSTDDEV</title>
<indexterm><primary>MOVINGSTDDEV function</primary><secondary>examples
of</secondary></indexterm>
<para>Return the standard deviation of nonnull values of a column
in the current window of three rows:</para>
<programlisting>SELECT MOVINGSTDDEV (I1,3) AS MOVINGSTDDEV3
FROM mining.seqfcn
SEQUENCE BY TS;

MOVINGSTDDEV3
-------------------------
 0.00000000000000000E+000
 1.55273578080753976E+004
 1.48020166531456112E+004
 1.51150124820766640E+004
 6.03627542446499008E+003

--- 5 row(s) selected.
</programlisting>
<para>You can use the CAST function for display purposes. For example:</para>
<programlisting>SELECT CAST(MOVINGSTDDEV (I1,3) AS DEC (18,3))
FROM mining.seqfcn
SEQUENCE BY TS;

(EXPR)
--------------------
                .000
           15527.357
           14802.016
           15115.012
            6036.275

--- 5 row(s) selected.
</programlisting>
</section>
</section>
<section id="i1009032" pagebreak="yes">
<title>MOVINGSUM Function</title>
<indexterm><primary>Sequence functions</primary><secondary>MOVINGSUM</secondary>
</indexterm>
<para>The MOVINGSUM function is a sequence function that returns the
sum of nonnull values of a column in the current window of an intermediate
result table ordered by a SEQUENCE BY clause in a SELECT statement.
See <xref linkend="i1004369" role="select:quotedtitle page"/>.</para>
<indexterm><primary>MOVINGSUM function</primary><secondary>syntax
diagram of</secondary></indexterm>
<para>MOVINGSUM is a Trafodion SQL extension.</para>
<programlisting>MOVINGSUM (<replaceable>column-expression</replaceable
>,<replaceable>integer-expression</replaceable> [,<replaceable>max-rows</replaceable
>])
</programlisting>
<variablelist>
<varlistentry><term><replaceable>column-expression</replaceable> </term>
<listitem><para>specifies a derived column determined by the evaluation
of the column expression.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>integer-expression</replaceable> </term>
<listitem><para>is an SQL numeric value expression of signed data
type SMALLINT or INTEGER that specifies the current window. The current
window is defined as the current row and the previous (<replaceable
>integer-expression</replaceable> - 1) rows. </para></listitem>
</varlistentry>
<varlistentry><term><replaceable>max-rows</replaceable> </term>
<listitem><para>is an SQL numeric value expression of signed data
type SMALLINT or INTEGER that specifies the maximum number of rows
in the current window. </para><para>Note these considerations for
the window size:</para>
<itemizedlist>
<listitem><para>The actual value for the window size is the minimum
of <replaceable>integer-expression</replaceable> and <replaceable
>max-rows</replaceable>.</para></listitem>
<listitem><para>If these conditions are met, MOVINGSUM returns the
same result as RUNNINGSUM:</para>
<itemizedlist>
<listitem><para>The <replaceable>integer-expression</replaceable> is
out of range, and <replaceable>max-rows</replaceable> is not specified.
This condition includes the case in which both i<replaceable>nteger-expression</replaceable
> and <replaceable>max-rows</replaceable> are larger than the result
table.</para></listitem>
<listitem><para>The minimum of <replaceable>integer-expression</replaceable
> and <replaceable>max-rows</replaceable> is out of range. In this
case, <replaceable>integer-expression</replaceable> could be within
range, but <replaceable>max-rows</replaceable> might be the minimum
value of the two and be out of range (for example, a negative number).</para>
</listitem>
</itemizedlist>
</listitem>
<listitem><para>The number of rows is out of range if it is larger
than the size of the result table, negative, or NULL.</para></listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of MOVINGSUM</title>
<indexterm><primary>MOVINGSUM function</primary><secondary>examples
of</secondary></indexterm>
<para>Return the sum of nonnull values of a column in the current
window of three rows:</para>
<programlisting>SELECT MOVINGSUM (I1,3) AS MOVINGSUM3
FROM mining.seqfcn
SEQUENCE BY TS;

MOVINGSUM3
------------
        6215
       34389
       34389
       32771
       16563

--- 5 row(s) selected.
</programlisting>
</section>
</section>
<section id="i1009085" pagebreak="yes">
<title>MOVINGVARIANCE Function</title>
<indexterm><primary>Sequence functions</primary><secondary>MOVINGVARIANCE</secondary>
</indexterm>
<para>The MOVINGVARIANCE function is a sequence function that returns
the variance of nonnull values of a column in the current window of
an intermediate result table ordered by a SEQUENCE BY clause in a
SELECT statement. See <xref linkend="i1004369"
role="select:quotedtitle page"/>.</para>
<indexterm><primary>MOVINGVARIANCE function</primary><secondary>syntax
diagram of</secondary></indexterm>
<para>MOVINGVARIANCE is a Trafodion SQL extension.</para>
<programlisting>MOVINGVARIANCE (<replaceable>column-expression</replaceable
>,<replaceable>integer-expression</replaceable> 
                [,<replaceable>max-rows</replaceable>])
</programlisting>
<variablelist>
<varlistentry><term><replaceable>column-expression</replaceable> </term>
<listitem><para>specifies a derived column determined by the evaluation
of the column expression.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>integer-expression</replaceable> </term>
<listitem><para>is an SQL numeric value expression of signed data
type SMALLINT or INTEGER that specifies the current window. The current
window is defined as the current row and the previous (<replaceable
>integer-expression</replaceable> - 1) rows. </para></listitem>
</varlistentry>
<varlistentry><term><replaceable>max-rows</replaceable> </term>
<listitem><para>is an SQL numeric value expression of signed data
type SMALLINT or INTEGER that specifies the maximum number of rows
in the current window. </para><para>Note these considerations for
the window size:</para>
<itemizedlist>
<listitem><para>The actual value for the window size is the minimum
of <replaceable>integer-expression</replaceable> and <replaceable
>max-rows</replaceable>.</para></listitem>
<listitem><para>If these conditions are met, MOVINGVARIANCE returns
the same result as RUNNINGVARIANCE:</para>
<itemizedlist>
<listitem><para>The <replaceable>integer-expression</replaceable> is
out of range, and <replaceable>max-rows</replaceable> is not specified.
This condition includes the case in which both <replaceable>integer-expression</replaceable
> and <replaceable>max-rows</replaceable> are larger than the result
table.</para></listitem>
<listitem><para>The minimum of <replaceable>integer-expression</replaceable
> and <replaceable>max-rows</replaceable> is out of range. In this
case, <replaceable>integer-expression</replaceable> could be within
range, but <replaceable>max-rows</replaceable> might be the minimum
value of the two and be out of range (for example, a negative number).</para>
</listitem>
</itemizedlist>
</listitem>
<listitem><para>The number of rows is out of range if it is larger
than the size of the result table, negative, or NULL.</para></listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of MOVINGVARIANCE</title>
<indexterm><primary>MOVINGVARIANCE function</primary><secondary>examples
of</secondary></indexterm>
<para>Return the variance of nonnull values of a column in the current
window of three rows:</para>
<programlisting>SELECT MOVINGVARIANCE (I1,3) AS MOVINGVARIANCE3
FROM mining.seqfcn
SEQUENCE BY TS;

MOVINGVARIANCE3
-------------------------
 0.00000000000000000E+000
 2.41098840499999960E+008
 2.19099696999999968E+008
 2.28463602333333304E+008
 3.64366210000000016E+007

--- 5 row(s) selected.
</programlisting>
<para>You can use the CAST function for display purposes. For example:</para>
<programlisting>SELECT CAST(MOVINGVARIANCE (I1,3) AS DEC (18,3))
FROM mining.seqfcn
SEQUENCE BY TS;

(EXPR)
--------------------
                .000
       241098840.500
       219099697.000
       228463602.333
        36436621.000

--- 5 row(s) selected.
</programlisting>
</section>
</section>
<section id="i1051667" pagebreak="yes">
<title>NULLIF Function</title>
<indexterm><primary>NULLIF function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Other functions and
expressions</primary><secondary>NULLIF</secondary></indexterm>
<para>The NULLIF function compares the value of two expressions. Both
expressions must be of comparable types. The return value is NULL
when the two expressions are equal. Otherwise, the return value is
the value of the first expression.</para>
<programlisting>NULLIF(<replaceable>expr1</replaceable>, <replaceable
>expr2</replaceable>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>expr1</replaceable></term>
<listitem><para>an expression to be compared.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>expr2</replaceable></term>
<listitem><para>an expression to be compared.</para></listitem>
</varlistentry>
</variablelist>
<para>The NULLIF(<replaceable>expr1</replaceable>, <replaceable>expr2</replaceable
>) is equivalent to:</para>
<programlisting>CASE  WHEN expr1 = expr2
      THEN  NULL
      ELSE  expr1
END
</programlisting>
<para>NULLIF returns a NULL if both arguments are equal. The return
value is the value of the first argument when the two expressions
are not equal.</para>
<section>
<title>Example of NULLIF</title>
<indexterm><primary>NULLIF function</primary><secondary>example of</secondary>
</indexterm>
<para>This function returns a null if the <replaceable>value</replaceable
> is equal to 7. The return value is the value of the first argument
when that value is not 7.</para>
<programlisting>NULLIF(value,7)
</programlisting>
</section>
</section>
<section id="i1049895" pagebreak="yes">
<title>NULLIFZERO Function</title>
<indexterm><primary>NULLIFZERO function</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>Math functions</primary>
<secondary>NULLIFZERO</secondary></indexterm>
<para>The NULLIFZERO function returns the value of the expression
if that value is not zero. It returns NULL if the value of the expression
is zero.</para>
<programlisting>NULLIFZERO (<replaceable>expression</replaceable>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>expression</replaceable></term>
<listitem><para>specifies a value expression. It must be a numeric
data type.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of NULLIFZERO</title>
<indexterm><primary>NULLIFZERO function</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>This function returns the value of the column named <literal
>salary</literal> for each row where the column’s value is not zero.
It returns a NULL for each row where the column’s value is zero.</para>
<programlisting>SELECT NULLIFZERO (salary) from employee_tab;
</programlisting>
</listitem>
<listitem><para>This function returns a value of 1 for each row of
the table:</para>
<programlisting>SELECT NULLIFZERO(1) from employee_tab;
</programlisting>
</listitem>
<listitem><para>This function returns a value of NULL for each row
of the table:</para>
<programlisting>SELECT NULLIFZERO(0) from employee_tab;
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1009338" pagebreak="yes">
<title>NVL Function</title>
<indexterm><primary>NVL function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Other functions and
expressions</primary><secondary>NVL</secondary></indexterm>
<para>The NVL function determines if the selected column has a null
value and then returns the new-operand value; otherwise the operand
value is returned.</para>
<programlisting>NVL (<replaceable>operand</replaceable>, <replaceable
>new-operand</replaceable>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>operand</replaceable></term>
<listitem><para>specifies a value expression.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>new-operand</replaceable></term>
<listitem><para>specifies a value expression. <replaceable>operand</replaceable
> and <replaceable>new-operand</replaceable> must be comparable data
types. </para></listitem>
</varlistentry>
</variablelist>
<para>If <replaceable>operand</replaceable> is a null value, NVL returns <replaceable
>new-operand</replaceable>.</para>
<para>If <replaceable>operand</replaceable> is not a null value, NVL
returns <replaceable>operand</replaceable>.</para>
<para>The <replaceable>operand</replaceable> and <replaceable>new-operand</replaceable
> can be a column name, subquery, Trafodion SQL string functions,
math functions, or constant values.</para>
<section>
<title>Examples of NVL</title>
<indexterm><primary>NVL function</primary><secondary>examples of</secondary>
</indexterm>
<itemizedlist>
<listitem><para>This function returns a value of <literal>z</literal
>:</para>
<programlisting>select nvl(cast(null as char(1)), ‘z’) from (values(1)) x(a);
(EXPR)
------

"z"
--- 1 row(s) selected.
</programlisting>
</listitem>
<listitem><para>This function returns a value of 1:</para>
<programlisting>select nvl(1, 2) from (values(0)) x(a)
(EXPR)
-------

     1

--- 1 row(s) selected.
</programlisting>
</listitem>
<listitem><para>This function returns a value of 9999999 for the null
value in the column named a1:</para>
<programlisting>select nvl(a1, 9999999) from t1;
(EXPR)
-------

    123
     34
9999999

--- 3 row(s) selected.

select * from t1;
A1
-------

    123
     34
      ?

--- 3 row(s) selected.
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1049766" pagebreak="yes">
<title>OCTET_LENGTH Function</title>
<indexterm><primary>OCTET_LENGTH function</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>Character string
functions</primary><secondary>OCTET_LENGTH</secondary></indexterm>
<para>The OCTET_LENGTH function returns the length of a character
string in bytes.</para>
<programlisting>OCTET_LENGTH (<replaceable>string-value-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>string-value-expression</replaceable
> </term>
<listitem><para>specifies the string value expression for which to
return the length in bytes. Trafodion SQL returns the result as a
2-byte signed integer with a scale of zero. If <replaceable>string-value-expression</replaceable
> is null, Trafodion SQL returns a length of zero. See <xref
linkend="i1010765" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Considerations for OCTET_LENGTH</title>
<section>
<title>CHAR and VARCHAR Operands</title>
<para>For a column declared as fixed CHAR, Trafodion SQL returns the
length of that column as the maximum number of storage bytes. For
a VARCHAR column, Trafodion SQL returns the length of the string stored
in that column as the actual number of storage bytes.</para>
</section>
<section>
<title>Similarity to CHAR_LENGTH Function</title>
<indexterm><primary>OCTET_LENGTH function</primary><secondary>CHAR_LENGTH
similarity to</secondary></indexterm>
<para>The OCTET_LENGTH and CHAR_LENGTH functions are similar. The
OCTET_LENGTH function returns the number of bytes, rather than the
number of characters, in the string. This distinction is important
for multibyte implementations. For an example of selecting a double-byte
column, see <xref linkend="Example_of_OCTET_LENGTH"
role="select:quotedtitle page"/>.</para>
</section>
</section>
<section id="Example_of_OCTET_LENGTH">
<title>Example of OCTET_LENGTH</title>
<indexterm><primary>OCTET_LENGTH function</primary><secondary>examples
of</secondary></indexterm>
<para>If a character string is stored as two bytes for each character,
this function returns the value 12. Otherwise, the function returns
6:</para>
<programlisting>OCTET_LENGTH ('Robert') 
</programlisting>
</section>
</section>
<section id="i1009364" pagebreak="yes">
<title>OFFSET Function</title>
<indexterm><primary>Sequence functions</primary><secondary>OFFSET</secondary>
</indexterm><indexterm><primary>OFFSET function</primary><secondary
>syntax diagram of</secondary></indexterm>
<para>The OFFSET function is a sequence function that retrieves columns
from previous rows of an intermediate result table ordered by a SEQUENCE
BY clause in a SELECT statement. See <xref linkend="i1004369"
role="select:quotedtitle page"/>. OFFSET is a Trafodion SQL extension.</para>
<programlisting>OFFSET (<replaceable>column-expression</replaceable
>,<replaceable>number-rows</replaceable> [,<replaceable>max-rows</replaceable
>])
</programlisting>
<variablelist>
<varlistentry><term><replaceable>column-expression</replaceable> </term>
<listitem><para>specifies a derived column determined by the evaluation
of the column expression.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>number-rows </replaceable></term>
<listitem><para>is an SQL numeric value expression of signed data
type SMALLINT or INTEGER that specifies the offset as the number of
rows from the current row. If the number of rows exceeds <replaceable
>max-rows</replaceable>, OFFSET returns OFFSET(<replaceable>column-expression</replaceable
>,<replaceable>max-rows</replaceable>). If the number of rows is out
of range and <replaceable>max-rows</replaceable> is not specified
or is out of range, OFFSET returns null. The number of rows is out
of range if it is larger than the size of the result table, negative,
or NULL.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>max-rows</replaceable> </term>
<listitem><para>is an SQL numeric value expression of signed data
type SMALLINT or INTEGER that specifies the maximum number of rows
of the offset. </para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of OFFSET</title>
<indexterm><primary>OFFSET function</primary><secondary>examples of</secondary>
</indexterm>
<para>Retrieve the I1 column offset by three rows:</para>
<programlisting>SELECT OFFSET (I1,3) AS OFFSET3
FROM mining.seqfcn
SEQUENCE BY TS;

OFFSET3
------------
           ?
           ?
           ?
        6215
       28174

--- 5 row(s) selected.
</programlisting>
<para>The first three rows retrieved display null because the offset
from the current row does not fall within the result table.</para>
</section>
</section>
<section id="i1009457" pagebreak="yes">
<title>PI Function</title>
<indexterm><primary>PI function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Math functions</primary>
<secondary>PI</secondary></indexterm>
<para>The PI function returns the constant value of pi as a floating-point
value.</para>
<para>PI is a Trafodion SQL extension.</para>
<programlisting>PI()
</programlisting>
<section>
<title>Example of PI</title>
<indexterm><primary>PI function</primary><secondary>examples of</secondary>
</indexterm>
<para>This constant function returns the value 3.14159260000000000E+000:</para>
<programlisting>PI()
</programlisting>
</section>
</section>
<section id="i1013460" pagebreak="yes">
<title>POSITION Function</title>
<indexterm><primary>POSITION function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Character string functions</primary>
<secondary>POSITION</secondary></indexterm>
<para>The POSITION function searches for a given substring in a character
string. If the substring is found, Trafodion SQL returns the character
position of the substring within the string. Every character, including
multibyte characters, is treated as one character. The result returned
by the POSITION function is equal to the result returned by the <xref
linkend="i1008399" role="select:quotedtitle page"/>.</para>
<programlisting>POSITION (<replaceable>substring-expression</replaceable
> IN <replaceable>source-expression</replaceable>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>substring-expression</replaceable
> </term>
<listitem><para>is an SQL character value expression that specifies
the substring to search for in <replaceable>source-expression</replaceable
>. The <replaceable>substring-expression</replaceable> cannot be NULL.
See <xref linkend="i1010765" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>source-expression</replaceable> </term>
<listitem><para>is an SQL character value expression that specifies
the source string. The <replaceable>source-expression</replaceable
> cannot be NULL. See <xref linkend="i1010765"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<para>Trafodion SQL returns the result as a 2-byte signed integer
with a scale of zero. If <replaceable>substring-expression</replaceable
> is not found in <replaceable>source-expression</replaceable>, Trafodion
SQL returns zero.</para>
<section>
<title>Considerations for POSITION</title>
<section>
<title>Result of POSITION</title>
<indexterm><primary>POSITION function</primary><secondary>result of</secondary>
</indexterm>
<para>If the length of <replaceable>source-expression</replaceable
> is zero and the length of <replaceable>substring‑expression</replaceable
> is greater than zero, Trafodion SQL returns 0. If the length of <replaceable
>substring-expression</replaceable> is zero, Trafodion SQL returns
1.</para>
<para>If the length of <replaceable>substring-expression</replaceable
> is greater than the length of <replaceable>source‑expression</replaceable
>, Trafodion SQL returns zero. If <replaceable>source-expression</replaceable
> is a null value, Trafodion SQL returns a null value.</para>
</section>
<section>
<title>Using the UPSHIFT Function</title>
<para>To ignore case in the search, use the UPSHIFT function (or the
LOWER function) for both the <replaceable>substring-expression</replaceable
> and the <replaceable>source-expression</replaceable>.</para>
</section>
</section>
<section>
<title>Examples of POSITION</title>
<indexterm><primary>POSITION function</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>This function returns the value 8 for the position
of the substring <literal>‘John’</literal> within the string:</para>
<programlisting>POSITION ('John' IN 'Robert John Smith')
</programlisting>
</listitem>
<listitem><para>Suppose that the EMPLOYEE table has an EMPNAME column
that contains both the first and last names. Return all records in
table EMPLOYEE that contain the substring 'Smith' regardless of whether
the column value is in uppercase or lowercase characters:</para>
<programlisting>SELECT * FROM persnl.employee
  WHERE POSITION ('SMITH' IN UPSHIFT(empname)) > 0 ;
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1009502" pagebreak="yes">
<title>POWER Function</title>
<indexterm><primary>POWER function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Math functions</primary>
<secondary>POWER</secondary></indexterm>
<para>The POWER function returns the value of a numeric value expression
raised to the power of an integer value expression. You can also use
the exponential operator **.</para>
<para>POWER is a Trafodion SQL extension.</para>
<programlisting>POWER (<replaceable>numeric-expression-1</replaceable
>,<replaceable>numeric-expression-2</replaceable>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>numeric-expression-1</replaceable
>, <replaceable>numeric-expression-2 </replaceable></term>
<listitem><para>are SQL numeric value expressions that specify the
values for the base and exponent arguments of the POWER function.
See <xref linkend="i1011132" role="select:quotedtitle page"/>.</para>
<para>If base <replaceable>numeric-expression-1</replaceable> is zero,
the exponent <replaceable>numeric-expression-2</replaceable> must
be greater than zero, and the result is zero. If the exponent is zero,
the base cannot be 0, and the result is 1. If the base is negative,
the exponent must be a value with an exact numeric data type and a
scale of zero.</para>
</listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of POWER</title>
<indexterm><primary>POWER function</primary><secondary>examples of</secondary>
</indexterm>
<itemizedlist>
<listitem><para>Return the value 15.625:</para>
<programlisting>POWER (2.5,3)
</programlisting>
</listitem>
<listitem><para>Return the value 27. The function POWER raised to
the power of 2 is the inverse of the function SQRT:</para>
<programlisting>POWER (SQRT(27),2)
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1009576" pagebreak="yes">
<title>QUARTER Function</title>
<indexterm><primary>Datetime functions</primary><secondary>QUARTER</secondary>
</indexterm><indexterm><primary>QUARTER function</primary><secondary
>syntax diagram of</secondary></indexterm>
<para>The QUARTER function converts a DATE or TIMESTAMP expression
into an INTEGER value in the range 1 through 4 that represents the
corresponding quarter of the year. Quarter 1 represents January 1
through March 31, and so on.</para>
<para>QUARTER is a Trafodion SQL extension. </para>
<programlisting>QUARTER (<replaceable>datetime-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>datetime-expression</replaceable
> </term>
<listitem><para>is an expression that evaluates to a datetime value
of type DATE or TIMESTAMP. See <xref
linkend="Datetime_Value_Expressions" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of QUARTER</title>
<indexterm><primary>QUARTER function</primary><secondary>examples
of</secondary></indexterm>
<para>Return an integer that represents the quarter of the year from
the START_DATE column in the PROJECT table: </para>
<programlisting>SELECT start_date, ship_timestamp, QUARTER(start_date) 
FROM persnl.project 
WHERE projcode = 1000;

Start/Date  Time/Shipped                (EXPR)  
----------  --------------------------  ------  
2008-04-10  2008-04-21 08:15:00.000000       2  
</programlisting>
</section>
</section>
<section id="i1017336" pagebreak="yes">
<title>RADIANS Function</title>
<indexterm><primary>RADIANS function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Math functions</primary>
<secondary>RADIANS</secondary></indexterm>
<para>The RADIANS function converts a numeric value expression (expressed
in degrees) to the number of radians.</para>
<para>RADIANS is a Trafodion SQL extension.</para>
<programlisting>RADIANS (<replaceable>numeric-expression</replaceable
>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>numeric-expression</replaceable> </term>
<listitem><para>is an SQL numeric value expression that specifies
the value for the argument of the RADIANS function. See <xref
linkend="i1011132" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of RADIANS</title>
<indexterm><primary>RADIANS function</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>Return the value 7.85398150000000000E-001, or approximately
0.78540 in degrees:</para>
<programlisting>RADIANS (45)
</programlisting>
</listitem>
<listitem><para>Return the value 45 in degrees. The function DEGREES
is the inverse of the function RADIANS. </para>
<programlisting>DEGREES (RADIANS (45))
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1053583" pagebreak="yes">
<title>RANK/RUNNINGRANK Function</title>
<indexterm><primary>RANK/RUNNINGRANK function</primary><secondary
>syntax diagram of</secondary></indexterm><indexterm><primary>Sequence
functions</primary><secondary>RANK/RUNNINGRANK</secondary></indexterm>
<para>The RANK/RUNNINGRANK function is a sequence function that returns
the rank of the given value of an intermediate result table ordered
by a SEQUENCE BY clause in a SELECT statement. RANK is an alternative
syntax for RANK/RUNNINGRANK.</para>
<para>RANK/RUNNINGRANK is a Trafodion extension.</para>
<programlisting>RUNNINGRANK(<replaceable>expression</replaceable>) | RANK(<replaceable
>expression</replaceable>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>expression</replaceable></term>
<listitem><para>specifies the expression on which to perform the rank.</para>
</listitem>
</varlistentry>
</variablelist>
<para>RANK/RUNNINGRANK returns the rank of the expression within the
intermediate result table. The definition of rank is as follows:</para>
<programlisting>RANK = 1 for the first value of the intermediate result table.

= the previous value of RANK if the previous value of <replaceable
>expression</replaceable> is the
same as the current value of <replaceable>expression</replaceable
>.

= RUNNINGCOUNT(*) otherwise.  
</programlisting>
<para>In other words, RANK starts at 1. Values that are equal have
the same rank. The value of RANK advances to the relative position
of the row in the intermediate result when the value changes.</para>
<section>
<title>Considerations for RANK/RUNNINGRANK</title>
<section>
<title>Sequence Order Dependency</title>
<para>The RUNNINGRANK function is meaningful only when the given expression
is the leading column of the SEQUENCE BY clause. This is because the
RUNNINGRANK function assumes that the values of expression are in
order and that like values are contiguous. If an ascending order is
specified for expression in the SEQUENCE BY clause, then the RUNNINGRANK
function assigns a rank of 1 to the lowest value of expression. If
a descending order is specified for expression in the SEQUENCE BY
clause, then the RUNNINGRANK function assigns a rank of 1 to the highest
value of expression. </para>
</section>
<section>
<title>NULL Values</title>
<para>For the purposes of RUNNINGRANK, NULL values are considered
to be equal.</para>
</section>
</section>
<section>
<title>Examples of RANK/RUNNINGRANK</title>
<indexterm><primary>RANK/RUNNINGRANK function</primary><secondary
>example for</secondary></indexterm>
<para>Suppose that SEQFCN has been created as:</para>
<programlisting>CREATE TABLE cat.sch.seqfcn
(I1 INTEGER,I2 INTEGER);
</programlisting>
<para>The table SEQFCN has columns I1 and I2 with data:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<colspec colwidth="0.27*"/>
<colspec colwidth="1.73*"/>
<thead>
<row><entry>I1</entry><entry>I2</entry></row>
</thead>
<tbody>
<row><entry>1</entry><entry>100</entry></row>
<row><entry>3</entry><entry>200</entry></row>
<row><entry>4</entry><entry>100</entry></row>
<row><entry>2</entry><entry>200</entry></row>
<row><entry>5</entry><entry>300</entry></row>
<row><entry>10</entry><entry>null</entry></row>
<row><entry>6</entry><entry>null</entry></row>
<row><entry>8</entry><entry>200</entry></row>
</tbody>
</tgroup>
</informaltable>
<itemizedlist>
<listitem><para>Return the rank of I1:</para>
<programlisting>SELECT I1, RUNNINGRANK (I1) AS RANK

FROM cat.sch.seqfcn

SEQUENCE BY I1;

I1           RANK
-----------  --------------------
          1                     1
          2                     2
          3                     3
          4                     4
          5                     5
          6                     6
          8                     7
         10                     8

--- 8 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Return the rank of I1 descending:<programlisting>
SELECT I1, RUNNINGRANK (I1) AS RANK
FROM cat.sch.seqfcn
SEQUENCE BY I1 DESC;

I1           RANK

-----------  --------------------

         10                     1
          8                     2
          6                     3
          5                     4
          4                     5
          3                     6
          2                     7
          1                     8

--- 8 row(s) selected.
</programlisting></para></listitem>
<listitem><para>Return the rank of I2, using the alternative RANK
syntax:<programlisting>SELECT I2, RANK (I2) AS RANK
FROM cat.sch.seqfcn
SEQUENCE BY I2;

I2           RANK
-----------  --------------------
        100                     1
        100                     1
        200                     3
        200                     3
        200                     3
        300                     6
          ?                     7
          ?                     7

--- 8 row(s) selected.
</programlisting></para><para>Notice that the two NULL values received
the same rank.</para>
</listitem>
<listitem><para>Return the rank of I2 descending, using the alternative
RANK syntax:<programlisting>SELECT I2, RANK (I2) AS RANK
FROM cat.sch.seqfcn
SEQUENCE BY I2 DESC;

I2           RANK
-----------  --------------------
          ?                     1
          ?                     1
        300                     3
        200                     4
        200                     4
        200                     4
        100                     7
        100                     7

--- 8 row(s) selected.</programlisting></para></listitem>
<listitem><para>Return the rank of I2 descending, excluding NULL values:<programlisting
>SELECT I2, RANK (I2) AS RANK
FROM cat.sch.seqfcn
WHERE I2 IS NOT NULL
SEQUENCE BY I2 DESC;

I2           RANK
-----------  --------------------
        300                     1
        200                     2
        200                     2
        200                     2
        100                     5
        100                     5
--- 6 row(s) selected.
</programlisting></para></listitem>
</itemizedlist>
</section>
</section>
<section id="i1009649" pagebreak="yes">
<title>REPEAT Function</title>
<indexterm><primary>REPEAT function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Character string functions</primary>
<secondary>REPEAT</secondary></indexterm>
<para>The REPEAT function returns a character string composed of the
evaluation of a character expression repeated a specified number of
times.</para>
<para>REPEAT is a Trafodion SQL extension. </para>
<programlisting>REPEAT (<replaceable>character-expr</replaceable>, <replaceable
>count</replaceable>)</programlisting>
<variablelist>
<varlistentry><term><replaceable>character-expr </replaceable></term>
<listitem><para>specifies the source string from which to return the
specified number of repeated strings. The source string is an SQL
character value expression. The operand is the result of evaluating <replaceable
>character-expr</replaceable>. See <xref linkend="i1010765"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>count </replaceable></term>
<listitem><para>specifies the number of times the source string <replaceable
>character-expr</replaceable> is to be repeated. The number <replaceable
>count</replaceable> must be a value greater than or equal to zero
of exact numeric data type and with a scale of zero. </para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of REPEAT</title>
<indexterm><primary>REPEAT function</primary><secondary>examples of</secondary>
</indexterm>
<para>Return this quote from Act 5, Scene 3, of King Lear:</para>
<programlisting>REPEAT ('Never,', 5)

Never,Never,Never,Never,Never,
</programlisting>
</section>
</section>
<section id="i1009669" pagebreak="yes">
<title>REPLACE Function</title>
<indexterm><primary>REPLACE function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Character string functions</primary>
<secondary>REPLACE</secondary></indexterm>
<para>The REPLACE function returns a character string where all occurrences
of a specified character string in the original string are replaced
with another character string. All three character value expressions
must be comparable types. The return value is the VARCHAR type.</para>
<para>REPLACE is a Trafodion SQL extension. </para>
<programlisting>REPLACE (<replaceable>char-expr-1</replaceable>, <replaceable
>char-expr-2</replaceable>, <replaceable>char-expr-3</replaceable
>)</programlisting>
<variablelist>
<varlistentry><term><replaceable>char-expr-1</replaceable>, <replaceable
>char-expr-2</replaceable>, <replaceable>char-expr-3</replaceable
> </term>
<listitem><para>are SQL character value expressions. The operands
are the result of evaluating the character expressions. All occurrences
of <replaceable>char-expr-2</replaceable> in <replaceable>char-expr-1</replaceable
> are replaced by <replaceable>char-expr-3</replaceable>. See <xref
linkend="i1010765" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of REPLACE</title>
<indexterm><primary>REPLACE function</primary><secondary>examples
of</secondary></indexterm>
<para>Use the REPLACE function to change job descriptions so that
occurrences of the company name are updated:</para>
<programlisting>SELECT jobdesc FROM persnl.job;

Job Description
------------------

MANAGER COMNET
PRODUCTION  COMNET
ASSEMBLER COMNET
SALESREP COMNET
SYSTEM ANAL COMNET
...

--- 10 row(s) selected.

UPDATE persnl.job 
SET jobdesc = REPLACE (jobdesc, 'COMNET', 'TDMNET');

Job Description
------------------

MANAGER TDMNET
PRODUCTION  TDMNET
ASSEMBLER TDMNET
SALESREP TDMNET
SYSTEM ANAL TDMNET
...

--- 10 row(s) selected. 
</programlisting>
</section>
</section>
<section id="i1013470" pagebreak="yes">
<title>RIGHT Function</title>
<indexterm><primary>RIGHT function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Character string functions</primary>
<secondary>RIGHT</secondary></indexterm>
<para>The RIGHT function returns the rightmost specified number of
characters from a character expression. Every character, including
multibyte characters, is treated as one character.</para>
<para>RIGHT is a Trafodion SQL extension.</para>
<programlisting>RIGHT (<replaceable>character-expr</replaceable>, <replaceable
>count</replaceable>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>character-expr</replaceable> </term>
<listitem><para>specifies the source string from which to return the
rightmost specified number of characters. The source string is an
SQL character value expression. The operand is the result of evaluating <replaceable
>character-expr</replaceable>. See <xref linkend="i1010765"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>count</replaceable> </term>
<listitem><para>specifies the number of characters to return from <replaceable
>character-expr</replaceable>. The number count must be a value of
exact numeric data type with a scale of zero. </para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of RIGHT</title>
<indexterm><primary>RIGHT function</primary><secondary>examples of</secondary>
</indexterm>
<itemizedlist>
<listitem><para>Return 'Smith':</para>
<programlisting>RIGHT ('Robert John Smith', 5)
</programlisting>
</listitem>
<listitem><para>Suppose that a six-character company literal has been
concatenated as the first six characters to the job descriptions in
the JOB table. Use the RIGHT function to remove the company literal
from the job descriptions:</para>
<programlisting>UPDATE persnl.job 
SET jobdesc = RIGHT (jobdesc, 12);
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1051643" pagebreak="yes">
<title>ROUND Function</title>
<indexterm><primary>ROUND function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Math functions</primary>
<secondary>ROUND</secondary></indexterm>
<para>The ROUND function returns the value of <replaceable>numeric_expr</replaceable
> rounded to <replaceable>num</replaceable> places to the right of
the decimal point.</para>
<para>ROUND is a Trafodion SQL extension.</para>
<programlisting>ROUND(<replaceable>numeric_expr</replaceable> [ , <replaceable
>num</replaceable> ] )
</programlisting>
<variablelist>
<varlistentry><term><replaceable>numeric_expr</replaceable></term>
<listitem><para>is an SQL numeric value expression.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>num</replaceable></term>
<listitem><para>specifies the number of places to the right of the
decimal point for rounding. If <replaceable>num</replaceable> is a
negative number, all places to the right of the decimal point and <replaceable
>num</replaceable> places to the left of the decimal point are zeroed.
If <replaceable>num</replaceable> is not specified or is 0, then all
places to the right of the decimal point are zeroed.</para><para>For
any exact numeric value, the value <replaceable>numeric_expr</replaceable
> is rounded away from 0 (for example, to x+1 when x.5 is positive
and to x-1 when x.5 is negative). For the inexact numeric values (real,
float, and double) the value <replaceable>numeric_expr</replaceable
> is rounded toward the nearest even number.</para>
</listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of ROUND</title>
<indexterm><primary>ROUND function</primary><secondary>examples of</secondary>
</indexterm>
<itemizedlist>
<listitem><para>This function returns the value of 123.46.</para>
<programlisting>
ROUND(123.4567,2) 
</programlisting>
</listitem>
<listitem><para>This function returns the value of 123.</para>
<programlisting>
ROUND(123.4567,0) 
</programlisting>
</listitem>
<listitem><para>This function returns the value of 120.</para>
<programlisting>
ROUND(123.4567,-1) 
</programlisting>
</listitem>
<listitem><para>This function returns the value of 0.</para>
<programlisting>
ROUND(999.0,-4) 
</programlisting>
</listitem>
<listitem><para>This function returns the value of 1000.</para>
<programlisting>
ROUND(999.0.-3) 
</programlisting>
</listitem>
<listitem><para>This function returns the value of 2.0E+000.</para>
<programlisting>
ROUND(1.5E+000,0) 
</programlisting>
</listitem>
<listitem><para>This function returns the value of 2.0E+00.</para>
<programlisting>
ROUND(2.5E+000,0) 
</programlisting>
</listitem>
<listitem><para>This function returns the value of 1.0E+00.</para>
<programlisting>ROUND(1.4E+000,0) 
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1009711" pagebreak="yes">
<title>ROWS SINCE Function</title>
<indexterm><primary>Sequence functions</primary><secondary>ROWS SINCE</secondary>
</indexterm>
<para>The ROWS SINCE function is a sequence function that returns
the number of rows counted since the specified condition was last
true in the intermediate result table ordered by a SEQUENCE BY clause
in a SELECT statement. See <xref linkend="i1004369"
role="select:quotedtitle page"/>.</para>
<indexterm><primary>ROWS SINCE function</primary><secondary>syntax
diagram of</secondary></indexterm>
<para>ROWS SINCE is a Trafodion SQL extension.</para>
<programlisting>ROWS SINCE [INCLUSIVE] (<replaceable>condition</replaceable
> [,<replaceable>max-rows</replaceable>])
</programlisting>
<variablelist>
<varlistentry><term>INCLUSIVE</term>
<listitem><para>specifies the current row is to be considered. If
you specify INCLUSIVE, the condition is evaluated in the current row.
Otherwise, the condition is evaluated beginning with the previous
row. If you specify INCLUSIVE and the condition is true in the current
row, ROWS SINCE returns 0.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>condition</replaceable> </term>
<listitem><para>specifies a condition to be considered for each row
in the result table. Each column in <replaceable>condition</replaceable
> must be a column that exists in the result table. If the condition
has never been true for the result table, ROWS SINCE returns null. </para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>max-rows</replaceable> </term>
<listitem><para>is an SQL numeric value expression of signed data
type SMALLINT or INTEGER that specifies the maximum number of rows
from the current row to consider. If the condition has never been
true for <replaceable>max-rows</replaceable> from the current row,
or if <replaceable>max-rows</replaceable> is negative or null, ROWS
SINCE returns null. </para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Considerations for ROWS SINCE</title>
<section>
<title>Counting the Rows</title>
<para>If you specify INCLUSIVE, the condition in each row of the result
table is evaluated starting with the current row as row 0 (zero) (up
to the maximum number of rows or the size of the result table). Otherwise,
the condition is evaluated starting with the previous row as row 1. </para>
<para>If a row is reached where the condition is true, ROWS SINCE
returns the number of rows counted so far. Otherwise, if the condition
is never true within the result table being considered, ROWS SINCE
returns null. Trafodion SQL then goes to the next row as the new current
row.</para>
</section>
</section>
<section>
<title>Examples of ROWS SINCE</title>
<indexterm><primary>ROWS SINCE function</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>Return the number of rows since the condition <literal
>I1 IS NULL</literal> became true:</para>
<programlisting>
SELECT ROWS SINCE (I1 IS NULL) AS ROWS_SINCE_NULL 
FROM mining.seqfcn
SEQUENCE BY TS;

ROWS_SINCE_NULL
---------------
              ?
              ?
              1
              2
              1

--- 5 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Return the number of rows since the condition <literal
>I1 &lt; I2</literal> became true: </para>
<programlisting>
SELECT ROWS SINCE (I1&lt;I2), ROWS SINCE INCLUSIVE (I1&lt;I2) 
FROM mining.seqfcn
SEQUENCE BY TS;

(EXPR)           (EXPR)
---------------  ---------------
              ?                0
              1                1
              2                0
              1                1
              2                0

--- 5 row(s) selected.
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1053633" pagebreak="yes">
<title>ROWS SINCE CHANGED Function</title>
<indexterm><primary>Sequence functions</primary><secondary>ROWS SINCE
CHANGED</secondary></indexterm>
<para>The ROWS SINCE CHANGED function is a sequence function that
returns the number of rows counted since the specified set of values
last changed in the intermediate result table ordered by a SEQUENCE
BY clause in a SELECT statement. See <xref linkend="i1004369"
role="select:quotedtitle page"/>.</para>
<indexterm><primary>ROWS SINCE CHANGED function</primary><secondary
>syntax diagram of</secondary></indexterm>
<para>ROWS SINCE CHANGED is a Trafodion SQL extension.</para>
<programlisting>ROWS SINCE CHANGED (<replaceable>column-expression-list</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>column-expression-list</replaceable
></term>
<listitem><para>is a comma-separated list that specifies a derived
column list determined by the evaluation of the column expression
list. ROWS SINCE CHANGED returns the number of rows counted since
the values of <replaceable>column-expression-list</replaceable> changed.</para>
</listitem>
</varlistentry>
</variablelist>
<section>
<title>Considerations for ROWS SINCE CHANGED</title>
<section>
<title>Counting the Rows</title>
<indexterm><primary>ROWS SINCE CHANGED function</primary><secondary
>considerations for</secondary></indexterm>
<para>For the first row in the intermediate result table, the count
is 1. For subsequent rows that have the same value for <replaceable
>column-expression-list</replaceable> as the previous row, the count
is 1 plus the count in the previous row. For subsequent rows that
have a different value of <replaceable>column-expression-list</replaceable
> than the previous row, the count is 1. </para>
</section>
</section>
<section>
<title>Examples of ROWS SINCE CHANGED</title>
<indexterm><primary>ROWS SINCE CHANGED function</primary><secondary
>examples of</secondary></indexterm>
<itemizedlist>
<listitem><para>Return the number of rows since the value <literal
>I1</literal> last changed:</para>
<programlisting>
SELECT ROWS SINCE CHANGED (I1)
FROM mining.seqfcn
SEQUENCE BY TS;
</programlisting>
</listitem>
<listitem><para>Return the number of rows since the values <literal
>I1</literal> and <literal>ts</literal> last changed: </para>
<programlisting>
SELECT ROWS SINCE CHANGED (I1, TS)
FROM mining.seqfcn
SEQUENCE BY TS;
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1009782" pagebreak="yes">
<title>RPAD Function</title>
<indexterm><primary>RPAD function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Character string functions</primary>
<secondary>RPAD</secondary></indexterm>
<para>The RPAD function pads the right side of a string with the specified
string. Every character in the string, including multibyte characters,
is treated as one character.</para>
<para>RPAD is a Trafodion SQL extension.</para>
<programlisting>RPAD (<replaceable>str</replaceable>, <replaceable
>len</replaceable> [,<replaceable>padstr</replaceable>]) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>str</replaceable></term>
<listitem><para>can be an expression. See <xref linkend="i1010765"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>len</replaceable></term>
<listitem><para>identifies the desired number of characters to be
returned and can be an expression but must be an integral value. If <replaceable
>len</replaceable> is equal to the length of the string, no change
is made. If <replaceable>len</replaceable> is smaller than the string
size, the string is truncated.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>pad-character</replaceable></term>
<listitem><para>can be an expression and may be a string.</para>
</listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of RPAD Function</title>
<indexterm><primary>RPAD function</primary><secondary>examples of</secondary>
</indexterm>
<itemizedlist>
<listitem><para>This function returns <literal>'kite   '</literal
>:</para>
<programlisting>
rpad('kite', 7)
</programlisting>
</listitem>
<listitem><para>This function returns <literal>'ki'</literal>:</para>
<programlisting>
rpad('kite', 2)			 
</programlisting>
</listitem>
<listitem><para>This function returns <literal>'kite0000'</literal
>:</para>
<programlisting>
rpad('kite', 8, '0')
</programlisting>
</listitem>
<listitem><para>This function returns <literal>'go fly a kite'</literal
>:</para>
<programlisting>
rpad('go fly a kite', 13, 'z') 
</programlisting>
</listitem>
<listitem><para>This function returns 'go fly a kitez'</para>
<programlisting>
rpad('go fly a kite', 14, 'z')
</programlisting>
</listitem>
<listitem><para>This function returns <literal>'kitegoflygoflygof'</literal
>:</para>
<programlisting>
rpad('kite', 17, 'gofly' )
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1009806" pagebreak="yes">
<title>RTRIM Function</title>
<indexterm><primary>RTRIM function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Character string functions</primary>
<secondary>RTRIM</secondary></indexterm>
<para>The RTRIM function removes trailing spaces from a character
string. If you must remove any leading character other than space,
use the TRIM function and specify the value of the character. See
the <xref linkend="i1011168" role="select:quotedtitle page"/>.</para>
<para>RTRIM is a Trafodion SQL extension.</para>
<programlisting>RTRIM (<replaceable>character-expression</replaceable
>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>character-expression</replaceable
> </term>
<listitem><para>is an SQL character value expression and specifies
the string from which to trim trailing spaces. See <xref
linkend="i1010765" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Considerations for RTRIM</title>
<section>
<title>Result of RTRIM</title>
<para>The result is always of type VARCHAR, with maximum length equal
to the fixed length or maximum variable length of <replaceable>character-expression</replaceable
>.</para>
</section>
</section>
<section>
<title>Example of RTRIM</title>
<indexterm><primary>RTRIM function</primary><secondary>examples of</secondary>
</indexterm>
<para>Return '<literal>   Robert</literal>':</para>
<programlisting>RTRIM ('    Robert    ')
</programlisting>
<para>See <xref linkend="i1011168" role="select:quotedtitle page"
/> and <xref linkend="i1008542" role="select:quotedtitle page"/>.</para>
</section>
</section>
<section id="i1009834" pagebreak="yes">
<title>RUNNINGAVG Function</title>
<indexterm><primary>Sequence functions</primary><secondary>RUNNINGAVG</secondary>
</indexterm>
<para>The RUNNINGAVG function is a sequence function that returns
the average of nonnull values of a column up to and including the
current row of an intermediate result table ordered by a SEQUENCE
BY clause in a SELECT statement. See <xref linkend="i1004369"
role="select:quotedtitle page"/>.</para>
<indexterm><primary>RUNNINGAVG function</primary><secondary>syntax
diagram of</secondary></indexterm>
<para>RUNNINGAVG is a Trafodion SQL extension.</para>
<programlisting>RUNNINGAVG (<replaceable>column-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>column-expression</replaceable> </term>
<listitem><para>specifies a derived column determined by the evaluation
of the column expression. RUNNINGAVG returns the average of nonnull
values of <replaceable>column-expression</replaceable> up to and including
the current row.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Considerations for RUNNINGAVG</title>
<section>
<title>Equivalent Result</title>
<indexterm><primary>RUNNINGAVG function</primary><secondary>equivalent
definition</secondary></indexterm>
<para>The result of RUNNINGAVG is equivalent to:</para>
<programlisting>
RUNNINGSUM(<replaceable>column-expr</replaceable>) / RUNNINGCOUNT(*)
</programlisting>
</section>
</section>
<section>
<title>Example of RUNNINGAVG</title>
<indexterm><primary>RUNNINGAVG function</primary><secondary>examples
of</secondary></indexterm>
<para>Return the average of nonnull values of I1 up to and including
the current row:</para>
<programlisting>
SELECT RUNNINGAVG (I1) AS AVG_I1
FROM mining.seqfcn
SEQUENCE BY TS;

AVG_I1
-------------------- 
                6215 
               17194 
               11463 
                9746 
               10190 

--- 5 row(s) selected.
</programlisting>
</section>
</section>
<section id="i1009888" pagebreak="yes">
<title>RUNNINGCOUNT Function</title>
<indexterm><primary>Sequence functions</primary><secondary>RUNNINGCOUNT</secondary>
</indexterm>
<para>The RUNNINGCOUNT function is a sequence function that returns
the number of rows up to and including the current row of an intermediate
result table ordered by a SEQUENCE BY clause in a SELECT statement.
See <xref linkend="i1004369" role="select:quotedtitle page"/>.</para>
<indexterm><primary>RUNNINGCOUNT function</primary><secondary>syntax
diagram of</secondary></indexterm>
<para>RUNNINGCOUNT is a Trafodion SQL extension.</para>
<programlisting>RUNNINGCOUNT {(*) | (<replaceable>column-expression</replaceable
>)}
</programlisting>
<variablelist>
<varlistentry><term>*</term>
<listitem><para>as an argument causes RUNNINGCOUNT(*) to return the
number of rows in the intermediate result table up to and including
the current row.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>column-expression</replaceable> </term>
<listitem><para>specifies a derived column determined by the evaluation
of the column expression. If <replaceable>column-expression</replaceable
> is the argument, RUNNINGCOUNT returns the number of rows containing
nonnull values of <replaceable>column-expression</replaceable> in
the intermediate result table up to and including the current row.</para>
</listitem>
</varlistentry>
</variablelist>
<section>
<title>Considerations for RUNNINGCOUNT</title>
<section>
<title>No DISTINCT Clause</title>
<para>The RUNNINGCOUNT sequence function is defined differently from
the COUNT aggregate function. If you specify DISTINCT for the COUNT
aggregate function, duplicate values are eliminated before COUNT is
applied. You cannot specify DISTINCT for the RUNNINGCOUNT sequence
function; duplicate values are counted.</para>
</section>
</section>
<section>
<title>Example of RUNNINGCOUNT</title>
<indexterm><primary>RUNNINGCOUNT function</primary><secondary>examples
of</secondary></indexterm>
<para>Return the number of rows that include nonnull values of I1
up to and including the current row:</para>
<programlisting>
SELECT RUNNINGCOUNT (I1) AS COUNT_I1
FROM mining.seqfcn
SEQUENCE BY TS;

COUNT_I1
------------
           1
           2
           2
           3
           4

--- 5 row(s) selected.
</programlisting>
</section>
</section>
<section id="i1009943" pagebreak="yes">
<title>RUNNINGMAX Function</title>
<indexterm><primary>Sequence functions</primary><secondary>RUNNINGMAX</secondary>
</indexterm>
<para>The RUNNINGMAX function is a sequence function that returns
the maximum of values of a column up to and including the current
row of an intermediate result table ordered by a SEQUENCE BY clause
in a SELECT statement. See <xref linkend="i1004369"
role="select:quotedtitle page"/>.</para>
<indexterm><primary>RUNNINGMAX function</primary><secondary>syntax
diagram of</secondary></indexterm>
<para>RUNNINGMAX is a Trafodion SQL extension.</para>
<programlisting>RUNNINGMAX (<replaceable>column-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>column-expression</replaceable> </term>
<listitem><para>specifies a derived column determined by the evaluation
of the column expression. RUNNINGMAX returns the maximum of values
of <replaceable>column-expression</replaceable> up to and including
the current row.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of RUNNINGMAX</title>
<indexterm><primary>RUNNINGMAX function</primary><secondary>examples
of</secondary></indexterm>
<para>Return the maximum of values of I1 up to and including the current
row:</para>
<programlisting>
SELECT RUNNINGMAX (I1) AS MAX_I1
FROM mining.seqfcn
SEQUENCE BY TS;

MAX_I1
------------
        6215 
       28174 
       28174 
       28174 
       28174 

--- 5 row(s) selected.
</programlisting>
</section>
</section>
<section id="i1009991" pagebreak="yes">
<title>RUNNINGMIN Function</title>
<indexterm><primary>Sequence functions</primary><secondary>RUNNINGMIN</secondary>
</indexterm>
<para>The RUNNINGMIN function is a sequence function that returns
the minimum of values of a column up to and including the current
row of an intermediate result table ordered by a SEQUENCE BY clause
in a SELECT statement. See <xref linkend="i1004369"
role="select:quotedtitle page"/>.</para>
<indexterm><primary>RUNNINGMIN function</primary><secondary>syntax
diagram of</secondary></indexterm>
<para>RUNNINGMIN is a Trafodion SQL extension.</para>
<programlisting>RUNNINGMIN (<replaceable>column-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>column-expression</replaceable> </term>
<listitem><para>specifies a derived column determined by the evaluation
of the column expression. RUNNINGMIN returns the minimum of values
of <replaceable>column-expression</replaceable> up to and including
the current row.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of RUNNINGMIN</title>
<indexterm><primary>RUNNINGMIN function</primary><secondary>examples
of</secondary></indexterm>
<para>Return the minimum of values of I1 up to and including the current
row:</para>
<programlisting>
SELECT RUNNINGMIN (I1) AS MIN_I1
FROM mining.seqfcn
SEQUENCE BY TS;

MIN_I1
------------
        6215 
        6215 
        6215 
        4597 
        4597 

--- 5 row(s) selected.
</programlisting>
</section>
</section>
<section id="i1051696">
<title>RUNNINGRANK Function</title>
<para>See the <xref linkend="i1053583" role="select:quotedtitle page"
/>.</para>
</section>
<section id="i1010039" pagebreak="yes">
<title>RUNNINGSTDDEV Function</title>
<indexterm><primary>Sequence functions</primary><secondary>RUNNINGSTDDEV</secondary>
</indexterm>
<para>The RUNNINGSTDDEV function is a sequence function that returns
the standard deviation of nonnull values of a column up to and including
the current row of an intermediate result table ordered by a SEQUENCE
BY clause in a SELECT statement. See <xref linkend="i1004369"
role="select:quotedtitle page"/>.</para>
<indexterm><primary>RUNNINGSTDDEV function</primary><secondary>syntax
diagram of</secondary></indexterm>
<para>RUNNINGSTDDEV is a Trafodion SQL extension.</para>
<programlisting>RUNNINGSTDDEV (<replaceable>column-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>column-expression</replaceable> </term>
<listitem><para>specifies a derived column determined by the evaluation
of the column expression. RUNNINGSTDDEV returns the standard deviation
of nonnull values of <replaceable>column-expression</replaceable> up
to and including the current row.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Considerations for RUNNINGSTDDEV</title>
<section>
<title>Equivalent Result</title>
<indexterm><primary>RUNNINGSTDDEV function</primary><secondary>equivalent
definition</secondary></indexterm>
<para>The result of RUNNINGSTDDEV is equivalent to:</para>
<programlisting>SQRT(RUNNINGVARIANCE(<replaceable>column-expression</replaceable
>))
</programlisting>
</section>
</section>
<section>
<title>Examples of RUNNINGSTDDEV</title>
<indexterm><primary>RUNNINGSTDDEV function</primary><secondary>examples
of</secondary></indexterm>
<para>Return the standard deviation of nonnull values of I1 up to
and including the current row:</para>
<programlisting>SELECT RUNNINGSTDDEV (I1) AS STDDEV_I1
FROM mining.seqfcn
SEQUENCE BY TS;

STDDEV_I1
-------------------------
 0.00000000000000000E+000
 1.55273578080753976E+004
 1.48020166531456112E+004
 1.25639147428923072E+004
 1.09258501408357232E+004

--- 5 row(s) selected.
</programlisting>
<para>You can use the CAST function for display purposes. For example:</para>
<programlisting>SELECT CAST(RUNNINGSTDDEV (I1) AS DEC (18,3))
FROM mining.seqfcn
SEQUENCE BY TS;

(EXPR)
--------------------
                .000
           15527.357
           14802.016
           12563.914
           10925.850

--- 5 row(s) selected.
</programlisting>
</section>
</section>
<section id="i1010094" pagebreak="yes">
<title>RUNNINGSUM Function</title>
<indexterm><primary>Sequence functions</primary><secondary>RUNNINGSUM</secondary>
</indexterm>
<para>The RUNNINGSUM function is a sequence function that returns
the sum of nonnull values of a column up to and including the current
row of an intermediate result table ordered by a SEQUENCE BY clause
in a SELECT statement. See <xref linkend="i1004369"
role="select:quotedtitle page"/>.</para>
<indexterm><primary>RUNNINGSUM function</primary><secondary>syntax
diagram of</secondary></indexterm>
<para>RUNNINGSUM is a Trafodion SQL extension.</para>
<programlisting>RUNNINGSUM (<replaceable>column-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>column-expression</replaceable> </term>
<listitem><para>specifies a derived column determined by the evaluation
of the column expression. RUNNINGSUM returns the sum of nonnull values
of <replaceable>column-expression</replaceable> up to and including
the current row.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of RUNNINGSUM</title>
<indexterm><primary>RUNNINGSUM function</primary><secondary>examples
of</secondary></indexterm>
<para>Return the sum of nonnull values of I1 up to and including the
current row:</para>
<programlisting>SELECT RUNNINGSUM (I1) AS SUM_I1
FROM mining.seqfcn
SEQUENCE BY TS;

SUM_I1
-------------------- 
                6215 
               34389 
               34389 
               38986 
               50952 

--- 5 row(s) selected.
</programlisting>
</section>
</section>
<section id="i1010142" pagebreak="yes">
<title>RUNNINGVARIANCE Function</title>
<indexterm><primary>Sequence functions</primary><secondary>RUNNINGVARIANCE</secondary>
</indexterm>
<para>The RUNNINGVARIANCE function is a sequence function that returns
the variance of nonnull values of a column up to and including the
current row of an intermediate result table ordered by a SEQUENCE
BY clause in a SELECT statement. See <xref linkend="i1004369"
role="select:quotedtitle page"/>.</para>
<indexterm><primary>RUNNINGVARIANCE function</primary><secondary>syntax
diagram of</secondary></indexterm>
<para>RUNNINGVARIANCE is a Trafodion SQL extension.</para>
<programlisting>RUNNINGVARIANCE (<replaceable>column-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>column-expression</replaceable> </term>
<listitem><para>specifies a derived column determined by the evaluation
of the column expression. RUNNINGVARIANCE returns the variance of
nonnull values of <replaceable>column-expression</replaceable> up
to and including the current row.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of RUNNINGVARIANCE</title>
<indexterm><primary>RUNNINGVARIANCE function</primary><secondary>examples
of</secondary></indexterm>
<para>Return the variance of nonnull values of I1 up to and including
the current row:</para>
<programlisting>SELECT RUNNINGVARIANCE (I1) AS VARIANCE_I1
FROM mining.seqfcn
SEQUENCE BY TS;

VARIANCE_I1
------------------------- 
 0.00000000000000000E+000 
 2.41098840499999960E+008 
 2.19099696999999968E+008 
 1.57851953666666640E+008 
 1.19374201299999980E+008 

--- 5 row(s) selected.
</programlisting>
<para>You can use the CAST function for display purposes. For example:</para>
<programlisting>SELECT CAST(RUNNINGVARIANCE (I1) AS DEC (18,3))
FROM mining.seqfcn
SEQUENCE BY TS;

(EXPR)
--------------------
                .000
       241098840.500
       219099697.000
       157851953.666
       119374201.299

--- 5 row(s) selected.
</programlisting>
</section>
</section>
<section id="i1010458" pagebreak="yes">
<title>SECOND Function</title>
<indexterm><primary>SECOND function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Datetime functions</primary>
<secondary>SECOND</secondary></indexterm>
<para>The SECOND function converts a TIME or TIMESTAMP expression
into an INTEGER value in the range 0 through 59 that represents the
corresponding second of the hour. </para>
<para>SECOND is a Trafodion SQL extension. </para>
<programlisting>SECOND (<replaceable>datetime-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>datetime-expression</replaceable
> </term>
<listitem><para>is an expression that evaluates to a datetime value
of type TIME or TIMESTAMP. See <xref
linkend="Datetime_Value_Expressions" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of SECOND</title>
<indexterm><primary>SECOND function</primary><secondary>examples of</secondary>
</indexterm>
<para>Return a NUMERIC value that represents the second of the hour
from the SHIP_TIMESTAMP column:</para>
<programlisting>SELECT start_date, ship_timestamp, SECOND(ship_timestamp)
FROM persnl.project
WHERE projcode = 1000;

Start/Date  Time/Shipped                (EXPR)       
----------  --------------------------  -----------  
2008-04-10  2008-04-21 08:15:00.000000      .000000  

</programlisting>
</section>
</section>
<section condition="hidden" id="SessionUserFunction" pagebreak="yes">
<title>SESSION_USER Function</title>
<indexterm><primary>SESSION_USER function</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>Other functions
and expressions</primary><secondary>SESSION_USER</secondary></indexterm>
<para>The SESSION_USER function returns the database user name of
the authenticated user who started the session and invoked the function.
The values returned are string data type VARCHAR(128). </para>
<programlisting>SESSION_USER</programlisting>
<section>
<title>Considerations for SESSION_USER</title>
<indexterm><primary>SESSION_USER function</primary><secondary>considerations
for</secondary></indexterm>
<para>The SESSION_USER function returns the database-user name in
ISO8859-1 encoding.</para>
<para>In previous releases, the SESSION_USER, CURRENT_USER, and USER
functions were equivalent, that is, they returned the same value,
which was the database-user name of the user who invoked the function.
This was true even if the functions were used inside a stored procedure
in Java (SPJ). </para>
<para>In this release, the CURRENT_USER and USER functions can return
different values than the SESSION_USER function, if an SPJ is defined
with the EXTERNAL SECURITY DEFINER attribute. In the case of SPJs
created as DEFINER, the SESSION_USER function still returns the database-user
name of the user who invoked the function. However, the CURRENT_USER
and USER functions will return the database-user name of the owner
of the SPJ. This database-user name is used for authorizing SQL operations
in the SPJ. In all cases (EXTERNAL SECURITY DEFINER or INVOKER), the
SESSION_USER function will always return the database-user name of
the user who invoked the function.</para>
<para>For information about SPJs and DEFINER and INVOKER rights, see
the <citetitle>Trafodion Guide to Stored Procedures in Java</citetitle
>.</para>
<para condition="hidden">For information about SPJs and DEFINER and
INVOKER rights, see the <citetitle>Trafodion Guide to Stored Procedures
in Java</citetitle>.</para>
</section>
<section>
<title>Example of SESSION_USER</title>
<indexterm><primary>SESSION_USER function</primary><secondary>example
of</secondary></indexterm>
<itemizedlist>
<listitem><para>This example shows the logon by a user registered
in the database as <literal>TSHAW</literal>:</para>
<screen>
>>SELECT SESSION_USER FROM (values(1)) x(a);
(EXPR)
-------------------------
TSHAW
--- 1 row(s) selected</screen>
</listitem>
<listitem condition="hidden"><para>The next example uses this Java
method <literal>sessionUser()</literal>, in an SPJ, which uses the
SESSION_USER function to retrieve the database-user name.</para>
<screen>
public static void sessionUser( ResultSet [] rs )
                            throws SQLException
{

  Connection conn = DriverManager.getConnection("jdbc:default:connection"); 
  Statement stmt = conn.createStatement() ;
  rs[0] = stmt.executeQuery("SELECT SESSION_USER FROM (VALUES(1)) X(A);"); 

}
</screen>
<itemizedlist>
<listitem><para>In this example, database user JSMITH registers the
SPJ with the name GETUSER. He sets the EXTERNAL SECURITY attribute
to INVOKER. Database user TSHAW (who has the EXECUTE privilege) executes
the CALL statement. The following output is returned, which shows
the database-user name of the user who invoked the SPJ:</para>
<screen>
CALL GETUSER();
(EXPR)
----------------------
TSHAW
. . . 
--- 1 row(s) selected.</screen>
</listitem>
<listitem><para>The CALL statement returns the same output (database-user
name of the user who invoked the SPJ) even if the SPJ is defined with
EXTERNAL SECURITY DEFINER.</para></listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1010532" pagebreak="yes">
<title>SIGN Function</title>
<indexterm><primary>SIGN function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Math functions</primary>
<secondary>SIGN</secondary></indexterm>
<para>The SIGN function returns an indicator of the sign of a numeric
value expression. If the value is less than zero, the function returns
-1 as the indicator. If the value is zero, the function returns 0.
If the value is greater than zero, the function returns 1.</para>
<para>SIGN is a Trafodion SQL extension.</para>
<programlisting>SIGN (<replaceable>numeric-expression</replaceable
>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>numeric-expression</replaceable> </term>
<listitem><para>is an SQL numeric value expression that specifies
the value for the argument of the SIGN function. See <xref
linkend="i1011132" role="select:quotedtitle page"/>. </para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of SIGN</title>
<indexterm><primary>SIGN function</primary><secondary>examples of</secondary>
</indexterm>
<itemizedlist>
<listitem><para>Return the value –1:</para>
<programlisting>SIGN (-20 + 12)
</programlisting>
</listitem>
<listitem><para>Return the value 0:</para>
<programlisting>SIGN (-20 + 20)
</programlisting>
</listitem>
<listitem><para>Return the value 1:</para>
<programlisting>SIGN (-20 + 22)
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1010581" pagebreak="yes">
<title>SIN Function</title>
<indexterm><primary>SIN function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Math functions</primary>
<secondary>SIN</secondary></indexterm>
<para>The SIN function returns the sine of a numeric value expression,
where the expression is an angle expressed in radians. </para>
<para>SIN is a Trafodion SQL extension.</para>
<programlisting>SIN (<replaceable>numeric-expression</replaceable
>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>numeric-expression</replaceable> </term>
<listitem><para>is an SQL numeric value expression that specifies
the value for the argument of the SIN function. See <xref
linkend="i1011132" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of SIN</title>
<indexterm><primary>SIN function</primary><secondary>examples of</secondary>
</indexterm>
<para>This function returns the value 3.42052233254419840E-001, or
approximately 0.3420, the sine of 0.3491 (which is 20 degrees):</para>
<programlisting>SIN (0.3491)
</programlisting>
</section>
</section>
<section id="i1010611" pagebreak="yes">
<title>SINH Function</title>
<indexterm><primary>SINH function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Math functions</primary>
<secondary>SINH</secondary></indexterm>
<para>The SINH function returns the hyperbolic sine of a numeric value
expression, where the expression is an angle expressed in radians. </para>
<para>SINH is a Trafodion SQL extension.</para>
<programlisting>SINH (<replaceable>numeric-expression</replaceable
>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>numeric-expression</replaceable> </term>
<listitem><para>is an SQL numeric value expression that specifies
the value for the argument of the SINH function. See <xref
linkend="i1011132" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of SINH</title>
<indexterm><primary>SINH function</primary><secondary>examples of</secondary>
</indexterm>
<para>This function returns the value 1.60191908030082560E+000, or
approximately 1.6019, the hyperbolic sine of 1.25:</para>
<programlisting>SINH (1.25)
</programlisting>
</section>
</section>
<section id="i1013489" pagebreak="yes">
<title>SPACE Function</title>
<indexterm><primary>SPACE function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Character string functions</primary>
<secondary>SPACE</secondary></indexterm>
<para>The SPACE function returns a character string consisting of
a specified number of spaces, each of which is 0x20 or 0x0020, depending
on the chosen character set.</para>
<para>SPACE is a Trafodion SQL extension. </para>
<programlisting>SPACE (<replaceable>length</replaceable> [,<replaceable
>char-set-name</replaceable>]) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>length</replaceable> </term>
<listitem><para>specifies the number of characters to be returned.
The number <replaceable>count</replaceable> must be a value greater
than or equal to zero of exact numeric data type and with a scale
of zero. <replaceable>length</replaceable> cannot exceed 32768 for
the ISO8859-1 or UTF8 character sets. </para></listitem>
</varlistentry>
<varlistentry><term><replaceable>char-set-name</replaceable></term>
<listitem><para>can be ISO88591 or UTF8. If you do not specify this
second argument, the default is the default character set.</para><para
>The returned character string will be of data type VARCHAR associated
with the character set specified by <replaceable>char-set-name</replaceable
>.</para>
</listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of SPACE</title>
<indexterm><primary>SPACE function</primary><secondary>examples of</secondary>
</indexterm>
<para>Return three spaces:</para>
<programlisting>SPACE (3)
</programlisting>
</section>
</section>
<section id="i1010707" pagebreak="yes">
<title>SQRT Function</title>
<indexterm><primary>SQRT function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Math functions</primary>
<secondary>SQRT</secondary></indexterm>
<para>The SQRT function returns the square root of a numeric value
expression.</para>
<para>SQRT is a Trafodion SQL extension.</para>
<programlisting>SQRT (<replaceable>numeric-expression</replaceable
>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>numeric-expression</replaceable> </term>
<listitem><para>is an SQL numeric value expression that specifies
the value for the argument of the SQRT function. The value of the
argument must not be a negative number. See <xref linkend="i1011132"
role="select:quotedtitle page"/>. </para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of SQRT</title>
<indexterm><primary>SQRT function</primary><secondary>examples of</secondary>
</indexterm>
<para>This function returns the value 5.19615242270663232E+000, or
approximately 5.196:</para>
<programlisting>SQRT (27)
</programlisting>
</section>
</section>
<section id="i1010737" pagebreak="yes">
<title>STDDEV Function</title>
<itemizedlist>
<listitem><para><xref linkend="i1010762" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1010781" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>STDDEV function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Aggregate functions</primary>
<secondary>STDDEV</secondary></indexterm>
<para>STDDEV is an aggregate function that returns the standard deviation
of a set of numbers.</para>
<para>STDDEV is a Trafodion SQL extension. </para>
<programlisting>STDDEV ([ALL | DISTINCT] <replaceable>expression</replaceable
> [,<replaceable>weight</replaceable>]) 
</programlisting>
<indexterm><primary>DISTINCT clause</primary><secondary>STDDEV function
use of</secondary></indexterm><indexterm><primary>STDDEV function</primary>
<secondary>DISTINCT clause within</secondary></indexterm>
<variablelist>
<varlistentry><term>ALL | DISTINCT </term>
<listitem><para>specifies whether duplicate values are included in
the computation of the STDDEV of the <replaceable>expression</replaceable
>. The default option is ALL, which causes duplicate values to be
included. If you specify DISTINCT, duplicate values are eliminated
before the STDDEV function is applied. If DISTINCT is specified, you
cannot specify <replaceable>weight</replaceable>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>expression</replaceable> </term>
<listitem><para>specifies a numeric value expression that determines
the values for which to compute the standard deviation. The <replaceable
>expression</replaceable> cannot contain an aggregate function or
a subquery. The DISTINCT clause specifies that the STDDEV function
operates on distinct values from the one-column table derived from
the evaluation of <replaceable>expression</replaceable>. </para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>weight</replaceable> </term>
<listitem><para>specifies a numeric value expression that determines
the weights of the values for which to compute the standard deviation. <replaceable
>weight</replaceable> cannot contain an aggregate function or a subquery. <replaceable
>weight</replaceable> is defined on the same table as <replaceable
>expression</replaceable>. The one-column table derived from the evaluation
of <replaceable>expression</replaceable> and the one-column table
derived from the evaluation of <replaceable>weight</replaceable> must
have the same cardinality.</para></listitem>
</varlistentry>
</variablelist>
<section id="i1010762">
<title>Considerations for STDDEV</title>
<section>
<title>Definition of STDDEV</title>
<indexterm><primary>STDDEV function</primary><secondary>statistical
definition of</secondary></indexterm>
<para>The standard deviation of a value expression is defined to be
the square root of the variance of the expression. See <xref
linkend="i1013941" role="select:quotedtitle page"/>.</para>
<para>Because the definition of variance has <replaceable>N-1</replaceable
> in the denominator of the expression (if weight is not specified),
Trafodion SQL returns a system-defined default setting of zero (and
no error) if the number of rows in the table, or a group of the table,
is equal to 1. </para>
</section>
<section>
<title>Data Type of the Result</title>
<para>The data type of the result is always DOUBLE PRECISION.</para>
</section>
<section>
<title>Operands of the Expression</title>
<para>The expression includes columns from the rows of the SELECT
result table but cannot include an aggregate function. These are valid:</para>
<programlisting>STDDEV (SALARY)
STDDEV (SALARY * 1.1)
STDDEV (PARTCOST * QTY_ORDERED)
</programlisting>
</section>
<section>
<title>Nulls</title>
<para>STDDEV is evaluated after eliminating all nulls from the set.
If the result table is empty, STDDEV returns NULL. </para>
</section>
<section>
<title>FLOAT(54) and DOUBLE PRECISION Data</title>
<para>Avoid using large FLOAT(54) or DOUBLE PRECISION values as arguments
to STDDEV. If SUM(x * x) exceeds the value of 1.15792089237316192e77
during the computation of STDDEV(x), a numeric overflow occurs.</para>
</section>
</section>
<section id="i1010781">
<title>Examples of STDDEV</title>
<indexterm><primary>STDDEV function</primary><secondary>examples of</secondary>
</indexterm>
<itemizedlist>
<listitem><para>Compute the standard deviation of the salary of the
current employees:</para>
<programlisting>SELECT STDDEV(salary) AS StdDev_Salary 
FROM persnl.employee;

STDDEV_SALARY              
-------------------------  
 3.57174062500000000E+004  

--- 1 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Compute the standard deviation of the cost of parts
in the current inventory:</para>
<programlisting>SELECT STDDEV (price * qty_available)
FROM sales.parts;

(EXPR)
-------------------------
 7.13899499999999808E+006

--- 1 row(s) selected.
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1051783" pagebreak="yes">
<title>SUBSTRING/SUBSTR Function</title>
<indexterm><primary>SUBSTRING function</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>Character string
functions</primary><secondary>SUBSTRING/SUBSTR</secondary></indexterm>
<indexterm><primary>SUBSTR function</primary><secondary>syntax diagram
of</secondary></indexterm>
<para>The SUBSTRING function extracts a substring out of a given character
expression. It returns a character string of data type VARCHAR, with
a maximum length equal to the smaller of these two:</para>
<itemizedlist>
<listitem><para>The fixed length of the input string (for CHAR-type
strings) or the maximum variable length (for VARCHAR-type strings)</para>
</listitem>
<listitem><para>The value of the length argument (when a constant
is specified) or 32708 (when a non-constant is specified)</para>
</listitem>
</itemizedlist>
<para>SUBSTR is equivalent to SUBSTRING.</para>
<programlisting>SUBSTRING (<replaceable>character-expr</replaceable
> FROM <replaceable>start-position</replaceable> [FOR <replaceable
>length</replaceable>]) 
</programlisting>
<para>or:</para>
<programlisting>SUBSTRING (<replaceable>character-expr</replaceable
>,<replaceable>start-position</replaceable>[,<replaceable>length</replaceable
>])</programlisting>
<variablelist>
<varlistentry><term><replaceable>character-expr</replaceable> </term>
<listitem><para>specifies the source string from which to extract
the substring. The source string is an SQL character value expression.
The operand is the result of evaluating <replaceable>character-expr</replaceable
>. See <xref linkend="i1010765" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>start-position</replaceable> </term>
<listitem><para>specifies the starting position <replaceable>start-position</replaceable
> within <replaceable>character-expr</replaceable> at which to start
extracting the substring. <replaceable>start-position</replaceable
> must be a value with an exact numeric data type and a scale of zero.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>length</replaceable> </term>
<listitem><para>specifies the number of characters to extract from <replaceable
>character-expr</replaceable>. Keep in mind that every character,
including multibyte characters, counts as one character. <replaceable
>length</replaceable> is the length of the extracted substring and
must be a value greater than or equal to zero of exact numeric data
type and with a scale of zero. The <replaceable>length</replaceable
> field is optional, so if you do not specify the substring <replaceable
>length</replaceable>, all characters starting at <replaceable>start-position</replaceable
> and continuing until the end of the character expression are returned.</para>
<para>The length field is optional. If you do not specify it, all
characters starting at <replaceable>start-position</replaceable> and
continuing until the end of the <replaceable>character-expr</replaceable
> are returned.</para>
</listitem>
</varlistentry>
</variablelist>
<section>
<title>Alternative Forms</title>
<itemizedlist>
<listitem><para>The SUBSTRING function treats SUBSTRING( <replaceable
>string</replaceable> FOR <replaceable>int</replaceable> ) equivalent
to SUBSTRING( <replaceable>string</replaceable> FROM 1 FOR <replaceable
>int</replaceable> ). The Trafodion database software already supports
the ANSI standard form as:</para>
<programlisting>SUBSTRING(<replaceable>string</replaceable> FROM <replaceable
>int</replaceable>  [ FOR <replaceable>int</replaceable> ])
</programlisting>
</listitem>
<listitem><para>The SUBSTRING function treats SUBSTRING (<replaceable
>string</replaceable>, <literal>Fromint</literal>) equivalent to SUBSTRING(<replaceable
>string</replaceable> FROM <replaceable>Fromint</replaceable>). The
Trafodion database software already supports SUBSTRING (<replaceable
>string</replaceable>, <replaceable>Fromint</replaceable>, <replaceable
>Forint</replaceable>) as equivalent to the ANSI standard form:</para>
<programlisting>SUBSTRING(<replaceable>string</replaceable> FROM <replaceable
>Fromint</replaceable> FOR <replaceable>Forint</replaceable>)
</programlisting>
</listitem>
</itemizedlist>
</section>
<section>
<title>Considerations for SUBSTRING/SUBSTR</title>
<section>
<title>Requirements for the Expression, Length, and Start Position</title>
<indexterm><primary>SUBSTR function</primary><secondary>operand requirements</secondary>
</indexterm><indexterm><primary>SUBSTRING function</primary><secondary
>operand requirements</secondary></indexterm>
<itemizedlist>
<listitem><para>The data types of the substring length and the start
position must be numeric with a scale of zero. Otherwise, an error
is returned.</para></listitem>
<listitem><para>If the sum of the start position and the substring
length is greater than the length of the character expression, the
substring from the start position to the end of the string is returned.</para>
</listitem>
<listitem><para>If the start position is greater than the length of
the character expression, an empty string ('') is returned.</para>
</listitem>
<listitem><para>The resulting substring is always of type VARCHAR.
If the source character string is an upshifted CHAR or VARCHAR string,
the result is an upshifted VARCHAR type.</para></listitem>
</itemizedlist>
</section>
</section>
<section>
<title>Examples of SUBSTRING/SUBSTR</title>
<indexterm><primary>SUBSTRING function</primary><secondary>examples
of</secondary></indexterm><indexterm><primary>SUBSTR function</primary>
<secondary>examples of</secondary></indexterm>
<itemizedlist>
<listitem><para>Extract <literal>'Ro'</literal>:</para>
<programlisting>SUBSTRING('Robert John Smith' FROM 0 FOR 3)
SUBSTR('Robert John Smith' FROM 0 FOR 3)
</programlisting>
</listitem>
<listitem><para>Extract 'John':</para>
<programlisting>SUBSTRING ('Robert John Smith' FROM 8 FOR 4)
SUBSTR ('Robert John Smith' FROM 8 FOR 4)
</programlisting>
</listitem>
<listitem><para>Extract 'John Smith':</para>
<programlisting>SUBSTRING ('Robert John Smith' FROM 8)
SUBSTR ('Robert John Smith' FROM 8)
</programlisting>
</listitem>
<listitem><para>Extract 'Robert John Smith': </para>
<programlisting>SUBSTRING ('Robert John Smith' FROM 1 FOR 17)
SUBSTR ('Robert John Smith' FROM 1 FOR 17)
</programlisting>
</listitem>
<listitem><para>Extract 'John Smith':</para>
<programlisting>SUBSTRING ('Robert John Smith' FROM 8 FOR 15)
SUBSTR ('Robert John Smith' FROM 8 FOR 15)
</programlisting>
</listitem>
<listitem><para>Extract 'Ro':</para>
<programlisting>SUBSTRING ('Robert John Smith' FROM -2 FOR 5)
SUBSTR ('Robert John Smith' FROM -2 FOR 5)
</programlisting>
</listitem>
<listitem><para>Extract an empty string '':</para>
<programlisting>SUBSTRING ('Robert John Smith' FROM 8 FOR 0)
SUBSTR ('Robert John Smith' FROM 8 FOR 0)
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1010970" pagebreak="yes">
<title>SUM Function</title>
<indexterm><primary>SUM function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Aggregate functions</primary>
<secondary>SUM</secondary></indexterm>
<para>SUM is an aggregate function that returns the sum of a set of
numbers. </para>
<programlisting>SUM ([ALL | DISTINCT] <replaceable>expression</replaceable
>) 
</programlisting>
<indexterm><primary>DISTINCT clause</primary><secondary>SUM function
use of</secondary></indexterm><indexterm><primary>SUM function</primary>
<secondary>DISTINCT clause within</secondary></indexterm>
<variablelist>
<varlistentry><term>ALL | DISTINCT </term>
<listitem><para>specifies whether duplicate values are included in
the computation of the SUM of the <replaceable>expression</replaceable
>. The default option is ALL, which causes duplicate values to be
included. If you specify DISTINCT, duplicate values are eliminated
before the SUM function is applied.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>expression</replaceable> </term>
<listitem><para>specifies a numeric or interval value expression that
determines the values to sum. The <replaceable>expression</replaceable
> cannot contain an aggregate function or a subquery. The DISTINCT
clause specifies that the SUM function operates on distinct values
from the one-column table derived from the evaluation of <replaceable
>expression</replaceable>. All nulls are eliminated before the function
is applied to the set of values. If the result table is empty, SUM
returns NULL. </para><para>See <xref linkend="i1013683"
role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
</variablelist>
<section>
<title>Considerations for SUM</title>
<section>
<title>Data Type and Scale of the Result</title>
<para>The data type of the result depends on the data type of the
argument. If the argument is an exact numeric type, the result is
LARGEINT. If the argument is an approximate numeric type, the result
is DOUBLE PRECISION. If the argument is INTERVAL data type, the result
is INTERVAL with the same precision as the argument. The scale of
the result is the same as the scale of the argument. If the argument
has no scale, the result is truncated.</para>
</section>
<section>
<title>Operands of the Expression</title>
<para>The expression includes columns from the rows of the SELECT
result table—but cannot include an aggregate function. The valid expressions
are:</para>
<programlisting>SUM (SALARY)
SUM (SALARY * 1.1)
SUM (PARTCOST * QTY_ORDERED)
</programlisting>
</section>
</section>
<section>
<title>Example of SUM</title>
<indexterm><primary>SUM function</primary><secondary>examples of</secondary>
</indexterm>
<para>Compute the total value of parts in the current inventory:</para>
<programlisting>SELECT SUM (price * qty_available) 
FROM sales.parts; 

(EXPR)
---------------------
         117683505.96

--- 1 row(s) selected.
</programlisting>
</section>
</section>
<section id="i1011046" pagebreak="yes">
<title>TAN Function</title>
<indexterm><primary>TAN function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Math functions</primary>
<secondary>TAN</secondary></indexterm>
<para>The TAN function returns the tangent of a numeric value expression,
where the expression is an angle expressed in radians. </para>
<para>TAN is a Trafodion SQL extension.</para>
<programlisting>TAN (<replaceable>numeric-expression</replaceable
>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>numeric-expression</replaceable> </term>
<listitem><para>is an SQL numeric value expression that specifies
the value for the argument of the TAN function. See <xref
linkend="i1011132" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of TAN</title>
<indexterm><primary>TAN function</primary><secondary>examples of</secondary>
</indexterm>
<para>This function returns the value 3.64008908293626880E-001, or
approximately 0.3640, the tangent of 0.3491 (which is 20 degrees):</para>
<programlisting>TAN (0.3491)
</programlisting>
</section>
</section>
<section id="i1011076" pagebreak="yes">
<title>TANH Function</title>
<indexterm><primary>TANH function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Math functions</primary>
<secondary>TANH</secondary></indexterm>
<para>The TANH function returns the hyperbolic tangent of a numeric
value expression, where the expression is an angle expressed in radians. </para>
<para>TANH is a Trafodion SQL extension.</para>
<programlisting>TANH (<replaceable>numeric-expression</replaceable
>) 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>numeric-expression</replaceable> </term>
<listitem><para>is an SQL numeric value expression that specifies
the value for the argument of the TANH function. See <xref
linkend="i1011132" role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of TANH</title>
<indexterm><primary>TANH function</primary><secondary>examples of</secondary>
</indexterm>
<itemizedlist>
<listitem><para>This function returns the value 8.48283639957512960E-001
or approximately 0.8483, the hyperbolic tangent of 1.25:</para>
<programlisting>TANH (1.25)
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1011114" pagebreak="yes">
<title>THIS Function</title>
<indexterm><primary>Sequence functions</primary><secondary>THIS</secondary>
</indexterm>
<para>The THIS function is a sequence function that is used in the
ROWS SINCE function to distinguish between the value of the column
in the current row and the value of the column in previous rows (in
an intermediate result table ordered by a SEQUENCE BY clause in a
SELECT statement). See <xref linkend="i1009711"
role="select:quotedtitle page"/>.</para>
<indexterm><primary>THIS function</primary><secondary>syntax diagram
of</secondary></indexterm>
<para>THIS is a Trafodion SQL extension.</para>
<programlisting>THIS (<replaceable>column-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>column-expression</replaceable> </term>
<listitem><para>specifies a derived column determined by the evaluation
of the column expression. If the value of the expression is null,
THIS returns null.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Considerations for THIS</title>
<section>
<title>Counting the Rows</title>
<para>You can use the THIS function only within the ROWS SINCE function.
For each row, the ROWS SINCE condition is evaluated in two steps: </para>
<procedure>
<step><para>The expression for THIS is evaluated for the current row.
This value becomes a constant.</para></step>
<step><para>The condition is evaluated for the result table, using
a combination of the THIS constant and the data for each row in the
result table, starting with the previous row as row 1 (up to the maximum
number of rows or the size of the result table). </para></step>
</procedure>
<para>If a row is reached where the condition is true, ROWS SINCE
returns the number of rows counted so far. Otherwise, if the condition
is never true within the result table being considered, ROWS SINCE
returns null. Trafodion SQL then goes to the next row as the new current
row and the THIS constant is reevaluated.</para>
</section>
</section>
<section>
<title>Example of THIS</title>
<indexterm><primary>THIS function</primary><secondary>examples of</secondary>
</indexterm>
<para>Return the number of rows since the condition I1 less than a
previous row became true:</para>
<programlisting>SELECT ROWS SINCE (THIS(I1) &lt; I1) AS ROWS_SINCE_THIS 
FROM mining.seqfcn
SEQUENCE BY TS;

ROWS_SINCE_THIS
---------------
              ?
              ?
              1
              1
              ?

--- 5 row(s) selected.
</programlisting>
</section>
</section>
<section id="TIMESTAMPADD_Function" pagebreak="yes">
<title>TIMESTAMPADD Function</title>
<indexterm><primary>TIMESTAMPADD function</primary><secondary>description</secondary>
</indexterm><indexterm><primary>Datetime functions</primary><secondary
>TIMESTAMPADD</secondary></indexterm>
<para>The TIMESTAMPADD function adds the interval of time specified
by <replaceable>interval-ind</replaceable> and <replaceable>num_expr</replaceable
> to <replaceable>datetime_expr</replaceable>. If the specified interval
is in years, months, or quarters and the resulting date is not a valid
date, the day will be rounded down to the last day of the result month.
The type of the <replaceable>datetime_expr</replaceable> is returned
except when the <replaceable>interval-ind</replaceable> contains any
time component, in which case a TIMESTAMP is returned.</para>
<para>TIMESTAMPADD is a Trafodion SQL extension.</para>
<para><screen>TIMESTAMPADD (<replaceable>interval-ind</replaceable
>, <replaceable>num_expr</replaceable>, <replaceable>datetime_expr</replaceable
>)</screen></para>
<variablelist>
<varlistentry><term><replaceable>interval-ind</replaceable></term>
<listitem><para>is SQL_TSI_YEAR, SQL_TSI_MONTH, SQL_TSI_DAY, SQL_TSI_HOUR,
SQL_TSI_MINUTE, SQL_TSI_SECOND, SQL_TSI_QUARTER, or SQL_TSI_WEEK</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>num_expr</replaceable></term>
<listitem><para>is an SQL exact numeric value expression that specifies
how many <replaceable>interval-ind</replaceable> units of time are
to be added to <replaceable>datetime_expr</replaceable>. If <replaceable
>num_expr</replaceable> has a fractional portion, it is ignored. If <replaceable
>num_expr</replaceable> is negative, the return value precedes <replaceable
>datetime_expr</replaceable> by the specified amount of time. </para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>datetime_expr</replaceable></term>
<listitem><para>is an expression that evaluates to a datetime value
of type DATE or TIMESTAMP. The type of the <replaceable>datetime_expr</replaceable
> is returned except when the <replaceable>interval-ind</replaceable
> contains any time component, in which case a TIMESTAMP is returned.</para>
</listitem>
</varlistentry>
</variablelist>
<section id="Examples_of_TIMESTAMPADD">
<title>Examples of TIMESTAMPADD</title>
<indexterm><primary>TIMESTAMPADD function</primary><secondary>examples</secondary>
</indexterm>
<itemizedlist>
<listitem><para>This function adds seven days to the date specified
in <replaceable>start-date</replaceable>:<screen>TIMESTAMPADD (SQL_TSI_DAY, 7, <replaceable
>start-date</replaceable>)</screen></para></listitem>
<listitem><para>This function returns the value <literal>DATE '2008–03–06'</literal
>:</para>
<screen>TIMESTAMPADD (SQL_TSI_WEEK, 1, DATE '2008-02-28')</screen>
</listitem>
<listitem><para>This function returns the value <literal>DATE '1999–02–28'</literal
>:</para>
<screen>TIMESTAMPADD (SQL_TSI_YEAR, -1, DATE '2000-02-29')</screen>
</listitem>
<listitem><para>This function returns the value <literal>TIMESTAMP
'2003–02–28 13:27:35'</literal>:</para>
<screen>TIMESTAMPADD (SQL_TSI_MONTH, -12, TIMESTAMP '2004-02-29 13:27:35')</screen>
</listitem>
<listitem><para>This function returns the value <literal>TIMESTAMP
'2004–02–28 13:27:35'</literal>:</para>
<screen>TIMESTAMPADD (SQL_TSI_MONTH, 12, TIMESTAMP '2003-02-28 13:27:35')</screen>
</listitem>
<listitem><para>This function returns the value <literal>DATE '2008–06–30'</literal
>:</para>
<screen>TIMESTAMPADD (SQL_TSI_QUARTER, -2, DATE '2008-12-31')</screen>
</listitem>
<listitem><para>This function returns the value <literal>TIMESTAMP
'2008–06–30 23:59:55'</literal>:</para>
<screen>TIMESTAMPADD (SQL_TSI_SECOND, -5, DATE '2008-07-01')</screen>
</listitem>
</itemizedlist>
</section>
</section>
<section id="TIMESTAMPDIFF_Function" pagebreak="yes">
<title>TIMESTAMPDIFF Function</title>
<indexterm><primary>TIMESTAMPDIFF function</primary><secondary>description</secondary>
</indexterm><indexterm><primary>Datetime functions</primary><secondary
>TIMESTAMPDIFF</secondary></indexterm>
<para>The TIMESTAMPDIFF function returns the integer value for the
number of <replaceable>interval-ind</replaceable> units of time between <replaceable
>startdate</replaceable> and <replaceable>enddate</replaceable>. If <replaceable
>enddate</replaceable> precedes <replaceable>startdate</replaceable
>, the return value is negative or zero.</para>
<para><screen>TIMESTAMPDIFF (<replaceable>interval-ind</replaceable
>, <replaceable>startdate</replaceable>, <replaceable>enddate</replaceable
>)</screen></para>
<variablelist>
<varlistentry><term><replaceable>interval-ind</replaceable></term>
<listitem><para>is SQL_TSI_YEAR, SQL_TSI_MONTH, SQL_TSI_DAY, SQL_TSI_HOUR,
SQL_TSI_MINUTE, SQL_TSI_SECOND, SQL_TSI_QUARTER, or SQL_TSI_WEEK</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>startdate </replaceable>and <replaceable
>enddate</replaceable></term>
<listitem><para>are each of type DATE or TIMESTAMP</para></listitem>
</varlistentry>
</variablelist>
<para>The method of counting crossed boundaries such as days, minutes,
and seconds makes the result given by TIMESTAMPDIFF consistent across
all data types. The TIMESTAMPDIFF function makes these boundary assumptions:</para>
<itemizedlist>
<listitem><para>A year begins at the start of January 1.</para>
</listitem>
<listitem><para>A new quarter begins on January 1, April 1, July 1,
and October 1.</para></listitem>
<listitem><para>A week begins at the start of Sunday.</para></listitem>
<listitem><para>A day begins at midnight.</para></listitem>
</itemizedlist>
<para>The result is a signed integer value equal to the number of <replaceable
>interval-ind</replaceable> boundaries crossed between the first and
second date. For example, the number of weeks between Sunday, January
4 and Sunday, January 11 is 1. The number of months between March
31 and April 1 would be 1 because the month boundary is crossed from
March to April.</para>
<para>The TIMESTAMPDIFF function generates an error if the result
is out of range for integer values. For seconds, the maximum number
is equivalent to approximately 68 years. The TIMESTAMPDIFF function
generates an error if a difference in weeks is requested and one of
the two dates precedes January 7 of the year 0001.</para>
<section id="Examples_of_TIMESTAMPDIFF">
<title>Examples of TIMESTAMPDIFF</title>
<indexterm><primary>TIMESTAMPDIFF function</primary><secondary>examples</secondary>
</indexterm>
<itemizedlist>
<listitem><para>This function returns the value <literal>1</literal
> because a 1-second boundary is crossed even though the two timestamps
differ by only one microsecond:<screen>TIMESTAMPDIFF (SQL_TSI_SECOND, TIMESTAMP '2006-09-12 11:59:58.999999',
TIMESTAMP '2006-09-12 11:59:59.000000')</screen></para></listitem>
<listitem><para>This function returns the value <literal>0</literal
> because no 1-second boundaries are crossed:<screen>TIMESTAMPDIFF (SQL_TSI_YEAR, TIMESTAMP '2006-12-31 23:59:59.00000,
TIMESTAMP '2006-12-31 23:59:59.999999')</screen></para></listitem>
<listitem><para>This function returns the value <literal>1</literal
> because a year boundary is crossed:<screen>TIMESTAMPDIFF (SQL_TSI_YEAR, TIMESTAMP '2006-12-31 23:59:59.999999',
TIMESTAMP '2007-01-01 00:00:00.000000;)</screen></para></listitem>
<listitem><para>This function returns the value <literal>1</literal
> because a WEEK boundary is crossed:<screen>TIMESTAMPDIFF (SQL_TSI_WEEK, DATE '2006-01-01', DATE '2006-01-09')</screen
></para></listitem>
<listitem><para>This function returns the value of <literal>-29</literal
>:<screen>TIMESTAMPDIFF (SQL_TSI_DAY, DATE '2004-03-01', DATE '2004-02-01')</screen
></para></listitem>
</itemizedlist>
</section>
</section>
<section id="i1046197" pagebreak="yes">
<title>TRANSLATE Function</title>
<indexterm><primary>TRANSLATE function, syntax diagram of</primary>
</indexterm><indexterm><primary>Character string functions</primary>
<secondary>TRANSLATE</secondary></indexterm>
<para>The TRANSLATE function translates a character string from a
source character set to a target character set. The TRANSLATE function
changes both the character string data type and the character set
encoding of the string.</para>
<programlisting>TRANSLATE(<replaceable>character-value-expression</replaceable
> USING <replaceable>translation-name</replaceable>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>character-value-expression</replaceable
> </term>
<listitem><para>is a character string.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>translation-name</replaceable> </term>
<listitem><para>is one of these translation names:</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="4" tgroupstyle="DL1  desc list">
<thead>
<row><entry><emphasis role="bold">Translation Name</emphasis></entry>
<entry><emphasis role="bold">Source Character Set</emphasis></entry>
<entry><emphasis role="bold">Target Character Set</emphasis></entry>
<entry><emphasis role="bold">Comments</emphasis></entry></row>
</thead>
<tbody>
<row><entry>ISO88591TOUTF8</entry><entry>ISO88591</entry><entry>UTF8</entry>
<entry>Translates ISO8859-1 characters to UTF8 characters. No data
loss is possible.</entry></row>
<row><entry>UTF8TOISO88591</entry><entry>UTF8</entry><entry>ISO88591</entry>
<entry>Translates UTF8 characters to ISO88591 characters. Trafodion
SQL will display an error if it encounters a Unicode character that
cannot be converted to the target character set.</entry></row>
</tbody>
</tgroup>
</informaltable>
<para><replaceable>translation-name</replaceable> identifies the translation,
source and target character set. When you translate to the UTF8 character
set, no data loss is possible. However, when Trafodion SQL translates
a <replaceable>character-value-expression</replaceable> from UTF8,
it may be that certain characters cannot be converted to the target
character set. Trafodion SQL reports an error in this case. </para>
<para>Trafodion SQL returns a variable-length character string with
character repertoire equal to the character repertoire of the target
character set of the translation and the maximum length equal to the
fixed length or maximum variable length of the source <replaceable
>character-value-expression</replaceable>. </para>
<para>If you enter an illegal <replaceable>translation-name</replaceable
>, Trafodion SQL returns an error. </para>
<para>If the character set for <replaceable>character-value-expression</replaceable
> is different from the source character set as specified in the <replaceable
>translation-name</replaceable>, Trafodion SQL returns an error. </para>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="i1011168" pagebreak="yes">
<title>TRIM Function</title>
<indexterm><primary>TRIM function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Character string functions</primary>
<secondary>TRIM</secondary></indexterm>
<para>The TRIM function removes leading and trailing characters from
a character string. Every character, including multibyte characters,
is treated as one character.</para>
<programlisting>TRIM ([[<replaceable>trim-type</replaceable>] [<replaceable
>trim-char</replaceable>] FROM] <replaceable>trim-source</replaceable
>)

<replaceable>trim-type</replaceable> is:
   LEADING | TRAILING | BOTH 
</programlisting>
<variablelist>
<varlistentry><term><replaceable>trim-type</replaceable> </term>
<listitem><para>specifies whether characters are to be trimmed from
the leading end (LEADING), trailing end (TRAILING), or both ends (BOTH)
of <replaceable>trim-source</replaceable>. If you omit <replaceable
>trim-type</replaceable>, the default is BOTH. </para></listitem>
</varlistentry>
<varlistentry><term><replaceable>trim_char</replaceable> </term>
<listitem><para>is an SQL character value expression and specifies
the character to be trimmed from <replaceable>trim-source. trim_char</replaceable
> has a maximum length of 1. If you omit <replaceable>trim_char</replaceable
>, SQL trims blanks (' ') from <replaceable>trim-source</replaceable
>. </para></listitem>
</varlistentry>
<varlistentry><term><replaceable>trim-source</replaceable> </term>
<listitem><para>is an SQL character value expression and specifies
the string from which to trim characters. See <xref linkend="i1010765"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Considerations for TRIM</title>
<section>
<title>Result of TRIM</title>
<para>The result is always of type VARCHAR, with maximum length equal
to the fixed length or maximum variable length of <replaceable>trim-source</replaceable
>. If the source character string is an upshifts CHAR or VARCHAR string,
the result is an upshifts VARCHAR type.</para>
</section>
</section>
<section>
<title>Examples of TRIM</title>
<indexterm><primary>TRIM function</primary><secondary>examples of</secondary>
</indexterm>
<itemizedlist>
<listitem><para>Return 'Robert':</para>
<programlisting>TRIM ('    Robert    ')
</programlisting>
</listitem>
<listitem><para>The EMPLOYEE table defines FIRST_NAME as CHAR(15)
and LAST_NAME as CHAR(20). This expression uses the TRIM function
to return the value 'Robert Smith' without extra blanks:</para>
<programlisting>TRIM (first_name) || ' ' || TRIM (last_name)
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1011245" pagebreak="yes">
<title>UCASE Function</title>
<itemizedlist>
<listitem><para><xref linkend="i1021966" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1021971" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>Character string functions</primary><secondary
>UCASE</secondary></indexterm>
<para>The UCASE function upshifts alphanumeric characters. For non-alphanumeric
characters, UCASE returns the same character. UCASE can appear anywhere
in a query where a value can be used, such as in a select list, an
ON clause, a WHERE clause, a HAVING clause, a LIKE predicate, an expression,
or as qualifying a new value in an UPDATE or INSERT statement. The
result returned by the UCASE function is equal to the result returned
by the <xref linkend="i1011272" role="select:quotedtitle page"/> or <xref
linkend="i1011299" role="select:quotedtitle page"/>.</para>
<indexterm><primary>UCASE function</primary><secondary>syntax diagram
of</secondary></indexterm>
<para>UCASE returns a string of fixed-length or variable-length character
data, depending on the data type of the input string. </para>
<para>UCASE is a Trafodion SQL extension. </para>
<programlisting>UCASE (<replaceable>character-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>character-expression </replaceable
></term>
<listitem><para>is an SQL character value expression that specifies
a string of characters to upshift. See <xref linkend="i1010765"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section id="i1021966">
<title>Considerations for UCASE</title>
<!--WRITER'S NOTE: Check if this is true concerning UTF8.-->
<para>For a <phrase>UTF8</phrase> character expression, the UCASE
function upshifts all lowercase or title case characters to uppercase
and returns a character string. If the argument is of type CHAR(<replaceable
>n</replaceable>) or VARCHAR(<replaceable>n</replaceable>), the result
is of type VARCHAR(min(3<replaceable>n</replaceable>, 2048)), where
the maximum length of VARCHAR is the minimum of 3<replaceable>n</replaceable
> or 2048, whichever is smaller. </para>
<para>A lowercase character is a character that has the “alphabetic”
property in Unicode Standard 2 and whose Unicode name includes lower.
An uppercase character is a character that has the “alphabetic” property
and whose Unicode name includes upper. A title case character is a
character that has the Unicode “alphabetic” property and whose Unicode
name includes <replaceable>title</replaceable>.</para>
</section>
<section id="i1021971">
<title>Examples of UCASE</title>
<indexterm><primary>UCASE function</primary><secondary>examples of</secondary>
</indexterm>
<para>Suppose that your CUSTOMER table includes an entry for Hotel
Oregon. Select the column CUSTNAME and return in uppercase and lowercase
letters by using the UCASE and LCASE functions:</para>
<programlisting>SELECT custname,UCASE(custname),LCASE(custname)
FROM sales.customer;

(EXPR)             (EXPR)               (EXPR)
-----------------  -------------------  ------------------
...                ...                  ...
Hotel Oregon       HOTEL OREGON         hotel oregon 

--- 17 row(s) selected.
</programlisting>
<para>See <xref linkend="i1008307" role="select:quotedtitle page"
/>.</para>
<para>For more examples of when to use the UCASE function, see <xref
linkend="i1011299" role="select:quotedtitle page"/>.</para>
</section>
</section>
<section id="i1011272" pagebreak="yes">
<title>UPPER Function</title>
<indexterm><primary>Character string functions</primary><secondary
>UPPER</secondary></indexterm>
<para>The UPPER function upshifts alphanumeric characters. For non-alphanumeric
characters, UCASE returns the same character. UPPER can appear anywhere
in a query where a value can be used, such as in a select list, an
ON clause, a WHERE clause, a HAVING clause, a LIKE predicate, an expression,
or as qualifying a new value in an UPDATE or INSERT statement. The
result returned by the UPPER function is equal to the result returned
by the <xref linkend="i1011299" role="select:quotedtitle page"/> or <xref
linkend="i1011245" role="select:quotedtitle page"/>.</para>
<indexterm><primary>UPPER function</primary><secondary>syntax diagram
of</secondary></indexterm>
<para>UPPER returns a string of fixed-length or variable-length character
data, depending on the data type of the input string.</para>
<programlisting>UPPER (<replaceable>character-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>character-expression</replaceable
> </term>
<listitem><para>is an SQL character value expression that specifies
a string of characters to upshift. See <xref linkend="i1010765"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of UPPER</title>
<indexterm><primary>UPPER function</primary><secondary>examples of</secondary>
</indexterm>
<para>Suppose that your CUSTOMER table includes an entry for Hotel
Oregon. Select the column CUSTNAME and return in uppercase and lowercase
letters by using the UPPER and LOWER functions:</para>
<programlisting>SELECT custname,UPPER(custname),LOWER(custname)
FROM sales.customer;

(EXPR)              (EXPR)              (EXPR)
-----------------  -------------------  ------------------
...                ...                  ...
Hotel Oregon       HOTEL OREGON         hotel oregon

--- 17 row(s) selected.
</programlisting>
<para>See <xref linkend="i1008495" role="select:quotedtitle page"
/>.</para>
<para>For examples of when to use the UPPER function, see <xref
linkend="i1011299" role="select:quotedtitle page"/>.</para>
</section>
</section>
<section id="i1011299" pagebreak="yes">
<title>UPSHIFT Function</title>
<indexterm><primary>Character string functions</primary><secondary
>UPSHIFT</secondary></indexterm>
<para>The UPSHIFT function upshifts alphanumeric characters. For non-alphanumeric
characters, UCASE returns the same character. UPSHIFT can appear anywhere
in a query where a value can be used, such as in a select list, an
ON clause, a WHERE clause, a HAVING clause, a LIKE predicate, an expression,
or as qualifying a new value in an UPDATE or INSERT statement. The
result returned by the UPSHIFT function is equal to the result returned
by the <xref linkend="i1011272" role="select:quotedtitle page"/> or <xref
linkend="i1011245" role="select:quotedtitle page"/>.</para>
<indexterm><primary>UPSHIFT function</primary><secondary>syntax diagram
of</secondary></indexterm>
<para>UPSHIFT returns a string of fixed-length or variable-length
character data, depending on the data type of the input string. </para>
<para>UPSHIFT is a Trafodion SQL extension. </para>
<programlisting>UPSHIFT (<replaceable>character-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>character-expression</replaceable
> </term>
<listitem><para>is an SQL character value expression that specifies
a string of characters to upshift. See <xref linkend="i1010765"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of UPSHIFT</title>
<itemizedlist>
<listitem><para>Suppose that your CUSTOMER table includes an entry
for Hotel Oregon. Select the column CUSTNAME and return a result in
uppercase and lowercase letters by using the UPSHIFT, UPPER, and LOWER
functions:</para>
<programlisting>SELECT UPSHIFT(custname),UPPER(custname),UCASE(custname)
FROM sales.customer;

(EXPR)             (EXPR)               (EXPR)
-----------------  -------------------  ------------------
...                ...                  ...
HOTEL OREGON       HOTEL OREGON         HOTEL OREGON 

--- 17 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Perform a case-insensitive search for the DataSpeed
customer: </para>
<programlisting>SELECT * 
FROM sales.customer
WHERE UPSHIFT (custname) = 'DATASPEED';

CUSTNUM  CUSTNAME    STREET                CITY      ...
-------  ----------  --------------------  --------- ...
   1234  DataSpeed   300 SAN GABRIEL WAY   NEW YORK  ...

--- 1 row(s) selected.
</programlisting>
<para>In the table, the name can be in lowercase, uppercase, or mixed
case letters.</para>
</listitem>
<listitem><para>Suppose that your database includes two department
tables: DEPT1 and DEPT2. Return all rows from the two tables in which
the department names have the same value regardless of case: </para>
<programlisting>SELECT * FROM persnl.dept1 D1, persnl.dept2 D2
WHERE UPSHIFT(D1.deptname) = UPSHIFT(D2.deptname);
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1013940" pagebreak="yes">
<title>USER Function</title>
<indexterm><primary>USER function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Other functions and
expressions</primary><secondary>USER</secondary></indexterm>
<para>The USER function returns either the database username associated
with the specified user ID number or the database username of the
current user who invoked the function. The current user is the authenticated
user who started the session. That database username is used for authorization
of SQL statements in the current session. <phrase condition="hidden"
>A new value can be pushed onto the authorization stack if a stored
procedure in Java (SPJ) is defined with EXTERNAL SECURITY DEFINER
rights. </phrase></para>
<programlisting>USER [(<replaceable>user-id</replaceable>)]</programlisting>
<variablelist>
<varlistentry><term><replaceable>user-id</replaceable> </term>
<listitem><para>is the 32-bit number associated with a database username.</para>
</listitem>
</varlistentry>
</variablelist>
<para>The USER function is similar to the <xref linkend="AUTHNAME"
role="select:quotedtitle page"/> and the <xref linkend="i1013939"
role="select:quotedtitle page"/>.</para>
<section>
<title>Considerations for USER</title>
<indexterm><primary>USER function</primary><secondary>considerations
for</secondary></indexterm>
<itemizedlist>
<listitem><para>This function can be specified only in the top level
of a SELECT statement.</para></listitem>
<listitem><para>The value returned is string data type VARCHAR(128)
and is in ISO8859-1 encoding.</para></listitem>
</itemizedlist>
<section condition="hidden">
<title>USER and Stored Procedures in Java</title>
<para>The USER function has special considerations when used inside
an SPJ. In previous releases, the CURRENT_USER, SESSION_USER, and
USER functions were equivalent, that is, they returned the same value
even if the function was used inside an SPJ. The returned value was
the authenticated database username of the user who invoked the SPJ. </para>
<para>In this release, the USER (or CURRENT_USER) function can be
different than the SESSION_USER function if an SPJ is defined with
the EXTERNAL SECURITY DEFINER attribute.</para>
<para>For SPJs defined with the EXTERNAL SECURITY INVOKER attribute,
the USER function returns the authenticated database username of the
user who invoked the function. For SPJs defined with the EXTERNAL
SECURITY DEFINER attribute, the USER function returns the database
username of the owner of the SPJ, which is used for authorizing SQL
operations in the SPJ.</para>
<para>For information about SPJs and DEFINER and INVOKER rights, see
the <citetitle>Trafodion Guide to Stored Procedures in Java</citetitle
>.</para>
<para condition="hidden">For information about SPJs and DEFINER and
INVOKER rights, see the <citetitle>Trafodion Guide to Stored Procedures
in Java</citetitle>.</para>
</section>
</section>
<section>
<title>Examples of USER</title>
<indexterm><primary>USER function</primary><secondary>examples of</secondary>
</indexterm>
<itemizedlist>
<listitem><para>This example shows the database username of the current
user who is logged in to the session:</para>
<programlisting>>>SELECT USER FROM (values(1)) x(a);
(EXPR)
-------------------------
<computeroutput>TSHAW</computeroutput>
--- 1 row(s) selected.</programlisting>
</listitem>
<listitem><para>This example shows the database username associated
with the user ID number, 33333:</para>
<programlisting>>>SELECT USER (33333) FROM (values(1)) x(a);
(EXPR)
-------------------------
<computeroutput>DB__ROOT</computeroutput>
--- 1 row(s) selected.</programlisting>
</listitem>
<listitem condition="hidden"><para>The next two examples use this
Java method <literal>getUser()</literal> in an SPJ, which uses the
USER function to retrieve the database-user name.</para>
<screen>
public static void getUser( ResultSet [] rs )
                       throws SQLException
{
   Connection conn = DriverManager.getConnection("jdbc:default:connection");
   Statement stmt = conn.createStatement() ;
   rs[0] = stmt.executeQuery("SELECT USER FROM (VALUES(1)0 X(A);");
}</screen>
<itemizedlist>
<listitem><para>In this example, database user JSMITH registers the
SPJ with the name GETUSER1. He sets the EXTERNAL SECURITY attribute
to INVOKER. Database user TSHAW (who has EXECUTE privilege) executes
the CALL statement. The following output is returned, which shows
the database-user name of the user who invoked the SPJ:</para>
<screen>
CALL GETUSER1();
(EXPR)
-----------------------
<computeroutput>TSHAW</computeroutput>
...
--- 1 row(s) selected.</screen>
</listitem>
<listitem><para>In this example, database user JSMITH registers the
SPJ with the name GETUSER2. He sets the EXTERNAL SECURITY attribute
to DEFINER. Database user TSHAW (who has the EXECUTE privilege) executes
the CALL statement. The following output is returned, which shows
the owner of the SPJ:</para>
<screen>
CALL GETUSER2();
(EXPR)
-----------------------
JSMITH
...
--- 1 row(s) selected.</screen>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1013941" pagebreak="yes">
<title>VARIANCE Function</title>
<itemizedlist>
<listitem><para><xref linkend="i1011429" role="select:quotedtitle"
/></para></listitem>
<listitem><para><xref linkend="i1011467" role="select:quotedtitle"
/></para></listitem>
</itemizedlist>
<indexterm><primary>VARIANCE function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Aggregate functions</primary>
<secondary>VARIANCE</secondary></indexterm>
<para>VARIANCE is an aggregate function that returns the statistical
variance of a set of numbers.</para>
<para>VARIANCE is a Trafodion SQL extension. </para>
<programlisting>VARIANCE ([ALL | DISTINCT] <replaceable>expression</replaceable
> [,<replaceable>weight</replaceable>]) 
</programlisting>
<indexterm><primary>DISTINCT clause</primary><secondary>VARIANCE function
use of</secondary></indexterm><indexterm><primary>VARIANCE function</primary>
<secondary>DISTINCT clause within</secondary></indexterm>
<variablelist>
<varlistentry><term>ALL | DISTINCT </term>
<listitem><para>specifies whether duplicate values are included in
the computation of the VARIANCE of the <replaceable>expression</replaceable
>. The default option is ALL, which causes duplicate values to be
included. If you specify DISTINCT, duplicate values are eliminated
before the VARIANCE function is applied. If DISTINCT is specified,
you cannot specify <replaceable>weight</replaceable>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>expression</replaceable> </term>
<listitem><para>specifies a numeric value expression that determines
the values for which to compute the variance. <replaceable>expression</replaceable
> cannot contain an aggregate function or a subquery. The DISTINCT
clause specifies that the VARIANCE function operates on distinct values
from the one-column table derived from the evaluation of <replaceable
>expression</replaceable>. </para></listitem>
</varlistentry>
<varlistentry><term><replaceable>weight</replaceable> </term>
<listitem><para>specifies a numeric value expression that determines
the weights of the values for which to compute the variance. <replaceable
>weight</replaceable> cannot contain an aggregate function or a subquery. <replaceable
>weight</replaceable> is defined on the same table as <replaceable
>expression</replaceable>. The one-column table derived from the evaluation
of <replaceable>expression</replaceable> and the one-column table
derived from the evaluation of <replaceable>weight</replaceable> must
have the same cardinality.</para></listitem>
</varlistentry>
</variablelist>
<section id="i1011429">
<title>Considerations for VARIANCE</title>
<section>
<title>Definition of VARIANCE</title>
<indexterm><primary>VARIANCE function</primary><secondary>statistical
definition of</secondary></indexterm>
<para>Suppose that <replaceable>vi</replaceable> are the values in
the one-column table derived from the evaluation of <replaceable>expression</replaceable
>. <replaceable>N</replaceable> is the cardinality of this one-column
table that is the result of applying the <replaceable>expression</replaceable
> to each row of the source table and eliminating rows that are null.</para>
<para>If <replaceable>weight</replaceable> is specified, <replaceable
>wi </replaceable>are the values derived from the evaluation of <replaceable
>weight</replaceable>. <replaceable>N</replaceable> is the cardinality
of the two-column table that is the result of applying the <replaceable
>expression</replaceable> and <replaceable>weight</replaceable> to
each row of the source table and eliminating rows that have nulls
in either column.</para>
<para><emphasis role="bold">Definition When Weight Is Not Specified</emphasis
></para>
<para>If <replaceable>weight</replaceable> is not specified, the statistical
variance of the values in the one-column result table is defined as:</para>
<para>where <replaceable>vi</replaceable> is the i-th value of <replaceable
>expression</replaceable>, <replaceable>v</replaceable> is the average
value expressed in the common data type, and N is the cardinality
of the result table.</para>
<para>Because the definition of variance has <replaceable>N-1</replaceable
> in the denominator of the expression (when weight is not specified),
Trafodion SQL returns a default value of zero (and no error) if the
number of rows in the table, or a group of the table, is equal to
1.</para>
<para><emphasis role="bold">Definition When Weight Is Specified</emphasis
></para>
<para>If <replaceable>weight</replaceable> is specified, the statistical
variance of the values in the two-column result table is defined as:</para>
<para>where vi is the i-th value of <replaceable>expression</replaceable
>, <replaceable>wi</replaceable> is the i-th value of <replaceable
>weight</replaceable>, <replaceable>vw</replaceable> is the weighted
average value expressed in the common data type, and N is the cardinality
of the result table. </para>
<para><emphasis role="bold">Weighted Average</emphasis></para>
<para>The weighted average <replaceable>vw</replaceable> of <replaceable
>vi</replaceable> and <replaceable>wi</replaceable> is defined as:</para>
<para>where vi is the i-th value of <replaceable>expression</replaceable
>, <replaceable>wi</replaceable> is the i-th value of <replaceable
>weight</replaceable>, and N is the cardinality of the result table.</para>
</section>
<section>
<title>Data Type of the Result</title>
<para>The data type of the result is always DOUBLE PRECISION.</para>
</section>
<section>
<title>Operands of the Expression</title>
<para>The expression includes columns from the rows of the SELECT
result table—but cannot include an aggregate function. These expressions
are valid:</para>
<programlisting>VARIANCE (SALARY)
VARIANCE (SALARY * 1.1)
VARIANCE (PARTCOST * QTY_ORDERED)
</programlisting>
</section>
<section>
<title>Nulls</title>
<para>VARIANCE is evaluated after eliminating all nulls from the set.
If the result table is empty, VARIANCE returns NULL. </para>
</section>
<section>
<title>FLOAT(54) and DOUBLE PRECISION Data</title>
<para>Avoid using large FLOAT(54) or DOUBLE PRECISION values as arguments
to VARIANCE. If SUM(x * x) exceeds the value of 1.15792089237316192e77
during the computation of VARIANCE(x), then a numeric overflow occurs.</para>
</section>
</section>
<section id="i1011467">
<title>Examples of VARIANCE</title>
<indexterm><primary>VARIANCE function</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>Compute the variance of the salary of the current
employees:</para>
<programlisting>SELECT VARIANCE(salary) AS Variance_Salary 
FROM persnl.employee;

VARIANCE_SALARY            
-------------------------  
 1.27573263588496116E+009  

--- 1 row(s) selected.
</programlisting>
</listitem>
<listitem><para>Compute the variance of the cost of parts in the current
inventory:</para>
<programlisting>SELECT VARIANCE (price * qty_available)
FROM sales.parts;

(EXPR)
-------------------------
 5.09652410092950336E+013

--- 1 row(s) selected.
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="i1011615" pagebreak="yes">
<title>WEEK Function</title>
<indexterm><primary>WEEK function</primary><secondary>syntax diagram
of</secondary></indexterm><indexterm><primary>Datetime functions</primary>
<secondary>WEEK</secondary></indexterm>
<para>The WEEK function converts a DATE or TIMESTAMP expression into
an INTEGER value in the range 1 through 54 that represents the corresponding
week of the year. If the year begins on a Sunday, the value <literal
>1</literal> will be returned for any datetime that occurs in the
first 7 days of the year. Otherwise, the value <literal>1</literal
> will be returned for any datetime that occurs in the partial week
before the start of the first Sunday of the year. The value <literal
>53</literal> is returned for datetimes that occur in the last full
or partial week of the year except for leap years that start on Saturday
where December 31 is in the 54th full or partial week.</para>
<para>WEEK is a Trafodion SQL extension. </para>
<programlisting>WEEK (<replaceable>datetime-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>datetime-expression</replaceable
> </term>
<listitem><para>is an expression that evaluates to a datetime value
of type DATE or TIMESTAMP. See <xref
linkend="Datetime_Value_Expressions" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of WEEK</title>
<indexterm><primary>WEEK function</primary><secondary>example of</secondary>
</indexterm>
<para>Return an integer that represents the week of the year from
the START_DATE column in the PROJECT table: </para>
<programlisting>SELECT start_date, ship_timestamp, WEEK(start_date) 
FROM persnl.project 
WHERE projcode = 1000;

Start/Date  Time/Shipped                (EXPR)          
----------  --------------------------  --------------  
2008-04-10  2008-04-21 08:15:00.000000              15 
</programlisting>
</section>
</section>
<section id="i1050358" pagebreak="yes">
<title>YEAR Function</title>
<indexterm><primary>Datetime functions</primary><secondary>YEAR</secondary>
</indexterm><indexterm><primary>YEAR function</primary><secondary
>syntax diagram of</secondary></indexterm>
<para>The YEAR function converts a DATE or TIMESTAMP expression into
an INTEGER value that represents the year. </para>
<para>YEAR is a Trafodion SQL extension. </para>
<programlisting>YEAR (<replaceable>datetime-expression</replaceable
>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>datetime-expression</replaceable
> </term>
<listitem><para>is an expression that evaluates to a datetime value
of type DATE or TIMESTAMP. See <xref
linkend="Datetime_Value_Expressions" role="select:quotedtitle page"
/>.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of YEAR</title>
<indexterm><primary>YEAR function</primary><secondary>examples of</secondary>
</indexterm>
<para>Return an integer that represents the year from the START_DATE
column in the PROJECT table: </para>
<programlisting>SELECT start_date, ship_timestamp, YEAR(start_date)
FROM persnl.project
WHERE projcode = 1000;

Start/Date  Time/Shipped                (EXPR)  
----------  --------------------------  ------  
2008-04-10  2008-04-21 08:15:00.000000    2008  
</programlisting>
</section>
</section>
<section id="i1050385" pagebreak="yes">
<title>ZEROIFNULL Function</title>
<indexterm><primary>ZEROIFNULL function</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>Math functions</primary>
<secondary>ZEROIFNULL</secondary></indexterm>
<para>The ZEROIFNULL function returns a value of zero if the expression
if NULL. Otherwise, it returns the value of the expression. </para>
<programlisting>ZEROIFNULL (<replaceable>expression</replaceable>)
</programlisting>
<variablelist>
<varlistentry><term><replaceable>expression</replaceable></term>
<listitem><para>specifies a value expression. It must be a numeric
data type.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Example of ZEROIFNULL</title>
<indexterm><primary>ZEROIFNULL function</primary><secondary>example
of</secondary></indexterm>
<para><literal>ZEROIFNULL</literal> returns the value of the column
named <literal>salary</literal> whenever the column value is not NULL
and it returns 0 whenever the column value is NULL.</para>
<programlisting>ZEROIFNULL (salary)
</programlisting>
</section>
</section>
</chapter>
<chapter id="olapfunc">
<title>OLAP Functions</title>
<indexterm><primary>OLAP window functions</primary></indexterm>
<para>This section describes the syntax and semantics of the On Line
Analytical Process (OLAP) window functions. The OLAP window functions
are ANSI compliant.</para>
<section id="OLAPconsider">
<title>Considerations for Window Functions</title>
<indexterm><primary>window functions</primary><secondary>considerations</secondary>
</indexterm>
<para>These considerations apply to all window functions.</para>
<variablelist>
<varlistentry><term><replaceable>inline-window-specification</replaceable
></term>
<listitem><para>The window defined by the <replaceable>inline-window-specification</replaceable
> consists of the rows specified by the <replaceable>window-frame-clause</replaceable
>, bounded by the current partition.  If no PARTITION BY clause is
specified, the partition is defined to be all the rows of the intermediate
result.  If a PARTITION BY clause is specified, the partition is the
set of rows which have the same values for the expressions specified
in the PARTITION clause.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>window-frame-clause</replaceable
></term>
<listitem><para>DISTINCT is not supported for window functions.</para>
<para>Use of a FOLLOWING term is not supported. Using a FOLLOWING
term results in an error.</para>
<para>If no <replaceable>window-frame-clause</replaceable> is specified,
“ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING” is assumed.
 This clause is not supported because it involves a FOLLOWING term
and will result in an error.</para>
<para>“ROWS CURRENT ROW” is equivalent to “ROWS BETWEEN CURRENT ROW
AND CURRENT ROW”.</para>
<para>“ROWS <replaceable>preceding-row</replaceable>” is equivalent
to “ROWS BETWEEN <replaceable>preceding-row</replaceable> AND CURRENT
ROW”.</para>
</listitem>
</varlistentry>
</variablelist>
<para><emphasis role="bold">Nulls</emphasis></para>
<para>All nulls are eliminated before the function is applied to the
set of values. If the window contains all NULL values, the result
of the window function is NULL. </para>
<para> If the specified window for a particular row consists of rows
that are all before the first row of the partition (no rows in the
window), the result of the window function is NULL.</para>
<section id="ORDERBY">
<title>ORDER BY Clause Supports Expressions For OLAP Functions</title>
<indexterm><primary>OLAP window functions</primary><secondary>ORDER
BY clause</secondary></indexterm><indexterm><primary>window functions</primary>
<secondary>ORDER BY clause, use of</secondary></indexterm>
<para>The ORDER BY clause of the OLAP functions now supports expressions.
However, use of multiple OLAP functions with different expressions
in the same query is not supported. The following examples show how
expressions may be used in the ORDER BY clause.<programlisting>SELECT -1 * annualsalary neg_total,
RANK() OVER (ORDER BY -1 * annualsalary) olap_rank
FROM employee;</programlisting>Using an aggregate in the ORDER BY
clause:<programlisting>SELECT num,
RANK() OVER (ORDER BY SUM(annualsalary)) olap_rank
FROM employee 
GROUP BY num;</programlisting>Using multiple functions with the same
expression in the ORDER BY clause:</para>
<programlisting>SELECT num, workgroupnum,
  RANK() OVER (ORDER BY SUM (annualsalary)*num) olap_rank,
  DENSE_RANK() OVER (ORDER BY SUM (annualsalary)*num) olap_drank
  ROW_NUMBER() OVER (ORDER BY SUM (annualsalary)*num) olap_mum
FROM employee
GROUP BY num, workgroupnum, annualsalary;</programlisting>
<para>Using more functions with the same expression in the ORDER BY
clause:<programlisting>SELECT num, workgroupnum, annualsalary,
  SUM(AnnualSalary) OVER (ORDER BY SUM(annualsalary)*num ROWS
UNBOUNDED PRECEDING),
  AVG(AnnualSalary) OVER (ORDER BY SUM(annualsalary)*num ROWS UNBOUNDED
PRECEDING),
  MIN(AnnualSalary) OVER (ORDER BY SUM(annualsalary)*num ROWS UNBOUNDED
PRECEDING),
  MAX(AnnualSalary) OVER (ORDER BY SUM(annualsalary)*num ROWS UNBOUNDED
PRECEDING),
  VARIANCE(AnnualSalary) OVER (ORDER BY SUM(annualsalary)*num ROWS 
UNBOUNDED PRECEDING),
  STDDEV(AnnualSalary) OVER (ORDER BY SUM(annualsalary)*num ROWS 
UNBOUNDED PRECEDING),
  COUNT(AnnualSalary) OVER (ORDER BY SUM(annualsalary)*num ROWS 
UNBOUNDED PRECEDING),
FROM employee
GROUP BY num, workgroupnum, annualsalary;</programlisting></para>
</section>
<section>
<title>Limitations for Window Functions</title>
<indexterm><primary>OLAP window functions</primary><secondary>limitations</secondary>
</indexterm><indexterm><primary>window functions</primary><secondary
>limitations</secondary></indexterm>
<para>These limitations apply to all window functions.</para>
<para><itemizedlist>
<listitem><para>The ANSI <replaceable>window-clause</replaceable> is
not supported by Trafodion.  Only the <replaceable>inline-window-specification</replaceable
> is supported. An attempt to use an ANSI <replaceable>window-clause</replaceable
> will result in a syntax error. </para></listitem>
<listitem><para>The <replaceable>window-frame-clause </replaceable
>cannot contain a FOLLOWING term, either explicitly or implicitly.
 Because the default window frame clause contains an implicit FOLLOWING
(“ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING”), the
default is not supported.  So, practically, the <replaceable>window-frame-clause</replaceable
> is not optional.  An attempt to use a FOLLOWING term, either explicitly
or implicitly will result in the “4343” error message.  </para>
</listitem>
<listitem><para>The window frame units can only be ROWS.  RANGE is
not supported by Trafodion.  An attempt to use RANGE will result in
a syntax error.  </para></listitem>
<listitem><para>The ANSI <replaceable>window-frame-exclusion-specification</replaceable
> is not supported by Trafodion.  An attempt to use a <replaceable
>window-frame-exclusion-specification </replaceable>will result in
a syntax error.  </para></listitem>
<listitem><para>Multiple <replaceable>inline-window-specifications</replaceable
> in a single SELECT clause are not supported.  For each window function
within a SELECT clause, the ORDER BY clause and PARTITION BY specifications
must be identical.  The window frame can vary within a SELECT clause.
 An attempt to use multiple <replaceable>inline-window-specifications</replaceable
> in a single SELECT clause will result in the "4340" error message.
 </para></listitem>
<listitem><para>The ANSI <replaceable>null-ordering-specification</replaceable
> within the ORDER BY clause is not supported by Trafodion.  Null
values will always be sorted as if they are greater than all non-null
values.  This is slightly different than a null ordering of NULLS
LAST.  An attempt to use a <replaceable>null-ordering-specification</replaceable
> will result in a syntax error.  </para></listitem>
<listitem><para>The ANSI <replaceable>filter-clause</replaceable> is
not supported for window functions by Trafodion.  The <replaceable
>filter-clause</replaceable> applies to all aggregate functions (grouped
and windowed) and that the <replaceable>filter-clause</replaceable
> is not currently supported for grouped aggregate functions. An attempt
to use a <replaceable>filter-clause</replaceable> will result in a
syntax error.  </para></listitem>
<listitem><para>The DISTINCT value for the <replaceable>set-qualifier-clause</replaceable
> within a window function is not supported.   Only the ALL value
is supported for the <replaceable>set-qualifier-clause</replaceable
> within a window function.  An attempt to use DISTINCT in a window
function will result in the “4341” error message. </para></listitem>
</itemizedlist></para>
</section>
</section>
<section id="AVGolap">
<title>AVG Window Function</title>
<indexterm><primary>AVG window function</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>OLAP window
functions</primary><secondary>AVG window function</secondary>
</indexterm><indexterm><primary>window functions</primary><secondary
>AVG </secondary></indexterm>
<para>AVG is a window function that returns the average of nonnull
values of the given expression for the current window specified by
the <replaceable>inline-window specification</replaceable>. </para>
<programlisting>AVG ([ALL] <replaceable>expression</replaceable>) OVER (<replaceable
>inline-window-specification</replaceable>)

<replaceable>inline-window-specification</replaceable> is:
    [PARTITION BY <replaceable>expression</replaceable> [, <replaceable
>expression</replaceable>]...]
    [ORDER BY <replaceable>expression</replaceable> [ASC[ENDING] | DESC[ENDING]]
              [,<replaceable>expression</replaceable> [ASC[ENDING] | DESC[ENDING]]]...]
    [ <replaceable>window-frame-clause</replaceable> ]

<replaceable>window-frame-clause</replaceable> is:
     ROWS CURRENT ROW
   | ROWS <replaceable>preceding-row</replaceable>
   | ROWS BETWEEN <replaceable>preceding-row</replaceable> AND <replaceable
>preceding-row</replaceable>
   | ROWS BETWEEN <replaceable>preceding-row</replaceable> AND CURRENT ROW
   | ROWS BETWEEN <replaceable>preceding-row</replaceable> AND <replaceable
>following-row</replaceable>     
   | ROWS BETWEEN CURRENT ROW AND CURRENT ROW
   | ROWS BETWEEN CURRENT ROW AND <replaceable>following-row</replaceable
>
   | ROWS BETWEEN <replaceable>following-row</replaceable> AND <replaceable
>following-row</replaceable>

<replaceable>preceding-row</replaceable> is:
     UNBOUNDED PRECEDING
   | <replaceable>unsigned-integer</replaceable> PRECEDING

<replaceable>following-row</replaceable> is:
     UNBOUNDED FOLLOWING
   | <replaceable>unsigned-integer</replaceable> FOLLOWING
</programlisting>
<variablelist>
<varlistentry><term>ALL</term>
<listitem><para>specifies whether duplicate values are included in
the computation of the AVG of the <replaceable>expression</replaceable
>. The default option is ALL, which causes duplicate values to be
included. </para></listitem>
</varlistentry>
<varlistentry><term><replaceable>expression</replaceable></term>
<listitem><para>specifies a numeric or interval value <replaceable
>expression</replaceable> that determines the values to average. </para>
<para>See <xref linkend="i1011132" role="select:quotedtitle page"
/> and <xref linkend="i1010948" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>inline-window-specification</replaceable
></term>
<listitem><para>specifies the window over which the AVG is computed.
 The <replaceable>inline-window-specification</replaceable> can contain
an optional PARTITION BY clause, an optional ORDER BY clause and an
optional window frame clause.  The PARTITION BY clause specifies how
the intermediate result is partitioned and the ORDER BY clause specifies
how the rows are ordered within each partition.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>window-frame-clause</replaceable
></term>
<listitem><para>specifies the window within the partition over which
the AVG is computed.</para></listitem>
</varlistentry>
</variablelist>
<section id="AVGolapex">
<title>Examples of AVG Window Function</title>
<indexterm><primary>AVG window function</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>Return the running average value of the SALARY column:</para>
<programlisting>SELECT empnum, AVG(salary) 
               OVER (ORDER BY empnum ROWS UNBOUNDED PRECEDING)
FROM persnl.employee;</programlisting>
</listitem>
<listitem><para>Return the running average value of the SALARY column
within each department:</para>
<programlisting>SELECT deptnum, empnum, AVG(salary)
   OVER (PARTITION BY deptnum ORDER BY empnum ROWS UNBOUNDED PRECEDING)
FROM persnl.employee;</programlisting>
</listitem>
<listitem><para>Return the moving average of salary within each department
over a window of the last 4 rows:</para>
<programlisting>SELECT deptnum, empnum, AVG(SALARY)
   OVER (PARTITION BY deptnum ORDER BY empnum ROWS 3 PRECEDING)
FROM persnl.employee;
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="COUNTolap">
<title>COUNT Window Function</title>
<indexterm><primary>COUNT window function</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>OLAP window
functions</primary><secondary>COUNT window function</secondary>
</indexterm><indexterm><primary>window functions</primary><secondary
>COUNT </secondary></indexterm>
<para>COUNT is a window function that returns the count of the non
null values of the given expression for the current window specified
by the inline-window-specification. </para>
<programlisting>COUNT  {(*) | ([ALL] <replaceable>expression</replaceable
>) } OVER
<replaceable>inline-window-specification</replaceable>
 
<replaceable>inline-window-specification</replaceable> is:
    [PARTITION BY <replaceable>expression</replaceable> [, <replaceable
>expression</replaceable>]...]
    [ORDER BY <replaceable>expression</replaceable> [ASC[ENDING] | DESC[ENDING]]
              [,<replaceable>expression</replaceable> [ASC[ENDING] | DESC[ENDING]]]...]
    [ <replaceable>window-frame-clause</replaceable> ]

<replaceable>window-frame-clause</replaceable> is:
     ROW CURRENT ROW
   | ROW <replaceable>preceding-row</replaceable>
   | ROW BETWEEN <replaceable>preceding-row</replaceable> AND <replaceable
>preceding-row</replaceable>
   | ROW BETWEEN <replaceable>preceding-row</replaceable> AND CURRENT ROW
   | ROW BETWEEN <replaceable>preceding-row</replaceable> AND <replaceable
>following-row</replaceable>      
   | ROW BETWEEN CURRENT ROW AND CURRENT ROW
   | ROW BETWEEN CURRENT ROW AND <replaceable>following-row</replaceable
>
   | ROW BETWEEN <replaceable>following-row</replaceable> AND <replaceable
>following-row</replaceable>

<replaceable>preceding-row</replaceable> is:
     UNBOUNDED PRECEDING
   | <replaceable>unsigned-integer</replaceable> PRECEDING

<replaceable>following-row</replaceable> is:
     UNBOUNDED FOLLOWING
   | <replaceable>unsigned-integer</replaceable> FOLLOWING
</programlisting>
<variablelist>
<varlistentry><term>ALL</term>
<listitem><para>specifies whether duplicate values are included in
the computation of the COUNT of the <replaceable>expression</replaceable
>. The default option is ALL, which causes duplicate values to be
included. </para></listitem>
</varlistentry>
<varlistentry><term><replaceable>expression</replaceable> </term>
<listitem><para>specifies a value <replaceable>expression</replaceable
> that is to be counted. See <xref linkend="i1013683"
role="select:quotedtitle page"/>.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>inline-window-specification</replaceable
></term>
<listitem><para>specifies the window over which the COUNT is computed.
The <replaceable>inline-window-specification</replaceable> can contain
an optional PARTITION BY clause, an optional ORDER BY clause and an
optional window frame clause. The PARTITION BY clause specifies how
the intermediate result is partitioned and the ORDER BY clause specifies
how the rows are ordered within each partition.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>window-frame-clause</replaceable
></term>
<listitem><para>specifies the window within the partition over which
the COUNT is computed.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of COUNT Window Function</title>
<indexterm><primary>COUNT window function</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>Return the running count of the SALARY column:</para>
<programlisting>SELECT empnum, COUNT(salary)
      OVER (ORDER BY empnum ROWS UNBOUNDED PRECEDING)
FROM persnl.employee;
</programlisting>
</listitem>
<listitem><para>Return the running count of the SALARY column within
each department:</para>
<programlisting>SELECT deptnum, empnum, COUNT(salary)
      OVER (PARTITION BY deptnum ORDER BY empnum ROWS UNBOUNDED PRECEDING)
FROM persnl.employee;
</programlisting>
</listitem>
<listitem><para>Return the moving count of salary within each department
over a window of the last 4 rows:</para>
<programlisting>SELECT deptnum, empnum, COUNT(salary)
      OVER (PARTITION BY deptnum ORDER BY empnum ROWS 3 PRECEDING)
FROM persnl.employee;
</programlisting>
</listitem>
<listitem><para>Return the running count of employees within each
department:</para>
<programlisting>SELECT deptnum, empnum, COUNT(*)
      OVER (PARTITION BY deptnum ORDER BY empnum ROWS UNBOUNDED PRECEDING)
FROM persnl.employee;
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="DENSERANKolap">
<title>DENSE_RANK Window Funtion</title>
<indexterm><primary>OLAP window functions</primary><secondary>DENSE_RANK
window function</secondary></indexterm><indexterm><primary>DENSE_RANK
window function</primary><secondary>syntax diagram of</secondary>
</indexterm><indexterm><primary>window functions</primary><secondary
>DENSE_RANK </secondary></indexterm>
<para>DENSE_RANK is a window function that returns the ranking of
each row of the current partition specified by the inline-window-specification.
The ranking is relative to the ordering specified in the inline-window-specification.
The return value of DENSE_RANK starts at 1 for the first row of the
window. Values of the given expression that are equal have the same
rank. The value of DENSE_RANK advances 1 when the value of the given
expression changes. </para>
<programlisting>DENSE_RANK() OVER (<replaceable>inline-window-specification</replaceable
>)

<replaceable>inline-window-specification</replaceable> is:
    [PARTITION BY <replaceable>expression</replaceable> [, <replaceable
>expression</replaceable>]...]
    [ORDER BY <replaceable>expression</replaceable> [ASC[ENDING] | DESC[ENDING]]
              [,<replaceable>expression</replaceable> [ASC[ENDING] | DESC[ENDING]]]...]
</programlisting>
<variablelist>
<varlistentry><term><replaceable>inline-window-specification</replaceable
></term>
<listitem><para>specifies the window over which the DENSE_RANK is
computed.  The <replaceable>inline-window-specification</replaceable
> can contain an optional PARTITION BY clause and an optional ORDER
BY clause.  The PARTITION BY clause specifies how the intermediate
result is partitioned and the ORDER BY clause specifies how the rows
are ordered within each partition.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of DENSE_RANK Window Function</title>
<indexterm><primary>DENSE_RANK window function</primary><secondary
>examples of</secondary></indexterm>
<itemizedlist>
<listitem><para>Return the dense rank for each employee based on employee
number:</para>
<programlisting>SELECT DENSE_RANK() OVER (ORDER BY empnum), * 
FROM persnl.employee; 
</programlisting>
</listitem>
<listitem><para>Return the dense rank for each employee within each
department based on salary:</para>
<programlisting>SELECT DENSE_RANK() OVER (PARTITION BY deptnum ORDER BY salary), * 
FROM persnl.employee; 
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="MAXolap">
<title>MAX Window Function</title>
<indexterm><primary>MAX window function</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>window functions</primary>
<secondary>MAX </secondary></indexterm><indexterm><primary>OLAP window
functions</primary><secondary>MAX window function</secondary>
</indexterm>
<para>MAX is a window function that returns the maximum value of all
non null values of the given expression for the current window specified
by the inline-window-specification. </para>
<programlisting>MAX ([ALL] <replaceable>expression</replaceable>) OVER (<replaceable
>inline-window-specification</replaceable>)

<replaceable>inline-window-specification</replaceable> is:
    [PARTITION BY <replaceable>expression</replaceable> [, <replaceable
>expression</replaceable>]...]
    [ORDER BY <replaceable>expression</replaceable> [ASC[ENDING] | DESC[ENDING]]
              [,<replaceable>expression</replaceable> [ASC[ENDING] | DESC[ENDING]]]...]
    [ <replaceable>window-frame-clause</replaceable> ]

<replaceable>window-frame-clause</replaceable> is:
     ROWS CURRENT ROW
   | ROWS <replaceable>preceding-row</replaceable>
   | ROWS BETWEEN <replaceable>preceding-row</replaceable> AND <replaceable
>preceding-row</replaceable>
   | ROWS BETWEEN <replaceable>preceding-row</replaceable> AND CURRENT ROW
   | ROWS BETWEEN <replaceable>preceding-row</replaceable> AND <replaceable
>following-row</replaceable>     
   | ROWS BETWEEN CURRENT ROW AND CURRENT ROW
   | ROWS BETWEEN CURRENT ROW AND <replaceable>following-row</replaceable
>
   | ROWS BETWEEN <replaceable>following-row</replaceable> AND <replaceable
>following-row</replaceable>

<replaceable>preceding-row</replaceable> is:
     UNBOUNDED PRECEDING
   | <replaceable>unsigned-integer</replaceable> PRECEDING

<replaceable>following-row</replaceable> is:
     UNBOUNDED FOLLOWING
   | <replaceable>unsigned-integer</replaceable> FOLLOWING
</programlisting>
<variablelist>
<varlistentry><term>ALL</term>
<listitem><para>specifies whether duplicate values are included in
the computation of the MAX of the <replaceable>expression</replaceable
>. The default option is ALL, which causes duplicate values to be
included. </para></listitem>
</varlistentry>
<varlistentry><term><replaceable>expression</replaceable> </term>
<listitem><para>specifies an expression that determines the values
over which the MAX is computed. </para><para>See <xref
linkend="i1013683" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>inline-window-specification</replaceable
></term>
<listitem><para>specifies the window over which the MAX is computed.
 The <replaceable>inline-window-specification</replaceable> can contain
an optional PARTITION BY clause, an optional ORDER BY clause and an
optional window frame clause.  The PARTITION BY clause specifies how
the intermediate result is partitioned and the ORDER BY clause specifies
how the rows are ordered within each partition.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>window-frame-clause</replaceable
></term>
<listitem><para>specifies the window within the partition over which
the MAX is computed.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of MAX Window Function</title>
<indexterm><primary>MAX window function</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>Return the running maximum of the SALARY column:</para>
<programlisting>SELECT empnum, MAX(salary) 
     OVER (ORDER BY empnum ROWS UNBOUNDED PRECEDING)
FROM persnl.employee;
</programlisting>
</listitem>
<listitem><para>Return the running maximum of the SALARY column within
each department:</para>
<programlisting>SELECT deptnum, empnum, MAX(salary) 
     OVER (PARTITION BY deptnum ORDER BY empnum ROWS UNBOUNDED PRECEDING)
FROM persnl.employee;
</programlisting>
</listitem>
<listitem><para>Return the moving maximum of salary within each department
over a window of the last 4 rows:</para>
<programlisting>SELECT deptnum, empnum, MAX(salary) 
     OVER (PARTITION BY deptnum ORDER BY empnum ROWS 3 PRECEDING)
FROM persnl.employee;
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="MINolap">
<title>MIN Window Function</title>
<indexterm><primary>window functions</primary><secondary>MIN </secondary>
</indexterm><indexterm><primary>MIN window function</primary><secondary
>syntax diagram of</secondary></indexterm><indexterm><primary>OLAP
window functions</primary><secondary>MIN window function</secondary>
</indexterm>
<para>MIN is a window function that returns the minimum value of all
non null values of the given expression for the current window specified
by the inline-window-specification. </para>
<programlisting>MIN ([ALL] <replaceable>expression</replaceable>) OVER (<replaceable
>inline-window-specification</replaceable>)

<replaceable>inline-window-specification</replaceable> is:
    [PARTITION BY <replaceable>expression</replaceable> [, <replaceable
>expression</replaceable>]...]
    [ORDER BY <replaceable>expression</replaceable> [ASC[ENDING] | DESC[ENDING]]
              [,<replaceable>expression</replaceable> [ASC[ENDING] | DESC[ENDING]]]...]
    [ <replaceable>window-frame-clause</replaceable> ]

<replaceable>window-frame-clause</replaceable> is:
     ROWS CURRENT ROW
   | ROWS <replaceable>preceding-row</replaceable>
   | ROWS BETWEEN <replaceable>preceding-row</replaceable> AND <replaceable
>preceding-row</replaceable>
   | ROWS BETWEEN <replaceable>preceding-row</replaceable> AND CURRENT ROW
   | ROWS BETWEEN <replaceable>preceding-row</replaceable> AND <replaceable
>following-row</replaceable>     
   | ROWS BETWEEN CURRENT ROW AND CURRENT ROW
   | ROWS BETWEEN CURRENT ROW AND <replaceable>following-row</replaceable
>
   | ROWS BETWEEN <replaceable>following-row</replaceable> AND <replaceable
>following-row</replaceable>

<replaceable>preceding-row</replaceable> is:
     UNBOUNDED PRECEDING
   | <replaceable>unsigned-integer</replaceable> PRECEDING

<replaceable>following-row</replaceable> is:
     UNBOUNDED FOLLOWING
   | <replaceable>unsigned-integer</replaceable> FOLLOWING
</programlisting>
<variablelist>
<varlistentry><term>ALL</term>
<listitem><para>specifies whether duplicate values are included in
the computation of the MIN of the <replaceable>expression</replaceable
>. The default option is ALL, which causes duplicate values to be
included. </para></listitem>
</varlistentry>
<varlistentry><term><replaceable>expression</replaceable> </term>
<listitem><para>specifies an expression that determines the values
over which the MIN is computed</para><para>See <xref linkend="i1013683"
role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>inline-window-specification</replaceable
></term>
<listitem><para>specifies the window over which the MIN is computed.
 The <replaceable>inline-window-specification</replaceable> can contain
an optional PARTITION BY clause, an optional ORDER BY clause and an
optional window frame clause.  The PARTITION BY clause specifies how
the intermediate result is partitioned and the ORDER BY clause specifies
how the rows are ordered within each partition.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>window-frame-clause</replaceable
></term>
<listitem><para>specifies the window within the partition over which
the MIN is computed.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of MIN Window Function</title>
<indexterm><primary>MIN window function</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>Return the running minimum of the SALARY column:</para>
<programlisting>SELECT empnum, MIN(salary)
     OVER (ORDER BY empnum ROWS UNBOUNDED PRECEDING) 
FROM persnl.employee; 
</programlisting>
</listitem>
<listitem><para>Return the running minimum of the SALARY column within
each department:</para>
<programlisting>SELECT deptnum, empnum, MIN(salary) 
     OVER (PARTITION BY deptnum ORDER BY empnum ROWS UNBOUNDED PRECEDING)
FROM persnl.employee;
</programlisting>
</listitem>
<listitem><para>Return the moving minimum of salary within each department
over a window of the last 4 rows:</para>
<programlisting>SELECT deptnum, empnum, MIN(salary) 
     OVER (PARTITION BY deptnum ORDER BY empnum ROWS 3 PRECEDING)
FROM persnl.employee;
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="RANKolap">
<title>RANK Window Function</title>
<indexterm><primary>OLAP window functions</primary><secondary>RANK
window function</secondary></indexterm><indexterm><primary>RANK window
function</primary><secondary>syntax diagram of</secondary></indexterm>
<indexterm><primary>window functions</primary><secondary>RANK </secondary>
</indexterm>
<para>RANK is a window function that returns the ranking of each row
of the current partition specified by the inline-window-specification.
The ranking is relative to the ordering specified in the inline-window-specification.
The return value of RANK starts at 1 for the first row of the window.
Values that are equal have the same rank. The value of RANK advances
to the relative position of the row in the window when the value changes. </para>
<programlisting>RANK() OVER (<replaceable>inline-window-specification</replaceable
>)

<replaceable>inline-window-specification</replaceable> is:
    [PARTITION BY <replaceable>expression</replaceable> [, <replaceable
>expression</replaceable>]...]
    [ORDER BY <replaceable>expression</replaceable> [ASC[ENDING] | DESC[ENDING]]
              [,<replaceable>expression</replaceable> [ASC[ENDING] | DESC[ENDING]]]...]
</programlisting>
<variablelist>
<varlistentry><term><replaceable>inline-window-specification</replaceable
></term>
<listitem><para>specifies the window over which the RANK is computed.
 The <replaceable>inline-window-specification</replaceable> can contain
an optional PARTITION BY clause and an optional ORDER BY clause. The
PARTITION BY clause specifies how the intermediate result is partitioned
and the ORDER BY clause specifies how the rows are ordered within
each partition.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of RANK Window Function</title>
<indexterm><primary>RANK window function</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>Return the rank for each employee based on employee
number:</para>
<programlisting>SELECT RANK() OVER (ORDER BY empnum), * 
FROM persnl.employee; 
</programlisting>
</listitem>
<listitem><para>Return the rank for each employee within each department
based on salary:</para>
<programlisting>SELECT RANK() OVER (PARTITION BY deptnum ORDER BY salary), * 
FROM persnl.employee; 
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="ROWNUMolap">
<title>ROW_NUMBER Window Function</title>
<indexterm><primary>ROW_NUMBER window function</primary><secondary
>syntax diagram of</secondary></indexterm><indexterm><primary>window
functions</primary><secondary>ROW_NUMBER</secondary></indexterm>
<indexterm><primary>OLAP window functions</primary><secondary>ROW_NUMBER
window function</secondary></indexterm>
<para>ROW_NUMBER is a window function that returns the row number
of each row of the current window specified by the inline-window-specification.</para>
<programlisting>ROW_NUMBER () OVER (<replaceable>inline-window-specification</replaceable
>)

<replaceable>inline-window-specification</replaceable> is:
    [PARTITION BY <replaceable>expression</replaceable> [, <replaceable
>expression</replaceable>]...]
    [ORDER BY <replaceable>expression</replaceable> [ASC[ENDING] | DESC[ENDING]]
              [,<replaceable>expression</replaceable> [ASC[ENDING] | DESC[ENDING]]]...]
</programlisting>
<variablelist>
<varlistentry><term><replaceable>inline-window-specification</replaceable
></term>
<listitem><para>specifies the window over which the ROW_NUMBER is
computed.  The <replaceable>inline-window-specification</replaceable
> can contain an optional PARTITION BY clause and an optional ORDER
BY clause. The PARTITION BY clause specifies how the intermediate
result is partitioned and the ORDER BY clause specifies how the rows
are ordered within each partition.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>window-frame-clause</replaceable
></term>
<listitem><para>specifies the window within the partition over which
the ROW_NUMBER is computed.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of ROW_NUMBER Window Function</title>
<indexterm><primary>ROW_NUMBER window function</primary><secondary
>examples of</secondary></indexterm>
<itemizedlist>
<listitem><para>Return the row number for each row of the employee
table:</para>
<programlisting>SELECT ROW_NUMBER () OVER(ORDER BY empnum), *
FROM persnl.employee;</programlisting>
</listitem>
<listitem><para>Return the row number for each row within each department:</para>
<programlisting>SELECT ROW_NUMBER () OVER(PARTITION BY deptnum ORDER BY empnum), *
FROM persnl.employee;
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="STDDEVolap">
<title>STDDEV Window Function</title>
<indexterm><primary>STDDEV window function</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>window functions</primary>
<secondary>STDDEV</secondary></indexterm><indexterm><primary>OLAP
window functions</primary><secondary>STDDEV window function</secondary>
</indexterm>
<para>STDDEV is a window function that returns the standard deviation
of non null values of the given expression for the current window
specified by the inline-window-specification.</para>
<programlisting>STDDEV ([ALL] <replaceable>expression</replaceable
>) OVER (<replaceable>inline-window-specification</replaceable>)

<replaceable>inline-window-specification</replaceable> is:
    [PARTITION BY <replaceable>expression</replaceable> [, <replaceable
>expression</replaceable>]...]
    [ORDER BY <replaceable>expression</replaceable> [ASC[ENDING] | DESC[ENDING]]
              [,<replaceable>expression</replaceable> [ASC[ENDING] | DESC[ENDING]]]...]
    [ <replaceable>window-frame-clause</replaceable> ]

<replaceable>window-frame-clause</replaceable> is:
     ROWS CURRENT ROW
   | ROWS <replaceable>preceding-row</replaceable>
   | ROWS BETWEEN <replaceable>preceding-row</replaceable> AND <replaceable
>preceding-row</replaceable>
   | ROWS BETWEEN <replaceable>preceding-row</replaceable> AND CURRENT ROW
   | ROWS BETWEEN <replaceable>preceding-row</replaceable> AND <replaceable
>following-row</replaceable>
   | ROWS BETWEEN CURRENT ROW AND CURRENT ROW
   | ROWS BETWEEN CURRENT ROW AND <replaceable>following-row</replaceable
>
   | ROWS BETWEEN <replaceable>following-row</replaceable> AND <replaceable
>following-row</replaceable>

<replaceable>preceding-row</replaceable> is:
     UNBOUNDED PRECEDING
   | <replaceable>unsigned-integer</replaceable> PRECEDING

<replaceable>following-row</replaceable> is:
     UNBOUNDED FOLLOWING
   | <replaceable>unsigned-integer</replaceable> FOLLOWING
</programlisting>
<variablelist>
<varlistentry><term>ALL</term>
<listitem><para>specifies whether duplicate values are included in
the computation of the STDDEV of the <replaceable>expression</replaceable
>. The default option is ALL, which causes duplicate values to be
included. </para></listitem>
</varlistentry>
<varlistentry><term><replaceable>expression</replaceable> </term>
<listitem><para>specifies a numeric or interval value <replaceable
>expression</replaceable> that determines the values over which STDDEV
is computed. </para></listitem>
</varlistentry>
<varlistentry><term><replaceable>inline-window-specification</replaceable
></term>
<listitem><para>specifies the window over which the STDDEV is computed.
The <replaceable>inline-window-specification</replaceable> can contain
an optional PARTITION BY clause, an optional ORDER BY clause and an
optional window frame clause. The PARTITION BY clause specifies how
the intermediate result is partitioned and the ORDER BY clause specifies
how the rows are ordered within each partition.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>window-frame-clause</replaceable
></term>
<listitem><para>specifies the window within the partition over which
the STDDEV is computed.</para></listitem>
</varlistentry>
</variablelist>
<section id="STDDEVex">
<title>Examples of STDDEV</title>
<indexterm><primary>STDDEV window function</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>Return the standard deviation of the salary for each
row of the employee table:</para>
<programlisting>SELECT STDDEV(salary) OVER(ORDER BY empnum ROWS UNBOUNDED PRECEDING),*
FROM persnl.employee;</programlisting>
</listitem>
<listitem><para>Return the standard deviation for each row within
each department:</para>
<programlisting>SELECT STDDEV() OVER(PARTITION BY deptnum ORDER BY empnum ROWS UNBOUNDED PRECEDING), *
FROM persnl.employee;
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="SUMolap">
<title>SUM Window Function</title>
<indexterm><primary>SUM window function</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>window functions</primary>
<secondary>SUM</secondary></indexterm><indexterm><primary>OLAP window
functions</primary><secondary>SUM window function</secondary>
</indexterm>
<para>SUM is a window function that returns the sum of non null values
of the given expression for the current window specified by the inline-window-specification.</para>
<programlisting>SUM ([ALL] <replaceable>expression</replaceable>) OVER (<replaceable
>inline-window-specification</replaceable>)

<replaceable>inline-window-specification</replaceable> is:
    [PARTITION BY <replaceable>expression</replaceable> [, <replaceable
>expression</replaceable>]...]
    [ORDER BY <replaceable>expression</replaceable> [ASC[ENDING] | DESC[ENDING]]
              [,<replaceable>expression</replaceable> [ASC[ENDING] | DESC[ENDING]]]...]
    [ <replaceable>window-frame-clause</replaceable> ]

<replaceable>window-frame-clause</replaceable> is:
     ROWS CURRENT ROW
   | ROWS <replaceable>preceding-row</replaceable>
   | ROWS BETWEEN <replaceable>preceding-row</replaceable> AND <replaceable
>preceding-row</replaceable>
   | ROWS BETWEEN <replaceable>preceding-row</replaceable> AND CURRENT ROW
   | ROWS BETWEEN <replaceable>preceding-row</replaceable> AND <replaceable
>following-row</replaceable>     
   | ROWS BETWEEN CURRENT ROW AND CURRENT ROW
   | ROWS BETWEEN CURRENT ROW AND <replaceable>following-row</replaceable
>
   | ROWS BETWEEN <replaceable>following-row</replaceable> AND <replaceable
>following-row</replaceable>

<replaceable>preceding-row</replaceable> is:
     UNBOUNDED PRECEDING
   | <replaceable>unsigned-integer</replaceable> PRECEDING

<replaceable>following-row</replaceable> is:
     UNBOUNDED FOLLOWING
   | <replaceable>unsigned-integer</replaceable> FOLLOWING
</programlisting>
<variablelist>
<varlistentry><term>ALL</term>
<listitem><para>specifies whether duplicate values are included in
the computation of the SUM of the <replaceable>expression</replaceable
>. The default option is ALL, which causes duplicate values to be
included. </para></listitem>
</varlistentry>
<varlistentry><term><replaceable>expression</replaceable></term>
<listitem><para>specifies a numeric or interval value expression that
determines the values to sum. </para><para>See <xref linkend="i1013683"
role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>inline-window-specification</replaceable
></term>
<listitem><para>specifies the window over which the SUM is computed.
 The <replaceable>inline-window-specification</replaceable> can contain
an optional PARTITION BY clause, an optional ORDER BY clause and an
optional window frame clause.  The PARTITION BY clause specifies how
the intermediate result is partitioned and the ORDER BY clause specifies
how the rows are ordered within each partition.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>window-frame-clause</replaceable
></term>
<listitem><para>specifies the window within the partition over which
the SUM is computed.</para></listitem>
</varlistentry>
</variablelist>
<section>
<title>Examples of SUM Window Function</title>
<indexterm><primary>SUM window function</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>Return the running sum value of the SALARY column:</para>
<programlisting>SELECT empnum, SUM (salary)
               OVER (ORDER BY empnum ROWS UNBOUNDED PRECEDING) 
FROM persnl.employee; 
</programlisting>
</listitem>
<listitem><para>Return the running sum of the SALARY column within
each department:</para>
<programlisting>SELECT deptnum, empnum, SUM (salary)
   OVER (PARTITION BY deptnum ORDER BY empnum ROWS UNBOUNDED PRECEDING) 
FROM persnl.employee; 
</programlisting>
</listitem>
<listitem><para>Return the moving sum of the SALARY column within
each department over a window of the last 4 rows:</para>
<programlisting>SELECT deptnum, empnum, SUM (salary)
   OVER (PARTITION BY deptnum ORDER BY empnum ROWS 3 PRECEDING) 
FROM persnl.employee; 
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
<section id="VARIANCEolap">
<title>VARIANCE Window Function</title>
<indexterm><primary>VARIANCE window function</primary><secondary>syntax
diagram of</secondary></indexterm><indexterm><primary>window functions</primary>
<secondary>VARIANCE</secondary></indexterm><indexterm><primary>OLAP
window functions</primary><secondary>VARIANCE window function</secondary>
</indexterm>
<para>VARIANCE is a window function that returns the variance of non
null values of the given expression for the current window specified
by the inline-window-specification.</para>
<programlisting>VARIANCE ([ALL] <replaceable>expression</replaceable
>) OVER (<replaceable>inline-window-specification</replaceable>)

<replaceable>inline-window-specification</replaceable> is:
    [PARTITION BY <replaceable>expression</replaceable> [, <replaceable
>expression</replaceable>]...]
    [ORDER BY <replaceable>expression</replaceable> [ASC[ENDING] | DESC[ENDING]]
              [,<replaceable>expression</replaceable> [ASC[ENDING] | DESC[ENDING]]]...]
    [ <replaceable>window-frame-clause</replaceable> ]

<replaceable>window-frame-clause</replaceable> is:
     ROWS CURRENT ROW
   | ROWS <replaceable>preceding-row</replaceable>
   | ROWS BETWEEN <replaceable>preceding-row</replaceable> AND <replaceable
>preceding-row</replaceable>
   | ROWS BETWEEN <replaceable>preceding-row</replaceable> AND CURRENT ROW
   | ROWS BETWEEN <replaceable>preceding-row</replaceable> AND <replaceable
>following-row</replaceable>     
   | ROWS BETWEEN CURRENT ROW AND CURRENT ROW
   | ROWS BETWEEN CURRENT ROW AND <replaceable>following-row</replaceable
>
   | ROWS BETWEEN <replaceable>following-row</replaceable> AND <replaceable
>following-row</replaceable>

<replaceable>preceding-row</replaceable> is:
     UNBOUNDED PRECEDING
   | <replaceable>unsigned-integer</replaceable> PRECEDING

<replaceable>following-row</replaceable> is:
     UNBOUNDED FOLLOWING
   | <replaceable>unsigned-integer</replaceable> FOLLOWING
</programlisting>
<variablelist>
<varlistentry><term>ALL</term>
<listitem><para>specifies whether duplicate values are included in
the computation of the VARIANCE of the <replaceable>expression</replaceable
>. The default option is ALL, which causes duplicate values to be
included. </para></listitem>
</varlistentry>
<varlistentry><term><replaceable>expression</replaceable></term>
<listitem><para>specifies a numeric or interval value expression that
determines the values over which the variance is computed. </para><para
>See <xref linkend="i1013683" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>inline-window-specification</replaceable
></term>
<listitem><para>specifies the window over which the VARIANCE is computed.
 The <replaceable>inline-window-specification</replaceable> can contain
an optional PARTITION BY clause, an optional ORDER BY clause and an
optional window frame clause.  The PARTITION BY clause specifies how
the intermediate result is partitioned and the ORDER BY clause specifies
how the rows are ordered within each partition.</para></listitem>
</varlistentry>
<varlistentry><term><replaceable>window-frame-clause</replaceable
></term>
<listitem><para>specifies the window within the partition over which
the VARIANCE is computed.</para></listitem>
</varlistentry>
</variablelist>
<section id="VARIANCEex">
<title>Examples of VARIANCE Window Function</title>
<indexterm><primary>VARIANCE window function</primary><secondary>examples
of</secondary></indexterm>
<itemizedlist>
<listitem><para>Return the variance of the SALARY column:</para>
<programlisting>SELECT empnum, VARIANCE (salary)
               OVER (ORDER BY empnum ROWS UNBOUNDED PRECEDING) 
FROM persnl.employee; 
</programlisting>
</listitem>
<listitem><para>Return the variance of the SALARY column within each
department:</para>
<programlisting>SELECT deptnum, empnum, VARIANCE (salary)
   OVER (PARTITION BY deptnum ORDER BY empnum ROWS UNBOUNDED PRECEDING) 
FROM persnl.employee; 
</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
</chapter>
<chapter id="SQLRuntimeStats">
<title>SQL Runtime Statistics</title>
<indexterm><primary>Runtime statistics</primary><see>RMS</see>
</indexterm><indexterm condition="hidden"><primary>Runtime statistics
(RTS)</primary><see>RMS</see></indexterm><indexterm condition="hidden">
<primary>RTS</primary><see>RMS</see></indexterm><indexterm><primary
>SQL runtime statistics</primary><see>RMS</see></indexterm><indexterm>
<primary>RMS</primary><secondary>features</secondary></indexterm>
<indexterm><primary>Runtime Management System (RMS)</primary><see
>RMS</see></indexterm><indexterm><primary>Statistics</primary>
</indexterm><indexterm><primary>RMS</primary><secondary>overview</secondary>
</indexterm>
<para>The Runtime Management System (RMS) shows the status of queries
while they are running. RMS can service on-demand requests from the
Trafodion Command Interface (TrafCI) to get statistics for a given
query ID or for active queries in a given process. RMS also provides
information about itself to determine the health of the RMS infrastructure. </para>
<para>RMS provides the summary statistics for each fragment instance
and detailed statistics for each operator (TDB_ID) of a given active
query. A query is considered active if either the compilation or execution
is in progress. The variable_input column output is returned as a
multiple value pair of the form <replaceable>token=value</replaceable
>. For more information, see <xref linkend="DETAIL_Token"
role="select:quotedtitle page"/>.</para>
<para>RMS is enabled and available all the time. </para>
<para>This chapter includes:</para>
<itemizedlist>
<listitem><para><xref linkend="RetrieveStats"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="i1021469" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="StatsAboutRMS"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="i1022598" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="DETAIL_Token"
role="select:quotedtitle page"/></para></listitem>
</itemizedlist>
<section id="Pertable_Operator_Stats">
<title>PERTABLE and OPERATOR Statistics</title>
<indexterm><primary>RMS</primary><secondary>operator statistics</secondary>
</indexterm><indexterm><primary>Operator statistics</primary>
</indexterm><indexterm><primary>RMS</primary><secondary>PERTABLE statistics</secondary>
</indexterm><indexterm><primary>RMS</primary><secondary>big memory
operators</secondary></indexterm><indexterm><primary>PERTABLE statistics</primary>
</indexterm>
<para>The SQL database engine determines which type of statistics
collection is appropriate for the query. The RMS infrastructure provides
the runtime metrics about a query while a query is executing. You
can identify queries that are using excessive resources, suspend a
query to determine its impact on resources, and cancel a query, when
necessary. PERTABLE statistics count rows and report rows estimated
in the operators in the disk processes and time spent in the ESP processes.
Although PERTABLE statistics can deduce when all the rows have been
read from the disks, it is impossible to correctly assess the current
state of the query. </para>
<indexterm><primary>Big memory operators (BMOs)</primary></indexterm>
<para>Complex queries such as joins, sorts, and group result sets
are often too large to fit into memory, so intermediate results must
overflow to scratch files. These operators are called Big Memory Operators
(BMOs). Because of the BMOs, RMS provides OPERATOR statistics, which
provide a richer set of statistics so that the current state of a
query can be determined at any time.</para>
<para>With OPERATOR statistics, all SQL operators are instrumented
and the following statistics are collected: <itemizedlist>
<listitem><para>Node time spent in the operator</para></listitem>
<listitem><para>Actual number of rows flowing to the parent operator</para>
</listitem>
<listitem><para>Estimated number of rows flowing to the parent operator
(estimated by the optimizer)</para></listitem>
<listitem><para>Virtual memory used in the BMO</para></listitem>
<listitem><para>Amount of data overflowed to scratch files and read
back to the query</para></listitem>
</itemizedlist>For more information, see <xref linkend="i1021469"
role="select:quotedtitle page"/>.</para>
</section>
<section id="AdaptiveColl">
<title>Adaptive Statistics Collection</title>
<indexterm><primary>RMS</primary><secondary>adaptive statistics</secondary>
</indexterm>
<para>The SQL database engine chooses the appropriate statistics collection
type based on the type of query. By default, the SQL database engine
statistics collection is OPERATOR statistics. You can view the statistics
in different formats: PERTABLE, ACCUMULATED, PROGRESS, and DEFAULT.
Statistics Collection is adaptive to ensure that sufficient statistics
information is available without causing any performance impact to
the query's execution. For some queries, either no statistics or PERTABLE
statistics are collected. </para>
<informaltable frame="topbot">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col3"/>
<colspec colname="col4"/>
<thead>
<row rowsep="1" valign="bottom"><entry align="left" valign="bottom"
>Query Type</entry><entry align="left" valign="bottom">Statistics
Collection Type</entry></row>
</thead>
<tbody>
<row><entry>OLT optimized queries</entry><entry>PERTABLE</entry></row>
<row><entry>Unique queries</entry><entry>PERTABLE</entry></row>
<row><entry>CQD</entry><entry>No statistics</entry></row>
<row><entry>SET commands</entry><entry>No statistics</entry></row>
<row><entry>EXPLAIN</entry><entry>No statistics</entry></row>
<row><entry>GET STATISTICS</entry><entry>No statistics</entry></row>
<row><entry>All other queries</entry><entry>DEFAULT</entry></row>
</tbody>
</tgroup>
</informaltable>
</section>
<section id="RetrieveStats">
<title>Retrieving SQL Runtime Statistics</title>
<section id="GET_STATS">
<title>Using the GET STATISTICS Command</title>
<indexterm><primary>GET STATISTICS command</primary><secondary>syntax</secondary>
</indexterm><indexterm><primary>RMS</primary><secondary>displaying</secondary>
</indexterm>
<para>The GET STATISTICS command shows statistical information for:</para>
<indexterm><primary>Query ID (QID)</primary><secondary>obtaining</secondary>
</indexterm><indexterm><primary>GET STATISTICS command</primary>
<secondary>process ID (PID)</secondary></indexterm>
<itemizedlist>
<listitem><para>A single query ID (QID)</para></listitem>
<listitem><para>Active queries for a process ID (PID)<!--WRITER'S NOTE: Still not tested. Check with Mike/Selva. --></para>
</listitem>
<listitem><para>RMS itself</para></listitem>
</itemizedlist>
<indexterm><primary>Active query</primary></indexterm>
<para>A query is considered active if either compilation or execution
is in progress. In the case of a SELECT statement, a query is in execution
until the statement or result set is closed. Logically, a query is
considered to be active when the compile end time is -1 and the compile
start time is not -1, or when the execute end time is -1 and the execute
start time is not -1.  </para>
<section>
<title>Syntax of GET STATISTICS</title>
<informaltable frame="all">
<tgroup cols="1" colsep="0" rowsep="0">
<colspec colname="col4"/>
<tbody>
<row><entry><programlisting>GET STATISTICS FOR QID {<replaceable>query-id</replaceable
>|CURRENT}[<replaceable>stats-view-type</replaceable>]}  
                 |PID {<replaceable>process-name</replaceable>|[<replaceable
>nodeid</replaceable>,<replaceable>pid</replaceable>]}[ACTIVE <replaceable
>n</replaceable>][<replaceable>stats-view-type</replaceable>]
                 <literal>|RMS <replaceable>node-num</replaceable
>|ALL[RESET]</literal>

<replaceable>stats-view-type</replaceable> is:

<literal>ACCUMULATED|PERTABLE|PROGRESS|DEFAULT
</literal></programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<variablelist>
<varlistentry><term>QID</term>
<listitem><para>Required keyword if requesting statistics for a specific
query.</para>
<variablelist><indexterm><primary>GET STATISTICS command</primary>
<secondary>query ID (QID)</secondary></indexterm>
<varlistentry><term><replaceable>query-id</replaceable> </term>
<listitem><para>is the query ID. You must put the <replaceable>query-id</replaceable
> in double quotes if the user name in the query ID contains lower
case letters or if the user name contains a period.<note>
<para>The <replaceable>query-id</replaceable> is a unique identifier
for the SQL statement generated when the query is compiled (prepared).
The <replaceable>query-id</replaceable> is visible for queries executed <phrase
>through certain TrafCI commands</phrase>.</para>
</note></para></listitem>
</varlistentry>
<varlistentry><term>CURRENT</term>
<listitem><para>provides statistics for the most recently prepared
or executed statement in the same session where you run the GET STATISTICS
FOR QID CURRENT command. You must issue the GET STATISTICS FOR QID
CURRENT command immediately after the PREPARE or EXECUTE statement.</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term>PID</term>
<listitem><para>Required keyword if requesting statistics for an active
query in a given process. </para>
<variablelist>
<varlistentry><term><replaceable>process-name</replaceable></term>
<listitem><para>is the name of the process ID (PID) in the format: <literal
>$Z<replaceable>nnn</replaceable></literal>. The process name can
be for the master (MXOSRVR) or executor server process (ESP). If the
process name corresponds to the ESP, the ACTIVE <replaceable>n</replaceable
> query is just the <replaceable>n</replaceable>th query in that ESP
and might not be the currently active query in the ESP. </para>
</listitem>
</varlistentry>
<varlistentry><term>ACTIVE <replaceable>n</replaceable></term>
<listitem><para>describes which of the active queries for which RMS
returns statistics. ACTIVE 1 is the default. ACTIVE 1 returns statistics
for the first active query. ACTIVE 2 returns statistics for the second
active query.</para></listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>stats-view-type</replaceable></term>
<listitem><para>sets the statistics view type to a different format.
Statistics are collected at the operator level by default. For exceptions,
see <xref linkend="AdaptiveColl" role="select:quotedtitle page"/>.</para>
<variablelist>
<varlistentry><term>ACCUMULATED</term>
<listitem><para>causes the statistics to be displayed in an aggregated
summary across all tables in the query.</para></listitem>
</varlistentry>
<varlistentry><term>PERTABLE</term>
<listitem><para>displays statistics for each table in the query. This
is the default <replaceable>stats-view-type</replaceable> although
statistics are collected at the operator level. If the collection
occurs at a lower level due to Adaptive Statistics, the default is
the lowered collection level. For more information, see <xref
linkend="AdaptiveColl" role="select:quotedtitle page"/></para>
</listitem>
</varlistentry>
<varlistentry><term>PROGRESS</term>
<listitem><para>displays rows of information corresponding to each
of the big memory operators (BMO) operators involved in the query,
in addition to pertable <replaceable>stats-view-type</replaceable
>. For more information about BMOs, see <xref
linkend="Pertable_Operator_Stats" role="select:quotedtitle page"/>.</para>
</listitem>
</varlistentry>
<varlistentry><term>DEFAULT</term>
<listitem><para>displays statistics in the same way as it is collected. </para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry><term>RMS</term>
<listitem><para>Required keyword if requesting statistics about RMS
itself.</para>
<variablelist>
<varlistentry><term><replaceable>node-num</replaceable></term>
<listitem><para>returns the statistics about the RMS infrastructure
for a given node.</para></listitem>
</varlistentry>
<varlistentry><term>ALL</term>
<listitem><para>returns the statistics about the RMS infrastructure
for every node in the cluster.</para></listitem>
</varlistentry>
<varlistentry><term>RESET</term>
<listitem><para>resets the cumulative RMS statistics counters.</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
</section>
<section>
<title>Examples of GET STATISTICS</title>
<para>These examples show the runtime statistics that various GET
STATISTICS commands return. For more information about the runtime
statistics and RMS counters, see <xref linkend="i1021469"
role="select:quotedtitle page"/>.</para>
<itemizedlist>
<listitem><para>This GET STATISTICS command returns PERTABLE statistics
for the most recently executed statement in the same session:<screen
><computeroutput>SQL></computeroutput><userinput>get statistics for qid current;</userinput
><computeroutput>
Qid                      MXID1100801837021216821167247667200000000030000_59_SQL_CUR_6
Compile Start Time       2011/03/30 07:29:15.332216
Compile End Time         2011/03/30 07:29:15.339467
Compile Elapsed Time                 0:00:00.007251
Execute Start Time       2011/03/30 07:29:15.383077
Execute End Time         2011/03/30 07:29:15.470222
Execute Elapsed Time                 0:00:00.087145
State                    CLOSE                    
Rows Affected            0                        
SQL Error Code           100                      
Stats Error Code         0                        
Query Type               SQL_SELECT_NON_UNIQUE    
Estimated Accessed Rows  0                        
Estimated Used Rows      0                        
Parent Qid               NONE                     
Child Qid                NONE                     
Number of SQL Processes  1                        
Number of Cpus           1                        
Execution Priority       -1                       
Transaction Id           -1                       
Source String            SELECT CUR_SERVICE,PLAN,TEXT,CUR_SCHEMA,RULE_NAME,APPL_NAME,SESSION_NAME,DSN_NAME,ROLE_NAME,DEFAULT_SCHEMA_ACCESS_ONLY FROM(VALUES(CAST('HP_DEFAULT_SERVICE' as VARCHAR(50)),CAST(0 AS INT),CAST(0 AS INT),CAST('NEO.USR' as VARCHAR(260)),CAST('' as VARCHAR(
SQL Source Length        548                      
Rows Returned            1                        
First Row Returned Time  2011/03/30 07:29:15.469778
Last Error before AQR    0                        
Number of AQR retries    0                        
Delay before AQR         0                        
No. of times reclaimed   0                        
Stats Collection Type    OPERATOR_STATS           
SQL Process Busy Time    0                        
UDR Process Busy Time    0                        
SQL Space Allocated      32                        KB
SQL Space Used           3                         KB
SQL Heap Allocated       7                         KB
SQL Heap Used            1                         KB
EID Space Allocated      0                         KB
EID Space Used           0                         KB
EID Heap Allocated       0                         KB
EID Heap Used            0                         KB
Processes Created        0                        
Process Create Time      0                        
Request Message Count    0                        
Request Message Bytes    0                        
Reply Message Count      0                        
Reply Message Bytes      0                        
Scr. Overflow Mode       DISK                     
Scr File Count           0                        
Scr. Buffer Blk Size     0                        
Scr. Buffer Blks Read    0                        
Scr. Buffer Blks Written 0                        
Scr. Read Count          0                        
Scr. Write Count         0                        

--- SQL operation complete.
</computeroutput></screen></para></listitem>
<listitem><para>This GET STATISTICS command returns PERTABLE statistics
for the specified query ID (note that this command should be issued
in the same session):<screen><computeroutput>SQL></computeroutput
><userinput>get statistics for qid "MXID1100800517921216818752807267200000000030000_48_SQL_CUR_2";</userinput
><computeroutput>
Qid                      MXID1100800517921216818752807267200000000030000_48_SQL_CUR_2
Compile Start Time       2011/03/30 00:53:21.382211
Compile End Time         2011/03/30 00:53:22.980201
Compile Elapsed Time                 0:00:01.597990
Execute Start Time       2011/03/30 00:53:23.079979
Execute End Time         -1                       
Execute Elapsed Time                 7:16:13.494563
State                    OPEN                     
Rows Affected            -1                       
SQL Error Code           0                        
Stats Error Code         0                        
Query Type               SQL_SELECT_NON_UNIQUE    
Estimated Accessed Rows  2,487,984                
Estimated Used Rows      2,487,984                
Parent Qid               NONE                     
Child Qid                NONE                     
Number of SQL Processes  129                      
Number of Cpus           9                        
Execution Priority       -1                       
Transaction Id           34359956800              
Source String            select count(*) from 
MANAGEABILITY.INSTANCE_REPOSITORY.EVENTS_TEXT K,
MANAGEABILITY.INSTANCE_REPOSITORY.EVENTS_TEXT J,
MANAGEABILITY.INSTANCE_REPOSITORY.EVENTS_TEXT H,
MANAGEABILITY.INSTANCE_REPOSITORY.EVENTS_TEXT G
SQL Source Length        220                      
Rows Returned            0                        
First Row Returned Time  -1                       
Last Error before AQR    0                        
Number of AQR retries    0                        
Delay before AQR         0                        
No. of times reclaimed   0                        
Stats Collection Type    OPERATOR_STATS           
SQL Process Busy Time    830,910,830,000          
UDR Process Busy Time    0                        
SQL Space Allocated      179,049                   KB
SQL Space Used           171,746                   KB
SQL Heap Allocated       1,140,503                 KB
SQL Heap Used            1,138,033                 KB
EID Space Allocated      46,080                    KB
EID Space Used           42,816                    KB
EID Heap Allocated       18,624                    KB
EID Heap Used            192                       KB
Processes Created        32                       
Process Create Time      799,702                  
Request Message Count    202,214                  
Request Message Bytes    27,091,104               
Reply Message Count      197,563                  
Reply Message Bytes      1,008,451,688            
Scr. Overflow Mode       DISK                     
Scr File Count           0                        
Scr. Buffer Blk Size     0                        
Scr. Buffer Blks Read    0                        
Scr. Buffer Blks Written 0                        
Scr. Read Count          0                        
Scr. Write Count         0                        
 
Table Name     
   Records Accessed       Records Used         Disk      Message            Message    Lock    Lock       Disk Process    Open               Open
   Estimated/Actual   Estimated/Actual         I/Os        Count              Bytes    Escl    wait          Busy Time   Count               Time
MANAGEABILITY.INSTANCE_REPOSITORY.EVENTS_TEXT(H)
            621,996            621,996
            621,998            621,998            0          441         10,666,384       0       0            303,955      32             15,967
MANAGEABILITY.INSTANCE_REPOSITORY.EVENTS_TEXT(J)
            621,996            621,996
            621,998            621,998            0          439         10,666,384       0       0            289,949      32             19,680
MANAGEABILITY.INSTANCE_REPOSITORY.EVENTS_TEXT(K)
            621,996            621,996
            621,998            621,998            0          439         10,666,384       0       0            301,956      32             14,419
MANAGEABILITY.INSTANCE_REPOSITORY.EVENTS_TEXT(G)
                  0            621,996
                  0                  0            0          192          4,548,048       0       0                  0      32             40,019

--- SQL operation complete.
</computeroutput></screen></para></listitem>
<listitem><para>This GET STATISTICS command returns ACCUMULATED statistics
for the most recently executed statement in the same session: <screen
><computeroutput>SQL></computeroutput><userinput>get statistics for qid current accumulated;</userinput
><computeroutput>

Qid                      MXID1100802517321216821277534304000000000340000_957_SQL_CUR_6
Compile Start Time       2011/03/30 08:05:07.646667
Compile End Time         2011/03/30 08:05:07.647622
Compile Elapsed Time                 0:00:00.000955
Execute Start Time       2011/03/30 08:05:07.652710
Execute End Time         2011/03/30 08:05:07.740461
Execute Elapsed Time                 0:00:00.087751
State                    CLOSE                    
Rows Affected            0                        
SQL Error Code           100                      
Stats Error Code         0                        
Query Type               SQL_SELECT_NON_UNIQUE    
Estimated Accessed Rows  0                        
Estimated Used Rows      0                        
Parent Qid               NONE                     
Child Qid                NONE                     
Number of SQL Processes  0                        
Number of Cpus           0                        
Execution Priority       -1                       
Transaction Id           -1                       
Source String            SELECT CUR_SERVICE,PLAN,TEXT,CUR_SCHEMA,RULE_NAME,APPL_NAME,SESSION_NAME,DSN_NAME,ROLE_NAME,DEFAULT_SCHEMA_ACCESS_ONLY FROM(VALUES(CAST('HP_DEFAULT_SERVICE' as VARCHAR(50)),CAST(0 AS INT),CAST(0 AS INT),CAST('NEO.SCH' as VARCHAR(260)),CAST('' as VARCHAR(
SQL Source Length        548                      
Rows Returned            1                        
First Row Returned Time  2011/03/30 08:05:07.739827
Last Error before AQR    0                        
Number of AQR retries    0                        
Delay before AQR         0                        
No. of times reclaimed   0                        
Stats Collection Type    OPERATOR_STATS           
Accessed Rows            0                        
Used Rows                0                        
Message Count            0                        
Message Bytes            0                        
Stats Bytes              0                        
Disk IOs                 0                        
Lock Waits               0                        
Lock Escalations         0                        
Disk Process Busy Time   0                        
SQL Process Busy Time    0                        
UDR Process Busy Time    0                        
SQL Space Allocated      32                        KB
SQL Space Used           3                         KB
SQL Heap Allocated       7                         KB
SQL Heap Used            1                         KB
EID Space Allocated      0                         KB
EID Space Used           0                         KB
EID Heap Allocated       0                         KB
EID Heap Used            0                         KB
Opens                    0                        
Open Time                0                        
Processes Created        0                        
Process Create Time      0                        
Request Message Count    0                        
Request Message Bytes    0                        
Reply Message Count      0                        
Reply Message Bytes      0                        
Scr. Overflow Mode       UNKNOWN                  
Scr. File Count          0                        
Scr. Buffer Blk Size     0                        
Scr. Buffer Blks Read    0                        
Scr. Buffer Blks Written 0                        
Scr. Read Count          0                        
Scr. Write Count         0                        

--- SQL operation complete.
</computeroutput></screen></para></listitem>
<listitem><para>These GET STATISTICS commands return PERTABLE statistics
for the first active query in the specified process ID: </para>
<screen><computeroutput>SQL></computeroutput><userinput>get statistics for pid 0,27195;
</userinput><computeroutput>SQL></computeroutput><userinput>get statistics for pid $Z000F3R;
</userinput></screen>
</listitem>
</itemizedlist>
</section>
</section>
</section>
<section id="i1021469">
<title>Displaying SQL Runtime Statistics</title>
<indexterm><primary>RMS</primary><secondary>counters</secondary>
</indexterm><indexterm><primary>RMS</primary><secondary>counters</secondary>
</indexterm><indexterm><primary>Counters</primary></indexterm>
<para>By default, GET STATISTICS displays table-wise statistics (PERTABLE).
If you want to view the statistics in a different format, use the
appropriate view option of the GET STATISTICS command.</para>
<para>RMS provides abbreviated statistics information for prepared
statements and full runtime statistics for executed statements.</para>
<para><xref linkend="accumstats" role="select:label page"/> shows
the RMS counters that are returned by GET STATISTICS, tokens from
the STATISTICS table-valued function that relate to the RMS counters,
and descriptions of the counters and tokens.</para>
<table frame="topbot" id="accumstats">
<title>RMS Counter Information for SQL Runtime Statistics</title>
<tgroup cols="3" colsep="0" rowsep="0">
<colspec colwidth="0.57*"/>
<colspec colname="COLSPEC4" colwidth="0.51*"/>
<colspec colwidth="1.36*"/>
<thead>
<row rowsep="1" valign="bottom"><entry>Counter Name</entry><entry
>Tokens in STATISTICS Table-Valued Function</entry><entry>Description</entry>
</row>
</thead>
<tbody>
<row><entry>Qid</entry><entry>Qid</entry><entry>A unique ID generated
for each query. Each time a SQL statement is prepared, a new query
ID is generated.</entry></row>
<row><entry>Compile Start Time</entry><entry>CompStartTime</entry>
<entry>Time when the query compilation started or time when PREPARE
for this query started.</entry></row>
<row><entry>Compile End Time</entry><entry>CompEndTime</entry><entry
>Time when the query compilation ended or time when PREPARE for this
query ended.</entry></row>
<row><entry>Compile Elapsed Time</entry><entry>CompElapsedTime</entry>
<entry>Amount of actual time to prepare the query.</entry></row>
<row><entry>Execute Start Time</entry><entry>ExeStartTime</entry><entry
>Time when query execution started.</entry></row>
<row><entry>Execute End Time</entry><entry>ExeEndTime</entry><entry
>Time when query execution ended. When a query is executing, Execute
End Time is –1.</entry></row>
<row><entry>Execute Elapsed Time </entry><entry>ExeElapsedTime</entry>
<entry>Amount of actual time used by the SQL executor to execute the
query.</entry></row>
<row><entry>State</entry><entry>State</entry><entry>Internally used.</entry>
</row>
<row><entry>Rows Affected</entry><entry>RowsAffected</entry><entry
>Represents the number of rows affected by the INSERT, UPDATE, or
DELETE (IUD) SQL statements. Value of –1 for SELECT statements or
non-IUD SQL statements. </entry></row>
<row><entry>SQL Error Code</entry><entry>SQLErrorCode</entry><entry
>Top-level error code returned by the query, indicating whether the
query completed with warnings, errors, or successfully. A positive
number indicates a warning. A negative number indicates an error.
The value returned may not be accurate up to the point GET STATISTICS
was executed.</entry></row>
<row><entry>Stats Error Code</entry><entry>StatsErrorCode</entry><entry
>Error code returned to the statistics collector while obtaining statistics
from RMS. If an error code, counter values may be incorrect. Reissue
the GET STATISTICS command.</entry></row>
<row><entry>Query Type</entry><entry>QueryType</entry><entry>Type
of DML statement and enum value:<itemizedlist>
<listitem><para>SQL_SELECT_UNIQUE=1</para></listitem>
<listitem><para>SQL_SELECT_NON_UNIQUE=2</para></listitem>
<listitem><para>SQL_INSERT_UNIQUE=3</para></listitem>
<listitem><para>SQL_INSERT_NON_UNIQUE=4</para></listitem>
<listitem><para>SQL_UPDATE_UNIQUE=5</para></listitem>
<listitem><para>SQL_UPDATE_NON_UNIQUE=6</para></listitem>
<listitem><para>SQL_DELETE_UNIQUE=7</para></listitem>
<listitem><para>SQL_DELETE_NON_UNIQUE=8</para></listitem>
<listitem><para>SQL_CONTROL=9</para></listitem>
<listitem><para>SQL_SET_TRANSACTION=10</para></listitem>
<listitem><para>SQL_SET_CATALOG=11</para></listitem>
<listitem><para>SQL_SET_SCHEMA=12</para></listitem>
<listitem><para>SQL_CALL_NO_RESULT_SETS=13</para></listitem>
<listitem><para>SQL_CALL_WITH_RESULT_SETS=14</para></listitem>
<listitem><para>SQL_SP_RESULT_SET=15</para></listitem>
<listitem><para>SQL_INSERT_ROWSET_SIDETREE=16</para></listitem>
<listitem><para>SQL_CAT_UTIL=17</para></listitem>
<listitem><para>SQL_EXE_UTIL=18</para></listitem>
<listitem><para>SQL_OTHER=1</para></listitem>
<listitem><para>SQL_UNKNOWN=0</para></listitem>
</itemizedlist></entry></row>
<row><entry>Estimated Accessed Rows</entry><entry>EstRowsAccessed</entry>
<entry>Compiler's estimated number of rows accessed by the executor
in TSE.</entry></row>
<row><entry>Estimated Used Rows</entry><entry>EstRowsUsed</entry><entry
>Compiler's estimated number of rows returned by the executor in TSE
after applying the predicates.</entry></row>
<row><entry>Parent Qid</entry><entry>parentQid</entry><entry>A unique
ID for the parent query. If there is no parent query ID associated
with the query, RMS returns NONE. For more information, see <xref
linkend="Using-Parent-QID" role="select:quotedtitle page"/>.</entry>
</row>
<row><entry>Child Qid</entry><entry>childQid</entry><entry>A unique
ID for the child query. If there is no child query, then there will
be no child query ID and RMS returns NONE. For more information, see <xref
linkend="Child_QID" role="select:quotedtitle page"/>.</entry></row>
<row><entry>Number of SQL Processes</entry><entry>numSqlProcs</entry>
<entry>Represents the number of SQL processes (excluding TSE processes)
involved in executing the query.</entry></row>
<row><entry>Number of CPUs</entry><entry>numCpus</entry><entry>Represents
the number of nodes that SQL is processing the query.</entry></row>
<row><entry>Transaction ID</entry><entry>transId</entry><entry>Represents
the transaction ID of the transaction involved in executing the query.
When no transaction exists, the Transaction ID is -1.</entry></row>
<row><entry>Source String</entry><entry>sqlSrc</entry><entry>Contains
the first 254 bytes of source string<phrase condition="hidden"> for
a given query ID</phrase>.</entry></row>
<row><entry>SQL Source Length</entry><entry>sqlSrcLen</entry><entry
>The actual length of the SQL source string. <phrase condition="hidden"
>If greater than the maximum number of bytes stored, the length is
truncated.</phrase></entry></row>
<row><entry>Rows Returned</entry><entry>rowsReturned</entry><entry
>Represents the number of rows returned from the root operator at
the master executor process. </entry></row>
<row><entry>First Row Returned Time</entry><entry>firstRowReturnTime</entry>
<entry>Represents the actual time that the first row is returned by
the master root operator.</entry></row>
<row><entry>Last Error Before AQR</entry><entry>LastErrorBeforeAQR</entry>
<entry>The error code that triggered Automatic Query Retry (AQR) for
the most recent retry. If the value is not 0, this is the error code
that triggered the most recent AQR.</entry></row>
<row><entry>Number of AQR retries</entry><entry>AQRNumRetries</entry>
<entry>The number of retries for the current query until now.</entry>
</row>
<row><entry>Delay before AQR</entry><entry>DelayBeforeAQR</entry><entry
>Delay in seconds that SQL waited before initiating AQR.</entry></row>
<row><entry>No. of times reclaimed</entry><entry>reclaimSpaceCnt</entry>
<entry>When a process is under virtual memory pressure, the execution
space occupied by the queries executed much earlier will be reclaimed
to free up space for the upcoming queries. This counter represents
how many times this particular query is reclaimed.</entry></row>
<row><entry></entry><entry>statsRowType</entry><entry>statsRowType
can be one of the following:<itemizedlist>
<listitem><para>SQLSTATS_DESC_OPER_STATS=0</para></listitem>
<listitem><para>SQLSTATS_DESC_ROOT_OPER_STATS=1</para></listitem>
<listitem><para>SQLSTATS_DESC_PERTABLE_STATS=11</para></listitem>
<listitem><para>SQLSTATS_DESC_UDR_STATS=13</para></listitem>
<listitem><para>SQLSTATS_DESC_MASTER_STATS=15</para></listitem>
<listitem><para>SQLSTATS_DESC_RMS_STATS=16</para></listitem>
<listitem><para>SQLSTATS_DESC_BMO_STATS=17</para></listitem>
</itemizedlist></entry></row>
<row><entry>Stats Collection Type</entry><entry>StatsType</entry><entry
>Collection type, which is OPERATOR_STATS by default. StatsType can
be one of the following:<itemizedlist>
<listitem><para>SQLCLI_NO_STATS=0</para></listitem>
<listitem><para>SQLCLI_ACCUMULATED_STATS=2</para></listitem>
<listitem><para>SQLCLI_PERTABLE_STATS=3</para></listitem>
<listitem><para>SQLCLI_OPERATOR_STATS=5</para></listitem>
</itemizedlist></entry></row>
<row><entry>Accessed Rows (Rows Accessed)</entry><entry>AccessedRows</entry>
<entry>Actual number of rows accessed by the executor in TSE. </entry>
</row>
<row><entry>Used Rows (Rows Used)</entry><entry>UsedRows</entry><entry
>Number of rows returned by TSE after applying the predicates. In
a push down plan, TSE may not return all the used rows.</entry></row>
<row><entry>Message Count</entry><entry>NumMessages</entry><entry
>Count of the number of messages sent to TSE.</entry></row>
<row><entry>Message Bytes</entry><entry>MessageBytes</entry><entry
>Count of the message bytes exchanged with TSE.</entry></row>
<row><entry>Stats Bytes</entry><entry>StatsBytes</entry><entry>Number
of bytes returned for statistics counters from TSE.</entry></row>
<row><entry>Disk IOs</entry><entry>DiskIOs</entry><entry>Number of
physical disk reads for accessing the tables. <phrase condition="hidden"
>referenced in this statement</phrase></entry></row>
<row><entry>Lock Waits</entry><entry>LockWaits</entry><entry>Number
of times this statement had to wait on a conflicting lock. <phrase
condition="hidden">If this field is 0, no locks were encountered during
the processing of this statement.</phrase></entry></row>
<row><entry>Lock Escalations</entry><entry>Escalations</entry><entry
>Number of times row locks escalated to a file lock during the execution
of this statement. <phrase condition="hidden">If this field is 0,
no locks were escalated during this statement execution.</phrase></entry>
</row>
<row><entry>Disk Process Busy Time</entry><entry>ProcessBusyTime</entry>
<entry>An approximation of the total node time in microseconds spent
by TSE for executing the query.</entry></row>
<row><entry>SQL Process Busy Time</entry><entry>CpuTime</entry><entry
>An approximation of the total node time in microseconds spent in
the master and ESPs involved in the query.</entry></row>
<row><entry>UDR Process Busy Time (same as UDR CPU Time)</entry><entry
>udrCpuTime</entry><entry>An approximation of the total node time
in microseconds spent in the UDR server process.</entry></row>
<row><entry>UDR Server ID</entry><entry>UDRServerId</entry><entry
>MXUDR process ID.</entry></row>
<row><entry>Recent Request Timestamp</entry><entry></entry><entry
>Actual timestamp of the recent request sent to MXUDR.</entry></row>
<row><entry>Recent Reply Timestamp</entry><entry></entry><entry>Actual
timestamp of the recent request received by MXUDR.</entry></row>
<row><entry>SQL Space Allocated<superscript>1</superscript></entry>
<entry>SpaceTotal<superscript>1</superscript></entry><entry>The amount
of “space” type of memory in KB allocated in the master and ESPs involved
in the query.</entry></row>
<row><entry>SQL Space Used<footnote>
<para>Space is memory allocated from a pool owned by the executor.
The executor operators requesting the memory are not expected to return
the memory until the statement is deallocated.</para>
</footnote></entry><entry>SpaceUsed<superscript>1</superscript></entry>
<entry>Amount of “space” type of memory in KB used in master and ESPs
involved in the query.</entry></row>
<row><entry>SQL Heap Allocated<footnote>
<para>Heap memory is used for temporary allocations. Operators may
return heap memory before the statement is deallocated. This allows
the memory to be reused as needed.</para>
</footnote></entry><entry>HeapTotal<superscript>2</superscript></entry>
<entry>Amount of “heap” type of memory in KB allocated in master and
ESPs involved in the query.</entry></row>
<row><entry>SQL Heap Used<superscript>2</superscript></entry><entry
>HeapUsed<superscript>2</superscript></entry><entry>Amount of “heap”
type of memory in KB used in master and ESPs involved in the query.</entry>
</row>
<row><entry>EID Space Allocated<superscript>1</superscript></entry>
<entry>Dp2SpaceTotal</entry><entry>Amount of “space” type of memory
in KB allocated in the executor in TSEs involved in the query.</entry>
</row>
<row><entry>EID Space Used<superscript>1</superscript></entry><entry
>Dp2SpaceUsed</entry><entry>Amount of “space” type of memory in KB
used in the executor in TSEs involved in the query.</entry></row>
<row><entry>EID Heap Allocated<superscript>2</superscript></entry>
<entry>Dp2HeapTotal</entry><entry>Amount of “heap” memory in KB allocated
in the executor in TSEs involved in the query.</entry></row>
<row><entry>EID Heap Used<superscript>2</superscript></entry><entry
>Dp2HeapUsed</entry><entry>Amount of “heap” memory in KB used in the
executor in TSEs involved in the query.</entry></row>
<row><entry>Opens </entry><entry>Opens</entry><entry>Number of OPEN
calls performed by the SQL executor on behalf of this statement.</entry>
</row>
<row><entry>Open Time </entry><entry>OpenTime</entry><entry>Time (in
microseconds) this process spent doing OPENs on behalf of this statement.</entry>
</row>
<row><entry>Processes Created </entry><entry>Newprocess</entry><entry
>The number of processes (ESPs and MXCMPs) created by the master executor
for this statement.</entry></row>
<row><entry>Process Create Time </entry><entry>NewprocessTime</entry>
<entry>The elapsed time taken to create these processes.</entry></row>
<row><entry>Table Name</entry><entry>AnsiName</entry><entry>Name of
a table in the query.</entry></row>
<row><entry>Request Message Count</entry><entry>reqMsgCnt</entry><entry
>Number of messages initiated from the master to ESPs or from the
ESP to ESPs.</entry></row>
<row><entry>Request Message Bytes</entry><entry>regMsgBytes</entry>
<entry>Number of message bytes that are sent from the master to ESPs
or from the ESP to ESPs as part of the request messages.</entry></row>
<row><entry>Reply Message Count</entry><entry>replyMsgCnt</entry><entry
>Number of reply messages from the ESPs for the message requests.</entry>
</row>
<row><entry>Reply Message Bytes</entry><entry>replyMsgBytes</entry>
<entry>Number of bytes sent as part of the reply messages.</entry></row>
<row><entry>Scr. Overflow Mode</entry><entry>scrOverFlowMode</entry>
<entry>Represents the scratch overflow mode. <phrase>Modes are DISK_TYPE
or SSD_TYPE.</phrase></entry></row>
<row><entry>Scr. File Count</entry><entry>scrFileCount</entry><entry
>Number of scratch files created to execute the query. Default file
size is 2 GB.</entry></row>
<row><entry>Scr. Buffer Blk Size</entry><entry>scrBufferBlockSize</entry>
<entry>Size of buffer block that is used to read from/write to the
scratch file.</entry></row>
<row><entry>Scr. Buffer Blks Read</entry><entry>scrBufferRead</entry>
<entry>Number of scratch buffer blocks read from the scratch file. <phrase
condition="hidden">May be used more than once.</phrase></entry></row>
<row><entry>Scr. Buffer Blks Written</entry><entry>scrBufferWritten</entry>
<entry>Number of scratch buffer blocks written to the scratch file.
Exact size of scratch file can be obtained by multiplying Scr. Buffer
Blk Size by this counter.</entry></row>
<row><entry>Scr. Read Count</entry><entry>scrReadCount</entry><entry
>Number of file-system calls involved in reading buffer blocks from
scratch files. One call reads multiple buffer blocks at once.</entry>
</row>
<row><entry>Scr. Write Count</entry><entry>scrWriteCount</entry><entry
>Number of file-system calls involved in writing buffer blocks to
scratch files. One call writes multiple buffer blocks at once.</entry>
</row>
<row><entry>BMO Heap Used</entry><entry>bmoHeapUsed</entry><entry
>Amount of “heap” type of memory in KB used in the BMO operator(s).
The BMO operators are HASH_JOIN (and all varieties of HASH_JOIN),
HASH_GROUPBY (and all varieties of HASH_GROUPBY), and SORT (and all
varieties of SORT).</entry></row>
<row><entry>BMO Heap Total</entry><entry>bmoHeapTotal</entry><entry
><phrase>Amount of “heap” type of memory in KB allocated in the BMO
operator(s).</phrase></entry></row>
<row><entry>BMO Heap High Watermark</entry><entry>bmoHeapWM</entry>
<entry>Maximum amount of memory used in the BMO operator.</entry></row>
<row><entry>BMO Space Buffer Size</entry><entry>bmoSpaceBufferSize</entry>
<entry>Size in KB for space buffers allocated for the type of memory.</entry>
</row>
<row><entry>BMO Space Buffer Count</entry><entry>bmoSpaceBufferCount</entry>
<entry>Count of space buffers allocated for the type of memory.</entry>
</row>
<row><entry><para>Records Accessed (Estimated / Actual)</para></entry>
<entry></entry><entry>Actual number of rows accessed by the executor
in TSE.</entry></row>
<row><entry><para>Records Used (Estimated / Actual)</para></entry>
<entry></entry><entry>Number of rows returned by TSE after applying
the predicates. In a push-down plan, TSE may not return all the used
rows.</entry></row>
<row><entry>ID</entry><entry></entry><entry>TDB ID of the operator
at the time of execution of the query.</entry></row>
<row><entry>LCID</entry><entry></entry><entry>Left child operator
ID.</entry></row>
<row><entry>RCID</entry><entry></entry><entry>Right child operator
ID.</entry></row>
<row><entry>PaID</entry><entry></entry><entry>Parent operator ID (TDB-ID).</entry>
</row>
<row><entry>ExID</entry><entry></entry><entry>Explain plan operator
ID.</entry></row>
<row><entry>Frag</entry><entry></entry><entry>Fragment ID to which
this operator belongs.</entry></row>
<row><entry>Dispatches</entry><entry></entry><entry>Number of times
the operator is scheduled in SQL executor.</entry></row>
<row><entry>Oper CPU Time</entry><entry>OperCpuTime</entry><entry
>Approximation of the node time spent by the operator to execute the
query.</entry></row>
<row><entry>Est. Records Used</entry><entry></entry><entry>Approximation
of the number of tuples that would flow up to the parent operator.</entry>
</row>
<row><entry>Act. Records Used</entry><entry></entry><entry>Actual
number of tuples that flowed up to the parent operator.</entry></row>
<row><entry></entry><entry>ProcessId</entry><entry>Name of the process
ID (PID) in the format: $Znnn. The process name can be for the master
(MXOSRVR) or executor server process (ESP).</entry></row>
</tbody>
</tgroup>
</table>
<section>
<title>Examples of Displaying SQL Runtime Statistics</title>
<section>
<title>Statistics of a Prepared Statement </title>
<para>This example shows the output of the currently prepared statement: <screen
><computeroutput>SQL></computeroutput><userinput>get statistics for qid current;
</userinput><computeroutput>
Qid                      MXID1100000649721215837305997952000000001930000_4200_Q1
Compile Start Time       2010/12/06 10:55:40.931000
Compile End Time         2010/12/06 10:55:42.131845
Compile Elapsed Time                 0:00:01.200845
Execute Start Time       -1                       
Execute End Time         -1                       
Execute Elapsed Time                 0:00:00.000000
State                    CLOSE                    
Rows Affected            -1                       
SQL Error Code           0                        
Stats Error Code         0                        
Query Type               SQL_SELECT_NON_UNIQUE    
Estimated Accessed Rows  100,010                  
Estimated Used Rows      100,010                  
Parent Qid               NONE                     
Child Qid                NONE                     
Number of SQL Processes  0                        
Number of Cpus           0                        
Execution Priority       -1                       
Transaction Id           -1                       
Source String            select * from t100k where b in (select b from t10)
SQL Source Length        50                       
Rows Returned            0                        
First Row Returned Time  -1                       
Last Error before AQR    0                        
Number of AQR retries    0                        
Delay before AQR         0                        
No. of times reclaimed   0                        
Stats Collection Type    OPERATOR_STATS           

--- SQL operation complete.</computeroutput></screen></para>
</section>
<section>
<title>PERTABLE Statistics of an Executing Statement</title>
<para>This example shows the PERTABLE statistics of an executing statement: <screen
><computeroutput>SQL></computeroutput><userinput>get statistics for qid current;
</userinput><computeroutput>
Qid                      MXID1100000649721215837305997952000000001930000_4200_Q1
Compile Start Time       2010/12/06 10:55:40.931000
Compile End Time         2010/12/06 10:55:42.131845
Compile Elapsed Time                 0:00:01.200845
Execute Start Time       2010/12/06 10:56:16.254686
Execute End Time         2010/12/06 10:56:18.434873
Execute Elapsed Time                 0:00:02.180187
State                    CLOSE                    
Rows Affected            0                        
SQL Error Code           100                      
Stats Error Code         0                        
Query Type               SQL_SELECT_NON_UNIQUE    
Estimated Accessed Rows  100,010                  
Estimated Used Rows      100,010                  
Parent Qid               NONE                     
Child Qid                NONE                     
Number of SQL Processes  7                        
Number of Cpus           1                        
Execution Priority       -1                       
Transaction Id           18121                    
Source String            select * from t100k where b in (select b from t10)
SQL Source Length        50                       
Rows Returned            100                      
First Row Returned Time  2010/12/06 10:56:18.150977
Last Error before AQR    0                        
Number of AQR retries    0                        
Delay before AQR         0                        
No. of times reclaimed   0                        
Stats Collection Type    OPERATOR_STATS           
SQL Process Busy Time    600,000                  
UDR Process Busy Time    0                        
SQL Space Allocated      1,576                     KB
SQL Space Used           1,450                     KB
SQL Heap Allocated       199                       KB
SQL Heap Used            30                        KB
EID Space Allocated      704                       KB
EID Space Used           549                       KB
EID Heap Allocated       582                       KB
EID Heap Used            6                         KB
Processes Created        4                        
Process Create Time      750,762                  
Request Message Count    701                      
Request Message Bytes    135,088                  
Reply Message Count      667                      
Reply Message Bytes      3,427,664                
Scr. Overflow Mode       DISK                     
Scr File Count           0                        
Scr. Buffer Blk Size     0                        
Scr. Buffer Blks Read    0                        
Scr. Buffer Blks Written 0                        
 
Table Name     
   Records Accessed       Records Used   Disk   Message   Message    Lock    Lock  Disk Process    Open    Open
   Estimated/Actual   Estimated/Actual   I/Os   Count     Bytes      Escl    wait  Busy Time       Count   Time
NEO.SCTEST.T10
                 10                 10
                 10                 10   0      2         5,280       0       0     2,000           0        0
NEO.SCTEST.T100K
            100,000            100,000
            100,000            100,000   0     110    3,235,720       0       0   351,941           4      48,747

--- SQL operation complete.</computeroutput></screen></para>
</section>
<section>
<title>ACCUMULATED Statistics of an Executing Statement</title>
<para>This example shows the ACCUMULATED statistics of an executing
statement: </para>
<screen><computeroutput>SQL></computeroutput><userinput>get statistics for qid current accumulated;
</userinput><computeroutput>
Qid                      MXID1100000649721215837305997952000000001930000_4200_Q1
Compile Start Time       2010/12/06 10:55:40.931000
Compile End Time         2010/12/06 10:55:42.131845
Compile Elapsed Time                 0:00:01.200845
Execute Start Time       2010/12/06 10:56:16.254686
Execute End Time         2010/12/06 10:56:18.434873
Execute Elapsed Time                 0:00:02.180187
State                    CLOSE                    
Rows Affected            0                        
SQL Error Code           100                      
Stats Error Code         0                        
Query Type               SQL_SELECT_NON_UNIQUE    
Estimated Accessed Rows  100,010                  
Estimated Used Rows      100,010                  
Parent Qid               NONE                     
Child Qid                NONE                     
Number of SQL Processes  7                        
Number of Cpus           1                        
Execution Priority       -1                       
Transaction Id           18121                    
Source String            select * from t100k where b in (select b from t10)
SQL Source Length        50                       
Rows Returned            100                      
First Row Returned Time  2010/12/06 10:56:18.150977
Last Error before AQR    0                        
Number of AQR retries    0                        
Delay before AQR         0                        
No. of times reclaimed   0                        
Stats Collection Type    OPERATOR_STATS           
Accessed Rows            100,010                  
Used Rows                100,010                  
Message Count            112                      
Message Bytes            3,241,000                
Stats Bytes              2,904                    
Disk IOs                 0                        
Lock Waits               0                        
Lock Escalations         0                        
Disk Process Busy Time   353,941                  
SQL Process Busy Time    600,000                  
UDR Process Busy Time    0                        
SQL Space Allocated      1,576                     KB
SQL Space Used           1,450                     KB
SQL Heap Allocated       199                       KB
SQL Heap Used            30                        KB
EID Space Allocated      704                       KB
EID Space Used           549                       KB
EID Heap Allocated       582                       KB
EID Heap Used            6                         KB
Opens                    4                        
Open Time                48,747                   
Processes Created        4                        
Process Create Time      750,762                  
Request Message Count    701                      
Request Message Bytes    135,088                  
Reply Message Count      667                      
Reply Message Bytes      3,427,664                
Scr. Overflow Mode       DISK                     
Scr. File Count          0                        
Scr. Buffer Blk Size     0                        
Scr. Buffer Blks Read    0                        
Scr. Buffer Blks Written 0                        

--- SQL operation complete.</computeroutput></screen>
</section>
<section>
<title>PROGRESS Statistics of an Executing Statement</title>
<para>This example shows the PROGRESS statistics of an executing statement: </para>
<screen><computeroutput>SQL></computeroutput><userinput>get statistics for qid current PROGRESS;</userinput
><computeroutput>
Qid                      MXID1100000649721215837305997952000000001930000_4200_Q1
Compile Start Time       2010/12/06 10:55:40.931000
Compile End Time         2010/12/06 10:55:42.131845
Compile Elapsed Time                 0:00:01.200845
Execute Start Time       2010/12/06 10:56:16.254686
Execute End Time         2010/12/06 10:56:18.434873
Execute Elapsed Time                 0:00:02.180187
State                    CLOSE                    
Rows Affected            0                        
SQL Error Code           100                      
Stats Error Code         0                        
Query Type               SQL_SELECT_NON_UNIQUE    
Estimated Accessed Rows  100,010                  
Estimated Used Rows      100,010                  
Parent Qid               NONE                     
Child Qid                NONE                     
Number of SQL Processes  7                        
Number of Cpus           1                        
Execution Priority       -1                       
Transaction Id           18121                    
Source String            select * from t100k where b in (select b from t10)
SQL Source Length        50                       
Rows Returned            100                      
First Row Returned Time  2010/12/06 10:56:18.150977
Last Error before AQR    0                        
Number of AQR retries    0                        
Delay before AQR         0                        
No. of times reclaimed   0                        
Stats Collection Type    OPERATOR_STATS           
SQL Process Busy Time    600,000                  
SQL Space Allocated      1,576                     KB
SQL Space Used           1,450                     KB
SQL Heap Allocated       199                       KB
SQL Heap Used            30                        KB
EID Space Allocated      704                       KB
EID Space Used           549                       KB
EID Heap Allocated       582                       KB
EID Heap Used            6                         KB
Processes Created        4                        
Process Create Time      750,762                  
Request Message Count    701                      
Request Message Bytes    135,088                  
Reply Message Count      667                      
Reply Message Bytes      3,427,664                
 
Table Name     
   Records Accessed       Records Used         Disk      Message            Message    Lock    Lock       Disk Process    Open               Open
   Estimated/Actual   Estimated/Actual         I/Os        Count              Bytes    Escl    wait          Busy Time   Count               Time
NEO.SCTEST.T10
                 10                 10
                 10                 10            0            2              5,280       0       0              2,000       0                  0
NEO.SCTEST.T100K
            100,000            100,000
            100,000            100,000            0          110          3,235,720       0       0            351,941       4             48,747
 
   Id TDB Name                            Mode Phase            Phase Start Time
  BMO Heap Used BMO Heap Total    BMO Heap WM  BMO Space BufSz BMO Space BufCnt
  File Count       Scratch Buffer Block Size/Read/Written              Cpu Time
   16 EX_HASHJ                           DISK                                  
              0              0              0               56                0
           0        -1                  0                  0             60,000</computeroutput
></screen>
</section>
<section>
<title>DEFAULT Statistics of an Executing Statement</title>
<para>This example shows the DEFAULT statistics of an executing statement:</para>
<screen><computeroutput>SQL></computeroutput><userinput>get statistics for qid current DEFAULT;</userinput
><computeroutput>
Qid                      MXID1100000649721215837305997952000000001930000_4200_Q1
Compile Start Time       2010/12/06 10:55:40.931000
Compile End Time         2010/12/06 10:55:42.131845
Compile Elapsed Time                 0:00:01.200845
Execute Start Time       2010/12/06 10:56:16.254686
Execute End Time         2010/12/06 10:56:18.434873
Execute Elapsed Time                 0:00:02.180187
State                    CLOSE                    
Rows Affected            0                        
SQL Error Code           100                      
Stats Error Code         0                        
Query Type               SQL_SELECT_NON_UNIQUE    
Estimated Accessed Rows  100,010                  
Estimated Used Rows      100,010                  
Parent Qid               NONE                     
Child Qid                NONE                     
Number of SQL Processes  7                        
Number of Cpus           1                        
Execution Priority       -1                       
Transaction Id           18121                    
Source String            select * from t100k where b in (select b from t10)
SQL Source Length        50                       
Rows Returned            100                      
First Row Returned Time  2010/12/06 10:56:18.150977
Last Error before AQR    0                        
Number of AQR retries    0                        
Delay before AQR         0                        
No. of times reclaimed   0                        
Stats Collection Type    OPERATOR_STATS           

Id   LCId RCId PaId ExId Frag TDB Name             Dispatches      Oper CPU Time  Est. Records Used  Act. Records Used    Details

21   20   .    .    10   0    EX_ROOT                      15                  0                  0                100
20   19   .    21   9    0    EX_SPLIT_TOP                 13                  0                100                100
19   18   .    20   9    0    EX_SEND_TOP                  20                  0                100                100
18   17   .    19   9    2    EX_SEND_BOTTOM               72                  0                100                100
17   16   .    18   9    2    EX_SPLIT_BOTTOM              88                  0                100                100
16   15   7    17   8    2    EX_HASHJ                  1,341             60,000                100                100
15   14   .    16   7    2    EX_SPLIT_TOP              1,343             20,000            100,000            100,000
14   13   .    15   7    2    EX_SEND_TOP               1,343            120,000            100,000            100,000
13   12   .    14   7    5    EX_SEND_BOTTOM            1,534            200,000            100,000            100,000
12   11   .    13   7    5    EX_SPLIT_BOTTOM             493             70,000            100,000            100,000
11   10   .    12   6    5    EX_SPLIT_TOP                486             70,000            100,000            100,000
10   9    .    11   5    5    EX_PARTN_ACCESS           1,634             60,000            100,000            100,000
9    8    .    10   5    6    EX_EID_ROOT                  12                  0            100,000                  0
8    .    .    9    4    6    EX_DP2_SUBS_OPER            160            170,000            100,000            100,000
7    6    .    16   3    2    EX_SPLIT_TOP                 16                  0                 10                 10
6    5    .    7    3    2    EX_SEND_TOP                  17                  0                 10                 10
5    4    .    6    3    3    EX_SEND_BOTTOM               17                  0                 10                 10
4    3    .    5    3    3    EX_SPLIT_BOTTOM               9                  0                 10                 10
3    2    .    4    2    3    EX_PARTN_ACCESS               6                  0                 10                 10
2    1    .    3    2    4    EX_EID_ROOT                   3                  0                 10                  0
1    .    .    2    1    4    EX_DP2_SUBS_OPER              3             10,000                 10                 10

--- SQL operation complete.</computeroutput></screen>
</section>
</section>
<section id="Using-Parent-QID">
<title>Using the Parent Query ID</title>
<indexterm><primary>Query ID (QID)</primary><secondary>parent QID</secondary>
</indexterm><indexterm><primary>Parent query ID (QID)</primary>
</indexterm>
<para>When executed, some SQL statements execute additional SQL statements,
resulting in a parent-child  relationship. For example, when executed,
the UPDATE STATISTICS, MAINTAIN, and CALL statements execute  other
SQL statements called child queries. The child queries might execute
even more child queries, thus  introducing a hierarchy of SQL statements
with parent-child relationships. The parent query ID maps the child
query to the immediate parent SQL statement, helping you to trace
the child SQL statement back to the  user-issued SQL statement.  </para>
<para>The parent query ID is available as a counter, <literal>Parent
Qid</literal>, in the runtime statistics output. See Table 1-1 (page
11). A query directly issued by a user will not have a parent query
ID and the counter will  indicate "None."</para>
</section>
<section id="Child_QID">
<title>Child Query ID</title>
<indexterm><primary>Query ID (QID)</primary><secondary>child QID</secondary>
</indexterm>
<para>In many cases, a child query will execute in the same node as
its parent. In such cases, the GET STATISTICS  report on the parent
query ID will contain a query ID value for the child query which executed
most  recently. Conversely, if no child query exists, or the child
query is executing in a different node, no child query ID will be
reported.</para>
<para>The following examples shows GET STATISTICS output for both
the parent and one child query which are executed when the user issues
a CREATE TABLE AS command: <!--WRITER'S NOTE: EXAMPLE FROM MIKE HANLON--><screen
>SQL> -- get statistics for the parent query

SQL>get statistics for qid 
+>MXID01001091200212164828759544076000000000217DEFAULT_MXCI_USER00_34___SQLCI_DML_LAST__
+>;
Qid                      MXID11001091200212164828759544076000000000217DEFAULT_MXCI_USER00_34___SQLCI_DML_LAST__
Compile Start Time       2011/02/18 14:49:04.606513
Compile End Time         2011/02/18 14:49:04.631802
Compile Elapsed Time                 0:00:00.025289
Execute Start Time       2011/02/18 14:49:04.632142
Execute End Time         -1
Execute Elapsed Time                 0:03:29.473604
State                    CLOSE
Rows Affected            -1
SQL Error Code           0
Stats Error Code         0
Query Type               SQL_INSERT_NON_UNIQUE
Estimated Accessed Rows  0
Estimated Used Rows      0
Parent Qid               NONE
Child Qid                MXID11001091200212164828759544076000000000217DEFAULT_MXCI_USER00_37_86
Number of SQL Processes  1
Number of Cpus           1
Execution Priority       148
Transaction Id           -1
Source String            create table odetail  hash partition by (ordernum, partnum) as select * from SALES.ODETAIL;
SQL Source Length        91
Rows Returned            0
First Row Returned Time  -1
Last Error before AQR    0
Number of AQR retries    0
Delay before AQR         0
No. of times reclaimed   0
Stats Collection Type    OPERATOR_STATS

Id   LCId RCId PaId ExId Frag TDB Name             Dispatches      Oper CPU Time  Est. Records Used  Act. Records Used    Details

2    1    .    .    2    0    EX_ROOT                       0                  0                  0                  0
1    .    .    2    1    0    CREATE_TABLE_AS               0                  0                  0                  0

--- SQL operation complete.

SQL> -- get statistics for the child query

SQL>get statistics for qid
+>MXID11001091200212164828759544076000000000217DEFAULT_MXCI_USER00_37_86
+>;
Qid                      MXID01001091200212164828759544076000000000217DEFAULT_MXCI_USER00_37_86
Compile Start Time       2011/02/18 14:49:07.632898
Compile End Time         2011/02/18 14:49:07.987334
Compile Elapsed Time                 0:00:00.354436
Execute Start Time       2011/02/18 14:49:07.987539
Execute End Time         -1
Execute Elapsed Time                 0:02:33.173486
State                    OPEN
Rows Affected            -1
SQL Error Code           0
Stats Error Code         0
Query Type               SQL_INSERT_NON_UNIQUE
Estimated Accessed Rows  101
Estimated Used Rows      101
Parent Qid               MXID101001091200212164828759544076000000000217DEFAULT_MXCI_USER00_34___SQLCI_DML_LAST__
Child Qid                NONE
Number of SQL Processes  1
Number of Cpus           1
Execution Priority       148
Transaction Id           \ARC0101(2).9.9114503
Source String            insert using sideinserts into CAT.SCH.ODETAIL  select * from SALES.ODETAIL;
SQL Source Length        75
Rows Returned            0
First Row Returned Time  -1
Last Error before AQR    0
Number of AQR retries    0
Delay before AQR         0
No. of times reclaimed   0
Stats Collection Type    OPERATOR_STATS

Id   LCId RCId PaId ExId Frag TDB Name             Dispatches      Oper CPU Time  Est. Records Used  Act. Records Used    Details

4    3    .    9    3    0    EX_SPLIT_TOP                  1             10,062                100                  0
3    2    .    4    2    0    EX_PARTN_ACCESS              66              9,649                100                  0

--- SQL operation complete.

</screen></para>
</section>
</section>
<section id="StatsAboutRMS">
<title>Gathering Statistics About RMS </title>
<indexterm><primary>RMS</primary><secondary>statistics about RMS</secondary>
</indexterm>
<para>Use the GET STATISTICS FOR RMS command to get information about
RMS itself. The GET STATISTICS FOR RMS statement can be used to retrieve
information about one node or all nodes. An individual report is provided
for each node.</para>
<informaltable frame="topbot">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col3"/>
<colspec colname="col4"/>
<thead>
<row rowsep="1" valign="bottom"><entry align="left" valign="bottom"
>Counter</entry><entry align="left" valign="bottom">Description</entry>
</row>
</thead>
<tbody>
<row><entry>CPU</entry><entry>The node number of the Trafodion cluster.</entry>
</row>
<row><entry>RMS Version</entry><entry>Internal version of RMS </entry>
</row>
<row><entry>SSCP PID</entry><entry>SQL Statistics control process
ID.</entry></row>
<row><entry>SSCP Creation Timestamp</entry><entry>Actual timestamp
when SQL statistics control process was created.</entry></row>
<row><entry>SSMP PID</entry><entry>SQL statistics merge process ID.</entry>
</row>
<row><entry>SSMP Creation Timestamp</entry><entry>Timestamp when SQL
statistics merge was created.</entry></row>
<row><entry>Source String Store Len</entry><entry>Storage length of
source string.</entry></row>
<row><entry>Stats Heap Allocated</entry><entry>Amount of memory allocated
by all the queries executing in the given node in the RMS shared segments
at this instance of time.</entry></row>
<row><entry>Stats Heap Used</entry><entry>Amount of memory used by
all the queries executing in the given node in the RMS shared segment
at this instance of time.</entry></row>
<row><entry>Stats Heap High WM</entry><entry>High amount of memory
used by all the queries executing in the given node in the RMS shared
segment until now.</entry></row>
<row><entry>No. of Process Regd.</entry><entry>Number of processes
registered in the shared segment.</entry></row>
<row><entry>No. of Query Fragments Regd.</entry><entry>Number of query
fragments registered in the shared segment.</entry></row>
<row><entry>RMS Semaphore Owner</entry><entry>Process ID that locked
the semaphore at this instance of time.</entry></row>
<row><entry>No. of SSCPs Opened</entry><entry>Number of Statistics
Control Processes opened. Normally, this should be equal to the number
of nodes in the Trafodion cluster.</entry></row>
<row><entry>No. of SSCPs Open Deleted</entry><entry>Number of Statistics
Control Processes with broken communication. Usually, this should
be 0.</entry></row>
<row><entry>Last GC Time</entry><entry>The recent timestamp at which
the shared segment was garbage collected.</entry></row>
<row><entry>Queries GCed in Last Run</entry><entry>Number of queries
that were garbage collected in the recent GC run.</entry></row>
<row><entry>Total Queries GCed</entry><entry>Total number of queries
that were garbage collected since the statistics reset timestamp.</entry>
</row>
<row><entry>SSMP Request Message Count</entry><entry>Count of the
number of messages sent from the SSMP process since the statistics
reset timestamp.</entry></row>
<row><entry>SSMP Request Message Bytes</entry><entry>Number of messages
bytes that are sent as part of the request from the SSMP process since
the statistics reset timestamp.</entry></row>
<row><entry>SSMP Reply Message Count</entry><entry>Count of the number
of reply messages received by the SSMP process since the statistics
reset timestamp.</entry></row>
<row><entry>SSMP Reply Message Bytes</entry><entry>Number of messages
bytes that are sent as part of the reply messages received by the
SSMP process since the statistics reset timestamp.</entry></row>
<row><entry>SSCP Request Message Count</entry><entry>Count of the
number of messages sent from the SSCP process since the statistics
reset timestamp.</entry></row>
<row><entry>SSCP Request Message Bytes</entry><entry>Number of messages
bytes are sent as part of the request from the SSCP process since
the statistics reset timestamp.</entry></row>
<row><entry>SSCP Reply Message Count</entry><entry>Count of the number
of reply messages received by the SSCP process since the statistics
reset timestamp.</entry></row>
<row><entry>SSCP Reply Message Bytes</entry><entry>Number of messages
bytes that are sent as part of the reply messages received by the
SSCP process since the statistics reset timestamp.</entry></row>
<row><entry>RMS Stats Reset Timestamp</entry><entry>Timestamp for
resetting RMS statistics.</entry></row>
</tbody>
</tgroup>
</informaltable>
<screen><computeroutput>SQL></computeroutput><userinput>get statistics for rms all;</userinput
><computeroutput>
Node name                                                   
CPU                           0                             
RMS Version                   2511                          
SSCP PID                      19521                         
SSCP Priority                 0                             
SSCP Creation Timestamp       2010/12/05 02:32:33.642752
SSMP PID                      19527                         
SSMP Priority                 0                             
SSMP Creation Timestamp       2010/12/05 02:32:33.893440
Source String Store Len       254                           
Stats Heap Allocated          0                             
Stats Heap Used               3,002,416                     
Stats Heap High WM            3,298,976                     
No.of Process Regd.           157                           
No.of Query Fragments Regd.   296                           
RMS Semaphore Owner           -1                            
No.of SSCPs Opened            1                             
No.of SSCPs Open Deleted      0                             
Last GC Time                  2010/12/06 10:53:46.777432
Queries GCed in Last Run      55                            
Total Queries GCed            167                           
SSMP Request Message Count    58,071                        
SSMP Request Message Bytes    14,161,144                    
SSMP Reply Message Count      33,466                        
SSMP Reply Message Bytes      15,400,424                    
SSCP Request Message Count    3,737                         
SSCP Request Message Bytes    837,744                       
SSCP Reply Message Count      3,736                         
SSCP Reply Message Bytes      5,015,176                     
RMS Stats Reset Timestamp     2010/12/05 14:32:33.891083
 

--- SQL operation complete.</computeroutput></screen>
</section>
<section id="i1022598">
<title>Using the QUERYID_EXTRACT Function</title>
<indexterm><primary>Query ID (QID)</primary><secondary>extracting</secondary>
</indexterm><indexterm><primary>QUERYID_EXTRACT function</primary>
</indexterm>
<para>Use the QUERYID_EXTRACT function within an SQL statement to
extract components of a query ID for use in a SQL query. The query
ID, or QID, is a unique, clusterwide identifier for a query and is
generated for dynamic SQL statements whenever a SQL string is prepared.</para>
<section>
<title>Syntax of QUERYID_EXTRACT</title>
<para> The syntax of the QUERYID_EXTRACT function is:</para>
<informaltable frame="all">
<tgroup cols="1" colsep="0" rowsep="0">
<colspec colname="col4"/>
<tbody>
<row><entry><programlisting>QUERYID_EXTRACT ('<replaceable>query-id</replaceable
>', '<replaceable>attribute</replaceable>')</programlisting></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<variablelist>
<varlistentry><term><replaceable>query-id</replaceable></term>
<listitem><indexterm><primary>Query ID (QID)</primary><secondary>components
of</secondary></indexterm><para>is the query ID in string format.</para>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>attribute</replaceable></term>
<listitem><para>is the attribute to be extracted. The value of <replaceable
>attribute</replaceable> can be one of these parts of the query ID:</para>
<informaltable frame="topbot">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="1.03*"/>
<colspec colname="col2" colwidth="0.96*"/>
<thead>
<row rowsep="1" valign="bottom"><entry align="left" valign="bottom"
>Attribute Value</entry><entry align="left" valign="bottom">Description</entry>
</row>
</thead>
<tbody>
<row><entry><para>SEGMENTNUM</para></entry><entry>Logical node ID
in Trafodion cluster</entry></row>
<row><entry><para>CPUNUM or CPU</para></entry><entry>Logical node
ID in Trafodion cluster</entry></row>
<row><entry><para>PIN</para></entry><entry>Linux process ID number</entry>
</row>
<row><entry><para>EXESTARTTIME</para></entry><entry>Executor start
time</entry></row>
<row><entry><para>SESSIONNUM</para></entry><entry>Session number</entry>
</row>
<row><entry><para>USERNAME</para></entry><entry>User name</entry></row>
<row><entry><para>SESSIONNAME</para></entry><entry>Session name</entry>
</row>
<row><entry><para>SESSIONID</para></entry><entry>Session ID</entry>
</row>
<row><entry><para>QUERYNUM</para></entry><entry>Query number</entry>
</row>
<row><entry><para>STMTNAME</para></entry><entry>Statement ID or handle</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<note>
<para>The SEGMENTNUM and CPUNUM attributes are the same.</para>
</note>
</listitem>
</varlistentry>
</variablelist>
<para>The result data type of the QUERYID_EXTRACT function is a VARCHAR
with a length sufficient to hold the result. All values are returned
in string format. Here is the QUERYID_EXTRACT function in a SELECT
statement:</para>
<screen>select queryid_extract('<replaceable>query-id</replaceable
>', '<replaceable>attribute-value</replaceable>') from (values(1)) as t1;</screen>
</section>
<section>
<title>Examples of QUERYID_EXTRACT</title>
<itemizedlist>
<listitem><para>This command returns the node number of the query
ID:</para>
<screen><computeroutput>SQL></computeroutput><userinput>select substr(queryid_extract('MXID11000022675212170554548762240000000000206U6553500_21_S1', 'CPU'),1, 20) from (values(1)) as t1;
</userinput>
<computeroutput>
(EXPR)
----------------------------------------------------------------------------------------------------------------------------------------------------------------

0                                                                                                                                                               

--- 1 row(s) selected.</computeroutput></screen>
</listitem>
<listitem><para>This command returns the PIN of the query ID:</para>
<screen><computeroutput>SQL></computeroutput><userinput>select substr(queryid_extract('MXID11000022675212170554548762240000000000206U6553500_21_S1', 'PIN'),1, 20)  from (values(1)) as t1;
</userinput>
<computeroutput>
(EXPR)
----------------------------------------------------------------------------------------------------------------------------------------------------------------

22675

--- 1 row(s) selected.</computeroutput></screen>
</listitem>
</itemizedlist>
</section>
</section>
<section id="Statistics-Stored-Procedure">
<title>Statistics for Each Fragment-Instance of an Active Query</title>
<indexterm><primary>STATISTICS table-valued function</primary>
</indexterm><indexterm><primary>STATISTICS table-valued function</primary>
<secondary>TDB_ID detail</secondary></indexterm>
<para>You can retrieve statistics for a query while it executes by
using the STATISTICS table-valued function. Depending on the syntax
used, you can obtain statistics summarizing each parallel fragment-instance
of the query, or for any operator in each fragment-instance.</para>
<section id="Syntax-STATISTICS-Stored-Function">
<title>Syntax of STATISTICS Table-Valued Function</title>
<informaltable frame="all">
<tgroup cols="1" colsep="0" rowsep="0">
<colspec colname="col4"/>
<tbody>
<row><entry><programlisting>table(statistics (NULL, '<replaceable
>qid-str</replaceable>'))

<replaceable>qid-str</replaceable> is:
QID=<replaceable>query-id</replaceable>[,{TDBID_DETAIL=<replaceable
>tdb-id</replaceable>|DETAIL=1}]</programlisting></entry></row>
</tbody>
</tgroup>
</informaltable>
<variablelist>
<varlistentry><term><replaceable>query-id</replaceable></term>
<listitem><para>is the system-generated query ID. For example:</para>
<programlisting>QID=MXID11000022675212170554548762240000000000206U6553500_21_S1</programlisting>
</listitem>
</varlistentry>
<varlistentry><term><replaceable>tdb-id</replaceable></term>
<listitem><para>is the TDB ID of a given operator. TDB values can
be obtained from the report returned from the GET STATISTICS command.</para>
</listitem>
</varlistentry>
</variablelist>
<para condition="hidden">The variable_info column of the STATISTICS
stored function contains the values of statistics counters for the
token-value pair. Trafodion parses the text in the variable_info column
to get values for the different counters.</para>
</section>
<section id="DETAIL_Token">
<title>Considerations For Obtaining Statistics For Each Fragment-Instance
of an Active Query</title>
<para>If the DETAIL=1 or TDBID_DETAIL=<replaceable>tdb_id</replaceable
> options are used when the query is not executing, the STATISTICS
table-valued function will not return any results. <phrase
condition="hidden">Also, the function will return no results if there
is any space between the <replaceable>query-id</replaceable> and the
comma.</phrase></para>
<para>The STATISTICS table-valued function can be used with a SELECT
statement to return several columns. Many different counters exist
in the <replaceable>variable_info </replaceable>column.  The counters
in this column are formatted as token-value pairs and the counters
reported will depend on which option is used: DETAIL=1 or TDBID_DETAIL=<replaceable
>tdb_id</replaceable>.  If the TDBID_DETAIL option is used, the counters
reported will also depend on the type of operator specified by the <replaceable
>tdb_id</replaceable>. The reported counters can also be determined
by the statsRowType counter.</para>
<para></para>
<para>For the counter descriptions, see <xref linkend="accumstats"
role="select:label page"/>. The tokens for these counters are listed
in the column “Tokens in STATISTICS Table-Valued Function”.</para>
<para></para>
<para>This query lists process names of all ESPs of an executing query
identified by the given QID:  <programlisting>SQL>select
+>substr(variable_info,
+>      position('ProcessId:' in variable_info), 20) as processes
+>from
+>table(statistics(NULL,
+>'QID=MXID11000032684212170811581160672000000000206U6553500_19_S1,DETAIL=1' ))
+>group by 1;

PROCESSES
--------------------

ProcessId: $Z0000GS
ProcessId: $Z0000GT
ProcessId: $Z0000GU
ProcessId: $Z0000GV
ProcessId: $Z0102IQ
ProcessId: $Z000RNU
ProcessId: $Z0102IR
ProcessId: $Z0102IS
ProcessId: $Z0102IT

--- 9 row(s) selected.
</programlisting></para>
<para>This query gives BMO heap used for the hash join identified
as TDB #15 in  an executing query identified by the given QID: <programlisting
>SQL>select cast (
+>       substr(variable_info,
+>              position('bmoHeapUsed:' in variable_info),
+>              position('bmoHeapUsed:' in variable_info) +
+>              13 + (position(' ' in
+>                  substr(variable_info,
+>                         13 + position('bmoHeapUsed:' in variable_info))) -
+>                position('bmoHeapUsed:' in variable_info)))
+>        as char(25))
+>              from table(statistics(NULL,
+>'QID=MXID11000021706212170733911504160000000000206U6553500_25_S1,TDBID_DETAIL=15'));

(EXPR)
-------------------------

bmoHeapUsed: 3147
bmoHeapUsed: 3147
bmoHeapUsed: 3147
bmoHeapUsed: 3147
bmoHeapUsed: 3147
bmoHeapUsed: 3147
bmoHeapUsed: 3147
bmoHeapUsed: 3147

--- 8 row(s) selected.

</programlisting></para>
</section>
</section>
</chapter>
<appendix id="i1003045">
<title>Reserved Words</title>
<indexterm><primary>Reserved</primary><secondary>words, Trafodion
SQL</secondary></indexterm>
<para>The words listed in this appendix are reserved for use by Trafodion
SQL. To prevent syntax errors, avoid using these words as identifiers
in Trafodion SQL. In Trafodion SQL, if an operating system name contains
a reserved word, you must enclose the reserved word in double quotes
(") to access that column or object. </para>
<note>
<para>In Trafodion SQL, ABSOLUTE, DATA, EVERY, INITIALIZE, OPERATION,
PATH, SPACE, STATE, STATEMENT, STATIC, and START are not reserved
words.</para>
</note>
<section>
<title>Reserved Trafodion SQL Identifiers </title>
<indexterm><primary>Stored text</primary><secondary>reserved words</secondary>
</indexterm>
<para>Trafodion SQL treats these words as reserved when they are part
of Trafodion SQL stored text. They cannot be used as identifiers unless
you enclose them in double quotes.</para>
<table frame="topbot" id="i1020173a1">
<title>Reserved SQL Identifiers — A</title>
<tgroup cols="5" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="col3"/>
<colspec colname="COLSPEC1" colwidth="1.00*"/>
<colspec colname="COLSPEC0" colwidth="1.00*"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" rowsep="1">ACTION</entry><entry colsep="1"
rowsep="1">ADD</entry><entry colsep="1" rowsep="1">ADMIN</entry><entry
colsep="1" rowsep="1">AFTER</entry><entry colsep="1" rowsep="1">AGGREGATE</entry>
</row>
<row><entry colsep="1" rowsep="1">ALIAS</entry><entry colsep="1"
rowsep="1">ALL</entry><entry colsep="1" rowsep="1">ALLOCATE</entry>
<entry colsep="1" rowsep="1">ALTER</entry><entry colsep="1" rowsep="1"
>AND</entry></row>
<row><entry colsep="1" rowsep="1">ANY</entry><entry colsep="1"
rowsep="1">ARE</entry><entry colsep="1" rowsep="1">ARRAY</entry><entry
colsep="1" rowsep="1">AS</entry><entry colsep="1" rowsep="1">ASC</entry>
</row>
<row><entry colsep="1" rowsep="1">ASSERTION</entry><entry colsep="1"
rowsep="1">ASYNC</entry><entry colsep="1" rowsep="1">AT</entry><entry
colsep="1" rowsep="1">AUTHORIZATION</entry><entry colsep="1" rowsep="1"
>AVG</entry></row>
</tbody>
</tgroup>
</table>
<table frame="topbot" id="i1020273b">
<title>Reserved SQL Identifiers — B</title>
<tgroup cols="5" colsep="0" rowsep="0">
<colspec colname="COLSPEC2" colwidth="1.00*"/>
<colspec colname="col1"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" rowsep="1">BEFORE</entry><entry colsep="1"
rowsep="1">BEGIN</entry><entry colsep="1" rowsep="1">BETWEEN</entry>
<entry colsep="1" rowsep="1">BINARY</entry><entry colsep="1" rowsep="1"
>BIT</entry></row>
<row><entry colsep="1" rowsep="1">BIT_LENGTH</entry><entry colsep="1"
rowsep="1">BLOB</entry><entry colsep="1" rowsep="1">BOOLEAN</entry>
<entry colsep="1" rowsep="1">BOTH</entry><entry colsep="1" rowsep="1"
>BREADTH</entry></row>
<row><entry colsep="1" rowsep="1">BY</entry><entry colsep="1" rowsep="1"
></entry><entry colsep="1" rowsep="1"></entry><entry colsep="1"
rowsep="1"></entry><entry colsep="1" rowsep="1"></entry></row>
</tbody>
</tgroup>
</table>
<table frame="topbot" id="i1020273c">
<title>Reserved SQL Identifiers — C</title>
<tgroup cols="5" colsep="0" rowsep="0">
<colspec colname="COLSPEC3" colwidth="1.00*"/>
<colspec colname="col1"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" rowsep="1">CALL</entry><entry colsep="1"
rowsep="1">CASCADE</entry><entry colsep="1" rowsep="1">CASCADED</entry>
<entry colsep="1" rowsep="1">CASE</entry><entry colsep="1" rowsep="1"
>CAST</entry></row>
<row><entry colsep="1" rowsep="1">CATALOG</entry><entry colsep="1"
rowsep="1">CHAR</entry><entry colsep="1" rowsep="1">CHARACTER</entry>
<entry colsep="1" rowsep="1">CHARACTER_LENGTH</entry><entry colsep="1"
rowsep="1">CHAR_LENGTH</entry></row>
<row><entry colsep="1" rowsep="1">CHECK</entry><entry colsep="1"
rowsep="1">CLASS</entry><entry colsep="1" rowsep="1">CLOB</entry><entry
colsep="1" rowsep="1">CLOSE</entry><entry colsep="1" rowsep="1">COALESCE</entry>
</row>
<row><entry colsep="1" rowsep="1">COLLATE</entry><entry colsep="1"
rowsep="1">COLLATION</entry><entry colsep="1" rowsep="1">COLUMN</entry>
<entry colsep="1" rowsep="1">COMMIT</entry><entry colsep="1" rowsep="1"
>COMPLETION</entry></row>
<row><entry colsep="1" rowsep="1">CONNECT</entry><entry colsep="1"
rowsep="1">CONNECTION</entry><entry colsep="1" rowsep="1">CONSTRAINT</entry>
<entry colsep="1" rowsep="1">CONSTRAINTS</entry><entry colsep="1"
rowsep="1">CONSTRUCTOR</entry></row>
<row><entry colsep="1" rowsep="1">CONTINUE</entry><entry colsep="1"
rowsep="1">CONVERT</entry><entry colsep="1" rowsep="1">CORRESPONDING</entry>
<entry colsep="1" rowsep="1">COUNT</entry><entry colsep="1" rowsep="1"
>CREATE</entry></row>
<row><entry colsep="1" rowsep="1">CROSS</entry><entry colsep="1"
rowsep="1">CUBE</entry><entry colsep="1" rowsep="1">CURRENT</entry>
<entry colsep="1" rowsep="1">CURRENT_DATE</entry><entry colsep="1"
rowsep="1">CURRENT_PATH</entry></row>
<row><entry colsep="1" rowsep="1">CURRENT_ROLE</entry><entry colsep="1"
rowsep="1">CURRENT_TIME</entry><entry colsep="1" rowsep="1">CURRENT_TIMESTAMP</entry>
<entry colsep="1" rowsep="1">CURRENT_USER</entry><entry colsep="1"
rowsep="1">CURRNT_USR_INTN</entry></row>
<row><entry colsep="1" rowsep="1">CURSOR</entry><entry colsep="1"
rowsep="1">CYCLE</entry><entry colsep="1" rowsep="1"></entry><entry
colsep="1" rowsep="1"></entry><entry colsep="1" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
<table frame="topbot" id="i1020273d">
<title>Reserved SQL Identifiers — D</title>
<tgroup cols="5" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="1.00*"/>
<colspec colname="COLSPEC0" colwidth="1.00*"/>
<colspec colname="col2" colwidth="1.00*"/>
<colspec colname="col3" colwidth="1.00*"/>
<colspec colname="col4" colwidth="1.00*"/>
<tbody>
<row><entry colsep="1" rowsep="1">DATE</entry><entry colsep="1"
rowsep="1">DATETIME</entry><entry colsep="1" rowsep="1">DAY</entry>
<entry colsep="1" rowsep="1">DEALLOCATE</entry><entry colsep="1"
rowsep="1">DEC</entry></row>
<row><entry colsep="1" rowsep="1">DECIMAL</entry><entry colsep="1"
rowsep="1">DECLARE</entry><entry colsep="1" rowsep="1">DEFAULT</entry>
<entry colsep="1" rowsep="1">DEFERRABLE</entry><entry colsep="1"
rowsep="1">DEFERRED</entry></row>
<row><entry colsep="1" rowsep="1">DELETE</entry><entry colsep="1"
rowsep="1">DEPTH</entry><entry colsep="1" rowsep="1">DEREF</entry>
<entry colsep="1" rowsep="1">DESC</entry><entry colsep="1" rowsep="1"
>DESCRIBE</entry></row>
<row><entry colsep="1" rowsep="1">DESCRIPTOR</entry><entry colsep="1"
rowsep="1">DESTROY</entry><entry colsep="1" rowsep="1">DESTRUCTOR</entry>
<entry colsep="1" rowsep="1">DETERMINISTIC</entry><entry colsep="1"
rowsep="1">DIAGNOSTICS</entry></row>
<row><entry colsep="1" rowsep="1">DICTIONARY</entry><entry colsep="1"
rowsep="1">DISCONNECT</entry><entry colsep="1" rowsep="1">DISTINCT</entry>
<entry colsep="1" rowsep="1">DOMAIN</entry><entry colsep="1" rowsep="1"
>DOUBLE</entry></row>
<row><entry colsep="1" rowsep="1">DROP</entry><entry colsep="1"
rowsep="1">DYNAMIC</entry><entry colsep="1" rowsep="1"></entry><entry
colsep="1" rowsep="1"></entry><entry colsep="1" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
<table frame="topbot" id="i1020273e">
<title>Reserved SQL Identifiers — E</title>
<tgroup cols="5" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="COLSPEC1" colwidth="1.00*"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" rowsep="1">EACH</entry><entry colsep="1"
rowsep="1">ELSE</entry><entry colsep="1" rowsep="1">ELSEIF</entry>
<entry colsep="1" rowsep="1">END</entry><entry colsep="1" rowsep="1"
>END-EXEC</entry></row>
<row><entry colsep="1" rowsep="1">EQUALS</entry><entry colsep="1"
rowsep="1">ESCAPE</entry><entry colsep="1" rowsep="1">EXCEPT</entry>
<entry colsep="1" rowsep="1">EXCEPTION</entry><entry colsep="1"
rowsep="1">EXEC</entry></row>
<row><entry colsep="1" rowsep="1">EXECUTE</entry><entry colsep="1"
rowsep="1">EXISTS</entry><entry colsep="1" rowsep="1">EXTERNAL</entry>
<entry colsep="1" rowsep="1">EXTRACT</entry><entry colsep="1" rowsep="1"
></entry></row>
</tbody>
</tgroup>
</table>
<table frame="topbot" id="i1020273f">
<title>Reserved SQL Identifiers — F</title>
<tgroup cols="5" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="COLSPEC2" colwidth="1.00*"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" rowsep="1">FALSE</entry><entry colsep="1"
rowsep="1">FETCH</entry><entry colsep="1" rowsep="1">FIRST</entry>
<entry colsep="1" rowsep="1">FLOAT</entry><entry colsep="1" rowsep="1"
>FOR</entry></row>
<row><entry colsep="1" rowsep="1">FOREIGN</entry><entry colsep="1"
rowsep="1">FOUND</entry><entry colsep="1" rowsep="1">FRACTION</entry>
<entry colsep="1" rowsep="1">FREE</entry><entry colsep="1" rowsep="1"
>FROM</entry></row>
<row><entry colsep="1" rowsep="1">FULL</entry><entry colsep="1"
rowsep="1">FUNCTION</entry><entry colsep="1" rowsep="1"></entry><entry
colsep="1" rowsep="1"></entry><entry colsep="1" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
<table frame="topbot" id="i1020273g">
<title>Reserved SQL Identifiers — G</title>
<tgroup cols="5" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="COLSPEC2" colwidth="1.00*"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" rowsep="1">GENERAL</entry><entry colsep="1"
rowsep="1">GET</entry><entry colsep="1" rowsep="1">GLOBAL</entry><entry
colsep="1" rowsep="1">GO</entry><entry colsep="1" rowsep="1">GOTO</entry>
</row>
<row><entry colsep="1" rowsep="1">GRANT</entry><entry colsep="1"
rowsep="1">GROUP</entry><entry colsep="1" rowsep="1">GROUPING</entry>
<entry colsep="1" rowsep="1"></entry><entry colsep="1" rowsep="1"
></entry></row>
</tbody>
</tgroup>
</table>
<table frame="topbot" id="i1020273h">
<title>Reserved SQL Identifiers — H</title>
<tgroup cols="5" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="COLSPEC2" colwidth="1.00*"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" rowsep="1">HAVING</entry><entry colsep="1"
rowsep="1">HOST</entry><entry colsep="1" rowsep="1">HOUR</entry><entry
colsep="1" rowsep="1"></entry><entry colsep="1" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
<table frame="topbot" id="i1020273i">
<title>Reserved SQL Identifiers — I</title>
<tgroup cols="5" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="COLSPEC2" colwidth="1.00*"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" rowsep="1">IDENTITY</entry><entry colsep="1"
rowsep="1">IF</entry><entry colsep="1" rowsep="1">IGNORE</entry><entry
colsep="1" rowsep="1">IMMEDIATE</entry><entry colsep="1" rowsep="1"
>IN</entry></row>
<row><entry colsep="1" rowsep="1">INDICATOR</entry><entry colsep="1"
rowsep="1">INITIALLY</entry><entry colsep="1" rowsep="1">INNER</entry>
<entry colsep="1" rowsep="1">INOUT</entry><entry colsep="1" rowsep="1"
>INPUT</entry></row>
<row><entry colsep="1" rowsep="1">INSENSITIVE</entry><entry colsep="1"
rowsep="1">INSERT</entry><entry colsep="1" rowsep="1">INT</entry><entry
colsep="1" rowsep="1">INTEGER</entry><entry colsep="1" rowsep="1"
>INTERSECT</entry></row>
<row><entry colsep="1" rowsep="1">INTERVAL</entry><entry colsep="1"
rowsep="1">INTO</entry><entry colsep="1" rowsep="1">IS</entry><entry
colsep="1" rowsep="1">ISOLATION</entry><entry colsep="1" rowsep="1"
>ITERATE</entry></row>
</tbody>
</tgroup>
</table>
<table frame="topbot" id="i1020273j">
<title>Reserved SQL Identifiers — J</title>
<tgroup cols="5" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="COLSPEC2" colwidth="1.00*"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" rowsep="1">JOIN</entry><entry colsep="1"
rowsep="1"></entry><entry colsep="1" rowsep="1"></entry><entry
colsep="1" rowsep="1"></entry><entry colsep="1" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
<table frame="topbot" id="i1020273k">
<title>Reserved SQL Identifiers — K</title>
<tgroup cols="5" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="COLSPEC2" colwidth="1.00*"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" rowsep="1">KEY</entry><entry colsep="1"
rowsep="1"></entry><entry colsep="1" rowsep="1"></entry><entry
colsep="1" rowsep="1"></entry><entry colsep="1" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
<table frame="topbot" id="i1020273l">
<title>Reserved SQL Identifiers — L</title>
<tgroup cols="5" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="COLSPEC2" colwidth="1.00*"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" rowsep="1">LANGUAGE</entry><entry colsep="1"
rowsep="1">LARGE</entry><entry colsep="1" rowsep="1">LAST</entry><entry
colsep="1" rowsep="1">LATERAL</entry><entry colsep="1" rowsep="1"
>LEADING</entry></row>
<row><entry colsep="1" rowsep="1">LEAVE</entry><entry colsep="1"
rowsep="1">LEFT</entry><entry colsep="1" rowsep="1">LESS</entry><entry
colsep="1" rowsep="1">LEVEL</entry><entry colsep="1" rowsep="1">LIKE</entry>
</row>
<row><entry colsep="1" rowsep="1">LIMIT</entry><entry colsep="1"
rowsep="1">LOCAL</entry><entry colsep="1" rowsep="1">LOCALTIME</entry>
<entry colsep="1" rowsep="1">LOCALTIMESTAMP</entry><entry colsep="1"
rowsep="1">LOCATOR</entry></row>
<row><entry colsep="1" rowsep="1">LOOP</entry><entry colsep="1"
rowsep="1">LOWER</entry><entry colsep="1" rowsep="1"></entry><entry
colsep="1" rowsep="1"></entry><entry colsep="1" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
<table frame="topbot" id="i1020273m">
<title>Reserved SQL Identifiers — M</title>
<tgroup cols="5" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="COLSPEC2" colwidth="1.00*"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" rowsep="1">MAINTAIN</entry><entry colsep="1"
rowsep="1">MAP</entry><entry colsep="1" rowsep="1">MATCH</entry><entry
colsep="1" rowsep="1">MATCHED</entry><entry colsep="1" rowsep="1"
>MAX</entry></row>
<row><entry colsep="1" rowsep="1">MERGE</entry><entry colsep="1"
rowsep="1">MIN</entry><entry colsep="1" rowsep="1">MINUTE</entry><entry
colsep="1" rowsep="1">MODIFIES</entry><entry colsep="1" rowsep="1"
>MODIFY</entry></row>
<row><entry colsep="1" rowsep="1">MODULE</entry><entry colsep="1"
rowsep="1">MONTH</entry><entry colsep="1" rowsep="1"></entry><entry
colsep="1" rowsep="1"></entry><entry colsep="1" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
<table frame="topbot" id="i1020273n">
<title>Reserved SQL Identifiers — N</title>
<tgroup cols="5" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="COLSPEC2" colwidth="1.00*"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" rowsep="1">NAMES</entry><entry colsep="1"
rowsep="1">NATIONAL</entry><entry colsep="1" rowsep="1">NATURAL</entry>
<entry colsep="1" rowsep="1">NCHAR</entry><entry colsep="1" rowsep="1"
>NCLOB</entry></row>
<row><entry colsep="1" rowsep="1">NEW</entry><entry colsep="1"
rowsep="1">NEXT</entry><entry colsep="1" rowsep="1">NO</entry><entry
colsep="1" rowsep="1">NONE</entry><entry colsep="1" rowsep="1">NOT</entry>
</row>
<row><entry colsep="1" rowsep="1">NULL</entry><entry colsep="1"
rowsep="1">NULLIF</entry><entry colsep="1" rowsep="1">NUMERIC</entry>
<entry colsep="1" rowsep="1"></entry><entry colsep="1" rowsep="1"
></entry></row>
</tbody>
</tgroup>
</table>
<table frame="topbot" id="i1020273o">
<title>Reserved SQL Identifiers — O</title>
<tgroup cols="5" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="COLSPEC2" colwidth="1.00*"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" rowsep="1">OCTET_LENGTH</entry><entry colsep="1"
rowsep="1">OF</entry><entry colsep="1" rowsep="1">OFF</entry><entry
colsep="1" rowsep="1">OID</entry><entry colsep="1" rowsep="1">OLD</entry>
</row>
<row><entry colsep="1" rowsep="1">ON</entry><entry colsep="1" rowsep="1"
>ONLY</entry><entry colsep="1" rowsep="1">OPEN</entry><entry colsep="1"
rowsep="1">OPERATORS</entry><entry colsep="1" rowsep="1">OPTION</entry>
</row>
<row><entry colsep="1" rowsep="1">OPTIONS</entry><entry colsep="1"
rowsep="1">OR</entry><entry colsep="1" rowsep="1">ORDER</entry><entry
colsep="1" rowsep="1">ORDINALITY</entry><entry colsep="1" rowsep="1"
>OTHERS</entry></row>
<row><entry colsep="1" rowsep="1">OUT</entry><entry colsep="1"
rowsep="1">OUTER</entry><entry colsep="1" rowsep="1">OUTPUT</entry>
<entry colsep="1" rowsep="1">OVERLAPS</entry><entry colsep="1"
rowsep="1"></entry></row>
</tbody>
</tgroup>
</table>
<table frame="topbot" id="i1020273p">
<title>Reserved SQL Identifiers — P</title>
<tgroup cols="5" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="COLSPEC2" colwidth="1.00*"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" rowsep="1">PAD</entry><entry colsep="1"
rowsep="1">PARAMETER</entry><entry colsep="1" rowsep="1">PARAMETERS</entry>
<entry colsep="1" rowsep="1">PARTIAL</entry><entry colsep="1" rowsep="1"
>PENDANT</entry></row>
<row><entry colsep="1" rowsep="1">POSITION</entry><entry colsep="1"
rowsep="1">POSTFIX</entry><entry colsep="1" rowsep="1">PRECISION</entry>
<entry colsep="1" rowsep="1">PREFIX</entry><entry colsep="1" rowsep="1"
>PREORDER</entry></row>
<row><entry colsep="1" rowsep="1">PREPARE</entry><entry colsep="1"
rowsep="1">PRESERVE</entry><entry colsep="1" rowsep="1">PRIMARY</entry>
<entry colsep="1" rowsep="1">PRIOR</entry><entry colsep="1" rowsep="1"
>PRIVATE</entry></row>
<row><entry colsep="1" rowsep="1">PRIVILEGES</entry><entry colsep="1"
rowsep="1">PROCEDURE</entry><entry colsep="1" rowsep="1">PROTECTED</entry>
<entry colsep="1" rowsep="1">PROTOTYPE</entry><entry colsep="1"
rowsep="1">PUBLIC</entry></row>
</tbody>
</tgroup>
</table>
<table frame="topbot" id="i1020273q">
<title>Reserved SQL Identifiers — Q</title>
<tgroup cols="5" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="COLSPEC2" colwidth="1.00*"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" rowsep="1">QUALIFY</entry><entry colsep="1"
rowsep="1"></entry><entry colsep="1" rowsep="1"></entry><entry
colsep="1" rowsep="1"></entry><entry colsep="1" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
<table frame="topbot" id="i1020273r">
<title>Reserved SQL Identifiers — R</title>
<tgroup cols="5" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="COLSPEC2" colwidth="1.00*"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" rowsep="1">READ</entry><entry colsep="1"
rowsep="1">READS</entry><entry colsep="1" rowsep="1">REAL</entry><entry
colsep="1" rowsep="1">RECURSIVE</entry><entry colsep="1" rowsep="1"
>REF</entry></row>
<row><entry colsep="1" rowsep="1">REFERENCES</entry><entry colsep="1"
rowsep="1">REFERENCING</entry><entry colsep="1" rowsep="1">RELATIVE</entry>
<entry colsep="1" rowsep="1">REORG</entry><entry colsep="1" rowsep="1"
>REORGANIZE</entry></row>
<row><entry colsep="1" rowsep="1">REPLACE</entry><entry colsep="1"
rowsep="1">RESIGNAL</entry><entry colsep="1" rowsep="1">RESTRICT</entry>
<entry colsep="1" rowsep="1">RESULT</entry><entry colsep="1" rowsep="1"
>RETURN</entry></row>
<row><entry colsep="1" rowsep="1">RETURNS</entry><entry colsep="1"
rowsep="1">REVOKE</entry><entry colsep="1" rowsep="1">RIGHT</entry>
<entry colsep="1" rowsep="1">ROLLBACK</entry><entry colsep="1"
rowsep="1">ROLLUP</entry></row>
<row><entry colsep="1" rowsep="1">ROUTINE</entry><entry colsep="1"
rowsep="1">ROW</entry><entry colsep="1" rowsep="1">ROWS</entry><entry
colsep="1" rowsep="1"></entry><entry colsep="1" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
<table frame="topbot">
<title>Reserved SQL Identifiers — S</title>
<tgroup cols="5" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="COLSPEC2" colwidth="1.00*"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" rowsep="1">SAVEPOINT</entry><entry colsep="1"
rowsep="1">SCHEMA</entry><entry colsep="1" rowsep="1">SCOPE</entry>
<entry colsep="1" rowsep="1">SCROLL</entry><entry colsep="1" rowsep="1"
>SEARCH </entry></row>
<row><entry colsep="1" rowsep="1">SECOND</entry><entry colsep="1"
rowsep="1">SECTION</entry><entry colsep="1" rowsep="1">SELECT</entry>
<entry colsep="1" rowsep="1">SENSITIVE</entry><entry colsep="1"
rowsep="1">SESSION</entry></row>
<row><entry colsep="1" rowsep="1">SESSION_USER</entry><entry colsep="1"
rowsep="1">SESSN_USR_INTN</entry><entry colsep="1" rowsep="1">SET</entry>
<entry colsep="1" rowsep="1">SETS</entry><entry colsep="1" rowsep="1"
>SIGNAL</entry></row>
<row><entry colsep="1" rowsep="1">SIMILAR</entry><entry colsep="1"
rowsep="1">SIZE</entry><entry colsep="1" rowsep="1">SMALLINT</entry>
<entry colsep="1" rowsep="1">SOME</entry><entry colsep="1" rowsep="1"
>SPECIFIC</entry></row>
<row><entry colsep="1" rowsep="1">SPECIFICTYPE</entry><entry colsep="1"
rowsep="1">SQL</entry><entry colsep="1" rowsep="1">SQL_CHAR</entry>
<entry colsep="1" rowsep="1">SQL_DATE</entry><entry colsep="1"
rowsep="1">SQL_DECIMAL</entry></row>
<row><entry colsep="1" rowsep="1">SQL_DOUBLE</entry><entry colsep="1"
rowsep="1">SQL_FLOAT</entry><entry colsep="1" rowsep="1">SQL_INT</entry>
<entry colsep="1" rowsep="1">SQL_INTEGER</entry><entry colsep="1"
rowsep="1">SQL_REAL</entry></row>
<row><entry colsep="1" rowsep="1">SQL_SMALLINT</entry><entry colsep="1"
rowsep="1">SQL_TIME</entry><entry colsep="1" rowsep="1">SQL_TIMESTAMP</entry>
<entry colsep="1" rowsep="1">SQL_VARCHAR</entry><entry colsep="1"
rowsep="1">SQLCODE</entry></row>
<row><entry colsep="1" rowsep="1">SQLERROR</entry><entry colsep="1"
rowsep="1">SQLEXCEPTION</entry><entry colsep="1" rowsep="1">SQLSTATE</entry>
<entry colsep="1" rowsep="1">SQLWARNING</entry><entry colsep="1"
rowsep="1">STRUCTURE</entry></row>
<row><entry colsep="1" rowsep="1">SUBSTRING</entry><entry colsep="1"
rowsep="1">SUM</entry><entry colsep="1" rowsep="1">SYNONYM</entry>
<entry colsep="1" rowsep="1">SYSTEM_USER</entry><entry colsep="1"
rowsep="1"></entry></row>
</tbody>
</tgroup>
</table>
<table frame="topbot" id="i1020273t">
<title>Reserved SQL Identifiers — T</title>
<tgroup cols="5" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="COLSPEC2" colwidth="1.00*"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" rowsep="1">TABLE</entry><entry colsep="1"
rowsep="1">TEMPORARY</entry><entry colsep="1" rowsep="1">TERMINATE</entry>
<entry colsep="1" rowsep="1">TEST</entry><entry colsep="1" rowsep="1"
>THAN</entry></row>
<row><entry colsep="1" rowsep="1">THEN</entry><entry colsep="1"
rowsep="1">THERE</entry><entry colsep="1" rowsep="1">TIME</entry><entry
colsep="1" rowsep="1">TIMESTAMP</entry><entry colsep="1" rowsep="1"
>TIMEZONE_HOUR</entry></row>
<row><entry colsep="1" rowsep="1">TIMEZONE_MINUTE</entry><entry
colsep="1" rowsep="1">TO</entry><entry colsep="1" rowsep="1">TRAILING</entry>
<entry colsep="1" rowsep="1">TRANSACTION</entry><entry colsep="1"
rowsep="1">TRANSLATE</entry></row>
<row><entry colsep="1" rowsep="1">TRANSLATION</entry><entry colsep="1"
rowsep="1">TRANSPOSE</entry><entry colsep="1" rowsep="1">TREAT</entry>
<entry colsep="1" rowsep="1">TRIGGER</entry><entry colsep="1" rowsep="1"
>TRIM</entry></row>
<row><entry colsep="1" rowsep="1">TRUE</entry><entry colsep="1"
rowsep="1"></entry><entry colsep="1" rowsep="1"></entry><entry
colsep="1" rowsep="1"></entry><entry colsep="1" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
<table frame="topbot" id="i1020273u">
<title>Reserved SQL Identifiers — U</title>
<tgroup cols="5" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="COLSPEC2" colwidth="1.00*"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" rowsep="1">UNDER</entry><entry colsep="1"
rowsep="1">UNION</entry><entry colsep="1" rowsep="1">UNIQUE</entry>
<entry colsep="1" rowsep="1">UNKNOWN</entry><entry colsep="1" rowsep="1"
>UNNEST</entry></row>
<row><entry colsep="1" rowsep="1">UPDATE</entry><entry colsep="1"
rowsep="1">UPPER</entry><entry colsep="1" rowsep="1">UPSHIFT</entry>
<entry colsep="1" rowsep="1">USAGE</entry><entry colsep="1" rowsep="1"
>USER</entry></row>
<row><entry colsep="1" rowsep="1">USING</entry><entry colsep="1"
rowsep="1"></entry><entry colsep="1" rowsep="1"></entry><entry
colsep="1" rowsep="1"></entry><entry colsep="1" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
<table frame="topbot" id="i1020273v">
<title>Reserved SQL Identifiers — V</title>
<tgroup cols="5" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="COLSPEC2" colwidth="1.00*"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" rowsep="1">VALUE</entry><entry colsep="1"
rowsep="1">VALUES</entry><entry colsep="1" rowsep="1">VARCHAR</entry>
<entry colsep="1" rowsep="1">VARIABLE</entry><entry colsep="1"
rowsep="1">VARYING</entry></row>
<row><entry colsep="1" rowsep="1">VIEW</entry><entry colsep="1"
rowsep="1">VIRTUAL</entry><entry colsep="1" rowsep="1">VISIBLE</entry>
<entry colsep="1" rowsep="1"></entry><entry colsep="1" rowsep="1"
></entry></row>
</tbody>
</tgroup>
</table>
<table frame="topbot" id="i1020273w">
<title>Reserved SQL Identifiers — W</title>
<tgroup cols="5" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="COLSPEC2" colwidth="1.00*"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" rowsep="1">WAIT</entry><entry colsep="1"
rowsep="1">WHEN</entry><entry colsep="1" rowsep="1">WHENEVER</entry>
<entry colsep="1" rowsep="1">WHERE</entry><entry colsep="1" rowsep="1"
>WHILE</entry></row>
<row><entry colsep="1" rowsep="1">WITH</entry><entry colsep="1"
rowsep="1">WITHOUT</entry><entry colsep="1" rowsep="1">WORK</entry>
<entry colsep="1" rowsep="1">WRITE</entry><entry colsep="1" rowsep="1"
></entry></row>
</tbody>
</tgroup>
</table>
<table frame="topbot" id="i1020273y">
<title>Reserved SQL Identifiers — Y</title>
<tgroup cols="5" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="COLSPEC2" colwidth="1.00*"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" rowsep="1">YEAR</entry><entry colsep="1"
rowsep="1"></entry><entry colsep="1" rowsep="1"></entry><entry
colsep="1" rowsep="1"></entry><entry colsep="1" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
<table frame="topbot" id="i1020273z">
<title>Reserved SQL Identifiers — Z</title>
<tgroup cols="5" colsep="0" rowsep="0">
<colspec colname="col1"/>
<colspec colname="COLSPEC2" colwidth="1.00*"/>
<colspec colname="col2"/>
<colspec colname="col3"/>
<colspec colname="col4"/>
<tbody>
<row><entry colsep="1" rowsep="1">ZONE</entry><entry colsep="1"
rowsep="1"></entry><entry colsep="1" rowsep="1"></entry><entry
colsep="1" rowsep="1"></entry><entry colsep="1" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
</appendix>
<appendix id="CQD_Attributes">
<title>Control Query Default (CQD) Attributes</title>
<para>This appendix describes CQDs that are used to override system-level
default settings.</para>
<section id="HBase-CQDs">
<title>HBase Environment CQDs</title>
<para>This section describes the CQD, <xref linkend="HBASE_INTERFACE"
role="select:quotedtitle page"/>, which defines the HBase interface.</para>
<para condition="hidden">This section describes these CQDs, which
define the HBase environment:</para>
<itemizedlist condition="hidden">
<listitem><para><xref linkend="HBASE_INTERFACE"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="HBASE_MAX_COLUMN_INFO_LENGTH"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="HBASE_MAX_COLUMN_NAME_LENGTH"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="HBASE_MAX_COLUMN_VAL_LENGTH"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="MODE_SEABASE"
role="select:quotedtitle page"/></para></listitem>
</itemizedlist>
<para condition="hidden">If you are using HBase tables, you do not
need to change the settings of these CQDs. The default settings should
suffice.</para>
<section id="HBASE_INTERFACE">
<title>HBASE_INTERFACE</title>
<para><indexterm><primary>HBASE_INTERFACE</primary></indexterm><informaltable
frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>HBase</entry></row>
<row><entry>Description</entry><entry><para>Interface to use to access
HBase.</para></entry></row>
<row><entry>Values</entry><entry><para>Specify one of these values:</para
><itemizedlist>
<listitem><para>JNI to use a JNI interface</para></listitem>
<listitem><para>JNI_TRX to use a transactional interface with HBase-trx
via JNI</para></listitem>
</itemizedlist><para>The default value is JNI_TRX.</para></entry></row>
<row condition="hidden"><entry>Usage	</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Production usage</entry><entry>Not
applicable</entry></row>
<row condition="hidden"><entry>Impact</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Level</entry><entry>System</entry></row>
<row condition="hidden"><entry>Conflicts/Synergies	</entry><entry
>TBD</entry></row>
<row condition="hidden"><entry>Addressing the real problem	</entry>
<entry>TBD</entry></row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section condition="hidden" id="HBASE_MAX_COLUMN_INFO_LENGTH">
<title>HBASE_MAX_COLUMN_INFO_LENGTH</title>
<para><indexterm><primary>HBASE_MAX_COLUMN_INFO_LENGTH</primary>
</indexterm><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>HBase</entry></row>
<row><entry>Description</entry><entry><para>Length of VARCHAR for
rowwise access (COLUMN_DETAILS in schema "_ROW_") </para></entry></row>
<row><entry>Values</entry><entry><para>The default value is 10000.</para
></entry></row>
<row condition="hidden"><entry>Usage	</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Production usage</entry><entry>Not
applicable</entry></row>
<row condition="hidden"><entry>Impact</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Level</entry><entry>System</entry></row>
<row condition="hidden"><entry>Conflicts/Synergies	</entry><entry
>TBD</entry></row>
<row condition="hidden"><entry>Addressing the real problem	</entry>
<entry>TBD</entry></row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section condition="hidden" id="HBASE_MAX_COLUMN_NAME_LENGTH">
<title>HBASE_MAX_COLUMN_NAME_LENGTH</title>
<para><indexterm><primary>HBASE_MAX_COLUMN_NAME_LENGTH</primary>
</indexterm><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>HBase</entry></row>
<row><entry>Description</entry><entry><para>Maximum supported length
of column names (COL_NAME in schema "_CELL_")</para></entry></row>
<row><entry>Values</entry><entry><para>The default value is 100.</para
></entry></row>
<row condition="hidden"><entry>Usage	</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Production usage</entry><entry>Not
applicable</entry></row>
<row condition="hidden"><entry>Impact</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Level</entry><entry>System</entry></row>
<row condition="hidden"><entry>Conflicts/Synergies	</entry><entry
>TBD</entry></row>
<row condition="hidden"><entry>Addressing the real problem	</entry>
<entry>TBD</entry></row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section condition="hidden" id="HBASE_MAX_COLUMN_VAL_LENGTH">
<title>HBASE_MAX_COLUMN_VAL_LENGTH</title>
<para><indexterm><primary>HBASE_MAX_COLUMN_VAL_LENGTH</primary>
</indexterm><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>HBase</entry></row>
<row><entry>Description</entry><entry><para>Maximum supported column
value length</para></entry></row>
<row><entry>Values</entry><entry><para>The default value is 1000.</para
></entry></row>
<row condition="hidden"><entry>Usage	</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Production usage</entry><entry>Not
applicable</entry></row>
<row condition="hidden"><entry>Impact</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Level</entry><entry>System</entry></row>
<row condition="hidden"><entry>Conflicts/Synergies	</entry><entry
>TBD</entry></row>
<row condition="hidden"><entry>Addressing the real problem	</entry>
<entry>TBD</entry></row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section condition="hidden" id="MODE_SEABASE">
<title>MODE_SEABASE</title>
<para><indexterm><primary>MODE_SEABASE</primary></indexterm><informaltable
frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>HBase</entry></row>
<row><entry>Description</entry><entry><para>Global switch for <phrase
>HBase</phrase> functionality, which must be turned on first<phrase
> before setting the other HBase CQD attributes</phrase>.</para></entry>
</row>
<row><entry>Values</entry><entry><para>The default value is ON.</para
><para condition="hidden">The default value is OFF (close source).
ON is for open source.</para></entry></row>
<row condition="hidden"><entry>Usage	</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Production usage</entry><entry>Not
applicable</entry></row>
<row condition="hidden"><entry>Impact</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Level</entry><entry>System</entry></row>
<row condition="hidden"><entry>Conflicts/Synergies	</entry><entry
>TBD</entry></row>
<row condition="hidden"><entry>Addressing the real problem	</entry>
<entry>TBD</entry></row>
</tbody>
</tgroup>
</informaltable></para>
</section>
</section>
<section id="Hive-CQDs">
<title>Hive Environment CQDs</title>
<para>This section describes the CQD, <xref
linkend="HIVE_MAX_STRING_LENGTH" role="select:quotedtitle page"/>,
which defines the maximum string length for the <literal>string</literal
> data type in Hive.</para>
<para condition="hidden">This section describes these CQDs, which
define the Hive environment:</para>
<itemizedlist condition="hidden">
<listitem condition="hidden"><para><xref linkend="HIVE_CATALOG"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="HIVE_DEFAULT_CHARSET"
role="select:quotedtitle page"/></para></listitem>
<listitem condition="hidden"><para><xref linkend="HIVE_DEFAULT_SCHEMA"
role="select:quotedtitle page"/></para></listitem>
<listitem condition="hidden"><para><xref
linkend="HIVE_LIB_HDFS_PORT_OVERRIDE" role="select:quotedtitle page"
/></para></listitem>
<listitem><para><xref linkend="HIVE_MAX_STRING_LENGTH"
role="select:quotedtitle page"/></para></listitem>
<listitem condition="hidden"><para><xref
linkend="HIVE_METADATA_CPCC_URL" role="select:quotedtitle page"/></para>
</listitem>
<listitem condition="hidden"><para><xref linkend="IVE_METADATA_PASSWORD"
role="select:quotedtitle page"/></para></listitem>
<listitem condition="hidden"><para><xref
linkend="HIVE_METADATA_REFRESH_INTERVAL" role="select:quotedtitle page"
/></para></listitem>
<listitem condition="hidden"><para><xref linkend="HIVE_METADATA_SCHEMA"
role="select:quotedtitle page"/></para></listitem>
<listitem condition="hidden"><para><xref linkend="HIVE_METADATA_USER"
role="select:quotedtitle page"/></para></listitem>
<listitem condition="hidden"><para><xref linkend="MODE_SEAHIVE"
role="select:quotedtitle page"/></para></listitem>
</itemizedlist>
<section condition="hidden" id="HIVE_CATALOG">
<title>HIVE_CATALOG</title>
<para><indexterm><primary>HIVE_CATALOG</primary></indexterm><informaltable
frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Hive</entry></row>
<row><entry>Description</entry><entry><para>Catalog that represents
the Hive database. This catalog cannot be created using Trafodion
SQL.</para></entry></row>
<row><entry>Values</entry><entry><para>The default value is HIVE.</para
></entry></row>
<row condition="hidden"><entry>Usage	</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Production usage</entry><entry>Not
applicable</entry></row>
<row condition="hidden"><entry>Impact</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Level</entry><entry>System</entry></row>
<row condition="hidden"><entry>Conflicts/Synergies	</entry><entry
>TBD</entry></row>
<row condition="hidden"><entry>Addressing the real problem	</entry>
<entry>TBD</entry></row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section condition="hidden" id="HIVE_DEFAULT_CHARSET">
<title>HIVE_DEFAULT_CHARSET</title>
<para><indexterm><primary>HIVE_DEFAULT_CHARSET</primary></indexterm
><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Hive</entry></row>
<row><entry>Description</entry><entry><para>Character set of the character
columns in Trafodion Hive tables. This value is interpreted at compile
time, not table creation time.</para></entry></row>
<row><entry>Values</entry><entry><para>The default value is UTF8.</para
></entry></row>
<row condition="hidden"><entry>Usage	</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Production usage</entry><entry>Not
applicable</entry></row>
<row condition="hidden"><entry>Impact</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Level</entry><entry>System</entry></row>
<row condition="hidden"><entry>Conflicts/Synergies	</entry><entry
>TBD</entry></row>
<row condition="hidden"><entry>Addressing the real problem	</entry>
<entry>TBD</entry></row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section condition="hidden" id="HIVE_DEFAULT_SCHEMA">
<title>HIVE_DEFAULT_SCHEMA</title>
<para><indexterm><primary>HIVE_DEFAULT_SCHEMA</primary></indexterm
><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Hive</entry></row>
<row><entry>Description</entry><entry><para>ANSI name of the default
Hive schema.</para></entry></row>
<row><entry>Values</entry><entry><para>The default value is HIVE.</para
></entry></row>
<row condition="hidden"><entry>Usage	</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Production usage</entry><entry>Not
applicable</entry></row>
<row condition="hidden"><entry>Impact</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Level</entry><entry>System</entry></row>
<row condition="hidden"><entry>Conflicts/Synergies	</entry><entry
>TBD</entry></row>
<row condition="hidden"><entry>Addressing the real problem	</entry>
<entry>TBD</entry></row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section condition="hidden" id="HIVE_LIB_HDFS_PORT_OVERRIDE">
<title>HIVE_LIB_HDFS_PORT_OVERRIDE</title>
<para><indexterm><primary>HIVE_LIB_HDFS_PORT_OVERRIDE</primary>
</indexterm><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Hive</entry></row>
<row><entry>Description</entry><entry><para>Override the port number
from the Hive metadata to access HDFS. For unknown reasons, this is
required in some cases, typically overridden with 0 to use the default
port. </para></entry></row>
<row><entry>Values</entry><entry><para>The default value is -1.</para
></entry></row>
<row condition="hidden"><entry>Usage	</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Production usage</entry><entry>Not
applicable</entry></row>
<row condition="hidden"><entry>Impact</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Level</entry><entry>System</entry></row>
<row condition="hidden"><entry>Conflicts/Synergies	</entry><entry
>TBD</entry></row>
<row condition="hidden"><entry>Addressing the real problem	</entry>
<entry>TBD</entry></row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section id="HIVE_MAX_STRING_LENGTH">
<title>HIVE_MAX_STRING_LENGTH</title>
<para><indexterm><primary>HIVE_MAX_STRING_LENGTH</primary></indexterm
><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Hive</entry></row>
<row><entry>Description</entry><entry><para>Maximum supported string
length for the <literal>string</literal> data type in Hive. All <literal
>string</literal> columns in Hive tables get converted to VARCHAR(<replaceable
>n</replaceable> BYTES) CHARACTER SET UTF8, with <replaceable>n</replaceable
> being the value of this CQD.</para></entry></row>
<row><entry>Values</entry><entry><para>The default value is 32000.</para
></entry></row>
<row condition="hidden"><entry>Usage	</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Production usage</entry><entry>Not
applicable</entry></row>
<row condition="hidden"><entry>Impact</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Level</entry><entry>System</entry></row>
<row condition="hidden"><entry>Conflicts/Synergies	</entry><entry
>TBD</entry></row>
<row condition="hidden"><entry>Addressing the real problem	</entry>
<entry>TBD</entry></row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section condition="hidden" id="HIVE_METADATA_CPCC_URL">
<title>HIVE_METADATA_CPCC_URL</title>
<para><indexterm><primary>HIVE_METADATA_CPCC_URL</primary></indexterm
><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Hive</entry></row>
<row><entry>Description</entry><entry><para>URL for the MySQL server
that stores Hive metadata.</para></entry></row>
<row><entry>Values</entry><entry><para>This setting should match the
host and port of the <literal>javax.jdo.option.ConnectionURL</literal
> property in the <filename>hive-site.xml</filename> file. The default
value is <literal>tcp://127.0.0.1:3306</literal>.</para></entry></row>
<row condition="hidden"><entry>Usage	</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Production usage</entry><entry>Not
applicable</entry></row>
<row condition="hidden"><entry>Impact</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Level</entry><entry>System</entry></row>
<row condition="hidden"><entry>Conflicts/Synergies	</entry><entry
>TBD</entry></row>
<row condition="hidden"><entry>Addressing the real problem	</entry>
<entry>TBD</entry></row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section condition="hidden" id="IVE_METADATA_PASSWORD">
<title>HIVE_METADATA_PASSWORD</title>
<para><indexterm><primary>IVE_METADATA_PASSWORD</primary></indexterm
><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Hive</entry></row>
<row><entry>Description</entry><entry><para>Password for the MySQL
user ID, HIVE_METADATA_USER. </para></entry></row>
<row><entry>Values</entry><entry><para>This setting should match the <literal
>javax.jdo.option.ConnectionPassword</literal> property in the <filename
>hive-site.xml</filename> file.</para></entry></row>
<row condition="hidden"><entry>Usage	</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Production usage</entry><entry>Not
applicable</entry></row>
<row condition="hidden"><entry>Impact</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Level</entry><entry>System</entry></row>
<row condition="hidden"><entry>Conflicts/Synergies	</entry><entry
>TBD</entry></row>
<row condition="hidden"><entry>Addressing the real problem	</entry>
<entry>TBD</entry></row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section condition="hidden" id="HIVE_METADATA_REFRESH_INTERVAL">
<title>HIVE_METADATA_REFRESH_INTERVAL</title>
<para><indexterm><primary>HIVE_METADATA_REFRESH_INTERVAL</primary>
</indexterm><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Hive</entry></row>
<row><entry>Description</entry><entry><para>Specifies where and how
often Trafodion checks for metadata updates, including Hive metadata
in the MySQL and HDFS directory/file statistics. </para></entry></row>
<row><entry>Values</entry><entry><itemizedlist>
<listitem><para>0 means that Trafodion checks on every compile, but
not at runtime.</para></listitem>
<listitem><para>-1 means that Trafodion does not check again after
the first time the compiler reads the metadata.</para></listitem>
<listitem><para>A positive value indicates the number of seconds that
Trafodion uses a cached Hive metadata item.</para></listitem>
</itemizedlist><para>The default value is 0.</para></entry></row>
<row condition="hidden"><entry>Usage	</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Production usage</entry><entry>Not
applicable</entry></row>
<row condition="hidden"><entry>Impact</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Level</entry><entry>System</entry></row>
<row condition="hidden"><entry>Conflicts/Synergies	</entry><entry
>TBD</entry></row>
<row condition="hidden"><entry>Addressing the real problem	</entry>
<entry>TBD</entry></row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section condition="hidden" id="HIVE_METADATA_SCHEMA">
<title>HIVE_METADATA_SCHEMA</title>
<para><indexterm><primary>HIVE_METADATA_SCHEMA</primary></indexterm
><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Hive</entry></row>
<row><entry>Description</entry><entry><para>Schema name of the MySQL
Hive metadata database. </para></entry></row>
<row><entry>Values</entry><entry><para>This setting should match the
metastore name of the <literal>javax.jdo.option.ConnectionURL</literal
> property in the <filename>hive-site.xml</filename> file. The default
value is <literal>metastore</literal>.</para></entry></row>
<row condition="hidden"><entry>Usage	</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Production usage</entry><entry>Not
applicable</entry></row>
<row condition="hidden"><entry>Impact</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Level</entry><entry>System</entry></row>
<row condition="hidden"><entry>Conflicts/Synergies	</entry><entry
>TBD</entry></row>
<row condition="hidden"><entry>Addressing the real problem	</entry>
<entry>TBD</entry></row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section condition="hidden" id="HIVE_METADATA_USER">
<title>HIVE_METADATA_USER</title>
<para><indexterm><primary>HIVE_METADATA_USER</primary></indexterm
><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Hive</entry></row>
<row><entry>Description</entry><entry><para>MySQL username with the
right to connect to the Hive metastore and the right to read the metadata
tables. </para></entry></row>
<row><entry>Values</entry><entry><para>This setting should match the <literal
>javax.jdo.option.ConnectionUserName</literal> property in the <filename
>hive-site.xml</filename> file. The default value is <literal>root</literal
>.</para></entry></row>
<row condition="hidden"><entry>Usage	</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Production usage</entry><entry>Not
applicable</entry></row>
<row condition="hidden"><entry>Impact</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Level</entry><entry>System</entry></row>
<row condition="hidden"><entry>Conflicts/Synergies	</entry><entry
>TBD</entry></row>
<row condition="hidden"><entry>Addressing the real problem	</entry>
<entry>TBD</entry></row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section condition="hidden" id="MODE_SEAHIVE">
<title>MODE_SEAHIVE</title>
<para><indexterm><primary>MODE_SEAHIVE</primary></indexterm><informaltable
frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Hive</entry></row>
<row><entry>Description</entry><entry><para>Global switch for Hive
functionality, which must be turned on first<phrase> before setting
the other Hive CQD attributes</phrase>.</para></entry></row>
<row><entry>Values</entry><entry><para>The default value is OFF.</para
><para condition="hidden">The default value is OFF (closed source).
ON is for open source.</para></entry></row>
<row condition="hidden"><entry>Usage	</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Production usage</entry><entry>Not
applicable</entry></row>
<row condition="hidden"><entry>Impact</entry><entry>TBD</entry></row>
<row condition="hidden"><entry>Level</entry><entry>System</entry></row>
<row condition="hidden"><entry>Conflicts/Synergies	</entry><entry
>TBD</entry></row>
<row condition="hidden"><entry>Addressing the real problem	</entry>
<entry>TBD</entry></row>
</tbody>
</tgroup>
</informaltable></para>
</section>
</section>
<section condition="hidden" id="Managing_Automated_STATS_Generation">
<title>Managing Automated STATS Generation</title>
<para>This section describes these CQDs that are used for managing
automated STATS generation:</para>
<itemizedlist>
<listitem><para><xref linkend="USTAT_AUTO_PRIORITY"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="USTAT_MAX_READ_AGE_IN_MIN"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="USTAT_NECESSARY_SAMPLE_MAX"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="USTAT_OBSOLETE_PERCENT_ROWCOUNT"
role="select:quotedtitle page"/></para></listitem>
</itemizedlist>
<section id="USTAT_AUTO_PRIORITY">
<title>USTAT_AUTO_PRIORITY</title>
<para><indexterm><primary>USTAT_AUTO_PRIORITY</primary></indexterm
><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Update Statistics and Reorg</entry>
</row>
<row><entry>Description</entry><entry>Sets the priority of the compiler
process while running update statistics during the update statistics
automation maintenance window.</entry></row>
<row><entry>Values</entry><entry><para><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.56*"/>
<colspec colname="col2" colwidth="1.44*"/>
<tbody>
<row><entry>0 through max unsigned integer</entry><entry>For any value
greater than 199 a priority of 199 is used.</entry></row>
<row><entry colsep="1" nameend="col2" namest="col1">The default value
is 150.</entry></row>
</tbody>
</tgroup>
</informaltable></para></entry></row>
<row><entry>Usage	</entry><entry><para>Setting this CQD lower than
150 means that automated update statistics during the maintenance
window is less likely to interfere with other work on the system,
but may not get as much done during the window. Setting this CQD to
a value higher than 150 may slow down other work during the maintenance
window, but allow more tables to have histograms generated.</para
></entry></row>
<row><entry>Production usage</entry><entry>Not applicable</entry></row>
<row><entry>Impact</entry><entry>This setting can influence the impact
on other concurrent workload while affecting the time it takes to
run update statistics, as explained in Usage.</entry></row>
<row><entry>Level</entry><entry>System</entry></row>
<row><entry>Conflicts/Synergies	</entry><entry>Need to be aware of
the priorities at which other workloads are running. Various processes
follow preconfigured priorities. Setting the priority incorrectly
could cause unexpected behavior.</entry></row>
<row><entry>Addressing the real problem	</entry><entry>Not applicable</entry>
</row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section id="USTAT_MAX_READ_AGE_IN_MIN">
<title>USTAT_MAX_READ_AGE_IN_MIN</title>
<para><indexterm><primary>USTAT_MAX_READ_AGE_IN_MIN</primary>
</indexterm><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Update Statistics and Reorg</entry>
</row>
<row><entry>Description</entry><entry><para>When performing update
statistics with the NECESSARY keyword or with automation, this is
the number of minutes that are allowed to have elapsed since a histogram
was marked as read for it to be regenerated.</para><para>Histograms
that were marked more than USTAT_MAX_READ_AGE_IN_MIN minutes ago are
not regenerated.</para></entry></row>
<row><entry>Values</entry><entry><para><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.56*"/>
<colspec colname="col2" colwidth="1.44*"/>
<tbody>
<row><entry>0 through max unsigned integer</entry><entry>Setting this
CQD to a value less than 2 * USTAT_AUTOMATION_INTERVAL is silently
ignored and 2 * USTAT_AUTOMATION_INTERVAL (default value of 2880)
is used.</entry></row>
<row><entry colsep="1" nameend="col2" namest="col1">The default value
is 5760 (4 days).</entry></row>
</tbody>
</tgroup>
</informaltable></para></entry></row>
<row><entry>Usage	</entry><entry><para>Influences how frequently the
histograms for a table are regenerated. If a table is being used frequently
then chances are that its histograms are also be considered for update
frequently. However, if a table is not used frequently, this CQD influences
how frequently the histograms for that table are updated.</para><para
>A smaller setting reduces the number of histograms being updated
if there are many tables that have not been used within that interval.
A larger setting updates histogram for many more tables that are not
being accessed that often. </para></entry></row>
<row><entry>Production usage</entry><entry>Not applicable</entry></row>
<row><entry>Impact</entry><entry>Influences the number of histograms
that need to be regenerated and therefore the time it takes for update
statistics automation to regenerate histograms for all the tables
that so qualify.</entry></row>
<row><entry>Level</entry><entry>System</entry></row>
<row><entry>Conflicts/Synergies	</entry><entry><para>USTAT_AUTOMATION_INTERVAL
sets a lower bound on this CQD.</para><para>It is influenced by USTAT_AUTO_READTIME_UPDATE_INTERVAL,
which influences how often READ_TIME is updated for the histogram.
This CQD qualifies the histogram to be regenerated – is the maximum
time since READ_TIME was updated.</para></entry></row>
<row><entry>Addressing the real problem	</entry><entry>Not applicable</entry>
</row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section id="USTAT_NECESSARY_SAMPLE_MAX">
<title>USTAT_NECESSARY_SAMPLE_MAX</title>
<para><indexterm><primary>USTAT_NECESSARY_SAMPLE_MAX</primary>
</indexterm><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Update Statistics and Reorg</entry>
</row>
<row><entry>Description</entry><entry><para>Sets the maximum size
of a sample when update statistics automation or update statistics
with the NECESSARY keyword is used.</para><para>For the NECESSARY
keyword and automation, update statistics always samples, and the
sample percent is determined using this equation: MINOF(HIST_DEFAULT_SAMPLE_RATIO
+ CV * USTAT_AUTO_CV_SAMPLE_SLOPE, 10%), limited to USTAT_NECESSARY_SAMPLE_MAX
rows.</para></entry></row>
<row><entry>Values</entry><entry><para><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.56*"/>
<colspec colname="col2" colwidth="1.44*"/>
<tbody>
<row><entry>1 through max unsigned integer</entry><entry></entry></row>
<row><entry colsep="1" nameend="col2" namest="col1">The default value
is 5000000.</entry></row>
</tbody>
</tgroup>
</informaltable></para></entry></row>
<row><entry>Usage	</entry><entry><para>Use this CQD to influence the
maximum size of the sample, when sampling is used to update statistics
for a table, thereby influencing the time it takes to run update statistics.
The smaller the maximum sample size, the faster update statistics
runs for larger tables.</para></entry></row>
<row><entry>Production usage</entry><entry>Not applicable</entry></row>
<row><entry>Impact</entry><entry><para>Setting this CQD to a smaller
value means that when NECESSARY keyword or automation is used, the
maximum sample size is smaller. Update statistics may run faster,
but may also create less accurate histograms. Setting this CQD to
a larger value results in larger samples, with update statistics running
longer, while providing more accurate histograms.</para></entry></row>
<row><entry>Level</entry><entry>System</entry></row>
<row><entry>Conflicts/Synergies	</entry><entry>Not applicable</entry>
</row>
<row><entry>Addressing the real problem	</entry><entry>Not applicable</entry>
</row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section id="USTAT_OBSOLETE_PERCENT_ROWCOUNT">
<title>USTAT_OBSOLETE_PERCENT_ROWCOUNT</title>
<para><indexterm><primary>USTAT_OBSOLETE_PERCENT_ROWCOUNT</primary>
</indexterm><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Update Statistics and Reorg</entry>
</row>
<row><entry>Description</entry><entry><para>Controls the threshold
of change after which a table has histograms regenerated when update
statistics automation, or the NECESSARY keyword, is used.</para><para
>If the total number of rows of a table has changed more than USTAT_OBSOLETE_PERCENT_ROWCOUNT
%, and has histograms that have been read less than USTAT_MAX_READ_AGE_IN_MIN
minutes ago, these histograms are regenerated. In addition, if the
sum of the number of rows that have been updated, deleted, or inserted
exceeds USTAT_OBSOLETE_PERCENT_ROWCOUNT % of the table, the same occurs.</para
></entry></row>
<row><entry>Values</entry><entry><para><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.56*"/>
<colspec colname="col2" colwidth="1.44*"/>
<tbody>
<row><entry>0 through 100</entry><entry></entry></row>
<row><entry colsep="1" nameend="col2" namest="col1">The default value
is ‘15’.</entry></row>
</tbody>
</tgroup>
</informaltable></para></entry></row>
<row><entry>Usage	</entry><entry><para>Setting this CQD to a smaller
value means that a smaller change to the table causes histograms to
be regenerated when using NECESSARY and automation – and therefore
regeneration of histograms occurs more often. Setting this CQD to
a larger value requires a lot more changes to a table before its histogram
is regenerated. It can be used to influence how often update statistics
is run for tables and therefore the total time it takes to update
all statistics. </para></entry></row>
<row><entry>Production usage</entry><entry>Not applicable</entry></row>
<row><entry>Impact</entry><entry><para>Depending on this setting and
based on the frequency of updates to tables, their histograms are
updated more often or less often. This can impact the time it takes
to update histograms for all the tables on the one hand, but can leave
histograms stale for longer and result in poorer query plans on the
other. </para></entry></row>
<row><entry>Level</entry><entry>System</entry></row>
<row><entry>Conflicts/Synergies	</entry><entry>Not applicable</entry>
</row>
<row><entry>Addressing the real problem	</entry><entry>Not applicable</entry>
</row>
</tbody>
</tgroup>
</informaltable></para>
</section>
</section>
<section id="Managing_Histograms">
<title>Managing Histograms</title>
<para>This section describes these CQDs that are used to manage histograms:</para>
<itemizedlist>
<listitem><para><xref linkend="CACHE_HISTOGRAMS_REFRESH_INTERVAL"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="HIST_NO_STATS_REFRESH_INTERVAL"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="HIST_PREFETCH"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="HIST_ROWCOUNT_REQUIRING_STATS"
role="select:quotedtitle page"/></para></listitem>
</itemizedlist>
<section id="CACHE_HISTOGRAMS_REFRESH_INTERVAL">
<title>CACHE_HISTOGRAMS_REFRESH_INTERVAL</title>
<para><indexterm><primary>CACHE_HISTOGRAMS_REFRESH_INTERVAL</primary>
</indexterm><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Histograms</entry></row>
<row><entry>Description</entry><entry><para>Defines the time interval
after which timestamps for cached histograms are checked to be refreshed.</para
></entry></row>
<row><entry>Values</entry><entry><para><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.56*"/>
<colspec colname="col2" colwidth="1.44*"/>
<tbody>
<row><entry>Unsigned integer</entry><entry>Unit is seconds.</entry>
</row>
<row><entry colsep="1" nameend="col2" namest="col1">The default value
is ‘3600’ (1 hour).</entry></row>
</tbody>
</tgroup>
</informaltable></para></entry></row>
<row><entry>Usage	</entry><entry><para>Histogram statistics are cached
so that the compiler can avoid access to the metadata tables, thereby
reducing compile times. The timestamp of the tables are checked against
those of the cached histograms at an interval specified by this CQD,
in order to see if the cached histograms need to be refreshed.</para
><para>You can increase the interval to reduce the impact on compile
times as long as you do not need to obtain fresh statistics more frequently
in order to improve query performance. It may be that the default
interval is too long and you would rather refresh the statistics more
frequently than the default one hour, in order to improve query performance
at the cost of increased compile times.</para><para>This setting depends
on how frequently you are updating statistics on tables. There is
no point in refreshing statistics frequently when statistics are not
being updated during that time. On the other hand if you are updating
statistics, or generating them for the first time on freshly loaded
tables frequently enough, and you want these to be picked up immediately
by the compiler because you have seen this to have a dramatic impact
on plan quality, then you can make the refresh more frequent.</para
></entry></row>
<row><entry>Production usage</entry><entry>Not applicable</entry></row>
<row><entry>Impact</entry><entry>Longer histogram refresh intervals
can improve compile times. However, the longer the refresh interval
the more obsolete the histograms. That could result in poor performance
for queries that could leverage recently updated statistics.</entry>
</row>
<row><entry>Level</entry><entry>System or Service</entry></row>
<row condition="hidden"><entry>Conflicts/Synergies	</entry><entry
>Frequency of update statistics run either using MAINTAIN or using
Update Statistics Automation Server.</entry></row>
<row><entry>Addressing the real problem	</entry><entry>Not applicable</entry>
</row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section id="HIST_NO_STATS_REFRESH_INTERVAL">
<title>HIST_NO_STATS_REFRESH_INTERVAL</title>
<para><indexterm><primary>HIST_NO_STATS_REFRESH_INTERVAL</primary>
</indexterm><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Histograms</entry></row>
<row><entry>Description</entry><entry><para>Defines the time interval
after which the fake histograms in the cache should be refreshed unconditionally.</para
></entry></row>
<row><entry>Values</entry><entry><para><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.56*"/>
<colspec colname="col2" colwidth="1.44*"/>
<tbody>
<row><entry>Integer</entry><entry>Unit is seconds.</entry></row>
<row><entry colsep="1" nameend="col2" namest="col1">The default value
is ‘3600’ (1 hour).</entry></row>
</tbody>
</tgroup>
</informaltable></para></entry></row>
<row><entry>Usage	</entry><entry><para>Histogram statistics are “fake”
when update statistics is not being run, but instead the customer
is updating the histogram tables directly with statistics to guide
the optimizer. This may be done if the data in the table is very volatile
(such as for temporary tables), update statistics is not possible
because of constant flush and fill of the table occurring, and statistics
are manually set to provide some guidance to the optimizer to generate
a good plan.</para><para>If these fake statistics are updated constantly
to reflect the data churn, this default can be set to 0. This would
ensure that the histograms with fake statistics are not cached, and
are always refreshed. If these fake statistics are set and not touched
again, then this interval could be set very high.</para></entry></row>
<row><entry>Production usage</entry><entry>Not applicable</entry></row>
<row><entry>Impact</entry><entry>Setting a high interval improves
compilation time. However, if statistics are being updated, the compiler
may be working with obsolete histogram statistics, potentially resulting
in poorer plans.</entry></row>
<row><entry>Level</entry><entry>Service</entry></row>
<row><entry>Conflicts/Synergies	</entry><entry>Not applicable</entry>
</row>
<row><entry>Addressing the real problem	</entry><entry>Not applicable</entry>
</row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section id="HIST_PREFETCH">
<title>HIST_PREFETCH</title>
<para><indexterm><primary>HIST_PREFETCH</primary></indexterm><informaltable
frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Histograms</entry></row>
<row><entry>Description</entry><entry><para>Influences the compiler
to pre-fetch the histograms and save them in cache.</para></entry></row>
<row><entry>Values</entry><entry><para><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.56*"/>
<colspec colname="col2" colwidth="1.44*"/>
<tbody>
<row><entry>‘ON’</entry><entry>Pre-fetches the histograms.</entry></row>
<row><entry>‘OFF’</entry><entry>Does not pre-fetch the histograms.</entry>
</row>
<row><entry colsep="1" nameend="col2" namest="col1">The default value
is ‘ON’.</entry></row>
</tbody>
</tgroup>
</informaltable></para></entry></row>
<row><entry>Usage	</entry><entry>You may want to turn this off if
you don’t want to pre-fetch a large number of histograms, many of
which may not be used.</entry></row>
<row><entry>Production usage</entry><entry>Not applicable</entry></row>
<row><entry>Impact</entry><entry>Though it makes compilation time
faster, it may result in the histogram cache to be filled with histograms
that may never be used.</entry></row>
<row><entry>Level</entry><entry>System or Service</entry></row>
<row><entry>Conflicts/Synergies	</entry><entry>Use this CQD with CACHE_HISTOGRAMS.
If CACHE_HISTOGRAMS is OFF, then this CQD has no effect.</entry></row>
<row><entry>Addressing the real problem	</entry><entry>Not applicable</entry>
</row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section id="HIST_ROWCOUNT_REQUIRING_STATS">
<title>HIST_ROWCOUNT_REQUIRING_STATS</title>
<para><indexterm><primary>HIST_ROWCOUNT_REQUIRING_STATS</primary>
</indexterm><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Histograms</entry></row>
<row><entry>Description</entry><entry><para>Specifies the minimum
row count for which the optimizer needs histograms, in order to compute
better cardinality estimates. The optimizer does not issue any missing
statistics warnings for tables whose size is smaller than the value
of this CQD.</para></entry></row>
<row><entry>Values</entry><entry><para><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.56*"/>
<colspec colname="col2" colwidth="1.44*"/>
<tbody>
<row><entry>Integer</entry><entry></entry></row>
<row><entry colsep="1" nameend="col2" namest="col1">The default value
is ‘50000’.</entry></row>
</tbody>
</tgroup>
</informaltable></para></entry></row>
<row><entry>Usage	</entry><entry>Use this CQD to reduce the number
of statistics warnings.</entry></row>
<row><entry>Production usage</entry><entry>Not applicable</entry></row>
<row><entry>Impact</entry><entry>Missing statistics warnings are not
displayed for smaller tables, which in most cases don't impact plan
quality much. However, there may be some exceptions where missing
statistics on small tables could result in less than optimal plans.</entry>
</row>
<row><entry>Level</entry><entry>System</entry></row>
<row><entry>Conflicts/Synergies	</entry><entry>Use this CQD with HIST_MISSING_STATS_WARNING_LEVEL.
If the warning level CQD is 0, then this CQD does not have any effect.
Also, for tables having fewer rows than set in this CQD, no warnings
are displayed irrespective of the warning level.</entry></row>
<row><entry>Addressing the real problem	</entry><entry>Not applicable</entry>
</row>
</tbody>
</tgroup>
</informaltable></para>
</section>
</section>
<section id="Optimizer">
<title>Optimizer</title>
<para>This section describes these CQDs that are used by the Optimizer:</para>
<itemizedlist>
<listitem><para><xref linkend="JOIN_ORDER_BY_USER"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="MDAM_SCAN_METHOD"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="SUBQUERY_UNNESTING"
role="select:quotedtitle page"/></para></listitem>
</itemizedlist>
<section id="JOIN_ORDER_BY_USER">
<title>JOIN_ORDER_BY_USER</title>
<para><indexterm><primary>JOIN_ORDER_BY_USER</primary></indexterm
><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Influencing Query Plans</entry></row>
<row><entry>Description</entry><entry>Enables or disables the join
order in which the optimizer joins the tables to be the sequence of
the tables in the FROM clause of the query.</entry></row>
<row><entry>Values</entry><entry><para><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.56*"/>
<colspec colname="col2" colwidth="1.44*"/>
<tbody>
<row><entry>‘ON’</entry><entry>Join order is forced.</entry></row>
<row><entry>‘OFF’</entry><entry>Join order is decided by the optimizer.</entry>
</row>
<row><entry colsep="1" nameend="col2" namest="col1">The default value
is ‘OFF’.</entry></row>
</tbody>
</tgroup>
</informaltable></para></entry></row>
<row><entry>Usage	</entry><entry><para>When set to ON, the optimizer
considers only execution plans that have the join order matching the
sequence of the tables in the FROM clause.</para></entry></row>
<row><entry>Production usage</entry><entry>This setting is to be used
only for forcing a desired join order that was not generated by default
by the optimizer. It can be used as a workaround for query plans with
inefficient join order. </entry></row>
<row><entry>Impact</entry><entry>Because you are in effect forcing
the optimizer to use a plan that joins the table in the order specified
in the FROM clause, the plan generated may not be the optimal one.</entry>
</row>
<row><entry>Level</entry><entry>Query</entry></row>
<row><entry>Conflicts/Synergies	</entry><entry>Not applicable</entry>
</row>
<row><entry>Addressing the real problem	</entry><entry>Not applicable</entry>
</row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section id="MDAM_SCAN_METHOD">
<title>MDAM_SCAN_METHOD</title>
<para><indexterm><primary>MDAM_SCAN_METHOD</primary></indexterm><informaltable
frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Influencing Query Plans</entry></row>
<row><entry>Description</entry><entry><para>Enables or disables the
Multi-Dimensional Access Method.</para></entry></row>
<row><entry>Values</entry><entry><para><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.56*"/>
<colspec colname="col2" colwidth="1.44*"/>
<tbody>
<row><entry>‘ON’</entry><entry>MDAM is considered.</entry></row>
<row><entry>‘OFF’</entry><entry>MDAM is disabled.</entry></row>
<row><entry colsep="1" nameend="col2" namest="col1">The default value
is ‘ON’.</entry></row>
</tbody>
</tgroup>
</informaltable></para></entry></row>
<row><entry>Usage	</entry><entry><para>In certain situations, the
optimizer might choose MDAM inappropriately, causing poor performance.
In such situations you may want to turn MDAM OFF for the query it
is effecting.</para></entry></row>
<row><entry>Production usage</entry><entry>Not applicable</entry></row>
<row><entry>Impact</entry><entry>Table scans with predicates on non-leading
clustering key column(s) could benefit from MDAM access method if
the leading column(s) has a small number of distinct values. Turning
MDAM off results in a longer scan time for such queries.</entry></row>
<row><entry>Level</entry><entry>Set this CQD at the query level when
MDAM is not working efficiently for a specific query. However, there
may be cases (usually a defect) where a larger set of queries is being
negatively impacted by MDAM. In those cases you may want to set it
at the service or system level.</entry></row>
<row><entry>Conflicts/Synergies	</entry><entry>Not applicable</entry>
</row>
<row><entry>Addressing the real problem	</entry><entry>Not applicable</entry>
</row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section id="SUBQUERY_UNNESTING">
<title>SUBQUERY_UNNESTING</title>
<para><indexterm><primary>SUBQUERY_UNNESTING</primary></indexterm
><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Influencing Query Plans</entry></row>
<row><entry>Description</entry><entry><para>Controls the optimizer’s
ability to transform nested sub-queries into regular join trees.</para
></entry></row>
<row><entry>Values</entry><entry><para><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.56*"/>
<colspec colname="col2" colwidth="1.44*"/>
<tbody>
<row><entry>‘ON’</entry><entry>Subquery un-nesting is considered.</entry>
</row>
<row><entry>‘OFF’</entry><entry>Subquery un-nesting is disabled.</entry>
</row>
<row><entry colsep="1" nameend="col2" namest="col1">The default value
is ‘ON’.</entry></row>
</tbody>
</tgroup>
</informaltable></para></entry></row>
<row><entry>Usage	</entry><entry>Use this control to disable subquery
un-nesting in the rare situation when un-nesting results in an inefficient
query execution plan</entry></row>
<row><entry>Production usage</entry><entry>Not applicable</entry></row>
<row><entry>Impact</entry><entry>In general, subquery un-nesting results
in more efficient execution plans for queries with nested sub-queries.
Use only as a workaround for observed problems due to un-nesting.</entry>
</row>
<row><entry>Level</entry><entry>Query</entry></row>
<row><entry>Conflicts/Synergies	</entry><entry>Not applicable</entry>
</row>
<row><entry>Addressing the real problem	</entry><entry>Not applicable</entry>
</row>
</tbody>
</tgroup>
</informaltable></para>
</section>
</section>
<section condition="hidden" id="Sequence_Generator">
<title>Sequence Generator</title>
<para>This section describes these CQDs that are used by the sequence
generator:</para>
<itemizedlist>
<listitem><para><xref linkend="SEQUENCE_GENERATOR_CACHE"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="SEQUENCE_GENERATOR_CACHE_INCREMENT"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="SEQUENCE_GENERATOR_CACHE_INITIAL"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="SEQUENCE_GENERATOR_CACHE_MAXIMUM"
role="select:quotedtitle page"/></para></listitem>
</itemizedlist>
<section id="SEQUENCE_GENERATOR_CACHE">
<title>SEQUENCE_GENERATOR_CACHE</title>
<para><indexterm><primary>SEQUENCE_GENERATOR_CACHE</primary></indexterm
><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Runtime controls</entry></row>
<row><entry>Description</entry><entry><para>Specifies the number of
values to fetch into the sequence generator cache from the sequence
generator object, when values are needed to insert rows into a table
with an identity column. If this value is set to greater than zero,
the sequence generator only retrieves as many values as specified
by this CQD, and does not dynamically adjust the sequence generator
cache size.</para></entry></row>
<row><entry>Values</entry><entry><para><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.56*"/>
<colspec colname="col2" colwidth="1.44*"/>
<tbody>
<row><entry>Any unsigned integer</entry><entry></entry></row>
<row><entry colsep="1" nameend="col2" namest="col1">The default value
is ‘0’.</entry></row>
</tbody>
</tgroup>
</informaltable></para></entry></row>
<row><entry>Usage	</entry><entry><para>At the default value of 0,
an algorithm is used to dynamically increase the size of the sequence
generator cache as the number of rows being inserted increases. This
algorithm is based on the settings of the following CQDs:<itemizedlist>
<listitem><para>SEQUENCE_GENERATOR_CACHE_INITIAL</para></listitem>
<listitem><para>SEQUENCE_GENERATOR_CACHE_INCREMENT</para></listitem>
<listitem><para>SEQUENCE_GENERATOR_CACHE_MAXIMUM</para></listitem>
</itemizedlist></para><para>Initial is the first set of values it
retrieves, increment is the multiplier that it uses to retrieve the
next set of values, up to the maximum value. Once it reaches the maximum
it retrieves only the number of values specified by maximum.</para
><para>For maximum efficiency when you are doing a large number of
inserts via rowsets (a load) and would rather not suffer the impact
of the initial retrievals until the algorithm ramps-up to the maximum,
specify the maximum value through this CQD, or even a higher value
for a large load.</para><para>In fact, if you have the row count of
the rows you are planning to insert, and do not expect any failures,
you could use the row count as the sequence generator cache value.
Then the sequence generator object is accessed only once and no sequences
are wasted. But in that case, ensure that a subsequent retrieval of
the same size is not made. Otherwise, it results in a very large gap.
If the failure rate is very low, the gap may still be better than
with the default maximum. You would use this for specific load jobs.</para
><para>Also, if for some reason you believe that the algorithm is
leaving large gaps in the identity column values, you could set this
CQD to a low value.</para></entry></row>
<row><entry>Production usage</entry><entry>Not applicable</entry></row>
<row><entry>Impact</entry><entry>If the value used is larger than
the SEQUENCE_GENERATOR_CACHE_MAXIMUM, then while there would be a
performance gain, there is the potential of wasting more sequence
values that are unused than the algorithm would have, when there are
no more rows to insert. This would leave large gaps in the identity
column values. If the value is small, you could be doing extra I/O
to the sequence generator object to retrieve the set of values each
time, thereby impacting performance.</entry></row>
<row><entry>Level</entry><entry>Set this CQD at the system level,
but if used may make more sense at a service level to influence certain
loads/insert transactions, or even at a session level for loads.</entry>
</row>
<row><entry>Conflicts/Synergies	</entry><entry><para>Instead of using
this CQD, you could also manipulate the following CQDs to achieve
your objectives:<itemizedlist>
<listitem><para>SEQUENCE_GENERATOR_CACHE_INITIAL</para></listitem>
<listitem><para>SEQUENCE_GENERATOR_CACHE_INCREMENT</para></listitem>
<listitem><para>SEQUENCE_GENERATOR_CACHE_MAXIMUM</para></listitem>
</itemizedlist></para></entry></row>
<row><entry>Addressing the real problem	</entry><entry>Not applicable</entry>
</row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section id="SEQUENCE_GENERATOR_CACHE_INCREMENT">
<title>SEQUENCE_GENERATOR_CACHE_INCREMENT</title>
<para><indexterm><primary>SEQUENCE_GENERATOR_CACHE_INCREMENT</primary>
</indexterm><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Runtime controls</entry></row>
<row><entry>Description</entry><entry><para>Controls the incremental
setting of the internal sequence generator cache size per request.
The cache size is used to set how many unique values are obtained
from the sequence generator per request. The computation starts with
the SEQUENCE_GENERATOR_CACHE_INITIAL, then multiplies it with the
SEQUENCE_GENERATOR_CACHE_INCREMENT and compares it to the SEQUENCE_GENERATOR_CACHE_MAXIMUM.</para
><para>For example, if the defaults for the CQDs were used, then SEQUENCE_GENERATOR_CACHE_INITIAL
would provide the initial value of “1”. A cache of “1” would be obtained.
When the cache was exhausted, “1” would be multiplied by the SEQUENCE_GENERATOR_CACHE_INCREMENT
of “10”, supplying a new cache of 10 numbers. This dynamic calculation
continues to increment the numbers from “1” to “10” to “100” to “1000”
to “10000”. “10000” is the SEQUENCE_GENERATOR_CACHE_MAXIMUM default,
so no additional multiplication would occur. The maximum would be
used from that point on to determine the cache size.</para></entry>
</row>
<row><entry>Values</entry><entry><para><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.56*"/>
<colspec colname="col2" colwidth="1.44*"/>
<tbody>
<row><entry>Any unsigned integer</entry><entry>Value is greater than
1.</entry></row>
<row><entry colsep="1" nameend="col2" namest="col1">The default value
is ‘10’.</entry></row>
</tbody>
</tgroup>
</informaltable></para></entry></row>
<row><entry>Usage	</entry><entry><para>The sequence generator increment
setting is used as a multiplier to increase the number of values being
retrieved for each subsequent request for more values, until the maximum
is reached.</para><para>Using a small multiplier results in smaller
step increases towards the maximum, and therefore more trips to the
sequence generator object for values. If the inserts to be done are
exhausted before reaching the maximum, this may lead to less wastage
of retrieved sequence values, and smaller gaps in identity column
values. Using a higher multiplier results in a faster ramp-up resulting
in fewer trips to the sequence generator object for more values, with
the potential of more gaps in identity column values.</para><para
>Based on the values of SEQUENCE_GENERATOR_CACHE_INITIAL and SEQUENCE_GENERATOR_CACHE_MAXIMUM
you can determine the number of trips it takes, and the values fetched
at each trip, depending on the increment value you choose for this
CQD. You can choose an increment that achieves the right balance between
I/O to retrieve values versus potential size of gaps in the identity
column.</para></entry></row>
<row><entry>Production usage</entry><entry>Not applicable</entry></row>
<row><entry>Impact</entry><entry>As described in usage, this setting
influences the trade off between trips (I/O) to the sequence generator
object to get more values versus the potential of unused values, or
the size of the gaps in the identity column values. Of course, the
impact is only through the ramp up from the initial value to the maximum
value. Once the maximum value is reached, the number of values retrieved
is the same every time, and so is the frequency.</entry></row>
<row><entry>Level</entry><entry>Set this CQD at the system level.
However, overriding the defaults may make sense at a service level
to influence certain loads/insert transactions, or even at a session
level for loads.</entry></row>
<row><entry>Conflicts/Synergies	</entry><entry>Works in conjunction
with the CQDs SEQUENCE_GENERATOR_CACHE_INITIAL and SEQUENCE_GENERATOR_CACHE_MAXIMUM,
and cannot be considered in isolation. The influence of the increment
is based on the initial and maximum values.</entry></row>
<row><entry>Addressing the real problem	</entry><entry>Not applicable</entry>
</row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section id="SEQUENCE_GENERATOR_CACHE_INITIAL">
<title>SEQUENCE_GENERATOR_CACHE_INITIAL</title>
<para><indexterm><primary>SEQUENCE_GENERATOR_CACHE_INITIAL</primary>
</indexterm><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Runtime controls</entry></row>
<row><entry>Description</entry><entry>Controls the initial setting
of the internal sequence generator cache size per request. The cache
size is used to set how many unique values are obtained from the sequence
generator per request. The computation starts with the SEQUENCE_GENERATOR_CACHE_INITIAL,
then multiplies it with the SEQUENCE_GENERATOR_CACHE_INCREMENT and
compares it to the SEQUENCE_GENERATOR_CACHE_MAXIMUM. For example,
if the defaults for the CQDs were used, then SEQUENCE_GENERATOR_CACHE_INITIAL
would provide the initial value of “1”. A cache of “1” would be obtained.
When the cache was exhausted, “1” would be multiplied by the SEQUENCE_GENERATOR_CACHE_INCREMENT
of “10”, supplying a new cache of 10 numbers. This dynamic calculation
continues to increment the numbers from “1” to “10” to “100” to “1000”
to “10000”. “10000” is the SEQUENCE_GENERATOR_CACHE_MAXIMUM default,
so no additional multiplication would occur. The maximum would be
used from that point on to determine the cache size. The compiler
calculates the optimal sequence generator cache initial setting for
an insert query that obtains values for an identity column from an
internal sequence generator. </entry></row>
<row><entry>Values</entry><entry><para><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.56*"/>
<colspec colname="col2" colwidth="1.44*"/>
<tbody>
<row><entry>Any unsigned integer</entry><entry>Value is greater than
or equal to 1.</entry></row>
<row><entry colsep="1" nameend="col2" namest="col1">The default value
is ‘1’.</entry></row>
</tbody>
</tgroup>
</informaltable></para></entry></row>
<row><entry>Usage	</entry><entry><para>The initial value is the starting
number of values retrieved from the sequence generator object. The
default is ‘1’ because this would accommodate single insert scenarios.
If single row insertions are allowed on tables with identity columns
you don’t want to retrieve more than one value, otherwise there are
unnecessary gaps.</para><para>However, if all inserts are rowset inserts
performed as part of loads, this initial value could be set higher
depending on the expected minimal number of rows that are inserted.
It may make sense to do this for specific load jobs. For example,
session level, or at a service level used for certain loads. That
way, the slow initial ramp-up can be avoided.</para></entry></row>
<row><entry>Production usage</entry><entry>Not applicable</entry></row>
<row><entry>Impact</entry><entry>You need to be careful about setting
a value higher than 1 if single inserts use this setting, because
you end up with unused values every time an insert is done, or gaps
in the identity column values. Having a higher value would have the
same effect if the minimal number of rows inserted can be less than
the value set.</entry></row>
<row><entry>Level</entry><entry>Set this CQD at the system level.
However, overriding the defaults may make sense at a service level
to influence certain loads/insert transactions, or even at a session
level for loads.</entry></row>
<row><entry>Conflicts/Synergies	</entry><entry>Works in conjunction
with the CQDs SEQUENCE_GENERATOR_CACHE_INCREMENT and SEQUENCE_GENERATOR_CACHE_MAXIMUM,
and cannot be considered in isolation. The initial value influences
the intermediate ramp-up values generated by the increment multiplier,
and how fast the maximum value is reached.</entry></row>
<row><entry>Addressing the real problem	</entry><entry>Not applicable</entry>
</row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section id="SEQUENCE_GENERATOR_CACHE_MAXIMUM">
<title>SEQUENCE_GENERATOR_CACHE_MAXIMUM</title>
<para><indexterm><primary>SEQUENCE_GENERATOR_CACHE_MAXIMUM</primary>
</indexterm><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Runtime controls</entry></row>
<row><entry>Description</entry><entry>Controls the maximum setting
of the internal sequence generator cache size per request. The cache
is used to set how many unique values are obtained from the sequence
generator per request. The computation starts with the SEQUENCE_GENERATOR_CACHE_INITIAL,
then multiplies it with the SEQUENCE_GENERATOR_CACHE_INCREMENT and
compares it to the SEQUENCE_GENERATOR_CACHE_MAXIMUM. For example,
if the defaults for the CQDs were used, then SEQUENCE_GENERATOR_CACHE_INITIAL
would provide the initial value of “1”. A cache of “1” would be obtained.
When the cache was exhausted, “1” would be multiplied by the SEQUENCE_GENERATOR_CACHE_INCREMENT
of “10”, supplying a new cache of 10 numbers. This dynamic calculation
continues to increment the numbers from “1” to “10” to “100” to “1000”
to “10000”. “10000” is the SEQUENCE_GENERATOR_CACHE_MAXIMUM default,
so no additional multiplication would occur. The maximum would be
used from that point on to determine the cache size. The compiler
calculates the optimal sequence generator cache maximum setting for
an insert query that obtains values for an identity column from an
internal sequence generator. </entry></row>
<row><entry>Values</entry><entry><para><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.56*"/>
<colspec colname="col2" colwidth="1.44*"/>
<tbody>
<row><entry>Any unsigned integer</entry><entry>Value is greater than
1.</entry></row>
<row><entry colsep="1" nameend="col2" namest="col1">The default value
is ‘10000’.</entry></row>
</tbody>
</tgroup>
</informaltable></para></entry></row>
<row><entry>Usage	</entry><entry><para>The maximum value is the steady
state number of sequence values that are retrieved from the sequence
generator object for long-running inserts/loads. So while the initial
and increment values certainly determine the number of more frequent
accesses made to the sequence generator object during the ramp-up,
the maximum value influences the number of accesses made for long-running
jobs once the maximum value is reached.</para><para>Choosing a large
number can reduce the number of accesses, but can also result in a
large number of unused values from the last set of inserts, resulting
in large gaps in the identity column values.</para></entry></row>
<row><entry>Production usage</entry><entry>Not applicable</entry></row>
<row><entry>Impact</entry><entry>The maximum value setting can influence
the number of accesses made to the sequence generator object to retrieve
a set of values to be cached for use for identity columns. It can
also result in large gaps in identity column values.</entry></row>
<row><entry>Level</entry><entry>Set this CQD at the system level.
However, overriding the defaults may make sense at a service level
to influence certain loads/insert transactions, or even at a session
level for loads.</entry></row>
<row><entry>Conflicts/Synergies	</entry><entry>Works in conjunction
with the CQDs SEQUENCE_GENERATOR_CACHE_INITIAL and SEQUENCE_GENERATOR_CACHE_INCREMENT,
and cannot be considered in isolation. The maximum value determines
how many accesses are made to retrieve the set of values, depending
on the initial and increment settings.</entry></row>
<row><entry>Addressing the real problem	</entry><entry>Not applicable</entry>
</row>
</tbody>
</tgroup>
</informaltable></para>
</section>
</section>
<section id="Managing_Catalogs_and_Schemas">
<title>Managing <phrase condition="hidden">Catalogs and </phrase>Schemas</title>
<para>This section describes these CQDs that are used for managing <phrase
condition="hidden">catalogs and </phrase>schemas:</para>
<itemizedlist>
<listitem><para><xref linkend="SCHEMA" role="select:quotedtitle page"
/></para></listitem>
</itemizedlist>
<section id="SCHEMA">
<title>SCHEMA</title>
<para><indexterm><primary>SCHEMA</primary></indexterm><informaltable
frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Schema controls</entry></row>
<row><entry>Description</entry><entry>Sets the default schema for
the session.</entry></row>
<row><entry>Values</entry><entry><para>SQL identifier</para><para
>The default is SEABASE.</para></entry></row>
<row><entry>Usage	</entry><entry>A SET SCHEMA statement, or a CONTROL
QUERY DEFAULT SCHEMA statement, can be used to override the default
schema name.</entry></row>
<row><entry>Production usage</entry><entry>It is a convenience so
you do not have to type in two-part names.</entry></row>
<row><entry>Impact</entry><entry>Not applicable</entry></row>
<row><entry>Level</entry><entry>Any</entry></row>
<row><entry>Conflicts/Synergies	</entry><entry><para>Alternately you
can use the SET SCHEMA statement.</para><para condition="hidden">There
is a CATALOG default also that allows you to set the catalog. For
example, CATALOG can be TRAFODION, the system catalog, or MANAGEABILITY.
Again it is a convenience to avoid typing in long names.</para></entry>
</row>
<row><entry>Addressing the real problem	</entry><entry>Not applicable</entry>
</row>
</tbody>
</tgroup>
</informaltable></para>
</section>
</section>
<section condition="hidden" id="Managing_Isolation_Level">
<title>Managing Isolation Level</title>
<para>This section describes these CQDs that are used for managing
the isolation level:</para>
<itemizedlist>
<listitem><para><xref linkend="ISOLATION_LEVEL"
role="select:quotedtitle page"/></para></listitem>
</itemizedlist>
<section id="ISOLATION_LEVEL">
<title>ISOLATION_LEVEL</title>
<para><indexterm><primary>ISOLATION_LEVEL</primary></indexterm><informaltable
frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Transaction control and locking</entry>
</row>
<row><entry>Description</entry><entry>Specifies the default transaction
isolation level that queries use.</entry></row>
<row><entry>Values</entry><entry><para><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.56*"/>
<colspec colname="col2" colwidth="1.44*"/>
<tbody>
<row><entry>‘READ UNCOMMITTED’</entry><entry></entry></row>
<row><entry>‘READ COMMITTED’</entry><entry></entry></row>
<row><entry>‘REPEATABLE READ’</entry><entry></entry></row>
<row><entry>‘SERIALIZABLE’</entry><entry></entry></row>
<row><entry colsep="1" nameend="col2" namest="col1">The default value
is ‘READ COMMITTED’ (ANSI).</entry></row>
</tbody>
</tgroup>
</informaltable></para></entry></row>
<row><entry>Usage	</entry><entry>If you use uncommitted access (reading
“dirty” data when queries are accessing data that is being simultaneously
updated), you can set the default isolation level as READ UNCOMMITTED.
The default isolation level of READ COMMITTED can cause concurrency
issues because reads would wait on locked rows. If rows are locked
by long-running transactions with infrequent commits, this can cause
severe concurrency issues for SELECT queries. See Conflicts/Synergies.</entry>
</row>
<row><entry>Production usage</entry><entry>Not applicable</entry></row>
<row><entry>Impact</entry><entry><para>Using this CQD has implications
on locking and concurrency.</para><para>If set to READ UNCOMMITTED
then select queries read through locks and don't have to wait on locks.
But they won't see committed consistent data.</para><para>If set to
READ COMMITTED (the default setting) then the reads wait on locked
rows before they proceed with the scan. The read can proceed only
when the rows locked by another transaction are released after that
transaction commits. The reader does not lock rows.</para><para>If
set to REPEATABLE READ or SERIALIZABLE it has severe implications
on concurrency because every row read is also locked.</para></entry>
</row>
<row><entry>Level</entry><entry><para>While you can use this at a
query or a service level, the most common use is a system-wide setting.
If query tools are being used, then the query level setting cannot
be used.</para><para>A service level setting may provide uncommitted
access to certain users while providing the default committed access
to the other users, depending which users need to see consistent data.</para
><para>If however, access to tables during updates is well controlled
and read uncommitted is acceptable, this can be set at the system
level.</para></entry></row>
<row><entry>Conflicts/Synergies	</entry><entry><para>The problem with
using READ UNCOMMITTED as the isolation level default value is that
in a SET TRANSACTION statement, the only possible access mode is READ
ONLY. Any query that attempts to update the database would fail.</para
><para>To facilitate updates and DDL statements while the isolation
level is set to READ UNCOMMITTED, a new default attribute ISOLATION_LEVEL_FOR_UPDATES
is provided. This default attribute specifies the isolation level
for update and DDL statements. If not specified, or if not present
in the SYSTEM_DEFAULTS table, the default value is the same as the
ISOLATION_LEVEL default attribute. However, if specified or present
in the SYSTEM_DEFAULTS table, its value is used as the isolation level
for updates and DDL statements. UPDATE in ISOLATION_LEVEL_FOR_UPDATES
refers to INSERT, UPDATE, and DELETE statements.</para></entry></row>
<row><entry>Addressing the real problem	</entry><entry>Not applicable</entry>
</row>
</tbody>
</tgroup>
</informaltable></para>
</section>
</section>
<section id="Transaction_Control_and_Locking">
<title>Transaction Control and Locking</title>
<para>This section describes these CQDs that are used for transaction
control and locking:</para>
<itemizedlist>
<listitem condition="hidden"><para><xref linkend="INSERT_VSBB"
role="select:quotedtitle page"/></para></listitem>
<listitem condition="hidden"><para><xref linkend="TABLELOCK"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="BLOCK_TO_PREVENT_HALLOWEEN"
role="select:quotedtitle page"/></para></listitem>
<listitem><para><xref linkend="UPD_ORDERED"
role="select:quotedtitle page"/></para></listitem>
</itemizedlist>
<section condition="hidden" id="INSERT_VSBB">
<title>INSERT_VSBB</title>
<para><indexterm><primary>INSERT_VSBB</primary></indexterm><informaltable
frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Transaction control and locking</entry>
</row>
<row><entry>Description</entry><entry>Provides a method of inserting
rows into a table whereby rows are buffered into a "virtual" buffer
because the entire buffer of rows is not inserted as is, but processed
in the disk process<phrase condition="hidden"> (ESAM)</phrase> and
inserted into the appropriate position in the table, based on the
clustering key values of each row.</entry></row>
<row><entry>Values</entry><entry><para><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.56*"/>
<colspec colname="col2" colwidth="1.44*"/>
<tbody>
<row><entry>‘OFF’</entry><entry>For simple inserts</entry></row>
<row><entry>‘SYSTEM’</entry><entry>Database determines the method</entry>
</row>
<row><entry>‘USER’</entry><entry>To use VSBB</entry></row>
<row><entry colsep="1" nameend="col2" namest="col1">The default value
is ‘SYSTEM’.</entry></row>
</tbody>
</tgroup>
</informaltable></para></entry></row>
<row><entry>Usage</entry><entry>The most common usage of this CQD
is to turn it to OFF in order to get better performance for rowset
inserters<phrase condition="hidden"> (for pre-R2.5 systems)</phrase
>, or when there are multiple inserters inserting rows into the same
partition.</entry></row>
<row><entry>Production usage</entry><entry>Do not use this CQD in
production, unless one of the cases mentioned in Usage is encountered.</entry>
</row>
<row><entry>Impact</entry><entry><para>When the system chooses VSBB
in certain scenarios, this can have a very negative impact on performance
and concurrency. This may show up as file system error 73 (The disk
file or record is locked) being encountered when loading for example.</para
><para condition="hidden">If VSBB is chosen with Neoview Transporter
loads, it is efficient. Neoview Transporter pre-partitions the rows
where a single process is inserting into a single partition. In this
case, the buffers get filled up efficiently and VSBB provides a benefit
of a complete buffer of rows being shipped for insertion instead of
partially filled buffers. </para><para condition="hidden">However,
if the inserter has not pre-partitioned the rows, then a rowset insert
ends up distributing only a small number of rows from the rowset into
each buffer destined for a specific partition. In this case large
buffers are shipped relatively empty, resulting in worse performance.
This is addressed in R2.5. But until then, it is recommended that
VSBB be turned OFF in such situations. </para><para>A<phrase
condition="hidden">nother</phrase> situation where VSBB has a very
negative impact is where there are multiple processes inserting rows
into the same partition. For example, when multiple simultaneous loads
are being done to the same table. This problem is worse when these
inserters do not commit the transaction often. In this case locking
issues are encountered due to VSBB and the system also tries to escalate
the lock to a table lock, thereby impacting performance.</para></entry>
</row>
<row><entry>Level</entry><entry>Set this CQD at a query level. But,
the ideal way to set this would be at the service levels that are
used to influence the sort of inserters this CQD is trying to address.</entry>
</row>
<row><entry>Conflicts/Synergies	</entry><entry>If VSBB is on and the
transaction sizes are large for multiple inserters, this can accentuate
the locking and table escalation issues. To avoid the lock escalation
issues, chances are that this could be used with TABLELOCK OFF.</entry>
</row>
<row><entry>Addressing the real problem	</entry><entry><phrase
condition="hidden">Use Neoview Transporter for loading. Avoid the
scenarios outlined that cause these problems. </phrase>If there are
multiple inserters try and pre-partition the data and merge the streams
first<phrase condition="hidden">, as Neoview Transporter does</phrase
>. Also, if a single rowset inserter is inserting into all partitions,
pre-partitioning the data and using separate inserters is ideal.</entry>
</row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section condition="hidden" id="TABLELOCK">
<title>TABLELOCK</title>
<para><indexterm><primary>TABLELOCK</primary></indexterm><informaltable
frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Transaction control and locking</entry>
</row>
<row><entry>Description</entry><entry>Specifies whether to use table
locks for subsequent DML access to tables.</entry></row>
<row><entry>Values</entry><entry><para><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.56*"/>
<colspec colname="col2" colwidth="1.44*"/>
<tbody>
<row><entry>‘SYSTEM’</entry><entry>To indicate whether the system
determines when table locks are to be used for accessing the table.</entry>
</row>
<row><entry>‘ON’</entry><entry>Table locks are always used.</entry>
</row>
<row><entry>‘OFF’</entry><entry>Table locks are not used.</entry></row>
<row><entry colsep="1" nameend="col2" namest="col1">The default value
is ‘SYSTEM’.</entry></row>
</tbody>
</tgroup>
</informaltable></para></entry></row>
<row><entry>Usage	</entry><entry><para>See the <citetitle>Trafodion
SQL Reference Manual</citetitle>, Introduction chapter, sections on
Database Integrity and Locking and Transaction Management. </para
><para>In the default setting of SYSTEM, if the transaction is very
long, is doing many updates or using the REPEATABLE or SERIALIZABLE
isolation and thereby acquiring many locks, the system tries to escalate
the lock to a table lock. By doing so, the system just has to manage
a single lock instead of the overhead of managing so many row level
locks. The manual discusses the threshold on when this happens. Locking
many rows and attempts at lock escalation by the system, impacts performance. </para
><para>If you know that you are doing a lot of updates, there are
no other concurrent updaters, and queries that concurrently want to
read the table do so using READ UNCOMMITTED, you are much better off
acquiring a lock on the table. That way you acquire a single lock
instead of a lock on every row that you update. This is a lot more
efficient. </para><para>On the other hand, if you have queries that
need READ COMMITTED access, or there are other concurrent updaters,
and there is no way to reduce the size of the transactions and commit
more often, then you should set table lock to OFF. This way the system
does not waste time and impact performance by trying to escalate the
lock to a table lock.</para></entry></row>
<row><entry>Production usage</entry><entry>Not applicable</entry></row>
<row><entry>Impact</entry><entry><para>There is an impact on concurrency
if this is set to ON, though the performance may improve because only
a single lock is acquired and the system does not have to acquire
locks for each row. </para><para>There is also an impact in that the
system may be spending a lot of system resources managing a large
number of row level locks if this is set to OFF. </para><para>So both
these settings should be carefully used. However, the default setting
of SYSTEM may also not be the right setting in all situations. Locking
or escalation errors and large number of lock waits being reported
in EMS (file system error 35 – Unable to obtain a lock control block,
or the transaction or open lock unit limit has been reached) and the
query metrics repository, should be an indication that this setting
should be looked at.</para></entry></row>
<row><entry>Level</entry><entry>This should be considered mostly at
the query level. You could consider this at the service level if the
workloads using that service level are well understood and leverage
the same setting.</entry></row>
<row><entry>Conflicts/Synergies	</entry><entry><para>If you issue
a CONTROL TABLE statement for the TABLELOCK or TIMEOUT option, the
specified control table value overrides the system-defined default
setting. </para><para>Though not directly related INSERT_VSBB sometimes
needs to be looked at as well when reviewing the need for this setting.</para
></entry></row>
<row><entry>Addressing the real problem	</entry><entry>You should
always break the transactions for updaters (inserters or loads) into
smaller transactions by committing often. There are various issues,
apart from those discussed in relation to this CQD, which can be caused
by long-running update transactions. If for some reason such transactions
cannot be controlled, then you need to look at acquiring a table lock
if at all possible, in order to keep the locking overhead to a minimum.</entry>
</row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section id="BLOCK_TO_PREVENT_HALLOWEEN">
<title>BLOCK_TO_PREVENT_HALLOWEEN</title>
<para><indexterm><primary>BLOCK_TO_PREVENT_HALLOWEEN</primary>
</indexterm><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Runtime controls</entry></row>
<row><entry>Description</entry><entry><para>A self-referencing insert
is one which inserts into a target table and also scans from the same
target table as part of the query that produces rows to be inserted.
Inconsistent results are produced by the insert statement if the statement
scans rows which have been inserted by the same statement. This is
sometimes called the “Halloween problem.” Trafodion prevents the Halloween
problem using one of two methods: 1) the blocking method uses a SORT
operation to ensure all rows have been scanned before any are inserted,
or 2) the disk process (ESAM) locks method tracks the rows which have
already been inserted and the SCAN operator skips these rows. </para
><para>The compiler chooses the blocking method in cases in which
static analysis of the plan indicates that the disk process locks
method cannot be used. However, the compiler does not evaluate one
condition that would prevent the use of the disk process locks method:
the AUTOCOMMIT setting in which the statement is executed. Instead
the compiler assumes that the statement is executed with the default
setting for AUTOCOMMIT, ‘ON’. If AUTOCOMMIT is set to ‘OFF’ and self-referencing
insert statement which uses the disk process locks method is executed,
then a runtime error (SQLCODE 8107) is raised. </para><para>This CQD
is used to force the compiler to use the blocking method to prevent
error 8107.</para></entry></row>
<row><entry>Values</entry><entry><para><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.56*"/>
<colspec colname="col2" colwidth="1.44*"/>
<tbody>
<row><entry>‘OFF’</entry><entry>The compiler is free to choose which
method to use to prevent the Halloween problem.</entry></row>
<row><entry>‘ON’</entry><entry>The compiler is forced to use the blocking
method.</entry></row>
<row><entry colsep="1" nameend="col2" namest="col1">The default value
is ‘ON’.</entry></row>
</tbody>
</tgroup>
</informaltable></para></entry></row>
<row><entry>Usage	</entry><entry>Change this default to ‘ON’ if error
8107 is raised for a self-referencing insert statement which is executed
in a session with AUTOCOMMIT set to ‘OFF’.</entry></row>
<row><entry>Production usage</entry><entry>Not applicable</entry></row>
<row><entry>Impact</entry><entry>Using the ‘ON’ value in conditions
that require it allows successful completion of the insert statement.
Using the ‘ON’ value when not required can decrease performance of
some self-referencing insert statements.</entry></row>
<row><entry>Level</entry><entry>If self-referencing insert statements
which execute with AUTOCOMMIT ‘OFF’ can be restricted to a service
level, then this default should be set to ‘ON’ only for that service
level. Otherwise the setting should be made for the system.</entry>
</row>
<row><entry>Conflicts/Synergies	</entry><entry>Not applicable</entry>
</row>
<row><entry>Addressing the real problem	</entry><entry>Not applicable</entry>
</row>
</tbody>
</tgroup>
</informaltable></para>
</section>
<section id="UPD_ORDERED">
<title>UPD_ORDERED</title>
<para><indexterm><primary>UPD_ORDERED</primary></indexterm><informaltable
frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Influencing Query Plans</entry></row>
<row><entry>Description</entry><entry>Controls whether rows should
be inserted, updated, or deleted in clustering key order.</entry></row>
<row><entry>Values</entry><entry><para><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.56*"/>
<colspec colname="col2" colwidth="1.44*"/>
<tbody>
<row><entry>‘ON’</entry><entry>The optimizer generates and considers
plans where the rows are inserted, updated, or deleted in clustering
key order.</entry></row>
<row><entry>‘OFF’</entry><entry>The optimizer does not generate plans
where the rows must be inserted, updated, or deleted in clustering
key order.</entry></row>
<row><entry colsep="1" nameend="col2" namest="col1">The default value
is ‘ON’.</entry></row>
</tbody>
</tgroup>
</informaltable></para></entry></row>
<row><entry>Usage	</entry><entry><para>Inserting, updating or deleting
rows in the clustering key order is most efficient and highly recommended.
Turning this CQD OFF may result in saving the data sorting cost but
at the expense of having less efficient random I/O Insert/Update/Delete
operations. </para><para>If you know that he data is already sorted
in clustering key order, or is mostly in clustering key order, so
that it would not result in random I/O, you could set this CQD to
OFF.</para></entry></row>
<row><entry>Production usage</entry><entry>Not applicable</entry></row>
<row><entry>Impact</entry><entry>If turned OFF, the system may perform
large number of inefficient Random I/Os when performing Insert/Update/Delete
operations.</entry></row>
<row><entry>Level</entry><entry>Query</entry></row>
<row><entry>Conflicts/Synergies	</entry><entry>Not applicable</entry>
</row>
<row><entry>Addressing the real problem	</entry><entry>Not applicable</entry>
</row>
</tbody>
</tgroup>
</informaltable></para>
</section>
</section>
<section condition="hidden" id="Miscellaneous">
<title>Miscellaneous</title>
<para>This section describes these miscellaneous CQDs:</para>
<itemizedlist>
<listitem><para><xref linkend="STREAM_TIMEOUT"
role="select:quotedtitle page"/></para></listitem>
</itemizedlist>
<section id="STREAM_TIMEOUT">
<title>STREAM_TIMEOUT</title>
<para><indexterm><primary>STREAM_TIMEOUT</primary></indexterm><informaltable
frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.44*"/>
<colspec colname="col2" colwidth="1.56*"/>
<tbody>
<row><entry>Category</entry><entry>Runtime controls</entry></row>
<row><entry>Description</entry><entry>Enables unblocking using a timeout.
When an SQL table is read with stream access, it never returns the
end-of-data condition, but rather blocks as it waits for more rows
to be inserted or updated. Applications, however, may need for the
stream to temporarily unblock and return control so that the application
can commit its transaction, or do other work. The unblocking is achieved
by means of a timeout, the duration of which is controlled by this
default.</entry></row>
<row><entry>Values</entry><entry><para><informaltable frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="col1" colwidth="0.56*"/>
<colspec colname="col2" colwidth="1.44*"/>
<tbody>
<row><entry>‘-1’</entry><entry>There is no timeout.</entry></row>
<row><entry>greater than ‘0’ and up through ‘2,147,483,583’</entry>
<entry>The length of time, in 1/100<superscript>th</superscript> seconds,
of the timeout.</entry></row>
<row><entry colsep="1" nameend="col2" namest="col1">The default value
is ‘-1’.</entry></row>
</tbody>
</tgroup>
</informaltable></para></entry></row>
<row><entry>Usage	</entry><entry>An application written to use stream
access with timeouts can issue this default with a “CONTROL QUERY
DEFAULT” command.</entry></row>
<row><entry>Production usage</entry><entry>It is not recommended to
set this default permanently in production, except through the same
application which is using stream access.</entry></row>
<row><entry>Impact</entry><entry>The impact of setting this default
is specific to the application.</entry></row>
<row><entry>Level</entry><entry>Query</entry></row>
<row><entry>Conflicts/Synergies	</entry><entry>Not applicable</entry>
</row>
<row><entry>Addressing the real problem	</entry><entry>Not applicable</entry>
</row>
</tbody>
</tgroup>
</informaltable></para>
</section>
</section>
</appendix>
<appendix id="i1003125">
<title>Limits</title>
<para>This appendix lists limits for various parts of Trafodion SQL.</para>
<informaltable colsep="0" frame="none" rowsep="0">
<tgroup cols="2" tgroupstyle="DL  desc list">
<tbody>
<row><entry>Column names</entry><entry>Up to 128 characters long,
or 256 bytes of UTF8 text, whichever is less.</entry></row>
<row condition="hidden"><entry>Constraints<indexterm><primary>Limits</primary>
<secondary>constraints</secondary></indexterm><indexterm><primary
>Constraints</primary><secondary>limits</secondary></indexterm></entry>
<entry>The maximum combined length of the columns for a PRIMARY KEY
constraint is 2048 bytes.</entry></row>
<row condition="hidden"><entry>Indexes<indexterm><primary>CREATE INDEX
statement</primary><secondary>limits on indexes</secondary></indexterm
><indexterm><primary>Limits</primary><secondary>indexes</secondary>
</indexterm> </entry><entry>The maximum combined length of the columns
for an index is 2048 bytes. A nonunique index consists of columns
and a clustering key. <phrase condition="hidden">A unique index consists
of columns only.</phrase> </entry></row>
<row><entry>Schema names</entry><entry>Up to 128 characters long,
or 256 bytes of UTF8 text, whichever is less.</entry></row>
<row><entry>Table names<indexterm><primary>Limits</primary><secondary
>tables</secondary></indexterm><indexterm><primary>Table</primary>
<secondary>limits</secondary></indexterm></entry><entry>ANSI names
are of the form <replaceable>schema</replaceable>.<replaceable>object</replaceable
>, where each part can be up to 128 characters long, or 256 bytes
of UTF8 text, whichever is less. <phrase condition="hidden">The maximum
length of a row is 32,708 bytes for a block size of 32K.<indexterm>
<primary>Clustering key</primary><secondary>limits</secondary>
</indexterm>The clustering key for a table cannot be longer than 2048
bytes.</phrase></entry></row>
</tbody>
</tgroup>
</informaltable>
</appendix>
<index></index>
</book>
