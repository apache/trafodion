# @@@ START COPYRIGHT @@@
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# @@@ END COPYRIGHT @@@
#
# A sample sqconfig file
#
################################################################
#
# The following section is used to specify the:
#   list of logical nodes and the physical nodes where they are hosted,
#   the processor cores and corresponding logical processors, and
#   the roles of each logica node.
#
# A logical node can have the following SQ roles:
#  - connection
#  - aggregation
#  - storage
#
# You must:
#  - specify all the processor cores in a physical node
#  - specify the roles for each logical node
#
# On a dev env, you can use '_virtualnodes <num nodes>' to 
# specify the number of virtual nodes.
#
################################################################

begin node

node-id=0;node-name=n7;cores=0-1;processors=2;roles=connection,aggregation,storage
node-id=1;node-name=n7;cores=2-3;processors=2;roles=connection,aggregation,storage
node-id=2;node-name=n6;cores=0-1;processors=2;roles=connection,aggregation,storage
node-id=3;node-name=n6;cores=2-3;processors=2;roles=connection,aggregation,storage
node-id=4;node-name=n5;cores=0-1;processors=2;roles=connection,aggregation,storage
node-id=5;node-name=n5;cores=2-3;processors=2;roles=connection,aggregation,storage

end node


###############################################################################
#
# Section to configure persistent processes
#
#
# PERSIST_PROCESS_KEYS = { <persist-prefix> } [ , <persist-prefix> ] …
# 
# { <persist-prefix>_PROCESS_NAME    = {$<string><nid-format>} }
# [ <persist-prefix>_PROCESS_TYPE    = {DTM|PERSIST|PSD|SSMP|TMID|WDG} ]
# { <persist-prefix>_PROGRAM_NAME    = {<program-name>} }
# { <persist-prefix>_REQUIRES_DTM    = {Y|N} } 
# [ <persist-prefix>_STDOUT          = {<file-name-prefix><nid-format>} ]
# { <persist-prefix>_PERSIST_RETRIES = {<retries> , <time-window-secs>} }
# { <persist-prefix>_PERSIST_ZONES   = {<zid-format> [,<zid-format>] . . . }
#
# Where <persist-process-prefix> is currently one of the following:
#     DTM
#     TMID
#     SSCP
#     SSMP
#     LOB
#
# Where <nid-format> is one of the following:
#     %nid+     is translated to use all the currently configured node-ids, 
#               0 - n-1 (all <nid>s)
#     %nid      is translated to use the node-id relative to the _PROCESS_NAME 
#               node-id %nid
#
# Where <zid-format> is one of the following:
#     %zid+     is translated to use all the currently configured zone-ids, 
#               0 - n-1 (all <zid>s)
#     %zid      is translated to use the zone-id relative to the node-id %nid 
#
###############################################################################
begin persist

#
# The folling process types are persistent and have special process management:
#    DTM
#    TMID
#    SSMP
#    PSD
#    WDG
#
# Generic persistent processes are of process type
#    PERSIST
#

PERSIST_PROCESS_KEYS = DTM,TMID,SSCP,SSMP,PSD,WDG
#PERSIST_PROCESS_KEYS = DTM,TMID,SSCP,SSMP,PSD,WDG,QMN,LOB

DTM_PROCESS_NAME     = $TM%nid+
DTM_PROCESS_TYPE     = DTM
DTM_PROGRAM_NAME     = tm
DTM_REQUIRES_DTM     = N
DTM_STDOUT           = stdout_DTM%nid
DTM_PERSIST_RETRIES  = 2,30
DTM_PERSIST_ZONES    = %zid

TMID_PROCESS_NAME    = $TMID
TMID_PROCESS_TYPE    = TMID
TMID_PROGRAM_NAME    = idtmsrv
TMID_REQUIRES_DTM    = N
TMID_STDOUT          = stdout_TMID
TMID_PERSIST_RETRIES = 2,30
TMID_PERSIST_ZONES   = %zid+

SSCP_PROCESS_NAME    = $ZSC%nid+
SSCP_PROCESS_TYPE    = PERSIST
SSCP_PROGRAM_NAME    = mxsscp
SSCP_REQUIRES_DTM    = Y
SSCP_STDOUT          = stdout_ZSC%nid
SSCP_PERSIST_RETRIES = 10,60
SSCP_PERSIST_ZONES   = %zid

SSMP_PROCESS_NAME    = $ZSM%nid+
SSMP_PROCESS_TYPE    = SSMP
SSMP_PROGRAM_NAME    = mxssmp
SSMP_REQUIRES_DTM    = Y
SSMP_STDOUT          = stdout_ZSM%nid
SSMP_PERSIST_RETRIES = 10,60
SSMP_PERSIST_ZONES   = %zid

PSD_PROCESS_NAME     = $PSD%nid+
PSD_PROCESS_TYPE     = PSD
PSD_PROGRAM_NAME     = pstartd
PSD_REQUIRES_DTM     = N
PSD_STDOUT           = stdout_PSD%nid
PSD_PERSIST_RETRIES  = 10,60
PSD_PERSIST_ZONES    = %zid

WDG_PROCESS_NAME     = $WDG%nid+
WDG_PROCESS_TYPE     = WDG
WDG_PROGRAM_NAME     = sqwatchdog
WDG_REQUIRES_DTM     = N
WDG_STDOUT           = stdout_WDG%nid
WDG_PERSIST_RETRIES  = 10,60
WDG_PERSIST_ZONES    = %zid

#QMN_PROCESS_NAME    = $ZQM0000
#QMN_PROCESS_TYPE    = PERSIST
#QMN_PROGRAM_NAME    = tdm_arkqmm
#QMN_REQUIRES_DTM    = Y
#QMN_STDOUT          = stdout_ZQM0000
#QMN_PERSIST_RETRIES = 10,60
#QMN_PERSIST_ZONES   = %zid+

#LOB_PROCESS_NAME     = $ZLOB%nid+
#LOB_PROCESS_TYPE     = PERSIST
#LOB_PROGRAM_NAME     = mxlobsrvr
#LOB_REQUIRES_DTM     = Y
#LOB_STDOUT           = stdout_ZLOB%nid
#LOB_PERSIST_RETRIES  = 10,60
#LOB_PERSIST_ZONES    = %zid

end persist

###############################################################################
# 
# Note: You could use '%' as the first character on the line followed by
#       any SQ shell command. All the text would be passed verbatim.
#
###############################################################################
#
# Section to configure Floating IP (Optional).
#
# This section needs to configured to ensure HPDCS(HP Database Connectivity Services)
# and BDR(Bulk Data Replicator) services are available after the failure of the node
# in which these services run.
#
# Usually, HPDCS is available via $MXOAS process.
# BDR Services is always available via $ZBDR process.   
#
# floating_ip_node_id : Preferably, a Logical Node id with roles set to connection only.
#                       If no such node available, any logical node with roles set to connection
#                       along with other roles.
#
# floating_ip_failover_node_id : 
#                       Preferably, a Logical Node id different than the floating_ip_node_id 
#                       above with roles set to connection only.
#                       If no such node available, any logical node with roles set to connection
#                       along with other roles.
# 
# process=<process_name>;interface=<interface>;external-ip=<ip_address>
# process=<process_name>;interface=<interface>;interna-ip=<ip_address>
#
# process               Name of the HPDCS process ($MXOAS) that is allowed to register the
#                       floating ip address to the node. 
#
# external-ip           Floating (external) IP address used by the clients to avail HPDCS 
#                       and BDR services.
#
# internal-ip           Floating (Internal) IP address used by the clients hosted on the 
#                       same SQ cluster to avail HPDCS.
#
# interface             Ethernet interfaces to be used to register the floating ip addresses
#
# floating_ip section should be before the bdr section in this file
#
# The  following are sample values - please update as appropriate
#
###############################################################################

begin floating_ip
process=$MXOAS;interface=eth1;external-ip=xx.xxx.xxx.xx
process=$MXOAS;interface=eth0;internal-ip=xxx.xxx.xxx.xxx
floating_ip_node_id  1
floating_ip_failover_node_id 0
end floating_ip

###############################################################################
#
# Overflow directories for ssd and hdd. 
#
#    Format: <overflow-type> <directory>
#
#    Where:
#
#       <overflow-type> is one of the following:
#
#          hdd
#          ssd
#
#       <directory>        - is a valid directory path
#
###############################################################################
begin overflow
hdd $TRAF_HOME/tmp
#ssd /ssd/directory
end overflow
