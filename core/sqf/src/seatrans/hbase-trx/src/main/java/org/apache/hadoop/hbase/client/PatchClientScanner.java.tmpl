/**
 * Copyright The Apache Software Foundation
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with this
 * work for additional information regarding copyright ownership. The ASF
 * licenses this file to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
package org.apache.hadoop.hbase.client;

import java.io.IOException;
import java.util.Arrays;
import java.util.concurrent.ExecutorService;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.hadoop.hbase.classification.InterfaceAudience;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HConstants;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.ipc.RpcControllerFactory;
import org.apache.hadoop.hbase.util.Bytes;
import org.apache.hadoop.hbase.util.ExceptionUtil;
import org.apache.hadoop.hbase.regionserver.RegionServerStoppedException;
import org.apache.hadoop.hbase.exceptions.OutOfOrderScannerNextException;
import org.apache.hadoop.hbase.Cell;
import org.apache.hadoop.hbase.CellUtil;
import org.apache.hadoop.hbase.DoNotRetryIOException;
import org.apache.hadoop.hbase.NotServingRegionException;
import org.apache.hadoop.hbase.UnknownScannerException;
import org.apache.hadoop.hbase.exceptions.OutOfOrderScannerNextException;


/**
 * A patched client scanner to resolve the scanner timeout associated with lease timer
 * To remove as soon as this is fixed at the HBase level. This patch is for Hbase 1.0.0-cdh5.4.4 only
 * Logic of the patch is to let lease timeout exception be handled the same way as region moving retry
 * instead of singling out the lease timeout as a deadly exception.
 */
@InterfaceAudience.Private
public class PatchClientScanner extends ClientScanner {
  private static final Log LOG = LogFactory.getLog(PatchClientScanner.class);

  /**
   * Create a new PatchClientScanner for the specified table Note that the
   * passed {@link Scan}'s start row maybe changed.
   * @param conf
   * @param scan
   * @param tableName
   * @param connection
   * @param pool
   * @param primaryOperationTimeout
   * @throws IOException
   */
  public PatchClientScanner(Configuration conf, Scan scan,
      TableName tableName, ClusterConnection connection,
      RpcRetryingCallerFactory rpcFactory, RpcControllerFactory controllerFactory,
      ExecutorService pool, int primaryOperationTimeout) throws IOException {
    super(conf, scan, tableName, connection, rpcFactory, controllerFactory, pool, primaryOperationTimeout);
  }

#ifndef HDP2.3
  @Override
  protected void loadCache() throws IOException {
	    Result[] values = null;
	    long remainingResultSize = maxScannerResultSize;
	    int countdown = this.caching;

	    // We need to reset it if it's a new callable that was created
	    // with a countdown in nextScanner
	    callable.setCaching(this.caching);
	    // This flag is set when we want to skip the result returned.  We do
	    // this when we reset scanner because it split under us.
	    boolean skipFirst = false;
	    boolean retryAfterOutOfOrderException = true;
	    // We don't expect that the server will have more results for us if
	    // it doesn't tell us otherwise. We rely on the size or count of results
	    boolean serverHasMoreResults = false;
	    do {
	      try {
	        if (skipFirst) {
	          // Skip only the first row (which was the last row of the last
	          // already-processed batch).
	          callable.setCaching(1);
	          values = call(scan, callable, caller, scannerTimeout);
	          // When the replica switch happens, we need to do certain operations
	          // again. The scannercallable will openScanner with the right startkey
	          // but we need to pick up from there. Bypass the rest of the loop
	          // and let the catch-up happen in the beginning of the loop as it
	          // happens for the cases where we see exceptions. Since only openScanner
	          // would have happened, values would be null
	          if (values == null && callable.switchedToADifferentReplica()) {
	            if (this.lastResult != null) { //only skip if there was something read earlier
	              skipFirst = true;
	            }
	            this.currentRegion = callable.getHRegionInfo();
	            continue;
	          }
	          callable.setCaching(this.caching);
	          skipFirst = false;
	        }
	        // Server returns a null values if scanning is to stop. Else,
	        // returns an empty array if scanning is to go on and we've just
	        // exhausted current region.
	        values = call(scan,   callable, caller, scannerTimeout);
	        if (skipFirst && values != null && values.length == 1) {
	          skipFirst = false; // Already skipped, unset it before scanning again
	          values = call(scan, callable, caller, scannerTimeout);
	        }
	        // When the replica switch happens, we need to do certain operations
	        // again. The callable will openScanner with the right startkey
	        // but we need to pick up from there. Bypass the rest of the loop
	        // and let the catch-up happen in the beginning of the loop as it
	        // happens for the cases where we see exceptions. Since only openScanner
	        // would have happened, values would be null
	        if (values == null && callable.switchedToADifferentReplica()) {
	          if (this.lastResult != null) { //only skip if there was something read earlier
	            skipFirst = true;
	          }
	          this.currentRegion = callable.getHRegionInfo();
	          continue;
	        }
	        retryAfterOutOfOrderException = true;
	      } catch (DoNotRetryIOException e) {
	        // DNRIOEs are thrown to make us break out of retries. Some types of DNRIOEs want us
	        // to reset the scanner and come back in again.
	        if (e instanceof UnknownScannerException) {
	          long timeout = lastNext + scannerTimeout;
	          // If we are over the timeout, throw this exception to the client wrapped in
	          // a ScannerTimeoutException. Else, it's because the region moved and we used the old
	          // id against the new region server; reset the scanner.
	          if (timeout < System.currentTimeMillis()) {
	            long elapsed = System.currentTimeMillis() - lastNext;
	            ScannerTimeoutException ex =
	                new ScannerTimeoutException(elapsed + "ms passed since the last invocation, "
	                    + "timeout is currently set to " + scannerTimeout);
	            //ex.initCause(e); this is the patch
	            //throw ex; this is the patch
	          }
	        } else {
	          // If exception is any but the list below throw it back to the client; else setup
	          // the scanner and retry.
	          Throwable cause = e.getCause();
	          if ((cause != null && cause instanceof NotServingRegionException) ||
	              (cause != null && cause instanceof RegionServerStoppedException) ||
	              e instanceof OutOfOrderScannerNextException) {
	            // Pass
	            // It is easier writing the if loop test as list of what is allowed rather than
	            // as a list of what is not allowed... so if in here, it means we do not throw.
	          } else {
	            throw e;
	          }
	        }
	        // Else, its signal from depths of ScannerCallable that we need to reset the scanner.
	        if (this.lastResult != null) {
	          // The region has moved. We need to open a brand new scanner at
	          // the new location.
	          // Reset the startRow to the row we've seen last so that the new
	          // scanner starts at the correct row. Otherwise we may see previously
	          // returned rows again.
	          // (ScannerCallable by now has "relocated" the correct region)
	          this.scan.setStartRow(this.lastResult.getRow());

	          // Skip first row returned.  We already let it out on previous
	          // invocation.
	          skipFirst = true;
	        }
	        if (e instanceof OutOfOrderScannerNextException) {
	          if (retryAfterOutOfOrderException) {
	            retryAfterOutOfOrderException = false;
	          } else {
	            // TODO: Why wrap this in a DNRIOE when it already is a DNRIOE?
	            throw new DoNotRetryIOException("Failed after retry of " +
	                "OutOfOrderScannerNextException: was there a rpc timeout?", e);
	          }
	        }
	        // Clear region.
	        this.currentRegion = null;
	        // Set this to zero so we don't try and do an rpc and close on remote server when
	        // the exception we got was UnknownScanner or the Server is going down.
	        callable = null;
	        // This continue will take us to while at end of loop where we will set up new scanner.
	        continue;
	      }
	      long currentTime = System.currentTimeMillis();
	      if (this.scanMetrics != null) {
	        this.scanMetrics.sumOfMillisSecBetweenNexts.addAndGet(currentTime - lastNext);
	      }
	      lastNext = currentTime;
	      if (values != null && values.length > 0) {
	        for (Result rs : values) {
	          cache.add(rs);
	          // We don't make Iterator here
	          for (Cell cell : rs.rawCells()) {
	            remainingResultSize -= CellUtil.estimatedHeapSizeOf(cell);
	          }
	          countdown--;
	          this.lastResult = rs;
	        }
	      }
	      // We expect that the server won't have more results for us when we exhaust
	      // the size (bytes or count) of the results returned. If the server *does* inform us that
	      // there are more results, we want to avoid possiblyNextScanner(...). Only when we actually
	      // get results is the moreResults context valid.
	      if (null != values && values.length > 0 && callable.hasMoreResultsContext()) {
	        // Only adhere to more server results when we don't have any partialResults
	        // as it keeps the outer loop logic the same.
	        serverHasMoreResults = callable.getServerHasMoreResults();
	      }
	      // Values == null means server-side filter has determined we must STOP
	      // !partialResults.isEmpty() means that we are still accumulating partial Results for a
	      // row. We should not change scanners before we receive all the partial Results for that
	      // row.
	    } while (remainingResultSize > 0 && countdown > 0 && !serverHasMoreResults
	        && possiblyNextScanner(countdown, values == null));
	  }
  
  	private boolean possiblyNextScanner(int nbRows, final boolean done) throws IOException {
      // If we have just switched replica, don't go to the next scanner yet. Rather, try
      // the scanner operations on the new replica, from the right point in the scan
      // Note that when we switched to a different replica we left it at a point
      // where we just did the "openScanner" with the appropriate startrow
      if (callable != null && callable.switchedToADifferentReplica()) return true;
      return nextScanner(nbRows, done);
    }
#endif 
}
