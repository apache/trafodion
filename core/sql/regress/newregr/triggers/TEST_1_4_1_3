-- @@@ START COPYRIGHT @@@
--
-- Licensed to the Apache Software Foundation (ASF) under one
-- or more contributor license agreements.  See the NOTICE file
-- distributed with this work for additional information
-- regarding copyright ownership.  The ASF licenses this file
-- to you under the Apache License, Version 2.0 (the
-- "License"); you may not use this file except in compliance
-- with the License.  You may obtain a copy of the License at
--
--   http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing,
-- software distributed under the License is distributed on an
-- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-- KIND, either express or implied.  See the License for the
-- specific language governing permissions and limitations
-- under the License.
--
-- @@@ END COPYRIGHT @@@
-- Using transition variables
-- Causing an AFTER UPDATE STATEMENT trigger, inserting all the tuples from the 
-- NEW TABLE into the subject table by selecting from it, under a condition referring the OLD TABLE 

-- runs on cat1.schm and cat1.schm_alt
----------------------------------------

-- clean_up on all schemas

set schema CAT1.SCHM;
obey TEST_1_4_1_3(clean_up);
set schema CAT1.SCHM_ALT;
obey TEST_1_4_1_3(clean_up);

-- start logging
log   LOG_1_4_1_3 clear;

set schema CAT1.SCHM;
obey TEST_1_4_1_3(set_up);
obey TEST_1_4_1_3(tests);
obey TEST_1_4_1_3(clean_up);

-- switch schemas
set schema CAT1.SCHM_ALT;
obey TEST_1_4_1_3(set_up);
obey TEST_1_4_1_3(tests);

-- end logging
LOG;

-- cleanup (last schema)
obey TEST_1_4_1_3(clean_up);

exit;
----------------------------------------


?section clean_up
 
DROP TRIGGER trig1;
obey clearTables;

?section set_up

DELETE FROM tab1A;

INSERT INTO tab1A VALUES (1,2,3,4);
INSERT INTO tab1A VALUES (2,3,4,5);
INSERT INTO tab1A values (100,101,102,103);

CREATE TRIGGER trig1 AFTER UPDATE 
	ON tab1A
	REFERENCING NEW AS newtable, OLD AS oldtable
	FOR EACH STATEMENT
	
		INSERT INTO tab1A (SELECT d,c,b,a FROM newtable
				   WHERE newtable.a IN (SELECT a FROM oldtable)); 

?section tests
------------------------------------------------------------------
-- 	TEST CASE
------------------------------------------------------------------
-- the following command should add another row to tab1A

UPDATE tab1A SET b=b+1 WHERE a<100;

--------------------------------------------------------
-- RESULT: tab1A:
-- 1   3   3   4
-- 2   4   4   5
-- 4   3   3   1
-- 5   4   4   2
--100 101 102 103
--------------------------------------------------------
SELECT * FROM tab1A ORDER BY a;

--------------------------------------------------------
