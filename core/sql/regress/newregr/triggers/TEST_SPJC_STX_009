-- @@@ START COPYRIGHT @@@
--
-- Licensed to the Apache Software Foundation (ASF) under one
-- or more contributor license agreements.  See the NOTICE file
-- distributed with this work for additional information
-- regarding copyright ownership.  The ASF licenses this file
-- to you under the Apache License, Version 2.0 (the
-- "License"); you may not use this file except in compliance
-- with the License.  You may obtain a copy of the License at
--
--   http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing,
-- software distributed under the License is distributed on an
-- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-- KIND, either express or implied.  See the License for the
-- specific language governing permissions and limitations
-- under the License.
--
-- @@@ END COPYRIGHT @@@
-- HL_R2_Triggers_Spec.doc: SPJ enhancements to Triggers
-- A stand-alone compound statement that has one or more trigger
-- events and it has host variable or a dynamic parameter.
-- Result: Success

obey TEST_SPJC_STX_009(clean_up);
obey TEST_SPJC_STX_009(set_up);
LOG LOG_SPJC_STX_009 clear;
obey TEST_SPJC_STX_009(tests);
LOG;
obey TEST_SPJC_STX_009(clean_up);
exit;

?section clean_up
set schema CAT1.SCHM;
drop trigger TRIG01_SPJC_STX_009;
drop trigger TRIG02_SPJC_STX_009;

drop table TAB01_SPJC_STX_009;
drop table TAB02_SPJC_STX_009;
drop table TAB03_SPJC_STX_009;

?section set_up
set schema CAT1.SCHM;

SET ENVVAR ALLOW_CS_IN_SQLCI 1;
CONTROL QUERY DEFAULT POS 'OFF';

create table TAB01_SPJC_STX_009(a int, b int, c int, d int);
create table TAB02_SPJC_STX_009(a int, b int, c int, d int);
create table TAB03_SPJC_STX_009(a int, b int, c int, d int);

create table TAB04_SPJC_STX_009(a int, b int, c int, d int);
create table TAB05_SPJC_STX_009(a int, b int, c int, d int);

create table TAB06_SPJC_STX_009(a int, b int, c int, d int);
create table TAB07_SPJC_STX_009(a int, b int, c int, d int);

INSERT INTO TAB01_SPJC_STX_009 VALUES (1, 2, 3, 4),
			(2, 3, 4, 5),
			(3, 4, 5, 6),
			(4, 5, 6, 7);

set param ?t1p1 9;

?section tests

------------------------------------------------------------------
-- TEST CASE 01: Row trigger inserts new values into TAB02_SPJC_STX_009
-- if a certain condition is true when TAB01_SPJC_STX_009 is updated.
-- Result: Success
------------------------------------------------------------------

CREATE TRIGGER TRIG01_SPJC_STX_009 AFTER UPDATE ON
TAB01_SPJC_STX_009
REFERENCING OLD ROW AS O, NEW ROW AS N
FOR EACH ROW
WHEN (N.A = O.C)
	INSERT INTO TAB02_SPJC_STX_009 VALUES (N.A, N.B, N.C, N.D);

------------------------------------------------------------------
-- TEST CASE 02: Row trigger inserts old values into TAB03_SPJC_STX_009
-- when  row is deleted from TAB01_SPJC_STX_009.
-- Result: Success
------------------------------------------------------------------
CREATE TRIGGER TRIG02_SPJC_STX_009 AFTER DELETE ON
TAB01_SPJC_STX_009
REFERENCING OLD ROW AS O
FOR EACH ROW
BEGIN ATOMIC
	INSERT INTO TAB03_SPJC_STX_009 VALUES (O.A, O.B, O.C, O.D);
END;


-- Compound statement firing the above triggers via parameters.
BEGIN
	UPDATE TAB01_SPJC_STX_009 SET A = A + B;

	DELETE FROM TAB01_SPJC_STX_009 WHERE A = ?t1p1;
END;

-- Result: TAB01_SPJC_STX_009 A = {3, 5, 7}
select * from TAB01_SPJC_STX_009;

-- Result: TAB02_SPJC_STX_009 = {3, 2, 3, 4}
select * from TAB02_SPJC_STX_009;

-- Result: TAB03_SPJC_STX_009 = {9, 5, 6, 7}
select * from TAB03_SPJC_STX_009;
------------------------------------------------------------------
