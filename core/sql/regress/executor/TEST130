-- Test: TEST123 (Executor)
-- @@@ START COPYRIGHT @@@
--
-- Licensed to the Apache Software Foundation (ASF) under one
-- or more contributor license agreements.  See the NOTICE file
-- distributed with this work for additional information
-- regarding copyright ownership.  The ASF licenses this file
-- to you under the Apache License, Version 2.0 (the
-- "License"); you may not use this file except in compliance
-- with the License.  You may obtain a copy of the License at
--
--   http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing,
-- software distributed under the License is distributed on an
-- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-- KIND, either express or implied.  See the License for the
-- specific language governing permissions and limitations
-- under the License.
--
-- @@@ END COPYRIGHT @@@
--
-- Functionality: LOBs
-- Expected files: EXPECTED130
-- Table created: 
-- Limitations: 
-- 
-- To Do:   
--      
-- Revision history:
--     (10/21/2014) - Created.
-- 

-- remove after this is made the default.  
cqd TRAF_BLOB_AS_VARCHAR 'OFF'; 
cqd TRAF_CLOB_AS_VARCHAR 'OFF'; 

obey TEST130(clnup);

log LOG130 clear;
obey TEST130(setup);
--obey TEST130(dml);
--obey TEST130(clnup);
--exit;


?section clnup
set schema trafodion.lob130;
drop table t130lob1 cascade;
drop table t130lob2 cascade;
drop table t130lob3 cascade;
drop table t130lob4 cascade;


?section setup
create schema trafodion.lob130;
set schema trafodion.lob130;
create table t130lob1 (c1 blob);
create table t130lob2 (c1 int not null, c2 blob , primary key (c1));
create table t130lob3 (c1 int not null,
c2 blob, c3 blob, primary key (c1));
create table t130lob4 (c1 int not null,
c2 char(10), c3 clob, primary key (c1));


obey TEST130(dml_insert);

?section dml_insert
insert into t130lob1 values(NULL);
select * from t130lob1;

insert into t130lob2 values(1,stringtolob('inserted row11'));
insert into t130lob2 values(2,stringtolob('inserted row12'));
insert into t130lob2 values(3,stringtolob('inserted row13'));
insert into t130lob2 values(3,stringtolob('xxxx'));
select * from t130lob2;


select lobtostring(c2,10) from t130lob2;
select lobtostring(c2,2) from t130lob2;
select c1,lobtostring(c2,100) from t130lob2;


obey TEST130(dml_join);

?section dml_join
insert into t130lob3 values (1,stringtolob('inserted row21a'),stringtolob('inserted row21b'));
insert into t130lob3 values (2,stringtolob('inserted row22a'),stringtolob('inserted row22b'));
insert into t130lob3 values (3,stringtolob('inserted row23a'),stringtolob('inserted row23b'));
insert into t130lob3 values (4,stringtolob('inserted row24a'),stringtolob('inserted row24b'));

prepare s from 
select c1, lobtostring(c2,25), lobtostring(c3,25)  from t130lob3;



select lobtostring(t130lob2.c2,30) from t130lob2, t130lob3 where t130lob2.c1 = t130lob3.c1;



obey TEST130(dml_update);

?section dml_update

update t130lob2 set c2=stringtolob('updated c2 in all rows');
select c1, lobtostring(c2,30) from t130lob2;

update t130lob2 set c2=stringtolob('updated row21a') where c1=1;
select c1, lobtostring(c2,30) from t130lob2;
select c1, lobtostring(c2,30) from t130lob2 where c1=1;

obey TEST130(dml_update_append);

?section dml_update_append

update t130lob2 set c2=stringtolob('appended row21a',append) where c1=1;
select c1, lobtostring(c2,100) from t130lob2;
select c1, lobtostring(c2,100) from t130lob2 where c1=1;


update t130lob2 set c2=stringtolob(' appended c2 to all rows',append);
select c1, lobtostring(c2,60) from t130lob2;

obey TEST130(dml_delete);

?section dml_delete

delete from t130lob3 where c1=1;
select c1, lobtostring(c2,30), lobtostring(c3,30)  from t130lob3;

delete from t130lob2 ;
select * from t130lob2;
log;
obey TEST130(clnup);



sh echo "Test for file input and extract";
-- Test for local input

--cleanup -- comment the following lines out if you want to debug this test and save intermediate files.
obey TEST130(lob_local_cleanup);
?section lob_local_cleanup
log;
drop table tlob130txt1; 
drop table tlob130bin1;
sh rm TMP130;
sh rm tlob130txt1;
sh rm tlob130_txt1.txt;
sh rm tlob130_deep.jpg;
sh rm tlob130_anoush.jpg;


obey TEST130(lob_local_file);
?section lob_local_file
log LOG130;
--setup
sh echo "Test for file input and extract";
create table tlob130txt1 (c1 int not null, c2 clob, primary key (c1));
create table tlob130bin1 (c1 int not null, c2 blob, primary key (c1));
sh cp $scriptsdir/executor/deep.jpg $rundir/executor/;
sh cp $scriptsdir/executor/anoush.jpg $rundir/executor/;
sh cp $scriptsdir/executor/lob_input_* $rundir/executor/;

-- inserts
-- first line
insert into tlob130txt1 values (1, filetolob('lob_input_a1.txt'));

-- second line
insert into tlob130txt1 values (2, filetolob('lob_input_b1.txt'));

-- third line
insert into tlob130txt1 values (3, filetolob('lob_input_c1.txt'));

select lobtostring(c2, 40 ) from tlob130txt1;

--updates

--should update with full poem
update tlob130txt1 set c2=filetolob('lob_input_d1.txt', append) where c1 = 3;

select lobtostring(c2, 200 ) from tlob130txt1;

-- should see wrong text in the last few lines
update tlob130txt1 set c2=filetolob('lob_input_e1.txt') where c1 =3 ;

select lobtostring(c2, 200 ) from tlob130txt1;

--delete

-- go back to having just the first  line. 
delete from tlob130txt1 where c1 =2;
delete from tlob130txt1 where c1 =3;

--test extract 

log;
log TMP130 clear;
select c2 from tlob130txt1;
log;

log LOG130;
sh rm t130_extract_command;

sh grep "^LOBH" TMP130 | sed "s/^/extract lobtofile(LOB '/g" | sed "s/$/' , 'tlob130_txt1.txt');/g" >> t130_extract_command;

obey t130_extract_command;

--binary input/update

insert into tlob130bin1 values (1 , filetolob('deep.jpg'));
--extract // should have a viewable picture file

log;
log TMP130 clear;
select c2 from tlob130bin1;
log;

log LOG130;
sh rm t130_extract_command;
sh grep "^LOBH" TMP130 | sed "s/^/extract lobtofile(LOB '/g" | sed "s/$/' , 'tlob130_deep.jpg');/g" >> t130_extract_command;
obey t130_extract_command;

update tlob130bin1 set c2=filetolob('anoush.jpg') ;

--extract into a different file // should have a different viewable picture.

log;
log TMP130 clear ;
select c2 from tlob130bin1;
log;

log LOG130;
sh rm t130_extract_command;
sh grep "^LOBH" TMP130 | sed "s/^/extract lobtofile(LOB '/g" | sed "s/$/' , 'tlob130_anoush.jpg');/g" >> t130_extract_command;

obey t130_extract_command;




-- Test for hdfs input
--cleanup -- comment the following lines out if you want to debug this test and save intermediate files.
obey TEST130(lob_hdfs_cleanup);
?section lob_hdfs_cleanup
log;
drop table tlob130txt2; 
drop table tlob130bin2;
sh rm TMP130;
sh rm tlob130txt2;
sh rm tlob130_txt2.txt;
sh regrhadoop.ksh fs -rm /lobs/tlob130_deep.jpg;
sh regrhadoop.ksh fs -rm /lobs/tlob130_anoush.jpg;
sh regrhadoop.ksh fs -rm /lobs/tlob130_txt2.txt;


obey TEST130(lob_hdfs_file);
?section lob_hdfs_file
log LOG130;
create table tlob130txt2 (c1 int not null, c2 clob, primary key (c1));
create table tlob130bin2 (c1 int not null, c2 blob, primary key (c1));

sh regrhadoop.ksh fs -copyFromLocal lob_input_a1.txt /lobs/lob_input_a1.txt;
sh regrhadoop.ksh fs -copyFromLocal lob_input_b1.txt /lobs/lob_input_b1.txt;
sh regrhadoop.ksh fs -copyFromLocal lob_input_c1.txt /lobs/lob_input_c1.txt;
sh regrhadoop.ksh fs -copyFromLocal lob_input_d1.txt /lobs/lob_input_d1.txt;
sh regrhadoop.ksh fs -copyFromLocal lob_input_e1.txt /lobs/lob_input_e1.txt;
sh regrhadoop.ksh fs -copyFromLocal deep.jpg /lobs/deep.jpg;
sh regrhadoop.ksh fs -copyFromLocal anoush.jpg /lobs/anoush.jpg;
sh sleep(20);


insert into tlob130txt2 values (1, filetolob('hdfs:///lobs/lob_input_a1.txt'));

-- second line
insert into tlob130txt2 values (2, filetolob('hdfs:///lobs/lob_input_b1.txt'));

-- third line
insert into tlob130txt2 values (3, filetolob('hdfs:///lobs/lob_input_c1.txt'));
select lobtostring(c2, 40 ) from tlob130txt2;

--updates

--should update with full poem
update tlob130txt2 set c2=filetolob('hdfs:///lobs/lob_input_d1.txt', append) where c1 = 3;
select lobtostring(c2, 200 ) from tlob130txt2;

-- should see wrong text in the last few lines
update tlob130txt2 set c2=filetolob('hdfs:///lobs/lob_input_e1.txt') where c1 =3 ;
select lobtostring(c2, 200 ) from tlob130txt2;

--delete

 
-- go back to having just the first  line. 
delete from tlob130txt2 where c1 =2;
delete from tlob130txt2 where c1 =3;
-- test extract 

log;
log TMP130 clear;
select c2 from tlob130txt2;
log;

log LOG130;
sh rm t130_extract_command;

sh grep "^LOBH" TMP130 | sed "s/^/extract lobtofile(LOB '/g" | sed "s/$/' , 'hdfs:\/\/\/lobs\/tlob130_txt2.txt');/g" >> t130_extract_command;

obey t130_extract_command;

--binary input/update

insert into tlob130bin2 values (1 , filetolob('deep.jpg'));
--extract // should have a viewable picture file

log;
log TMP130 clear ;
select c2 from tlob130bin2;
log;

log LOG130;
sh rm t130_extract_command;
sh grep "^LOBH" TMP130 | sed "s/^/extract lobtofile(LOB '/g" | sed "s/$/' , 'hdfs:\/\/\/lobs\/tlob130_deep.jpg');/g" >> t130_extract_command;
obey t130_extract_command;

update tlob130bin2 set c2=filetolob('anoush.jpg') ;

--extract into a different file // should have a different viewable picture.

log;
log TMP130 clear;
select c2 from tlob130bin1;
log;

log LOG130;
sh rm t130_extract_command;
sh grep "^LOBH" TMP130 | sed "s/^/extract lobtofile(LOB '/g" | sed "s/$/' , 'hdfs:\/\/\/lobs\/tlob130_anoush.jpg');/g" >> t130_extract_command;

obey t130_extract_command;




------------------------------------------------------------------------------
obey TEST130(lob_misc_cleanup);
?section lob_misc_cleanup
log;
drop table tlob130txt3;
drop table tlob130bin3;
drop table tlob130bt;
sh rm tlob130_deep2.jpg;
sh rm tlob130_txt1.txt;
sh regrhadoop.ksh fs -rm /lobs/tlob130_anoush2.jpg;
sh rm tlob130_anoush3.jpg;

obey TEST130(lob_miscfile_test);

?section lob_miscfile_test
log LOG130;
-- 2 clob columns
create table tlob130txt3 (c1 int not null, c2 int, c3 clob, c4 clob, primary key (c1));
insert into tlob130txt3 values (1, 1,filetolob('lob_input_a1.txt'), filetolob('lob_input_b1.txt'));
insert into tlob130txt3 values (2, 2,filetolob('lob_input_c1.txt'), filetolob('lob_input_d1.txt'));
select lobtostring(c3,100), lobtostring(c4,100)from tlob130txt3;

-- 2 blob columns
create table tlob130bin3 (c1 int not null, c2 int, c3 blob, c4 blob, primary key (c1));
insert into tlob130bin3 values (1, 1, filetolob('deep.jpg'), filetolob('anoush.jpg'));

log;
log TMP130 clear;
select c3 from tlob130bin3;
log;

log LOG130;
sh rm t130_extract_command;
sh grep "^LOBH" TMP130 | sed "s/^/extract lobtofile(LOB '/g" | sed "s/$/' , 'tlob130_deep2.jpg');/g" >> t130_extract_command;
obey t130_extract_command;

log;
log TMP130 clear;
select c4 from tlob130bin3;
log;

log LOG130;
sh rm t130_extract_command;
sh grep "^LOBH" TMP130 | sed "s/^/extract lobtofile(LOB '/g" | sed "s/$/' , 'hdfs:\/\/\/lobs\/tlob130_anoush2.jpg');/g" >> t130_extract_command;
obey t130_extract_command;

-- combination blob and clob columns
create table tlob130bt (c1 int not null, c2 int, c3 blob, c4 clob, primary key (c1));
insert into tlob130bt values (1,1, filetolob('lob_input_a1.txt'), filetolob('anoush.jpg'));

select lobtostring(c3,40) from tlob130bt;

log;
log TMP130 clear;
select c4 from tlob130bt;
log;

log LOG130;
sh rm t130_extract_command;
sh grep "^LOBH" TMP130 | sed "s/^/extract lobtofile(LOB '/g" | sed "s/$/' , 'tlob130_anoush3.jpg',create,truncate);/g" >> t130_extract_command;
obey t130_extract_command;

obey TEST130(lob_general_cleanup);
-- cleanup
?section lob_general_cleanup
log;
sh rm t130_*;
sh regrhadoop.ksh fs -rm /lobs/tlob130*
sh rm lobinput_*;
sh rm deep.jpg;
sh rm anoush.jpg;
drop table tlob130txt1; 
drop table tlob130bin1;
sh rm TMP130;
sh rm tlob130txt1;
sh rm tlob130_txt*.txt;
sh rm tlob130_deep*.jpg;
sh rm tlob130_anoush*.jpg;
drop table tlob130txt3;
drop table tlob130bin3;
drop table tlob130bt;
drop table tlob130txt2;
drop table tlob130bin2; 
sh rm TMP130;
sh rm tlob130txt2;

drop schema trafodion.lob130 cascade;

exit;





