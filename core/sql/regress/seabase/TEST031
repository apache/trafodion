-- @@@ START COPYRIGHT @@@
--
-- Licensed to the Apache Software Foundation (ASF) under one
-- or more contributor license agreements.  See the NOTICE file
-- distributed with this work for additional information
-- regarding copyright ownership.  The ASF licenses this file
-- to you under the Apache License, Version 2.0 (the
-- "License"); you may not use this file except in compliance
-- with the License.  You may obtain a copy of the License at
--
--   http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing,
-- software distributed under the License is distributed on an
-- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-- KIND, either express or implied.  See the License for the
-- specific language governing permissions and limitations
-- under the License.
--
-- @@@ END COPYRIGHT @@@
--

-- tests for various misc fixes

log LOG031 clear;

-- tests for PRIMARY KEY constraint usage
drop table if exists t031t1;
create table t031t1 (a int not null, b int not null, constraint ppk primary key(a));
alter table t031t1 add constraint ppk primary key(b);
alter table t031t1 add constraint ppk2 primary key(b);
alter table t031t1 add constraint ppk unique(b);
alter table t031t1 drop constraint ppk;

drop table if exists t031t1;
create table t031t1 (a int not null, b int not null);
alter table t031t1 add constraint ppk primary key(a);
alter table t031t1 add constraint ppk primary key(b);
alter table t031t1 add constraint ppk2 primary key(b);
alter table t031t1 add constraint ppk unique(b);
alter table t031t1 drop constraint ppk;

drop table if exists t031t1;
create table t031t1 (a int not null, b int not null) store by (a);
alter table t031t1 add constraint ppk primary key(a);
alter table t031t1 add constraint ppk unique(b);
alter table t031t1 drop constraint ppk;

drop table if exists t031t1;
create table t031t1 (a int not null primary key, b int not null);
alter table t031t1 add constraint ppk primary key(a);
alter table t031t1 add constraint ppk primary key(b);

-- primary key update transformed into delete/insert incorrectly 
-- deletes row after conflict
create table if not exists t031t1 (a int not null primary key, b int not null);
delete from t031t1;
insert into t031t1 values (1,1), (2,2), (3,3), (4,4);
update t031t1 set a = 4 where a = 2;
select * from t031t1;

-- incorrect ddl with salt clause should not crash
drop table if exists t031t1;
create table t031t1 (
T2C1 int not null not droppable,
T2C1 int not null not droppable,
T2C1 int)
salt using 2 partitions on (T2C1, T2C2)
store by (T2C1, T2C2);

-- cannot rename table with check constraints.
-- cascade option with rename not supported.
drop table if exists t031t1;
create table t031t1 (a int);
alter table t031t1 add constraint t031t1_c1 check (a > 0);
alter table t031t1 rename to t031t1_ren cascade;
alter table t031t1 rename to t031t1_ren;

-- time datatype conversion was returning incorrect results
drop table if exists t031t1;
create table t031t1
(id int not null,
time1 time default null,
time2 time default null,
type1 time default null,
type2 char(5) default null,
diff char(6) default null,
primary key (id));
insert into t031t1 (id, time1, time2, diff) values (1, time '00:00:30.758788', time '00:00:29.615308', 'MATCH');
select * from t031t1 order by 1;
update t031t1
set type1 =
case when (time1 + interval '1' second) < time2 then time1 else time2
end,
type2 =
case when (time1 + interval '1' second) < time2 then 'T1' else 'T2'
end
where id = 1;
select
type2, diff, type1,
case
when diff = 'MATCH' then 'PASS' else 'FAIL'
end
from t031t1
where id = 1;
select * from t031t1;

-- varchar default values were not being handled correctly
drop table if exists t031t1;
create  table t031t1 (a varchar(6) not null default 'ABC',
                      b varchar(6) default 'ABC');
insert into t031t1 default values;
upsert into t031t1 default values;
select * from t031t1;

-- long varchars
cqd traf_max_character_col_length '1000000';
drop table if exists t031t1;
create table t031t1 (z int not null primary key, a varchar(1000000), b char(1000000));
insert into t031t1 values (1, repeat('a', 1000000, 1000000) , 'def');
insert into t031t1 values (2, repeat('a', 1000, 1000) , 'zzz');
insert into t031t1 values (3, repeat('a', 10000, 10000) , 'zzz');
insert into t031t1 values (4, repeat('a', 100000, 100000) , 'zzz');
insert into t031t1 values (5, repeat('a', 100, 100) , 'zzz');
insert into t031t1 values (6, repeat('a', 10, 10) , 'zzz');
insert into t031t1 values (7, repeat('a', 1, 1) , 'zzz');
insert into t031t1 values (8, repeat('a', 1000000, 1000000) , null);
insert into t031t1 values (9, repeat('a', 500000, 500000) , null);
insert into t031t1 values (10, repeat('a', 100, 100) , null);

select char_length(a), char_length(b) from t031t1;
select substring(a, 1, 10), cast(b as char(10)) from t031t1;
select [last 0] * from t031t1;

drop table if exists t031t2;
create table t031t2 (z int, a varchar(1000000), b char(1000000)) attribute aligned format;
insert into t031t2 select * from t031t1;
select char_length(a), char_length(b) from t031t2;
select substring(a, 1, 10), cast(b as char(10)) from t031t2;
select [last 0] * from t031t2;

select count(*) from t031t1 x, t031t2 y where x.a = y.a;
select x.z, y.z, substring(x.a, 1, 5), substring(y.a,1,5) 
  from t031t1 x, t031t2 y where x.a = y.a
  order by x.z, y.z;
select x.z, y.z, substring(x.a, 1, 5), substring(y.a,1,5) 
  from t031t1 x, t031t2 y where x.a = y.a and x.b = y.b
  order by x.z, y.z;

sh echo "drop table t031hive;" > TEST031_junk;
sh regrhive.ksh -f TEST031_junk;

sh echo "create table t031hive(z int, a string, b string);" > TEST031_junk;
sh regrhive.ksh -f TEST031_junk;

cqd hive_max_string_length '1000000';
insert into hive.hive.t031hive select * from t031t1;
select count(*) from hive.hive.t031hive;
select substring(a, 1, 10), cast(b as char(10)) from hive.hive.t031hive;
select [last 0] * from hive.hive.t031hive;

drop external table if exists t031hive for hive.hive.t031hive;
create external table t031hive (z int, a varchar(1000000), b varchar(1000000))
for hive.hive.t031hive;
delete from t031t1;
insert into t031t1 select * from hive.hive.t031hive;
select count(*) from t031t1;

log;
