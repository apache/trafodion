-- ============================================================================
-- TEST133 - tests initializing, dropping and upgrading privilege metadata
--
-- @@@ START COPYRIGHT @@@
--
-- Licensed to the Apache Software Foundation (ASF) under one
-- or more contributor license agreements.  See the NOTICE file
-- distributed with this work for additional information
-- regarding copyright ownership.  The ASF licenses this file
-- to you under the Apache License, Version 2.0 (the
-- "License"); you may not use this file except in compliance
-- with the License.  You may obtain a copy of the License at
--
--   http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing,
-- software distributed under the License is distributed on an
-- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-- KIND, either express or implied.  See the License for the
-- specific language governing permissions and limitations
-- under the License.
--
-- @@@ END COPYRIGHT @@@
--
-- This tests the following commands:
--
--   INITIALIZE AUTHORIZATION
--   INITIALIZE AUTHORIZATION, DROP
--   INITIALIZE AUTHORIZATION, UPGRADE
--
-- Sections:
--   clean_up - removes database setup
--   set_up - prepares for test
--   tests - runs tests
--   authorized - runs authorization tests
-- ============================================================================

obey TEST133(clean_up);
log LOG133 clear;
obey TEST133(create_db);
obey TEST133(tests);
sh sqlci -i "TEST133(authorized)" -u sql_user4;
log;
obey TEST133(clean_up);
initialize authorization;
exit;

?section clean_up
set schema "_PRIVMGR_MD_";
drop sequence t133sch.team_number_sequence;
-- drop database
drop schema t133sch cascade;

?section create_db
create schema t133sch;
set schema t133sch;
create table teams
  (team_number int not null primary key,
   team_name char(20) not null,
   team_contact varchar(50) not null,
   team_contact_number char (10) not null
   )
  ;

alter table teams add constraint valid_team_no check (team_number > 0);

insert into teams values
   (1, 'White Socks', 'Sam','4082282222'),
   (2, 'Giants', 'Joe', '5102839483'),
   (3, 'Cardinals', 'Stella', '9513849384'),
   (4, 'Indians', 'Matt', '5128383748'),
   (5, 'Tigers', 'Ronit', '6198273827');

create table team_statistics
  (team_number int not null primary key,
   num_players int not null)
;

create table games
   ( home_team_number int not null,
     visitor_team_number int not null,
     game_number int not null primary key,
     game_time timestamp not null,
     game_location varchar(50) not null)
  ;
--create index home_games on games (home_team_number);

alter table games add constraint valid_game_number check (game_number > 0);

create table standings
    (team_number int not null primary key,
     wins int default 0,
     loses int default 0,
     last_updated timestamp default current_timestamp)
;
insert into standings (team_number)
  select team_number from teams;

insert into games values
   (1, 2, 1, timestamp '2009-04-23 19:30:00', 'California'),
   (1, 3, 2, timestamp '2009-04-24 19:30:00', 'California'),
   (1, 4, 3, timestamp '2009-04-25 10:00:00', 'Oklahoma'),
   (2, 3, 4, timestamp '2009-04-25 13:30:00', 'Michigan'),
   (1, 5, 5, timestamp '2009-04-25 15:00:00', 'Oklahoma'),
   (2, 5, 6, timestamp '2009-04-27 17:00:00', 'New York'),
   (3, 4, 7, timestamp '2009-04-28 17:00:00', 'Florida'),
   (4, 2, 8, current_timestamp, 'Missouri');

create view home_teams_games as
  select t.team_number, g.game_number, g.game_time
  from "TEAMS" t,
       "GAMES" g
  where t.team_number = g.home_team_number
  order by 1, game_number, game_time;

create table players
  (player_number int not null,
   player_name varchar (50) not null,
   player_team_number int not null,
   player_phone_number char (10) not null,
   player_details varchar(50),
   primary key (player_number, player_team_number))
  no partition;

insert into players values
   (1, 'Tom', 1, '4083948394', null),
   (2, 'Bob', 1, '4089483948', null),
   (3, 'Toby',1, '4082938493', 'pitcher'),
   (3, 'Toby',2, '4082938493', null),
   (4, 'Julie', 2, '5108394839', 'catcher'),
   (5, 'Joanne', 2, '5103849384', null),
   (6, 'Pete', 2, '5102839483', null),
   (6, 'Pete', 3, '5102839483', 'third base'),
   (7, 'Jared',4, '9518293849', 'short stop'),
   (8, 'Zachary', 4, '9518293840', null),
   (9, 'Lynne', 5, '9518293892', 'pitcher'),
   (10, 'Omar', 5, '5128394893', null);

alter table players add constraint valid_player_number check(player_number > 0);

create view players_on_team as
  select player_name, team_name
  from teams t, players p
  where p.player_team_number = t.team_number
  order by t.team_name;
select * from players_on_team;

create view games_by_player as
  select player_name, game_time
  from teams t, games g, players p
  where p.player_team_number = t.team_number and
        t.team_number = g.home_team_number
  order by player_name, team_number;

alter table players add constraint players_teams
   foreign key (player_team_number) references teams (team_number);

insert into team_statistics
  select team_number, count (player_number)
   from teams t, players p
   where t.team_number = p.player_team_number
   group by team_number;

create volatile table home_games as
  select home_team_number, visitor_team_number, game_number,  game_location
  from games
    where extract(year  from games.game_time) =
          extract(year  from current_timestamp) and
          extract(month from games.game_time) =
          extract(month from current_timestamp);

create sequence team_number_sequence;

?section set_up
set schema "_PRIVMGR_MD_";
prepare get_owner_privs from
select distinct
   substring (object_name,1,40) as object_name,
   object_type as type,
   substring(authname(grantee_id),1,10) as grantee,
   privileges_bitmap,
   grantable_bitmap
from object_privileges 
where grantor_id = -2
    and object_uid in 
     (select object_uid
      from "_MD_".objects
      where object_type in ('VI','BT','LB','UR')
        and schema_name in ('_PRIVMGR_MD_', 'T133SCH'))
  order by 1, 2, 3, 4, 5
;

?section tests
-- =================================================================
-- this set of tests run basic initialize authorization tests
-- =================================================================

set schema "_PRIVMGR_MD_";
get tables;

create table t133_t1 (c1 int not null primary key, c2 int);
create view t133_v1 as select * from t133_t1;
create index t133_i1 on t133_t1(c2);
create table t133_t2 like t133_t1;

obey TEST133(set_up);
get tables;
execute get_owner_privs;

initialize authorization, drop;
get tables;
initialize authorization;
get tables;
select count (*) from components;
select count (*) from component_operations;
select count (*) from component_privileges;
execute get_owner_privs;
set parserflags 131072;
drop table role_usage;
get tables;

initialize authorization;
get tables;
execute get_owner_privs;

drop table components;
get tables;
initialize authorization, drop;
get tables;

?section authorized
set schema "_PRIVMGR_MD_";
log LOG133;
initialize authorization;
initialize authorization, drop;

